{"mappings":"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","sources":["src/06-twoimages/index.js","src/basics/setup.js","node_modules/three/examples/jsm/postprocessing/EffectComposer.js","node_modules/three/examples/jsm/shaders/CopyShader.js","node_modules/three/examples/jsm/postprocessing/ShaderPass.js","node_modules/three/examples/jsm/postprocessing/Pass.js","node_modules/three/examples/jsm/postprocessing/MaskPass.js","node_modules/three/examples/jsm/postprocessing/RenderPass.js","src/06-twoimages/frag.glsl","src/06-twoimages/vert.glsl"],"sourcesContent":["import * as THREE from 'three'\nimport makeStuff from '../basics/setup.js'\n\nimport frag from './frag.glsl'\nimport vert from './vert.glsl'\n\nif (module.hot) {\n\tmodule.hot.dispose(() => {\n\t\twindow.location.reload()\n\t})\n}\n\nconst size = 800\n\nlet width = size\nlet height = size\n\nconst loader = new THREE.TextureLoader()\nconst scene = new THREE.Scene()\nconst renderer = new THREE.WebGLRenderer({})\nrenderer.setPixelRatio(window.devicePixelRatio)\nrenderer.setSize(width, height)\ndocument.body.appendChild(renderer.domElement)\n\nconst light = new THREE.AmbientLight(0xffffff)\nscene.add(light)\n\nlet tex1 = loader.load(`https://picsum.photos/${size}?random=1`)\nlet tex2 = loader.load(`https://picsum.photos/${size}?random=2`)\n\nlet uniforms = {\n\tu_image: { type: 't', value: tex1 },\n\tu_image2: { type: 't', value: tex2 },\n\tu_time: { value: 0 },\n\tu_res: { value: new THREE.Vector2(width, height) },\n\tu_mouse: { value: new THREE.Vector2(0, 0) },\n}\n\nlet geometry = new THREE.PlaneBufferGeometry(1, 1, 1, 1)\nlet material = new THREE.ShaderMaterial({\n\tuniforms: uniforms,\n\tvertexShader: vert,\n\tfragmentShader: frag,\n\tdefines: {\n\t\tPR: window.devicePixelRatio.toFixed(1),\n\t},\n})\n\nlet mesh = new THREE.Mesh(geometry, material)\nmesh.scale.set(width, height, 1)\nscene.add(mesh)\n\nlet camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 10)\ncamera.position.set(0, 0, 1)\n\nrenderer.render(scene, camera)\n\nlet mouse = new THREE.Vector2(0, 0)\nwindow.mouse = mouse\nlet rect = renderer.domElement.getBoundingClientRect()\nwindow.rect = rect\n\ndocument.addEventListener('mousemove', (e) => {\n\tmouse.x = e.pageX - rect.left\n\tmouse.y = e.pageY - rect.top\n})\n\nfunction animate() {\n\tmesh.material.uniforms.u_time.value += 1\n\tmesh.material.uniforms.u_mouse.value = mouse\n\trequestAnimationFrame(animate)\n\trenderer.render(scene, camera)\n}\n\nanimate()\n\nconst windowResizeHandler = () => {\n\trect = renderer.domElement.getBoundingClientRect()\n\t// const { innerWidth, innerHeight } = window\n\t// renderer.setSize(innerWidth, innerHeight)\n\n\t// camera.left = innerWidth / -2\n\t// camera.right = innerWidth / 2\n\t// camera.top = innerHeight / 2\n\t// camera.bottom = innerHeight / -2\n\n\t// mesh.material.uniforms.u_res.value = new THREE.Vector2(innerWidth, innerHeight)\n\t// mesh.scale.set(innerWidth, innerHeight, 1)\n\n\t// camera.updateProjectionMatrix()\n}\n\nwindow.addEventListener('resize', windowResizeHandler)\n","import * as THREE from 'three'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\n\nfunction createCamera() {\n\t// https://codepen.io/trusktr/pen/EbOoNx\n\tlet perspective = 800\n\tlet fov = (180 * (2 * Math.atan(innerHeight / 2 / perspective))) / Math.PI\n\tlet camera = new THREE.PerspectiveCamera(fov, window.innerWidth / window.innerHeight, 0.1, 1000)\n\tcamera.position.set(0, 0, perspective)\n\treturn camera\n}\n\nfunction createMesh(texture) {\n\tlet geometry = new THREE.PlaneGeometry(500, 333)\n\tlet material = new THREE.MeshBasicMaterial({\n\t\tmap: texture,\n\t})\n\tlet mesh = new THREE.Mesh(geometry, material)\n\treturn mesh\n}\n\nfunction createRenderer() {\n\tlet renderer = new THREE.WebGLRenderer({ antialias: true })\n\trenderer.setSize(window.innerWidth, window.innerHeight)\n\trenderer.setPixelRatio(window.devicePixelRatio)\n\t// renderer.outputEncoding = THREE.sRGBEncoding\n\tdocument.body.appendChild(renderer.domElement)\n\treturn renderer\n}\n\nfunction loadImageAsTexture(src) {\n\tconst loader = new THREE.TextureLoader()\n\tlet texture = loader.load(src)\n\treturn texture\n}\n\nfunction createComposer(renderer, scene, camera) {\n\tlet composer = new EffectComposer(renderer)\n\tlet renderPass = new RenderPass(scene, camera)\n\tcomposer.addPass(renderPass)\n\treturn composer\n}\n\nfunction createShaderPass(effect, composer) {\n\tlet customPass = new ShaderPass(effect)\n\tcustomPass.renderToScreen = true\n\tcomposer.addPass(customPass)\n\treturn customPass\n}\n\nexport default makeStuff = {\n\tcreateCamera,\n\tcreateMesh,\n\tcreateRenderer,\n\tloadImageAsTexture,\n\tcreateComposer,\n\tcreateShaderPass,\n}\n","import {\n\tBufferGeometry,\n\tClock,\n\tFloat32BufferAttribute,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from '../postprocessing/ShaderPass.js';\nimport { MaskPass } from '../postprocessing/MaskPass.js';\nimport { ClearMaskPass } from '../postprocessing/MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst parameters = {\n\t\t\t\tminFilter: LinearFilter,\n\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\tformat: RGBAFormat\n\t\t\t};\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t\t}\n\n\t\tif ( ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n}\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };\n","/**\n * Full-screen textured quad shader\n */\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import { Pass } from '../postprocessing/Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tColor\n} from 'three';\nimport { Pass } from '../postprocessing/Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n","precision mediump float;\nuniform vec2 u_res;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nuniform sampler2D u_image;\nuniform sampler2D u_image2;\n\nvarying vec2 v_uv;\n\nvoid main() {\n\n    vec2 res = u_res * PR;\n    vec2 st = gl_FragCoord.xy / res.xy - vec2(0.5);\n    st.y *= u_res.y / u_res.x;\n\n    vec2 mouse = vec2(u_mouse.x / u_res.x, 1.0 - ( u_mouse.y / u_res.y ));\n    mouse = mouse - vec2(0.5);\n    mouse.y *= u_res.y / u_res.x;\n\n    float pct = smoothstep(0.3, 0.15, distance(st, mouse));\n\n    vec4 image = texture2D(u_image, v_uv);\n    vec4 image2 = texture2D(u_image2, v_uv);\n\n    gl_FragColor = mix(image, image2, pct);\n\n}","precision mediump float;\nvarying vec2 v_uv;\nuniform vec2 u_mouse;\nuniform vec2 u_res;\n\nvoid main() {\n    v_uv = uv;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"],"names":[],"version":3,"file":"index.8dc0921c.js.map"}