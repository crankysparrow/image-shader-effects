{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACAA;;;;;;;AAKA,SAAS,qCAAe;IACvB,wCAAwC;IACxC,IAAI,cAAc;IAClB,IAAI,MAAM,AAAC,MAAO,CAAA,IAAI,KAAK,IAAI,CAAC,cAAc,IAAI,YAAW,IAAM,KAAK,EAAE;IAC1E,IAAI,SAAS,IAAI,yBAAwB,KAAK,OAAO,UAAU,GAAG,OAAO,WAAW,EAAE,KAAK;IAC3F,OAAO,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG;IAC1B,OAAO;AACR;AAEA,SAAS,iCAAW,OAAO,EAAE;IAC5B,IAAI,WAAW,IAAI,qBAAoB,KAAK;IAC5C,IAAI,WAAW,IAAI,yBAAwB;QAC1C,KAAK;IACN;IACA,IAAI,OAAO,IAAI,YAAW,UAAU;IACpC,OAAO;AACR;AAEA,SAAS,uCAAiB;IACzB,IAAI,WAAW,IAAI,qBAAoB;QAAE,WAAW,IAAI;IAAC;IACzD,SAAS,OAAO,CAAC,OAAO,UAAU,EAAE,OAAO,WAAW;IACtD,SAAS,aAAa,CAAC,OAAO,gBAAgB;IAC9C,+CAA+C;IAC/C,SAAS,IAAI,CAAC,WAAW,CAAC,SAAS,UAAU;IAC7C,OAAO;AACR;AAEA,SAAS,yCAAmB,GAAG,EAAE;IAChC,IAAM,SAAS,IAAI;IACnB,IAAI,UAAU,OAAO,IAAI,CAAC;IAC1B,OAAO;AACR;AAEA,SAAS,qCAAe,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE;IAChD,IAAI,WAAW,IAAI,CAAA,GAAA,qBAAa,EAAE;IAClC,IAAI,aAAa,IAAI,CAAA,GAAA,iBAAS,EAAE,OAAO;IACvC,SAAS,OAAO,CAAC;IACjB,OAAO;AACR;AAEA,SAAS,uCAAiB,MAAM,EAAE,QAAQ,EAAE;IAC3C,IAAI,aAAa,IAAI,CAAA,GAAA,iBAAS,EAAE;IAChC,WAAW,cAAc,GAAG,IAAI;IAChC,SAAS,OAAO,CAAC;IACjB,OAAO;AACR;IAEA,2CAAe,YAAY;IAC1B,cAAA;IACA,YAAA;IACA,gBAAA;IACA,oBAAA;IACA,gBAAA;IACA,kBAAA;AACD;;;;AC3DA,4BAAe;;;;ACAf,4BAAe;;;AHMf,IAAI,IAAU,EACb,IAAU,CAAC,OAAO,CAAC,WAAM;IACxB,OAAO,QAAQ,CAAC,MAAM;AACvB;AAGD,IAAM,6BAAO;AAEb,IAAI,8BAAQ;AACZ,IAAI,+BAAS;AAEb,IAAM,+BAAS,IAAI;AACnB,IAAM,8BAAQ,IAAI;AAClB,IAAM,iCAAW,IAAI,qBAAoB,CAAC;AAC1C,+BAAS,aAAa,CAAC,OAAO,gBAAgB;AAC9C,+BAAS,OAAO,CAAC,6BAAO;AACxB,SAAS,IAAI,CAAC,WAAW,CAAC,+BAAS,UAAU;AAE7C,IAAM,8BAAQ,IAAI,oBAAmB;AACrC,4BAAM,GAAG,CAAC;AAEV,IAAI,6BAAO,6BAAO,IAAI,CAAC,AAAC,yBAA6B,OAAL,4BAAK;AACrD,IAAI,6BAAO,6BAAO,IAAI,CAAC,AAAC,yBAA6B,OAAL,4BAAK;AAErD,IAAI,iCAAW;IACd,SAAS;QAAE,MAAM;QAAK,OAAO;IAAK;IAClC,UAAU;QAAE,MAAM;QAAK,OAAO;IAAK;IACnC,QAAQ;QAAE,OAAO;IAAE;IACnB,OAAO;QAAE,OAAO,IAAI,eAAc,6BAAO;IAAQ;IACjD,SAAS;QAAE,OAAO,IAAI,eAAc,GAAG;IAAG;AAC3C;AAEA,IAAI,iCAAW,IAAI,2BAA0B,GAAG,GAAG,GAAG;AACtD,IAAI,iCAAW,IAAI,sBAAqB;IACvC,UAAU;IACV,cAAc,CAAA,GAAA,yDAAI,OAAD;IACjB,gBAAgB,CAAA,GAAA,yDAAI,OAAD;IACnB,SAAS;QACR,IAAI,OAAO,gBAAgB,CAAC,OAAO,CAAC;IACrC;AACD;AAEA,IAAI,6BAAO,IAAI,YAAW,gCAAU;AACpC,2BAAK,KAAK,CAAC,GAAG,CAAC,6BAAO,8BAAQ;AAC9B,4BAAM,GAAG,CAAC;AAEV,IAAI,+BAAS,IAAI,0BAAyB,8BAAQ,IAAI,8BAAQ,GAAG,+BAAS,GAAG,+BAAS,IAAI,GAAG;AAC7F,6BAAO,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG;AAE1B,+BAAS,MAAM,CAAC,6BAAO;AAEvB,IAAI,8BAAQ,IAAI,eAAc,GAAG;AACjC,OAAO,KAAK,GAAG;AACf,IAAI,6BAAO,+BAAS,UAAU,CAAC,qBAAqB;AACpD,OAAO,IAAI,GAAG;AAEd,SAAS,gBAAgB,CAAC,aAAa,SAAC,GAAM;IAC7C,4BAAM,CAAC,GAAG,EAAE,KAAK,GAAG,2BAAK,IAAI;IAC7B,4BAAM,CAAC,GAAG,EAAE,KAAK,GAAG,2BAAK,GAAG;AAC7B;AAEA,SAAS,gCAAU;IAClB,2BAAK,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,IAAI;IACvC,2BAAK,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,GAAG;IACvC,sBAAsB;IACtB,+BAAS,MAAM,CAAC,6BAAO;AACxB;AAEA;AAEA,IAAM,4CAAsB,WAAM;IACjC,6BAAO,+BAAS,UAAU,CAAC,qBAAqB;AAChD,6CAA6C;AAC7C,4CAA4C;AAE5C,gCAAgC;AAChC,gCAAgC;AAChC,+BAA+B;AAC/B,mCAAmC;AAEnC,kFAAkF;AAClF,6CAA6C;AAE7C,kCAAkC;AACnC;AAEA,OAAO,gBAAgB,CAAC,UAAU","sources":["src/06-twoimages/index.js","src/basics/setup.js","src/06-twoimages/frag.glsl","src/06-twoimages/vert.glsl"],"sourcesContent":["import * as THREE from 'three'\nimport makeStuff from '../basics/setup.js'\n\nimport frag from './frag.glsl'\nimport vert from './vert.glsl'\n\nif (module.hot) {\n\tmodule.hot.dispose(() => {\n\t\twindow.location.reload()\n\t})\n}\n\nconst size = 800\n\nlet width = size\nlet height = size\n\nconst loader = new THREE.TextureLoader()\nconst scene = new THREE.Scene()\nconst renderer = new THREE.WebGLRenderer({})\nrenderer.setPixelRatio(window.devicePixelRatio)\nrenderer.setSize(width, height)\ndocument.body.appendChild(renderer.domElement)\n\nconst light = new THREE.AmbientLight(0xffffff)\nscene.add(light)\n\nlet tex1 = loader.load(`https://picsum.photos/${size}?random=1`)\nlet tex2 = loader.load(`https://picsum.photos/${size}?random=2`)\n\nlet uniforms = {\n\tu_image: { type: 't', value: tex1 },\n\tu_image2: { type: 't', value: tex2 },\n\tu_time: { value: 0 },\n\tu_res: { value: new THREE.Vector2(width, height) },\n\tu_mouse: { value: new THREE.Vector2(0, 0) },\n}\n\nlet geometry = new THREE.PlaneBufferGeometry(1, 1, 1, 1)\nlet material = new THREE.ShaderMaterial({\n\tuniforms: uniforms,\n\tvertexShader: vert,\n\tfragmentShader: frag,\n\tdefines: {\n\t\tPR: window.devicePixelRatio.toFixed(1),\n\t},\n})\n\nlet mesh = new THREE.Mesh(geometry, material)\nmesh.scale.set(width, height, 1)\nscene.add(mesh)\n\nlet camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 10)\ncamera.position.set(0, 0, 1)\n\nrenderer.render(scene, camera)\n\nlet mouse = new THREE.Vector2(0, 0)\nwindow.mouse = mouse\nlet rect = renderer.domElement.getBoundingClientRect()\nwindow.rect = rect\n\ndocument.addEventListener('mousemove', (e) => {\n\tmouse.x = e.pageX - rect.left\n\tmouse.y = e.pageY - rect.top\n})\n\nfunction animate() {\n\tmesh.material.uniforms.u_time.value += 1\n\tmesh.material.uniforms.u_mouse.value = mouse\n\trequestAnimationFrame(animate)\n\trenderer.render(scene, camera)\n}\n\nanimate()\n\nconst windowResizeHandler = () => {\n\trect = renderer.domElement.getBoundingClientRect()\n\t// const { innerWidth, innerHeight } = window\n\t// renderer.setSize(innerWidth, innerHeight)\n\n\t// camera.left = innerWidth / -2\n\t// camera.right = innerWidth / 2\n\t// camera.top = innerHeight / 2\n\t// camera.bottom = innerHeight / -2\n\n\t// mesh.material.uniforms.u_res.value = new THREE.Vector2(innerWidth, innerHeight)\n\t// mesh.scale.set(innerWidth, innerHeight, 1)\n\n\t// camera.updateProjectionMatrix()\n}\n\nwindow.addEventListener('resize', windowResizeHandler)\n","import * as THREE from 'three'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\n\nfunction createCamera() {\n\t// https://codepen.io/trusktr/pen/EbOoNx\n\tlet perspective = 800\n\tlet fov = (180 * (2 * Math.atan(innerHeight / 2 / perspective))) / Math.PI\n\tlet camera = new THREE.PerspectiveCamera(fov, window.innerWidth / window.innerHeight, 0.1, 1000)\n\tcamera.position.set(0, 0, perspective)\n\treturn camera\n}\n\nfunction createMesh(texture) {\n\tlet geometry = new THREE.PlaneGeometry(500, 333)\n\tlet material = new THREE.MeshBasicMaterial({\n\t\tmap: texture,\n\t})\n\tlet mesh = new THREE.Mesh(geometry, material)\n\treturn mesh\n}\n\nfunction createRenderer() {\n\tlet renderer = new THREE.WebGLRenderer({ antialias: true })\n\trenderer.setSize(window.innerWidth, window.innerHeight)\n\trenderer.setPixelRatio(window.devicePixelRatio)\n\t// renderer.outputEncoding = THREE.sRGBEncoding\n\tdocument.body.appendChild(renderer.domElement)\n\treturn renderer\n}\n\nfunction loadImageAsTexture(src) {\n\tconst loader = new THREE.TextureLoader()\n\tlet texture = loader.load(src)\n\treturn texture\n}\n\nfunction createComposer(renderer, scene, camera) {\n\tlet composer = new EffectComposer(renderer)\n\tlet renderPass = new RenderPass(scene, camera)\n\tcomposer.addPass(renderPass)\n\treturn composer\n}\n\nfunction createShaderPass(effect, composer) {\n\tlet customPass = new ShaderPass(effect)\n\tcustomPass.renderToScreen = true\n\tcomposer.addPass(customPass)\n\treturn customPass\n}\n\nexport default makeStuff = {\n\tcreateCamera,\n\tcreateMesh,\n\tcreateRenderer,\n\tloadImageAsTexture,\n\tcreateComposer,\n\tcreateShaderPass,\n}\n","precision mediump float;\nuniform vec2 u_res;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nuniform sampler2D u_image;\nuniform sampler2D u_image2;\n\nvarying vec2 v_uv;\n\nvoid main() {\n\n    vec2 res = u_res * PR;\n    vec2 st = gl_FragCoord.xy / res.xy - vec2(0.5);\n    st.y *= u_res.y / u_res.x;\n\n    vec2 mouse = vec2(u_mouse.x / u_res.x, 1.0 - ( u_mouse.y / u_res.y ));\n    mouse = mouse - vec2(0.5);\n    mouse.y *= u_res.y / u_res.x;\n\n    float pct = smoothstep(0.3, 0.15, distance(st, mouse));\n\n    vec4 image = texture2D(u_image, v_uv);\n    vec4 image2 = texture2D(u_image2, v_uv);\n\n    gl_FragColor = mix(image, image2, pct);\n\n}","precision mediump float;\nvarying vec2 v_uv;\nuniform vec2 u_mouse;\nuniform vec2 u_res;\n\nvoid main() {\n    v_uv = uv;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"],"names":[],"version":3,"file":"index.b0724a93.js.map"}