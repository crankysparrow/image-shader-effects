{"mappings":"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","sources":["node_modules/three/examples/jsm/postprocessing/EffectComposer.js","node_modules/three/examples/jsm/shaders/CopyShader.js","node_modules/three/examples/jsm/postprocessing/ShaderPass.js","node_modules/three/examples/jsm/postprocessing/Pass.js","node_modules/three/examples/jsm/postprocessing/MaskPass.js","node_modules/three/examples/jsm/postprocessing/RenderPass.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tClock,\n\tFloat32BufferAttribute,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from '../postprocessing/ShaderPass.js';\nimport { MaskPass } from '../postprocessing/MaskPass.js';\nimport { ClearMaskPass } from '../postprocessing/MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst parameters = {\n\t\t\t\tminFilter: LinearFilter,\n\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\tformat: RGBAFormat\n\t\t\t};\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t\t}\n\n\t\tif ( ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n}\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };\n","/**\n * Full-screen textured quad shader\n */\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import { Pass } from '../postprocessing/Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tColor\n} from 'three';\nimport { Pass } from '../postprocessing/Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n"],"names":[],"version":3,"file":"index.d092fd2e.js.map"}