{"mappings":"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","sources":["src/07-wave/index.js","src/scene.js","<<jsx-config-pragma.js>>","src/07-wave/frag.glsl","src/07-wave/vert.glsl"],"sourcesContent":["import * as THREE from 'three'\nimport Scene from '../scene'\n\nimport fragmentShader from './frag.glsl'\nimport vertexShader from './vert.glsl'\n\nconst loader = new THREE.TextureLoader()\nconst planeGeometry = new THREE.PlaneGeometry(1, 1, 32, 32)\nconst planeMaterial = new THREE.ShaderMaterial({\n\tvertexShader,\n\tfragmentShader,\n})\n\nconst scene = new Scene()\n\nclass Plane {\n\tbounds = {}\n\tprogress = 0\n\tanimating = false\n\tstartTime = false\n\twaveChangeDuration = 0.75\n\n\tconstructor(el) {\n\t\tthis.geometry = planeGeometry\n\t\tthis.material = planeMaterial.clone()\n\t\tthis.el = el\n\t\tlet tex = loader.load(el.src)\n\t\tthis.material.uniforms = {\n\t\t\tu_time: { value: 0 },\n\t\t\tu_image: { type: 't', value: tex },\n\t\t\tu_amount: { value: 0 },\n\t\t}\n\t\tthis.mesh = new THREE.Mesh(this.geometry, this.material)\n\n\t\tthis.resize()\n\t\tthis.mouse()\n\t}\n\n\tmouse() {\n\t\tthis.el.addEventListener('mouseenter', () => {\n\t\t\tthis.animating = 'inc'\n\t\t})\n\t\tthis.el.addEventListener('mouseleave', () => {\n\t\t\tthis.animating = 'dec'\n\t\t})\n\t}\n\n\tsetBounds() {\n\t\tconst rect = this.el.getBoundingClientRect()\n\t\tthis.bounds = {\n\t\t\ttop: rect.top,\n\t\t\tleft: rect.left,\n\t\t\twidth: rect.width,\n\t\t\theight: rect.height,\n\t\t}\n\t}\n\n\tsetPos() {\n\t\tlet scaleX = this.mesh.scale.x\n\t\tlet scaleY = this.mesh.scale.y\n\n\t\tlet posY = scene.camHeight / 2 - scaleY / 2\n\t\tposY -= (this.bounds.top / scene.windowHeight) * scene.camHeight\n\n\t\tlet posX = -(scene.camWidth / 2) + scaleX / 2\n\t\tposX += (this.bounds.left / scene.windowWidth) * scene.camWidth\n\n\t\tthis.mesh.position.x = posX\n\t\tthis.mesh.position.y = posY\n\t}\n\n\tsetScale() {\n\t\tthis.mesh.scale.x = (scene.camWidth * this.bounds.width) / scene.windowWidth\n\t\tthis.mesh.scale.y =\n\t\t\t(scene.camHeight * this.bounds.height) / scene.windowHeight\n\t}\n\n\tresize() {\n\t\tthis.setBounds()\n\t\tthis.setScale()\n\t\tthis.setPos()\n\t}\n\n\tscroll() {\n\t\tthis.setBounds()\n\t\tthis.setPos()\n\t}\n\n\ttick(time) {\n\t\tthis.material.uniforms.u_time.value = time\n\n\t\tif (this.animating) {\n\t\t\tif (!this.startTime) this.startTime = time\n\n\t\t\tlet elapsed = time - this.startTime\n\t\t\tif (elapsed >= this.waveChangeDuration) {\n\t\t\t\tthis.animating = false\n\t\t\t\tthis.startTime = false\n\t\t\t} else {\n\t\t\t\tlet newVal = scale(elapsed, 0, this.waveChangeDuration, 0, 1)\n\t\t\t\tthis.material.uniforms.u_amount.value =\n\t\t\t\t\tthis.animating === 'inc' ? newVal : 1 - newVal\n\t\t\t}\n\t\t}\n\t}\n}\n\nlet els = document.querySelectorAll('.img-wrap img')\n\nfunction initPlane(el) {\n\tlet plane = new Plane(el)\n\tscene.addPlane(plane)\n}\nels.forEach((el) => {\n\tif (el.complete) {\n\t\tinitPlane(el)\n\t} else {\n\t\tel.addEventListener('load', () => initPlane(el))\n\t}\n})\n\nfunction easeInQuart(x) {\n\treturn x * x * x * x\n}\n\nfunction scale(input, aMin, aMax, bMin, bMax) {\n\treturn ((input - aMin) * (bMax - bMin)) / (aMax - aMin) + bMin\n}\n","import * as THREE from 'three'\n\nexport default class Scene {\n\tplanes = []\n\tcamWidth = 0\n\tcamHeight = 0\n\tid = 1\n\n\tconstructor() {\n\t\tlet { innerWidth, innerHeight } = window\n\t\tthis.windowWidth = innerWidth\n\t\tthis.windowHeight = innerHeight\n\n\t\tthis.scene = new THREE.Scene()\n\t\tthis.camera = new THREE.PerspectiveCamera(\n\t\t\t10,\n\t\t\tinnerWidth / innerHeight,\n\t\t\t0.1,\n\t\t\t100\n\t\t)\n\t\tthis.camera.position.z = 50\n\n\t\tthis.renderer = new THREE.WebGLRenderer({\n\t\t\talpha: true,\n\t\t\tantialias: true,\n\t\t})\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio)\n\t\tthis.renderer.setSize(innerWidth, innerHeight)\n\t\tthis.clock = new THREE.Clock()\n\n\t\tthis.addToDom()\n\t\tthis.onResize()\n\t\twindow.requestAnimationFrame(() => this.tick())\n\t\twindow.addEventListener('resize', () => this.onResize())\n\t\twindow.addEventListener('scroll', () => this.onScroll())\n\t}\n\n\taddPlane(plane) {\n\t\tthis.scene.add(plane.mesh)\n\t\tthis.planes.push(plane)\n\t\tplane.resize()\n\t}\n\n\taddToDom() {\n\t\tdocument.body.appendChild(this.renderer.domElement)\n\t}\n\n\ttick() {\n\t\tlet time = this.clock.getElapsedTime()\n\t\tthis.planes.forEach((plane) => plane.tick(time))\n\n\t\tthis.renderer.render(this.scene, this.camera)\n\t\twindow.requestAnimationFrame(() => this.tick())\n\t}\n\n\tonResize() {\n\t\tlet { innerWidth, innerHeight } = window\n\t\tthis.renderer.setSize(innerWidth, innerHeight)\n\t\tthis.camera.aspect = innerWidth / innerHeight\n\t\tthis.camera.updateProjectionMatrix()\n\n\t\tconst vFov = (this.camera.fov * Math.PI) / 180\n\t\tconst camHeight = Math.tan(vFov) * this.camera.position.z\n\t\tconst camWidth = camHeight * this.camera.aspect\n\n\t\tthis.camWidth = camWidth\n\t\tthis.camHeight = camHeight\n\t\tthis.windowWidth = innerWidth\n\t\tthis.windowHeight = innerHeight\n\n\t\tthis.planes.forEach((plane) => {\n\t\t\tplane.resize()\n\t\t})\n\t}\n\n\tonScroll() {\n\t\tthis.planes.forEach((plane) => {\n\t\t\tplane.scroll()\n\t\t})\n\t}\n}\n",null,"precision mediump float;\n\nvarying float v_wave;\nvarying vec2 v_uv;\nuniform sampler2D u_image;\n\nvoid main() {\n    vec2 uv = v_uv;\n    vec4 image = texture2D(u_image, uv);\n    float wave = v_wave;\n\n    float r = texture2D(u_image, vec2(uv.x + wave * 0.25, uv.y + wave * -0.1)).r;\n    float g = texture2D(u_image, uv - wave * 0.).g;\n    float b = texture2D(u_image, vec2(uv.x + wave * -0.15, uv.y + wave * -0.05)).b;\n\n    vec3 texture = vec3(r, g, b);\n    gl_FragColor = vec4(texture, 1.0);\n\n}","precision mediump float;\nvarying vec2 v_uv;\nvarying float v_wave;\nuniform float u_amount;\nuniform float u_time;\n\n#pragma glslify: noise = require(glsl-noise/simplex/3d)\n\nvoid main() {\n    v_uv = uv;\n    vec3 pos = position;\n\n    vec3 noisePos = vec3(pos.x - u_time * 1.2, pos.y + u_time * 0.1, 0.0);\n    float wave = noise(noisePos) * 1.75 * u_amount;\n\n    pos.z += wave;\n    v_wave = wave * 0.1;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}"],"names":[],"version":3,"file":"index.de8cc47c.js.map"}