(function () {
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequireb594"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequireb594"] = parcelRequire;
}
parcelRequire.register("dnGTK", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $f4eb7f1374ed6486$export$2e2bcd8739ae039; });
function $f4eb7f1374ed6486$export$2e2bcd8739ae039(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

});

parcelRequire.register("9SLyD", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $2907635b415d003d$export$2e2bcd8739ae039; });
function $2907635b415d003d$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $2907635b415d003d$export$2e2bcd8739ae039(Constructor, protoProps, staticProps) {
    if (protoProps) $2907635b415d003d$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $2907635b415d003d$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}

});

parcelRequire.register("dK6Ta", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $d9f3cd2bd450a576$export$2e2bcd8739ae039; });
function $d9f3cd2bd450a576$export$2e2bcd8739ae039(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

});

parcelRequire.register("fpyje", function(module, exports) {

$parcel$export(module.exports, "LinearFilter", function () { return $b383cde4e0574ff6$export$8a72f490b25c56c8; });
$parcel$export(module.exports, "RGBAFormat", function () { return $b383cde4e0574ff6$export$3f8bb04b555a363c; });
$parcel$export(module.exports, "Vector2", function () { return $b383cde4e0574ff6$export$c977b3e384af9ae1; });
$parcel$export(module.exports, "WebGLRenderTarget", function () { return $b383cde4e0574ff6$export$3c052beb2e51e23f; });
$parcel$export(module.exports, "Color", function () { return $b383cde4e0574ff6$export$892596cec99bc70e; });
$parcel$export(module.exports, "MeshBasicMaterial", function () { return $b383cde4e0574ff6$export$55cbcc9b622fe1f5; });
$parcel$export(module.exports, "Float32BufferAttribute", function () { return $b383cde4e0574ff6$export$cbe7a62641830ebd; });
$parcel$export(module.exports, "BufferGeometry", function () { return $b383cde4e0574ff6$export$b7be63a67df8959; });
$parcel$export(module.exports, "Mesh", function () { return $b383cde4e0574ff6$export$e176487c05830cc5; });
$parcel$export(module.exports, "UniformsUtils", function () { return $b383cde4e0574ff6$export$d8ecdf8615bfea69; });
$parcel$export(module.exports, "ShaderMaterial", function () { return $b383cde4e0574ff6$export$83c7d75d550a8b0d; });
$parcel$export(module.exports, "PerspectiveCamera", function () { return $b383cde4e0574ff6$export$74e4ae24825f68d7; });
$parcel$export(module.exports, "PlaneBufferGeometry", function () { return $b383cde4e0574ff6$export$e789a11a194ca4e0; });
$parcel$export(module.exports, "OrthographicCamera", function () { return $b383cde4e0574ff6$export$9ebf355ee4ed261b; });
$parcel$export(module.exports, "WebGLRenderer", function () { return $b383cde4e0574ff6$export$f6cc00ef28d7cf97; });
$parcel$export(module.exports, "Scene", function () { return $b383cde4e0574ff6$export$38af1803e3442a7f; });
$parcel$export(module.exports, "TextureLoader", function () { return $b383cde4e0574ff6$export$fd1bfc71f64c538c; });
$parcel$export(module.exports, "AmbientLight", function () { return $b383cde4e0574ff6$export$af279bfef9ec2c96; });
$parcel$export(module.exports, "Clock", function () { return $b383cde4e0574ff6$export$9735c82c4bae3302; });
$parcel$export(module.exports, "PlaneGeometry", function () { return $b383cde4e0574ff6$export$e789a11a194ca4e0; });
/**
 * @license
 * Copyright 2010-2021 Three.js Authors
 * SPDX-License-Identifier: MIT
 */ 
var $4enQD = parcelRequire("4enQD");

var $kyywQ = parcelRequire("kyywQ");

var $dnGTK = parcelRequire("dnGTK");

var $9SLyD = parcelRequire("9SLyD");

var $dK6Ta = parcelRequire("dK6Ta");

var $bWs11 = parcelRequire("bWs11");

var $6gb2n = parcelRequire("6gb2n");

var $gQI4D = parcelRequire("gQI4D");

var $8lU41 = parcelRequire("8lU41");

var $2MVFf = parcelRequire("2MVFf");

var $8B770 = parcelRequire("8B770");

var $caHck = parcelRequire("caHck");

var $a0Xbx = parcelRequire("a0Xbx");

var $672mD = parcelRequire("672mD");
var $b383cde4e0574ff6$export$3545e07a80636437 = "134";
var $b383cde4e0574ff6$export$7177b3e430c2d7ca = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2,
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2
};
var $b383cde4e0574ff6$export$d46bd3ead7cc759b = {
    ROTATE: 0,
    PAN: 1,
    DOLLY_PAN: 2,
    DOLLY_ROTATE: 3
};
var $b383cde4e0574ff6$export$3237e1f2c1ea1f44 = 0;
var $b383cde4e0574ff6$export$b9a7b4fc5cb15f9b = 1;
var $b383cde4e0574ff6$export$b8058bcc7037d3f3 = 2;
var $b383cde4e0574ff6$export$f24be24dcddeac0d = 3;
var $b383cde4e0574ff6$export$346307dbae2b7447 = 0;
var $b383cde4e0574ff6$export$5813f879eee7cd88 = 1;
var $b383cde4e0574ff6$export$a47c4b43a1be34f0 = 2;
var $b383cde4e0574ff6$export$896ae1ade6c829c4 = 3;
var $b383cde4e0574ff6$export$2ede184fc2998901 = 0;
var $b383cde4e0574ff6$export$d9f0486e75b5ace = 1;
var $b383cde4e0574ff6$export$3b296b6f144d5b03 = 2;
var $b383cde4e0574ff6$export$a62047d29c96d8ff = 1;
var $b383cde4e0574ff6$export$fadb74c06a7f490 = 2;
var $b383cde4e0574ff6$export$63b8d6b580fc65ba = 0;
var $b383cde4e0574ff6$export$5b29a26d96ee6af0 = 1;
var $b383cde4e0574ff6$export$777d8f9551c2216b = 2;
var $b383cde4e0574ff6$export$cdfa06f868e2e467 = 3;
var $b383cde4e0574ff6$export$4138e1c684b46a20 = 4;
var $b383cde4e0574ff6$export$eda4864c68df1fa2 = 5;
var $b383cde4e0574ff6$export$20183a0484ce21a0 = 100;
var $b383cde4e0574ff6$export$73e0df5177988548 = 101;
var $b383cde4e0574ff6$export$28e582859cbec660 = 102;
var $b383cde4e0574ff6$export$c8c1508da8d0600c = 103;
var $b383cde4e0574ff6$export$99948c02fb51055f = 104;
var $b383cde4e0574ff6$export$2110f05edf778d3d = 200;
var $b383cde4e0574ff6$export$8805bad65e24940e = 201;
var $b383cde4e0574ff6$export$7fbe15b28d28cf52 = 202;
var $b383cde4e0574ff6$export$947829af9f2c17f6 = 203;
var $b383cde4e0574ff6$export$d5773124e86cf28c = 204;
var $b383cde4e0574ff6$export$11d468cc7f19e971 = 205;
var $b383cde4e0574ff6$export$a78aed1ca2a87192 = 206;
var $b383cde4e0574ff6$export$5d0fe17fd8773bac = 207;
var $b383cde4e0574ff6$export$ef5f2dd8ffac5574 = 208;
var $b383cde4e0574ff6$export$56b85b2686ab16 = 209;
var $b383cde4e0574ff6$export$c05e2a1fc8609506 = 210;
var $b383cde4e0574ff6$export$69025ce147cee220 = 0;
var $b383cde4e0574ff6$export$7182eb52ea3b3f04 = 1;
var $b383cde4e0574ff6$export$eedccec66ab7ebe = 2;
var $b383cde4e0574ff6$export$296f78a0b892f81a = 3;
var $b383cde4e0574ff6$export$a60d398fc7b7590e = 4;
var $b383cde4e0574ff6$export$7d7234c1240a1fc4 = 5;
var $b383cde4e0574ff6$export$c5e2c52991f30937 = 6;
var $b383cde4e0574ff6$export$2f843afa843d8916 = 7;
var $b383cde4e0574ff6$export$e50ac29801f1774d = 0;
var $b383cde4e0574ff6$export$9f9d94f963c85479 = 1;
var $b383cde4e0574ff6$export$e641dc52bc3494aa = 2;
var $b383cde4e0574ff6$export$9fcb6b4294603b2 = 0;
var $b383cde4e0574ff6$export$98f52c2a46c598ca = 1;
var $b383cde4e0574ff6$export$74b25e54b3bcd548 = 2;
var $b383cde4e0574ff6$export$932b3dd283d4a366 = 3;
var $b383cde4e0574ff6$export$a0d98fe6d7e4af64 = 4;
var $b383cde4e0574ff6$export$2c7b09c1e9abfb5e = 5;
var $b383cde4e0574ff6$export$1beec6768cbb3d2d = 300;
var $b383cde4e0574ff6$export$8759762a6477f2c4 = 301;
var $b383cde4e0574ff6$export$dc59f8aed047f61d = 302;
var $b383cde4e0574ff6$export$d64030b316d3b087 = 303;
var $b383cde4e0574ff6$export$ee99d97d46898098 = 304;
var $b383cde4e0574ff6$export$dbf3e70ff37af79 = 306;
var $b383cde4e0574ff6$export$76a9f4355364345c = 307;
var $b383cde4e0574ff6$export$533346c8e8dac0f5 = 1000;
var $b383cde4e0574ff6$export$9d9334239a5a5e06 = 1001;
var $b383cde4e0574ff6$export$c7e7c00b14f51a4f = 1002;
var $b383cde4e0574ff6$export$727aa5ec3fe39bf0 = 1003;
var $b383cde4e0574ff6$export$d129e38cf6feaa8c = 1004;
var $b383cde4e0574ff6$export$14a4936464a36496 = 1004;
var $b383cde4e0574ff6$export$d2327c1afe5bfdf2 = 1005;
var $b383cde4e0574ff6$export$cbc5b7f5647595d8 = 1005;
var $b383cde4e0574ff6$export$8a72f490b25c56c8 = 1006;
var $b383cde4e0574ff6$export$19a719f377145a13 = 1007;
var $b383cde4e0574ff6$export$dbe96bee3fe9dbf0 = 1007;
var $b383cde4e0574ff6$export$5d8599b6a933fb1b = 1008;
var $b383cde4e0574ff6$export$90d80f1e3506775f = 1008;
var $b383cde4e0574ff6$export$2e8ce08d3f6f5e10 = 1009;
var $b383cde4e0574ff6$export$545fce0311a9796a = 1010;
var $b383cde4e0574ff6$export$88572337f312435f = 1011;
var $b383cde4e0574ff6$export$c63dc51868b06a9d = 1012;
var $b383cde4e0574ff6$export$5c612977753abe2 = 1013;
var $b383cde4e0574ff6$export$c3c7fc4518ebba96 = 1014;
var $b383cde4e0574ff6$export$f6d331659b644596 = 1015;
var $b383cde4e0574ff6$export$2697304443f382bc = 1016;
var $b383cde4e0574ff6$export$b3969b01faf587f2 = 1017;
var $b383cde4e0574ff6$export$18886f8ae33e90de = 1018;
var $b383cde4e0574ff6$export$cb1fa50553eb14c4 = 1019;
var $b383cde4e0574ff6$export$6c8ea339bfab1301 = 1020;
var $b383cde4e0574ff6$export$988473390501ed4b = 1021;
var $b383cde4e0574ff6$export$7c67423a5ee6f5eb = 1022;
var $b383cde4e0574ff6$export$3f8bb04b555a363c = 1023;
var $b383cde4e0574ff6$export$cc09ccbf6d1ed449 = 1024;
var $b383cde4e0574ff6$export$9053a81c4a69c289 = 1025;
var $b383cde4e0574ff6$export$7f419e36e2229a1d = $b383cde4e0574ff6$export$3f8bb04b555a363c;
var $b383cde4e0574ff6$export$c1b6b5136be58045 = 1026;
var $b383cde4e0574ff6$export$1e113ac2d0905829 = 1027;
var $b383cde4e0574ff6$export$4e041a7967d15c4b = 1028;
var $b383cde4e0574ff6$export$aa92e870a709d190 = 1029;
var $b383cde4e0574ff6$export$6cdf0b461c7ce8a0 = 1030;
var $b383cde4e0574ff6$export$1ba1c45f9f77d4d7 = 1031;
var $b383cde4e0574ff6$export$d1fd40c11bfa798e = 1032;
var $b383cde4e0574ff6$export$c200e7d26f592f21 = 1033;
var $b383cde4e0574ff6$export$21d1799c6d552fc0 = 33776;
var $b383cde4e0574ff6$export$afa304c3e981b668 = 33777;
var $b383cde4e0574ff6$export$d2a1a68024a3e56c = 33778;
var $b383cde4e0574ff6$export$9a79c424327dacf9 = 33779;
var $b383cde4e0574ff6$export$19ada9bbb1af3573 = 35840;
var $b383cde4e0574ff6$export$d0f0355bb3d948e4 = 35841;
var $b383cde4e0574ff6$export$b82296714358084c = 35842;
var $b383cde4e0574ff6$export$b71692456c47b6c3 = 35843;
var $b383cde4e0574ff6$export$6ab91af2d757aee7 = 36196;
var $b383cde4e0574ff6$export$7800993ef8106a6a = 37492;
var $b383cde4e0574ff6$export$23ed8300a860e7d8 = 37496;
var $b383cde4e0574ff6$export$dc5570b4a2b92d48 = 37808;
var $b383cde4e0574ff6$export$68880cd325f8b2fb = 37809;
var $b383cde4e0574ff6$export$7d2c0be323373d95 = 37810;
var $b383cde4e0574ff6$export$22b52da301fc3a3e = 37811;
var $b383cde4e0574ff6$export$c009e2cb4a66485e = 37812;
var $b383cde4e0574ff6$export$118fff5afa255b63 = 37813;
var $b383cde4e0574ff6$export$120713c829ae0667 = 37814;
var $b383cde4e0574ff6$export$c79eeabbf53313e9 = 37815;
var $b383cde4e0574ff6$export$443cf6567cdd6424 = 37816;
var $b383cde4e0574ff6$export$6573984fc9840780 = 37817;
var $b383cde4e0574ff6$export$e7aee563f30091de = 37818;
var $b383cde4e0574ff6$export$2eb8634622ddeab7 = 37819;
var $b383cde4e0574ff6$export$202b1ce7b5d25742 = 37820;
var $b383cde4e0574ff6$export$18ab77abd087e467 = 37821;
var $b383cde4e0574ff6$export$ce40b115e188bc81 = 36492;
var $b383cde4e0574ff6$export$4487000d1baf578b = 37840;
var $b383cde4e0574ff6$export$4a1746c7512b1ea1 = 37841;
var $b383cde4e0574ff6$export$4208debc782f5653 = 37842;
var $b383cde4e0574ff6$export$82c5f9d3037aaea3 = 37843;
var $b383cde4e0574ff6$export$64e357a152723eb9 = 37844;
var $b383cde4e0574ff6$export$1b7711037f5e380e = 37845;
var $b383cde4e0574ff6$export$eb234716dfb52c31 = 37846;
var $b383cde4e0574ff6$export$8041d2df79c555f = 37847;
var $b383cde4e0574ff6$export$27d2c8c0fcc7b83a = 37848;
var $b383cde4e0574ff6$export$27b9de07b84a1334 = 37849;
var $b383cde4e0574ff6$export$5c2b31a31ccc15c8 = 37850;
var $b383cde4e0574ff6$export$5c4d4b335786f8f3 = 37851;
var $b383cde4e0574ff6$export$e0c50c800e38be11 = 37852;
var $b383cde4e0574ff6$export$9b0442bae422b2db = 37853;
var $b383cde4e0574ff6$export$d62fdc9d1b1cccad = 2200;
var $b383cde4e0574ff6$export$dfaf4422ce096e29 = 2201;
var $b383cde4e0574ff6$export$f8f6f2041b78e210 = 2202;
var $b383cde4e0574ff6$export$995b32462a65e855 = 2300;
var $b383cde4e0574ff6$export$30fac1aace31cf4d = 2301;
var $b383cde4e0574ff6$export$198b11ff4c72bb30 = 2302;
var $b383cde4e0574ff6$export$7f795934b84ab523 = 2400;
var $b383cde4e0574ff6$export$24a4ccb5099273b5 = 2401;
var $b383cde4e0574ff6$export$8e8c3ecdcd8e1fee = 2402;
var $b383cde4e0574ff6$export$bcfbbdcf8de7f8cd = 2500;
var $b383cde4e0574ff6$export$d875e029ef558d3 = 2501;
var $b383cde4e0574ff6$export$4c28c87c2dc84758 = 0;
var $b383cde4e0574ff6$export$b23a071aa286eb29 = 1;
var $b383cde4e0574ff6$export$f0d8293634f88842 = 2;
var $b383cde4e0574ff6$export$7207336e4151a112 = 3000;
var $b383cde4e0574ff6$export$f32388edbb32674 = 3001;
var $b383cde4e0574ff6$export$eaab32c1bcea1817 = 3007;
var $b383cde4e0574ff6$export$3be4c466a12b5dcf = 3002;
var $b383cde4e0574ff6$export$8d4cbbeb1eea9f67 = 3003;
var $b383cde4e0574ff6$export$2c4bdfd76b188654 = 3004;
var $b383cde4e0574ff6$export$48a0051d6a5a9b9 = 3005;
var $b383cde4e0574ff6$export$ca2f89b13b49d951 = 3006;
var $b383cde4e0574ff6$export$deeb383078690b50 = 3200;
var $b383cde4e0574ff6$export$8f910f4c4f73df11 = 3201;
var $b383cde4e0574ff6$export$2852a58ebdac27b8 = 0;
var $b383cde4e0574ff6$export$9990ad26f9db5b2c = 1;
var $b383cde4e0574ff6$export$69433f11f42d5527 = 0;
var $b383cde4e0574ff6$export$9f542ae4b5baca34 = 7680;
var $b383cde4e0574ff6$export$8a4f28336ef203d3 = 7681;
var $b383cde4e0574ff6$export$2928c0231297c036 = 7682;
var $b383cde4e0574ff6$export$c0e9611c8a15f9a8 = 7683;
var $b383cde4e0574ff6$export$9c2c08927385dcc4 = 34055;
var $b383cde4e0574ff6$export$7c74ea00fa1315e6 = 34056;
var $b383cde4e0574ff6$export$22e2e5726612443 = 5386;
var $b383cde4e0574ff6$export$1343870698229224 = 512;
var $b383cde4e0574ff6$export$8e1d8ed281997fa6 = 513;
var $b383cde4e0574ff6$export$55648a1cde8329a7 = 514;
var $b383cde4e0574ff6$export$2dff107857e6aca2 = 515;
var $b383cde4e0574ff6$export$6f93765ab2f451a2 = 516;
var $b383cde4e0574ff6$export$6f3fb2d2440f2b76 = 517;
var $b383cde4e0574ff6$export$4119cf7b4c98fd5a = 518;
var $b383cde4e0574ff6$export$14cf96713ddd97a8 = 519;
var $b383cde4e0574ff6$export$763e8360f4d7f77d = 35044;
var $b383cde4e0574ff6$export$8505d14ac8546ca = 35048;
var $b383cde4e0574ff6$export$721e63549e51d81e = 35040;
var $b383cde4e0574ff6$export$415731dc4f48e299 = 35045;
var $b383cde4e0574ff6$export$9e809946455f13bc = 35049;
var $b383cde4e0574ff6$export$2ed9499a35b5f832 = 35041;
var $b383cde4e0574ff6$export$32ab2503ea19469a = 35046;
var $b383cde4e0574ff6$export$ab4022c2c3f86315 = 35050;
var $b383cde4e0574ff6$export$ba7f1db36a76a970 = 35042;
var $b383cde4e0574ff6$export$43600cc67fabd9f = "100";
var $b383cde4e0574ff6$export$f63012db5506e7dd = "300 es";
/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */ var $b383cde4e0574ff6$export$ec8b666c5fe2c75a = /*#__PURE__*/ function() {
    "use strict";
    function EventDispatcher() {
        (0, $dnGTK.default)(this, EventDispatcher);
    }
    (0, $9SLyD.default)(EventDispatcher, [
        {
            key: "addEventListener",
            value: function addEventListener(type, listener) {
                if (this._listeners === undefined) this._listeners = {};
                var listeners = this._listeners;
                if (listeners[type] === undefined) listeners[type] = [];
                if (listeners[type].indexOf(listener) === -1) listeners[type].push(listener);
            }
        },
        {
            key: "hasEventListener",
            value: function hasEventListener(type, listener) {
                if (this._listeners === undefined) return false;
                var listeners = this._listeners;
                return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
            }
        },
        {
            key: "removeEventListener",
            value: function removeEventListener(type, listener) {
                if (this._listeners === undefined) return;
                var listeners = this._listeners;
                var listenerArray = listeners[type];
                if (listenerArray !== undefined) {
                    var index = listenerArray.indexOf(listener);
                    if (index !== -1) listenerArray.splice(index, 1);
                }
            }
        },
        {
            key: "dispatchEvent",
            value: function dispatchEvent(event) {
                if (this._listeners === undefined) return;
                var listeners = this._listeners;
                var listenerArray = listeners[event.type];
                if (listenerArray !== undefined) {
                    event.target = this;
                    // Make a copy, in case listeners are removed while iterating.
                    var array = listenerArray.slice(0);
                    for(var i = 0, l = array.length; i < l; i++)array[i].call(this, event);
                    event.target = null;
                }
            }
        }
    ]);
    return EventDispatcher;
}();
var $b383cde4e0574ff6$var$_seed = 1234567;
var $b383cde4e0574ff6$var$DEG2RAD = Math.PI / 180;
var $b383cde4e0574ff6$var$RAD2DEG = 180 / Math.PI;
//
var $b383cde4e0574ff6$var$_lut = [];
for(var $b383cde4e0574ff6$var$i = 0; $b383cde4e0574ff6$var$i < 256; $b383cde4e0574ff6$var$i++)$b383cde4e0574ff6$var$_lut[$b383cde4e0574ff6$var$i] = ($b383cde4e0574ff6$var$i < 16 ? "0" : "") + $b383cde4e0574ff6$var$i.toString(16);
var $b383cde4e0574ff6$var$hasRandomUUID = typeof crypto !== "undefined" && "randomUUID" in crypto;
function $b383cde4e0574ff6$var$generateUUID() {
    if ($b383cde4e0574ff6$var$hasRandomUUID) return crypto.randomUUID().toUpperCase();
    // TODO Remove this code when crypto.randomUUID() is available everywhere
    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
    var d0 = Math.random() * 0xffffffff | 0;
    var d1 = Math.random() * 0xffffffff | 0;
    var d2 = Math.random() * 0xffffffff | 0;
    var d3 = Math.random() * 0xffffffff | 0;
    var uuid = $b383cde4e0574ff6$var$_lut[d0 & 0xff] + $b383cde4e0574ff6$var$_lut[d0 >> 8 & 0xff] + $b383cde4e0574ff6$var$_lut[d0 >> 16 & 0xff] + $b383cde4e0574ff6$var$_lut[d0 >> 24 & 0xff] + "-" + $b383cde4e0574ff6$var$_lut[d1 & 0xff] + $b383cde4e0574ff6$var$_lut[d1 >> 8 & 0xff] + "-" + $b383cde4e0574ff6$var$_lut[d1 >> 16 & 0x0f | 0x40] + $b383cde4e0574ff6$var$_lut[d1 >> 24 & 0xff] + "-" + $b383cde4e0574ff6$var$_lut[d2 & 0x3f | 0x80] + $b383cde4e0574ff6$var$_lut[d2 >> 8 & 0xff] + "-" + $b383cde4e0574ff6$var$_lut[d2 >> 16 & 0xff] + $b383cde4e0574ff6$var$_lut[d2 >> 24 & 0xff] + $b383cde4e0574ff6$var$_lut[d3 & 0xff] + $b383cde4e0574ff6$var$_lut[d3 >> 8 & 0xff] + $b383cde4e0574ff6$var$_lut[d3 >> 16 & 0xff] + $b383cde4e0574ff6$var$_lut[d3 >> 24 & 0xff];
    // .toUpperCase() here flattens concatenated strings to save heap memory space.
    return uuid.toUpperCase();
}
function $b383cde4e0574ff6$var$clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
// compute euclidian modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function $b383cde4e0574ff6$var$euclideanModulo(n, m) {
    return (n % m + m) % m;
}
// Linear mapping from range <a1, a2> to range <b1, b2>
function $b383cde4e0574ff6$var$mapLinear(x, a1, a2, b1, b2) {
    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
}
// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
function $b383cde4e0574ff6$var$inverseLerp(x, y, value) {
    if (x !== y) return (value - x) / (y - x);
    else return 0;
}
// https://en.wikipedia.org/wiki/Linear_interpolation
function $b383cde4e0574ff6$var$lerp(x, y, t) {
    return (1 - t) * x + t * y;
}
// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function $b383cde4e0574ff6$var$damp(x, y, lambda, dt) {
    return $b383cde4e0574ff6$var$lerp(x, y, 1 - Math.exp(-lambda * dt));
}
// https://www.desmos.com/calculator/vcsjnyz7x4
function $b383cde4e0574ff6$var$pingpong(x) {
    var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    return length - Math.abs($b383cde4e0574ff6$var$euclideanModulo(x, length * 2) - length);
}
// http://en.wikipedia.org/wiki/Smoothstep
function $b383cde4e0574ff6$var$smoothstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
}
function $b383cde4e0574ff6$var$smootherstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
}
// Random integer from <low, high> interval
function $b383cde4e0574ff6$var$randInt(low, high) {
    return low + Math.floor(Math.random() * (high - low + 1));
}
// Random float from <low, high> interval
function $b383cde4e0574ff6$var$randFloat(low, high) {
    return low + Math.random() * (high - low);
}
// Random float from <-range/2, range/2> interval
function $b383cde4e0574ff6$var$randFloatSpread(range) {
    return range * (0.5 - Math.random());
}
// Deterministic pseudo-random float in the interval [ 0, 1 ]
function $b383cde4e0574ff6$var$seededRandom(s) {
    if (s !== undefined) $b383cde4e0574ff6$var$_seed = s % 2147483647;
    // Park-Miller algorithm
    $b383cde4e0574ff6$var$_seed = $b383cde4e0574ff6$var$_seed * 16807 % 2147483647;
    return ($b383cde4e0574ff6$var$_seed - 1) / 2147483646;
}
function $b383cde4e0574ff6$var$degToRad(degrees) {
    return degrees * $b383cde4e0574ff6$var$DEG2RAD;
}
function $b383cde4e0574ff6$var$radToDeg(radians) {
    return radians * $b383cde4e0574ff6$var$RAD2DEG;
}
function $b383cde4e0574ff6$var$isPowerOfTwo(value) {
    return (value & value - 1) === 0 && value !== 0;
}
function $b383cde4e0574ff6$var$ceilPowerOfTwo(value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
}
function $b383cde4e0574ff6$var$floorPowerOfTwo(value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
}
function $b383cde4e0574ff6$var$setQuaternionFromProperEuler(q, a, b, c, order) {
    // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
    // rotations are applied to the axes in the order specified by 'order'
    // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
    // angles are in radians
    var cos = Math.cos;
    var sin = Math.sin;
    var c2 = cos(b / 2);
    var s2 = sin(b / 2);
    var c13 = cos((a + c) / 2);
    var s13 = sin((a + c) / 2);
    var c1_3 = cos((a - c) / 2);
    var s1_3 = sin((a - c) / 2);
    var c3_1 = cos((c - a) / 2);
    var s3_1 = sin((c - a) / 2);
    switch(order){
        case "XYX":
            q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
            break;
        case "YZY":
            q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
            break;
        case "ZXZ":
            q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
            break;
        case "XZX":
            q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
            break;
        case "YXY":
            q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
            break;
        case "ZYZ":
            q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
            break;
        default:
            console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
    }
}
var $b383cde4e0574ff6$export$380958644dbbc22b = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    DEG2RAD: $b383cde4e0574ff6$var$DEG2RAD,
    RAD2DEG: $b383cde4e0574ff6$var$RAD2DEG,
    generateUUID: $b383cde4e0574ff6$var$generateUUID,
    clamp: $b383cde4e0574ff6$var$clamp,
    euclideanModulo: $b383cde4e0574ff6$var$euclideanModulo,
    mapLinear: $b383cde4e0574ff6$var$mapLinear,
    inverseLerp: $b383cde4e0574ff6$var$inverseLerp,
    lerp: $b383cde4e0574ff6$var$lerp,
    damp: $b383cde4e0574ff6$var$damp,
    pingpong: $b383cde4e0574ff6$var$pingpong,
    smoothstep: $b383cde4e0574ff6$var$smoothstep,
    smootherstep: $b383cde4e0574ff6$var$smootherstep,
    randInt: $b383cde4e0574ff6$var$randInt,
    randFloat: $b383cde4e0574ff6$var$randFloat,
    randFloatSpread: $b383cde4e0574ff6$var$randFloatSpread,
    seededRandom: $b383cde4e0574ff6$var$seededRandom,
    degToRad: $b383cde4e0574ff6$var$degToRad,
    radToDeg: $b383cde4e0574ff6$var$radToDeg,
    isPowerOfTwo: $b383cde4e0574ff6$var$isPowerOfTwo,
    ceilPowerOfTwo: $b383cde4e0574ff6$var$ceilPowerOfTwo,
    floorPowerOfTwo: $b383cde4e0574ff6$var$floorPowerOfTwo,
    setQuaternionFromProperEuler: $b383cde4e0574ff6$var$setQuaternionFromProperEuler
});
var $b383cde4e0574ff6$export$c977b3e384af9ae1 = /*#__PURE__*/ function() {
    "use strict";
    function Vector2() {
        var x = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        (0, $dnGTK.default)(this, Vector2);
        this.x = x;
        this.y = y;
    }
    (0, $9SLyD.default)(Vector2, [
        {
            key: "width",
            get: function get() {
                return this.x;
            },
            set: function set(value) {
                this.x = value;
            }
        },
        {
            key: "height",
            get: function get() {
                return this.y;
            },
            set: function set(value) {
                this.y = value;
            }
        },
        {
            key: "set",
            value: function set(x, y) {
                this.x = x;
                this.y = y;
                return this;
            }
        },
        {
            key: "setScalar",
            value: function setScalar(scalar) {
                this.x = scalar;
                this.y = scalar;
                return this;
            }
        },
        {
            key: "setX",
            value: function setX(x) {
                this.x = x;
                return this;
            }
        },
        {
            key: "setY",
            value: function setY(y) {
                this.y = y;
                return this;
            }
        },
        {
            key: "setComponent",
            value: function setComponent(index, value) {
                switch(index){
                    case 0:
                        this.x = value;
                        break;
                    case 1:
                        this.y = value;
                        break;
                    default:
                        throw new Error("index is out of range: " + index);
                }
                return this;
            }
        },
        {
            key: "getComponent",
            value: function getComponent(index) {
                switch(index){
                    case 0:
                        return this.x;
                    case 1:
                        return this.y;
                    default:
                        throw new Error("index is out of range: " + index);
                }
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor(this.x, this.y);
            }
        },
        {
            key: "copy",
            value: function copy(v) {
                this.x = v.x;
                this.y = v.y;
                return this;
            }
        },
        {
            key: "add",
            value: function add(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
                    return this.addVectors(v, w);
                }
                this.x += v.x;
                this.y += v.y;
                return this;
            }
        },
        {
            key: "addScalar",
            value: function addScalar(s) {
                this.x += s;
                this.y += s;
                return this;
            }
        },
        {
            key: "addVectors",
            value: function addVectors(a, b) {
                this.x = a.x + b.x;
                this.y = a.y + b.y;
                return this;
            }
        },
        {
            key: "addScaledVector",
            value: function addScaledVector(v, s) {
                this.x += v.x * s;
                this.y += v.y * s;
                return this;
            }
        },
        {
            key: "sub",
            value: function sub(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
                    return this.subVectors(v, w);
                }
                this.x -= v.x;
                this.y -= v.y;
                return this;
            }
        },
        {
            key: "subScalar",
            value: function subScalar(s) {
                this.x -= s;
                this.y -= s;
                return this;
            }
        },
        {
            key: "subVectors",
            value: function subVectors(a, b) {
                this.x = a.x - b.x;
                this.y = a.y - b.y;
                return this;
            }
        },
        {
            key: "multiply",
            value: function multiply(v) {
                this.x *= v.x;
                this.y *= v.y;
                return this;
            }
        },
        {
            key: "multiplyScalar",
            value: function multiplyScalar(scalar) {
                this.x *= scalar;
                this.y *= scalar;
                return this;
            }
        },
        {
            key: "divide",
            value: function divide(v) {
                this.x /= v.x;
                this.y /= v.y;
                return this;
            }
        },
        {
            key: "divideScalar",
            value: function divideScalar(scalar) {
                return this.multiplyScalar(1 / scalar);
            }
        },
        {
            key: "applyMatrix3",
            value: function applyMatrix3(m) {
                var x = this.x, y = this.y;
                var e = m.elements;
                this.x = e[0] * x + e[3] * y + e[6];
                this.y = e[1] * x + e[4] * y + e[7];
                return this;
            }
        },
        {
            key: "min",
            value: function min(v) {
                this.x = Math.min(this.x, v.x);
                this.y = Math.min(this.y, v.y);
                return this;
            }
        },
        {
            key: "max",
            value: function max(v) {
                this.x = Math.max(this.x, v.x);
                this.y = Math.max(this.y, v.y);
                return this;
            }
        },
        {
            key: "clamp",
            value: function clamp(min, max) {
                // assumes min < max, componentwise
                this.x = Math.max(min.x, Math.min(max.x, this.x));
                this.y = Math.max(min.y, Math.min(max.y, this.y));
                return this;
            }
        },
        {
            key: "clampScalar",
            value: function clampScalar(minVal, maxVal) {
                this.x = Math.max(minVal, Math.min(maxVal, this.x));
                this.y = Math.max(minVal, Math.min(maxVal, this.y));
                return this;
            }
        },
        {
            key: "clampLength",
            value: function clampLength(min, max) {
                var length = this.length();
                return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
            }
        },
        {
            key: "floor",
            value: function floor() {
                this.x = Math.floor(this.x);
                this.y = Math.floor(this.y);
                return this;
            }
        },
        {
            key: "ceil",
            value: function ceil() {
                this.x = Math.ceil(this.x);
                this.y = Math.ceil(this.y);
                return this;
            }
        },
        {
            key: "round",
            value: function round() {
                this.x = Math.round(this.x);
                this.y = Math.round(this.y);
                return this;
            }
        },
        {
            key: "roundToZero",
            value: function roundToZero() {
                this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
                return this;
            }
        },
        {
            key: "negate",
            value: function negate() {
                this.x = -this.x;
                this.y = -this.y;
                return this;
            }
        },
        {
            key: "dot",
            value: function dot(v) {
                return this.x * v.x + this.y * v.y;
            }
        },
        {
            key: "cross",
            value: function cross(v) {
                return this.x * v.y - this.y * v.x;
            }
        },
        {
            key: "lengthSq",
            value: function lengthSq() {
                return this.x * this.x + this.y * this.y;
            }
        },
        {
            key: "length",
            value: function length() {
                return Math.sqrt(this.x * this.x + this.y * this.y);
            }
        },
        {
            key: "manhattanLength",
            value: function manhattanLength() {
                return Math.abs(this.x) + Math.abs(this.y);
            }
        },
        {
            key: "normalize",
            value: function normalize() {
                return this.divideScalar(this.length() || 1);
            }
        },
        {
            key: "angle",
            value: function angle() {
                // computes the angle in radians with respect to the positive x-axis
                var angle = Math.atan2(-this.y, -this.x) + Math.PI;
                return angle;
            }
        },
        {
            key: "distanceTo",
            value: function distanceTo(v) {
                return Math.sqrt(this.distanceToSquared(v));
            }
        },
        {
            key: "distanceToSquared",
            value: function distanceToSquared(v) {
                var dx = this.x - v.x, dy = this.y - v.y;
                return dx * dx + dy * dy;
            }
        },
        {
            key: "manhattanDistanceTo",
            value: function manhattanDistanceTo(v) {
                return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
            }
        },
        {
            key: "setLength",
            value: function setLength(length) {
                return this.normalize().multiplyScalar(length);
            }
        },
        {
            key: "lerp",
            value: function lerp(v, alpha) {
                this.x += (v.x - this.x) * alpha;
                this.y += (v.y - this.y) * alpha;
                return this;
            }
        },
        {
            key: "lerpVectors",
            value: function lerpVectors(v1, v2, alpha) {
                this.x = v1.x + (v2.x - v1.x) * alpha;
                this.y = v1.y + (v2.y - v1.y) * alpha;
                return this;
            }
        },
        {
            key: "equals",
            value: function equals(v) {
                return v.x === this.x && v.y === this.y;
            }
        },
        {
            key: "fromArray",
            value: function fromArray(array) {
                var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                this.x = array[offset];
                this.y = array[offset + 1];
                return this;
            }
        },
        {
            key: "toArray",
            value: function toArray() {
                var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                array[offset] = this.x;
                array[offset + 1] = this.y;
                return array;
            }
        },
        {
            key: "fromBufferAttribute",
            value: function fromBufferAttribute(attribute, index, offset) {
                if (offset !== undefined) console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");
                this.x = attribute.getX(index);
                this.y = attribute.getY(index);
                return this;
            }
        },
        {
            key: "rotateAround",
            value: function rotateAround(center, angle) {
                var c = Math.cos(angle), s = Math.sin(angle);
                var x = this.x - center.x;
                var y = this.y - center.y;
                this.x = x * c - y * s + center.x;
                this.y = x * s + y * c + center.y;
                return this;
            }
        },
        {
            key: "random",
            value: function random() {
                this.x = Math.random();
                this.y = Math.random();
                return this;
            }
        },
        {
            key: Symbol.iterator,
            value: function value() {
                return (0, $672mD.__generator)(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                this.x
                            ];
                        case 1:
                            _state.sent();
                            return [
                                4,
                                this.y
                            ];
                        case 2:
                            _state.sent();
                            return [
                                2
                            ];
                    }
                });
            }
        }
    ]);
    return Vector2;
}();
$b383cde4e0574ff6$export$c977b3e384af9ae1.prototype.isVector2 = true;
var $b383cde4e0574ff6$export$8ff26dafa08918 = /*#__PURE__*/ function() {
    "use strict";
    function Matrix3() {
        (0, $dnGTK.default)(this, Matrix3);
        this.elements = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ];
        if (arguments.length > 0) console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
    }
    (0, $9SLyD.default)(Matrix3, [
        {
            key: "set",
            value: function set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
                var te = this.elements;
                te[0] = n11;
                te[1] = n21;
                te[2] = n31;
                te[3] = n12;
                te[4] = n22;
                te[5] = n32;
                te[6] = n13;
                te[7] = n23;
                te[8] = n33;
                return this;
            }
        },
        {
            key: "identity",
            value: function identity() {
                this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
                return this;
            }
        },
        {
            key: "copy",
            value: function copy(m) {
                var te = this.elements;
                var me = m.elements;
                te[0] = me[0];
                te[1] = me[1];
                te[2] = me[2];
                te[3] = me[3];
                te[4] = me[4];
                te[5] = me[5];
                te[6] = me[6];
                te[7] = me[7];
                te[8] = me[8];
                return this;
            }
        },
        {
            key: "extractBasis",
            value: function extractBasis(xAxis, yAxis, zAxis) {
                xAxis.setFromMatrix3Column(this, 0);
                yAxis.setFromMatrix3Column(this, 1);
                zAxis.setFromMatrix3Column(this, 2);
                return this;
            }
        },
        {
            key: "setFromMatrix4",
            value: function setFromMatrix4(m) {
                var me = m.elements;
                this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
                return this;
            }
        },
        {
            key: "multiply",
            value: function multiply(m) {
                return this.multiplyMatrices(this, m);
            }
        },
        {
            key: "premultiply",
            value: function premultiply(m) {
                return this.multiplyMatrices(m, this);
            }
        },
        {
            key: "multiplyMatrices",
            value: function multiplyMatrices(a, b) {
                var ae = a.elements;
                var be = b.elements;
                var te = this.elements;
                var a11 = ae[0], a12 = ae[3], a13 = ae[6];
                var a21 = ae[1], a22 = ae[4], a23 = ae[7];
                var a31 = ae[2], a32 = ae[5], a33 = ae[8];
                var b11 = be[0], b12 = be[3], b13 = be[6];
                var b21 = be[1], b22 = be[4], b23 = be[7];
                var b31 = be[2], b32 = be[5], b33 = be[8];
                te[0] = a11 * b11 + a12 * b21 + a13 * b31;
                te[3] = a11 * b12 + a12 * b22 + a13 * b32;
                te[6] = a11 * b13 + a12 * b23 + a13 * b33;
                te[1] = a21 * b11 + a22 * b21 + a23 * b31;
                te[4] = a21 * b12 + a22 * b22 + a23 * b32;
                te[7] = a21 * b13 + a22 * b23 + a23 * b33;
                te[2] = a31 * b11 + a32 * b21 + a33 * b31;
                te[5] = a31 * b12 + a32 * b22 + a33 * b32;
                te[8] = a31 * b13 + a32 * b23 + a33 * b33;
                return this;
            }
        },
        {
            key: "multiplyScalar",
            value: function multiplyScalar(s) {
                var te = this.elements;
                te[0] *= s;
                te[3] *= s;
                te[6] *= s;
                te[1] *= s;
                te[4] *= s;
                te[7] *= s;
                te[2] *= s;
                te[5] *= s;
                te[8] *= s;
                return this;
            }
        },
        {
            key: "determinant",
            value: function determinant() {
                var te = this.elements;
                var a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
                return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
            }
        },
        {
            key: "invert",
            value: function invert() {
                var te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
                if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
                var detInv = 1 / det;
                te[0] = t11 * detInv;
                te[1] = (n31 * n23 - n33 * n21) * detInv;
                te[2] = (n32 * n21 - n31 * n22) * detInv;
                te[3] = t12 * detInv;
                te[4] = (n33 * n11 - n31 * n13) * detInv;
                te[5] = (n31 * n12 - n32 * n11) * detInv;
                te[6] = t13 * detInv;
                te[7] = (n21 * n13 - n23 * n11) * detInv;
                te[8] = (n22 * n11 - n21 * n12) * detInv;
                return this;
            }
        },
        {
            key: "transpose",
            value: function transpose() {
                var tmp;
                var m = this.elements;
                tmp = m[1];
                m[1] = m[3];
                m[3] = tmp;
                tmp = m[2];
                m[2] = m[6];
                m[6] = tmp;
                tmp = m[5];
                m[5] = m[7];
                m[7] = tmp;
                return this;
            }
        },
        {
            key: "getNormalMatrix",
            value: function getNormalMatrix(matrix4) {
                return this.setFromMatrix4(matrix4).invert().transpose();
            }
        },
        {
            key: "transposeIntoArray",
            value: function transposeIntoArray(r) {
                var m = this.elements;
                r[0] = m[0];
                r[1] = m[3];
                r[2] = m[6];
                r[3] = m[1];
                r[4] = m[4];
                r[5] = m[7];
                r[6] = m[2];
                r[7] = m[5];
                r[8] = m[8];
                return this;
            }
        },
        {
            key: "setUvTransform",
            value: function setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
                var c = Math.cos(rotation);
                var s = Math.sin(rotation);
                this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);
                return this;
            }
        },
        {
            key: "scale",
            value: function scale(sx, sy) {
                var te = this.elements;
                te[0] *= sx;
                te[3] *= sx;
                te[6] *= sx;
                te[1] *= sy;
                te[4] *= sy;
                te[7] *= sy;
                return this;
            }
        },
        {
            key: "rotate",
            value: function rotate(theta) {
                var c = Math.cos(theta);
                var s = Math.sin(theta);
                var te = this.elements;
                var a11 = te[0], a12 = te[3], a13 = te[6];
                var a21 = te[1], a22 = te[4], a23 = te[7];
                te[0] = c * a11 + s * a21;
                te[3] = c * a12 + s * a22;
                te[6] = c * a13 + s * a23;
                te[1] = -s * a11 + c * a21;
                te[4] = -s * a12 + c * a22;
                te[7] = -s * a13 + c * a23;
                return this;
            }
        },
        {
            key: "translate",
            value: function translate(tx, ty) {
                var te = this.elements;
                te[0] += tx * te[2];
                te[3] += tx * te[5];
                te[6] += tx * te[8];
                te[1] += ty * te[2];
                te[4] += ty * te[5];
                te[7] += ty * te[8];
                return this;
            }
        },
        {
            key: "equals",
            value: function equals(matrix) {
                var te = this.elements;
                var me = matrix.elements;
                for(var i = 0; i < 9; i++){
                    if (te[i] !== me[i]) return false;
                }
                return true;
            }
        },
        {
            key: "fromArray",
            value: function fromArray(array) {
                var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                for(var i = 0; i < 9; i++)this.elements[i] = array[i + offset];
                return this;
            }
        },
        {
            key: "toArray",
            value: function toArray() {
                var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                var te = this.elements;
                array[offset] = te[0];
                array[offset + 1] = te[1];
                array[offset + 2] = te[2];
                array[offset + 3] = te[3];
                array[offset + 4] = te[4];
                array[offset + 5] = te[5];
                array[offset + 6] = te[6];
                array[offset + 7] = te[7];
                array[offset + 8] = te[8];
                return array;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().fromArray(this.elements);
            }
        }
    ]);
    return Matrix3;
}();
$b383cde4e0574ff6$export$8ff26dafa08918.prototype.isMatrix3 = true;
function $b383cde4e0574ff6$var$arrayMax(array) {
    if (array.length === 0) return -Infinity;
    var max = array[0];
    for(var i = 1, l = array.length; i < l; ++i)if (array[i] > max) max = array[i];
    return max;
}
var $b383cde4e0574ff6$var$TYPED_ARRAYS = {
    Int8Array: Int8Array,
    Uint8Array: Uint8Array,
    Uint8ClampedArray: Uint8ClampedArray,
    Int16Array: Int16Array,
    Uint16Array: Uint16Array,
    Int32Array: Int32Array,
    Uint32Array: Uint32Array,
    Float32Array: Float32Array,
    Float64Array: Float64Array
};
function $b383cde4e0574ff6$var$getTypedArray(type, buffer) {
    return new $b383cde4e0574ff6$var$TYPED_ARRAYS[type](buffer);
}
function $b383cde4e0574ff6$var$createElementNS(name) {
    return document.createElementNS("http://www.w3.org/1999/xhtml", name);
}
/**
  * cyrb53 hash for string from: https://stackoverflow.com/a/52171480
  *
  * Public Domain, @bryc - https://stackoverflow.com/users/815680/bryc
  *
  * It is roughly similar to the well-known MurmurHash/xxHash algorithms. It uses a combination
  * of multiplication and Xorshift to generate the hash, but not as thorough. As a result it's
  * faster than either would be in JavaScript and significantly simpler to implement. Keep in
  * mind this is not a secure algorithm, if privacy/security is a concern, this is not for you.
  *
  * @param {string} str
  * @param {number} seed, default 0
  * @returns number
  */ function $b383cde4e0574ff6$var$hashString(str) {
    var seed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;
    for(var i = 0, ch; i < str.length; i++){
        ch = str.charCodeAt(i);
        h1 = Math.imul(h1 ^ ch, 2654435761);
        h2 = Math.imul(h2 ^ ch, 1597334677);
    }
    h1 = Math.imul(h1 ^ h1 >>> 16, 2246822507) ^ Math.imul(h2 ^ h2 >>> 13, 3266489909);
    h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507) ^ Math.imul(h1 ^ h1 >>> 13, 3266489909);
    return 4294967296 * (2097151 & h2) + (h1 >>> 0);
}
var $b383cde4e0574ff6$var$_canvas;
var $b383cde4e0574ff6$export$698882cf06df44aa = /*#__PURE__*/ function() {
    "use strict";
    function ImageUtils() {
        (0, $dnGTK.default)(this, ImageUtils);
    }
    (0, $9SLyD.default)(ImageUtils, null, [
        {
            key: "getDataURL",
            value: function getDataURL(image) {
                if (/^data:/i.test(image.src)) return image.src;
                if (typeof HTMLCanvasElement == "undefined") return image.src;
                var canvas;
                if (image instanceof HTMLCanvasElement) canvas = image;
                else {
                    if ($b383cde4e0574ff6$var$_canvas === undefined) $b383cde4e0574ff6$var$_canvas = $b383cde4e0574ff6$var$createElementNS("canvas");
                    $b383cde4e0574ff6$var$_canvas.width = image.width;
                    $b383cde4e0574ff6$var$_canvas.height = image.height;
                    var context = $b383cde4e0574ff6$var$_canvas.getContext("2d");
                    if (image instanceof ImageData) context.putImageData(image, 0, 0);
                    else context.drawImage(image, 0, 0, image.width, image.height);
                    canvas = $b383cde4e0574ff6$var$_canvas;
                }
                if (canvas.width > 2048 || canvas.height > 2048) {
                    console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
                    return canvas.toDataURL("image/jpeg", 0.6);
                } else return canvas.toDataURL("image/png");
            }
        }
    ]);
    return ImageUtils;
}();
var $b383cde4e0574ff6$var$textureId = 0;
var $b383cde4e0574ff6$export$5431306cf43de24a = /*#__PURE__*/ function(EventDispatcher) {
    "use strict";
    (0, $gQI4D.default)(Texture, EventDispatcher);
    var _super = (0, $a0Xbx.default)(Texture);
    function Texture() {
        var image = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Texture.DEFAULT_IMAGE, mapping = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Texture.DEFAULT_MAPPING, wrapS = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : $b383cde4e0574ff6$export$9d9334239a5a5e06, wrapT = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : $b383cde4e0574ff6$export$9d9334239a5a5e06, magFilter = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : $b383cde4e0574ff6$export$8a72f490b25c56c8, minFilter = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : $b383cde4e0574ff6$export$5d8599b6a933fb1b, format = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : $b383cde4e0574ff6$export$3f8bb04b555a363c, type = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : $b383cde4e0574ff6$export$2e8ce08d3f6f5e10, anisotropy = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : 1, encoding = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : $b383cde4e0574ff6$export$7207336e4151a112;
        (0, $dnGTK.default)(this, Texture);
        var _this;
        _this = _super.call(this);
        Object.defineProperty((0, $4enQD.default)(_this), "id", {
            value: $b383cde4e0574ff6$var$textureId++
        });
        _this.uuid = $b383cde4e0574ff6$var$generateUUID();
        _this.name = "";
        _this.image = image;
        _this.mipmaps = [];
        _this.mapping = mapping;
        _this.wrapS = wrapS;
        _this.wrapT = wrapT;
        _this.magFilter = magFilter;
        _this.minFilter = minFilter;
        _this.anisotropy = anisotropy;
        _this.format = format;
        _this.internalFormat = null;
        _this.type = type;
        _this.offset = new $b383cde4e0574ff6$export$c977b3e384af9ae1(0, 0);
        _this.repeat = new $b383cde4e0574ff6$export$c977b3e384af9ae1(1, 1);
        _this.center = new $b383cde4e0574ff6$export$c977b3e384af9ae1(0, 0);
        _this.rotation = 0;
        _this.matrixAutoUpdate = true;
        _this.matrix = new $b383cde4e0574ff6$export$8ff26dafa08918();
        _this.generateMipmaps = true;
        _this.premultiplyAlpha = false;
        _this.flipY = true;
        _this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
        // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
        //
        // Also changing the encoding after already used by a Material will not automatically make the Material
        // update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
        _this.encoding = encoding;
        _this.userData = {};
        _this.version = 0;
        _this.onUpdate = null;
        _this.isRenderTargetTexture = false;
        return _this;
    }
    (0, $9SLyD.default)(Texture, [
        {
            key: "updateMatrix",
            value: function updateMatrix() {
                this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                this.name = source.name;
                this.image = source.image;
                this.mipmaps = source.mipmaps.slice(0);
                this.mapping = source.mapping;
                this.wrapS = source.wrapS;
                this.wrapT = source.wrapT;
                this.magFilter = source.magFilter;
                this.minFilter = source.minFilter;
                this.anisotropy = source.anisotropy;
                this.format = source.format;
                this.internalFormat = source.internalFormat;
                this.type = source.type;
                this.offset.copy(source.offset);
                this.repeat.copy(source.repeat);
                this.center.copy(source.center);
                this.rotation = source.rotation;
                this.matrixAutoUpdate = source.matrixAutoUpdate;
                this.matrix.copy(source.matrix);
                this.generateMipmaps = source.generateMipmaps;
                this.premultiplyAlpha = source.premultiplyAlpha;
                this.flipY = source.flipY;
                this.unpackAlignment = source.unpackAlignment;
                this.encoding = source.encoding;
                this.userData = JSON.parse(JSON.stringify(source.userData));
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON(meta) {
                var isRootObject = meta === undefined || typeof meta === "string";
                if (!isRootObject && meta.textures[this.uuid] !== undefined) return meta.textures[this.uuid];
                var output = {
                    metadata: {
                        version: 4.5,
                        type: "Texture",
                        generator: "Texture.toJSON"
                    },
                    uuid: this.uuid,
                    name: this.name,
                    mapping: this.mapping,
                    repeat: [
                        this.repeat.x,
                        this.repeat.y
                    ],
                    offset: [
                        this.offset.x,
                        this.offset.y
                    ],
                    center: [
                        this.center.x,
                        this.center.y
                    ],
                    rotation: this.rotation,
                    wrap: [
                        this.wrapS,
                        this.wrapT
                    ],
                    format: this.format,
                    type: this.type,
                    encoding: this.encoding,
                    minFilter: this.minFilter,
                    magFilter: this.magFilter,
                    anisotropy: this.anisotropy,
                    flipY: this.flipY,
                    premultiplyAlpha: this.premultiplyAlpha,
                    unpackAlignment: this.unpackAlignment
                };
                if (this.image !== undefined) {
                    // TODO: Move to THREE.Image
                    var image = this.image;
                    if (image.uuid === undefined) image.uuid = $b383cde4e0574ff6$var$generateUUID(); // UGH
                    if (!isRootObject && meta.images[image.uuid] === undefined) {
                        var url;
                        if (Array.isArray(image)) {
                            // process array of images e.g. CubeTexture
                            url = [];
                            for(var i = 0, l = image.length; i < l; i++)// check cube texture with data textures
                            if (image[i].isDataTexture) url.push($b383cde4e0574ff6$var$serializeImage(image[i].image));
                            else url.push($b383cde4e0574ff6$var$serializeImage(image[i]));
                        } else // process single image
                        url = $b383cde4e0574ff6$var$serializeImage(image);
                        meta.images[image.uuid] = {
                            uuid: image.uuid,
                            url: url
                        };
                    }
                    output.image = image.uuid;
                }
                if (JSON.stringify(this.userData) !== "{}") output.userData = this.userData;
                if (!isRootObject) meta.textures[this.uuid] = output;
                return output;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.dispatchEvent({
                    type: "dispose"
                });
            }
        },
        {
            key: "transformUv",
            value: function transformUv(uv) {
                if (this.mapping !== $b383cde4e0574ff6$export$1beec6768cbb3d2d) return uv;
                uv.applyMatrix3(this.matrix);
                if (uv.x < 0 || uv.x > 1) switch(this.wrapS){
                    case $b383cde4e0574ff6$export$533346c8e8dac0f5:
                        uv.x = uv.x - Math.floor(uv.x);
                        break;
                    case $b383cde4e0574ff6$export$9d9334239a5a5e06:
                        uv.x = uv.x < 0 ? 0 : 1;
                        break;
                    case $b383cde4e0574ff6$export$c7e7c00b14f51a4f:
                        if (Math.abs(Math.floor(uv.x) % 2) === 1) uv.x = Math.ceil(uv.x) - uv.x;
                        else uv.x = uv.x - Math.floor(uv.x);
                        break;
                }
                if (uv.y < 0 || uv.y > 1) switch(this.wrapT){
                    case $b383cde4e0574ff6$export$533346c8e8dac0f5:
                        uv.y = uv.y - Math.floor(uv.y);
                        break;
                    case $b383cde4e0574ff6$export$9d9334239a5a5e06:
                        uv.y = uv.y < 0 ? 0 : 1;
                        break;
                    case $b383cde4e0574ff6$export$c7e7c00b14f51a4f:
                        if (Math.abs(Math.floor(uv.y) % 2) === 1) uv.y = Math.ceil(uv.y) - uv.y;
                        else uv.y = uv.y - Math.floor(uv.y);
                        break;
                }
                if (this.flipY) uv.y = 1 - uv.y;
                return uv;
            }
        },
        {
            key: "needsUpdate",
            set: function set(value) {
                if (value === true) this.version++;
            }
        }
    ]);
    return Texture;
}($b383cde4e0574ff6$export$ec8b666c5fe2c75a);
$b383cde4e0574ff6$export$5431306cf43de24a.DEFAULT_IMAGE = undefined;
$b383cde4e0574ff6$export$5431306cf43de24a.DEFAULT_MAPPING = $b383cde4e0574ff6$export$1beec6768cbb3d2d;
$b383cde4e0574ff6$export$5431306cf43de24a.prototype.isTexture = true;
function $b383cde4e0574ff6$var$serializeImage(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) // default images
    return $b383cde4e0574ff6$export$698882cf06df44aa.getDataURL(image);
    else {
        if (image.data) // images of DataTexture
        return {
            data: Array.prototype.slice.call(image.data),
            width: image.width,
            height: image.height,
            type: image.data.constructor.name
        };
        else {
            console.warn("THREE.Texture: Unable to serialize Texture.");
            return {};
        }
    }
}
var $b383cde4e0574ff6$export$fa7daccca11cdbe3 = /*#__PURE__*/ function() {
    "use strict";
    function Vector4() {
        var x = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, w = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
        (0, $dnGTK.default)(this, Vector4);
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    (0, $9SLyD.default)(Vector4, [
        {
            key: "width",
            get: function get() {
                return this.z;
            },
            set: function set(value) {
                this.z = value;
            }
        },
        {
            key: "height",
            get: function get() {
                return this.w;
            },
            set: function set(value) {
                this.w = value;
            }
        },
        {
            key: "set",
            value: function set(x, y, z, w) {
                this.x = x;
                this.y = y;
                this.z = z;
                this.w = w;
                return this;
            }
        },
        {
            key: "setScalar",
            value: function setScalar(scalar) {
                this.x = scalar;
                this.y = scalar;
                this.z = scalar;
                this.w = scalar;
                return this;
            }
        },
        {
            key: "setX",
            value: function setX(x) {
                this.x = x;
                return this;
            }
        },
        {
            key: "setY",
            value: function setY(y) {
                this.y = y;
                return this;
            }
        },
        {
            key: "setZ",
            value: function setZ(z) {
                this.z = z;
                return this;
            }
        },
        {
            key: "setW",
            value: function setW(w) {
                this.w = w;
                return this;
            }
        },
        {
            key: "setComponent",
            value: function setComponent(index, value) {
                switch(index){
                    case 0:
                        this.x = value;
                        break;
                    case 1:
                        this.y = value;
                        break;
                    case 2:
                        this.z = value;
                        break;
                    case 3:
                        this.w = value;
                        break;
                    default:
                        throw new Error("index is out of range: " + index);
                }
                return this;
            }
        },
        {
            key: "getComponent",
            value: function getComponent(index) {
                switch(index){
                    case 0:
                        return this.x;
                    case 1:
                        return this.y;
                    case 2:
                        return this.z;
                    case 3:
                        return this.w;
                    default:
                        throw new Error("index is out of range: " + index);
                }
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor(this.x, this.y, this.z, this.w);
            }
        },
        {
            key: "copy",
            value: function copy(v) {
                this.x = v.x;
                this.y = v.y;
                this.z = v.z;
                this.w = v.w !== undefined ? v.w : 1;
                return this;
            }
        },
        {
            key: "add",
            value: function add(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
                    return this.addVectors(v, w);
                }
                this.x += v.x;
                this.y += v.y;
                this.z += v.z;
                this.w += v.w;
                return this;
            }
        },
        {
            key: "addScalar",
            value: function addScalar(s) {
                this.x += s;
                this.y += s;
                this.z += s;
                this.w += s;
                return this;
            }
        },
        {
            key: "addVectors",
            value: function addVectors(a, b) {
                this.x = a.x + b.x;
                this.y = a.y + b.y;
                this.z = a.z + b.z;
                this.w = a.w + b.w;
                return this;
            }
        },
        {
            key: "addScaledVector",
            value: function addScaledVector(v, s) {
                this.x += v.x * s;
                this.y += v.y * s;
                this.z += v.z * s;
                this.w += v.w * s;
                return this;
            }
        },
        {
            key: "sub",
            value: function sub(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
                    return this.subVectors(v, w);
                }
                this.x -= v.x;
                this.y -= v.y;
                this.z -= v.z;
                this.w -= v.w;
                return this;
            }
        },
        {
            key: "subScalar",
            value: function subScalar(s) {
                this.x -= s;
                this.y -= s;
                this.z -= s;
                this.w -= s;
                return this;
            }
        },
        {
            key: "subVectors",
            value: function subVectors(a, b) {
                this.x = a.x - b.x;
                this.y = a.y - b.y;
                this.z = a.z - b.z;
                this.w = a.w - b.w;
                return this;
            }
        },
        {
            key: "multiply",
            value: function multiply(v) {
                this.x *= v.x;
                this.y *= v.y;
                this.z *= v.z;
                this.w *= v.w;
                return this;
            }
        },
        {
            key: "multiplyScalar",
            value: function multiplyScalar(scalar) {
                this.x *= scalar;
                this.y *= scalar;
                this.z *= scalar;
                this.w *= scalar;
                return this;
            }
        },
        {
            key: "applyMatrix4",
            value: function applyMatrix4(m) {
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var e = m.elements;
                this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
                this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
                this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
                this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
                return this;
            }
        },
        {
            key: "divideScalar",
            value: function divideScalar(scalar) {
                return this.multiplyScalar(1 / scalar);
            }
        },
        {
            key: "setAxisAngleFromQuaternion",
            value: function setAxisAngleFromQuaternion(q) {
                // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
                // q is assumed to be normalized
                this.w = 2 * Math.acos(q.w);
                var s = Math.sqrt(1 - q.w * q.w);
                if (s < 0.0001) {
                    this.x = 1;
                    this.y = 0;
                    this.z = 0;
                } else {
                    this.x = q.x / s;
                    this.y = q.y / s;
                    this.z = q.z / s;
                }
                return this;
            }
        },
        {
            key: "setAxisAngleFromRotationMatrix",
            value: function setAxisAngleFromRotationMatrix(m) {
                // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
                // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
                var angle, x, y, z; // variables for result
                var epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
                if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
                    // singularity found
                    // first check for identity matrix which must have +1 for all terms
                    // in leading diagonal and zero in other terms
                    if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
                        // this singularity is identity matrix so angle = 0
                        this.set(1, 0, 0, 0);
                        return this; // zero angle, arbitrary axis
                    }
                    // otherwise this singularity is angle = 180
                    angle = Math.PI;
                    var xx = (m11 + 1) / 2;
                    var yy = (m22 + 1) / 2;
                    var zz = (m33 + 1) / 2;
                    var xy = (m12 + m21) / 4;
                    var xz = (m13 + m31) / 4;
                    var yz = (m23 + m32) / 4;
                    if (xx > yy && xx > zz) {
                        // m11 is the largest diagonal term
                        if (xx < epsilon) {
                            x = 0;
                            y = 0.707106781;
                            z = 0.707106781;
                        } else {
                            x = Math.sqrt(xx);
                            y = xy / x;
                            z = xz / x;
                        }
                    } else if (yy > zz) {
                        // m22 is the largest diagonal term
                        if (yy < epsilon) {
                            x = 0.707106781;
                            y = 0;
                            z = 0.707106781;
                        } else {
                            y = Math.sqrt(yy);
                            x = xy / y;
                            z = yz / y;
                        }
                    } else // m33 is the largest diagonal term so base result on this
                    if (zz < epsilon) {
                        x = 0.707106781;
                        y = 0.707106781;
                        z = 0;
                    } else {
                        z = Math.sqrt(zz);
                        x = xz / z;
                        y = yz / z;
                    }
                    this.set(x, y, z, angle);
                    return this; // return 180 deg rotation
                }
                // as we have reached here there are no singularities so we can handle normally
                var s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize
                if (Math.abs(s) < 0.001) s = 1;
                // prevent divide by zero, should not happen if matrix is orthogonal and should be
                // caught by singularity test above, but I've left it in just in case
                this.x = (m32 - m23) / s;
                this.y = (m13 - m31) / s;
                this.z = (m21 - m12) / s;
                this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
                return this;
            }
        },
        {
            key: "min",
            value: function min(v) {
                this.x = Math.min(this.x, v.x);
                this.y = Math.min(this.y, v.y);
                this.z = Math.min(this.z, v.z);
                this.w = Math.min(this.w, v.w);
                return this;
            }
        },
        {
            key: "max",
            value: function max(v) {
                this.x = Math.max(this.x, v.x);
                this.y = Math.max(this.y, v.y);
                this.z = Math.max(this.z, v.z);
                this.w = Math.max(this.w, v.w);
                return this;
            }
        },
        {
            key: "clamp",
            value: function clamp(min, max) {
                // assumes min < max, componentwise
                this.x = Math.max(min.x, Math.min(max.x, this.x));
                this.y = Math.max(min.y, Math.min(max.y, this.y));
                this.z = Math.max(min.z, Math.min(max.z, this.z));
                this.w = Math.max(min.w, Math.min(max.w, this.w));
                return this;
            }
        },
        {
            key: "clampScalar",
            value: function clampScalar(minVal, maxVal) {
                this.x = Math.max(minVal, Math.min(maxVal, this.x));
                this.y = Math.max(minVal, Math.min(maxVal, this.y));
                this.z = Math.max(minVal, Math.min(maxVal, this.z));
                this.w = Math.max(minVal, Math.min(maxVal, this.w));
                return this;
            }
        },
        {
            key: "clampLength",
            value: function clampLength(min, max) {
                var length = this.length();
                return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
            }
        },
        {
            key: "floor",
            value: function floor() {
                this.x = Math.floor(this.x);
                this.y = Math.floor(this.y);
                this.z = Math.floor(this.z);
                this.w = Math.floor(this.w);
                return this;
            }
        },
        {
            key: "ceil",
            value: function ceil() {
                this.x = Math.ceil(this.x);
                this.y = Math.ceil(this.y);
                this.z = Math.ceil(this.z);
                this.w = Math.ceil(this.w);
                return this;
            }
        },
        {
            key: "round",
            value: function round() {
                this.x = Math.round(this.x);
                this.y = Math.round(this.y);
                this.z = Math.round(this.z);
                this.w = Math.round(this.w);
                return this;
            }
        },
        {
            key: "roundToZero",
            value: function roundToZero() {
                this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
                this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
                this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
                return this;
            }
        },
        {
            key: "negate",
            value: function negate() {
                this.x = -this.x;
                this.y = -this.y;
                this.z = -this.z;
                this.w = -this.w;
                return this;
            }
        },
        {
            key: "dot",
            value: function dot(v) {
                return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
            }
        },
        {
            key: "lengthSq",
            value: function lengthSq() {
                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
            }
        },
        {
            key: "length",
            value: function length() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
            }
        },
        {
            key: "manhattanLength",
            value: function manhattanLength() {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
            }
        },
        {
            key: "normalize",
            value: function normalize() {
                return this.divideScalar(this.length() || 1);
            }
        },
        {
            key: "setLength",
            value: function setLength(length) {
                return this.normalize().multiplyScalar(length);
            }
        },
        {
            key: "lerp",
            value: function lerp(v, alpha) {
                this.x += (v.x - this.x) * alpha;
                this.y += (v.y - this.y) * alpha;
                this.z += (v.z - this.z) * alpha;
                this.w += (v.w - this.w) * alpha;
                return this;
            }
        },
        {
            key: "lerpVectors",
            value: function lerpVectors(v1, v2, alpha) {
                this.x = v1.x + (v2.x - v1.x) * alpha;
                this.y = v1.y + (v2.y - v1.y) * alpha;
                this.z = v1.z + (v2.z - v1.z) * alpha;
                this.w = v1.w + (v2.w - v1.w) * alpha;
                return this;
            }
        },
        {
            key: "equals",
            value: function equals(v) {
                return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
            }
        },
        {
            key: "fromArray",
            value: function fromArray(array) {
                var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                this.x = array[offset];
                this.y = array[offset + 1];
                this.z = array[offset + 2];
                this.w = array[offset + 3];
                return this;
            }
        },
        {
            key: "toArray",
            value: function toArray() {
                var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                array[offset] = this.x;
                array[offset + 1] = this.y;
                array[offset + 2] = this.z;
                array[offset + 3] = this.w;
                return array;
            }
        },
        {
            key: "fromBufferAttribute",
            value: function fromBufferAttribute(attribute, index, offset) {
                if (offset !== undefined) console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");
                this.x = attribute.getX(index);
                this.y = attribute.getY(index);
                this.z = attribute.getZ(index);
                this.w = attribute.getW(index);
                return this;
            }
        },
        {
            key: "random",
            value: function random() {
                this.x = Math.random();
                this.y = Math.random();
                this.z = Math.random();
                this.w = Math.random();
                return this;
            }
        },
        {
            key: Symbol.iterator,
            value: function value() {
                return (0, $672mD.__generator)(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                this.x
                            ];
                        case 1:
                            _state.sent();
                            return [
                                4,
                                this.y
                            ];
                        case 2:
                            _state.sent();
                            return [
                                4,
                                this.z
                            ];
                        case 3:
                            _state.sent();
                            return [
                                4,
                                this.w
                            ];
                        case 4:
                            _state.sent();
                            return [
                                2
                            ];
                    }
                });
            }
        }
    ]);
    return Vector4;
}();
$b383cde4e0574ff6$export$fa7daccca11cdbe3.prototype.isVector4 = true;
/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/ var $b383cde4e0574ff6$export$3c052beb2e51e23f = /*#__PURE__*/ function(EventDispatcher) {
    "use strict";
    (0, $gQI4D.default)(WebGLRenderTarget, EventDispatcher);
    var _super = (0, $a0Xbx.default)(WebGLRenderTarget);
    function WebGLRenderTarget(width, height) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        (0, $dnGTK.default)(this, WebGLRenderTarget);
        var _this;
        _this = _super.call(this);
        _this.width = width;
        _this.height = height;
        _this.depth = 1;
        _this.scissor = new $b383cde4e0574ff6$export$fa7daccca11cdbe3(0, 0, width, height);
        _this.scissorTest = false;
        _this.viewport = new $b383cde4e0574ff6$export$fa7daccca11cdbe3(0, 0, width, height);
        _this.texture = new $b383cde4e0574ff6$export$5431306cf43de24a(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
        _this.texture.isRenderTargetTexture = true;
        _this.texture.image = {
            width: width,
            height: height,
            depth: 1
        };
        _this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
        _this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;
        _this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : $b383cde4e0574ff6$export$8a72f490b25c56c8;
        _this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
        _this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;
        _this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
        return _this;
    }
    (0, $9SLyD.default)(WebGLRenderTarget, [
        {
            key: "setTexture",
            value: function setTexture(texture) {
                texture.image = {
                    width: this.width,
                    height: this.height,
                    depth: this.depth
                };
                this.texture = texture;
            }
        },
        {
            key: "setSize",
            value: function setSize(width, height) {
                var depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
                if (this.width !== width || this.height !== height || this.depth !== depth) {
                    this.width = width;
                    this.height = height;
                    this.depth = depth;
                    this.texture.image.width = width;
                    this.texture.image.height = height;
                    this.texture.image.depth = depth;
                    this.dispose();
                }
                this.viewport.set(0, 0, width, height);
                this.scissor.set(0, 0, width, height);
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                this.width = source.width;
                this.height = source.height;
                this.depth = source.depth;
                this.viewport.copy(source.viewport);
                this.texture = source.texture.clone();
                this.texture.image = (0, $8lU41.default)({}, this.texture.image); // See #20328.
                this.depthBuffer = source.depthBuffer;
                this.stencilBuffer = source.stencilBuffer;
                this.depthTexture = source.depthTexture;
                return this;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.dispatchEvent({
                    type: "dispose"
                });
            }
        }
    ]);
    return WebGLRenderTarget;
}($b383cde4e0574ff6$export$ec8b666c5fe2c75a);
$b383cde4e0574ff6$export$3c052beb2e51e23f.prototype.isWebGLRenderTarget = true;
var $b383cde4e0574ff6$export$bd934554fb721730 = /*#__PURE__*/ function(WebGLRenderTarget) {
    "use strict";
    (0, $gQI4D.default)(WebGLMultipleRenderTargets, WebGLRenderTarget);
    var _super = (0, $a0Xbx.default)(WebGLMultipleRenderTargets);
    function WebGLMultipleRenderTargets(width, height, count) {
        (0, $dnGTK.default)(this, WebGLMultipleRenderTargets);
        var _this;
        _this = _super.call(this, width, height);
        var texture = _this.texture;
        _this.texture = [];
        for(var i = 0; i < count; i++)_this.texture[i] = texture.clone();
        return _this;
    }
    (0, $9SLyD.default)(WebGLMultipleRenderTargets, [
        {
            key: "setSize",
            value: function setSize(width, height) {
                var depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
                if (this.width !== width || this.height !== height || this.depth !== depth) {
                    this.width = width;
                    this.height = height;
                    this.depth = depth;
                    for(var i = 0, il = this.texture.length; i < il; i++){
                        this.texture[i].image.width = width;
                        this.texture[i].image.height = height;
                        this.texture[i].image.depth = depth;
                    }
                    this.dispose();
                }
                this.viewport.set(0, 0, width, height);
                this.scissor.set(0, 0, width, height);
                return this;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                this.dispose();
                this.width = source.width;
                this.height = source.height;
                this.depth = source.depth;
                this.viewport.set(0, 0, this.width, this.height);
                this.scissor.set(0, 0, this.width, this.height);
                this.depthBuffer = source.depthBuffer;
                this.stencilBuffer = source.stencilBuffer;
                this.depthTexture = source.depthTexture;
                this.texture.length = 0;
                for(var i = 0, il = source.texture.length; i < il; i++)this.texture[i] = source.texture[i].clone();
                return this;
            }
        }
    ]);
    return WebGLMultipleRenderTargets;
}($b383cde4e0574ff6$export$3c052beb2e51e23f);
$b383cde4e0574ff6$export$bd934554fb721730.prototype.isWebGLMultipleRenderTargets = true;
var $b383cde4e0574ff6$export$cb2022643d3c928d = /*#__PURE__*/ function(WebGLRenderTarget) {
    "use strict";
    (0, $gQI4D.default)(WebGLMultisampleRenderTarget, WebGLRenderTarget);
    var _super = (0, $a0Xbx.default)(WebGLMultisampleRenderTarget);
    function WebGLMultisampleRenderTarget(width, height, options) {
        (0, $dnGTK.default)(this, WebGLMultisampleRenderTarget);
        var _this;
        _this = _super.call(this, width, height, options);
        _this.samples = 4;
        return _this;
    }
    (0, $9SLyD.default)(WebGLMultisampleRenderTarget, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(WebGLMultisampleRenderTarget.prototype), "copy", this).call(this, source);
                this.samples = source.samples;
                return this;
            }
        }
    ]);
    return WebGLMultisampleRenderTarget;
}($b383cde4e0574ff6$export$3c052beb2e51e23f);
$b383cde4e0574ff6$export$cb2022643d3c928d.prototype.isWebGLMultisampleRenderTarget = true;
var $b383cde4e0574ff6$export$23d6a54f0bbc85a3 = /*#__PURE__*/ function() {
    "use strict";
    function Quaternion() {
        var x = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, w = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
        (0, $dnGTK.default)(this, Quaternion);
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
    }
    (0, $9SLyD.default)(Quaternion, [
        {
            key: "x",
            get: function get() {
                return this._x;
            },
            set: function set(value) {
                this._x = value;
                this._onChangeCallback();
            }
        },
        {
            key: "y",
            get: function get() {
                return this._y;
            },
            set: function set(value) {
                this._y = value;
                this._onChangeCallback();
            }
        },
        {
            key: "z",
            get: function get() {
                return this._z;
            },
            set: function set(value) {
                this._z = value;
                this._onChangeCallback();
            }
        },
        {
            key: "w",
            get: function get() {
                return this._w;
            },
            set: function set(value) {
                this._w = value;
                this._onChangeCallback();
            }
        },
        {
            key: "set",
            value: function set(x, y, z, w) {
                this._x = x;
                this._y = y;
                this._z = z;
                this._w = w;
                this._onChangeCallback();
                return this;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor(this._x, this._y, this._z, this._w);
            }
        },
        {
            key: "copy",
            value: function copy(quaternion) {
                this._x = quaternion.x;
                this._y = quaternion.y;
                this._z = quaternion.z;
                this._w = quaternion.w;
                this._onChangeCallback();
                return this;
            }
        },
        {
            key: "setFromEuler",
            value: function setFromEuler(euler, update) {
                if (!(euler && euler.isEuler)) throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
                var x = euler._x, y = euler._y, z = euler._z, order = euler._order;
                // http://www.mathworks.com/matlabcentral/fileexchange/
                // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
                //	content/SpinCalc.m
                var cos = Math.cos;
                var sin = Math.sin;
                var c1 = cos(x / 2);
                var c2 = cos(y / 2);
                var c3 = cos(z / 2);
                var s1 = sin(x / 2);
                var s2 = sin(y / 2);
                var s3 = sin(z / 2);
                switch(order){
                    case "XYZ":
                        this._x = s1 * c2 * c3 + c1 * s2 * s3;
                        this._y = c1 * s2 * c3 - s1 * c2 * s3;
                        this._z = c1 * c2 * s3 + s1 * s2 * c3;
                        this._w = c1 * c2 * c3 - s1 * s2 * s3;
                        break;
                    case "YXZ":
                        this._x = s1 * c2 * c3 + c1 * s2 * s3;
                        this._y = c1 * s2 * c3 - s1 * c2 * s3;
                        this._z = c1 * c2 * s3 - s1 * s2 * c3;
                        this._w = c1 * c2 * c3 + s1 * s2 * s3;
                        break;
                    case "ZXY":
                        this._x = s1 * c2 * c3 - c1 * s2 * s3;
                        this._y = c1 * s2 * c3 + s1 * c2 * s3;
                        this._z = c1 * c2 * s3 + s1 * s2 * c3;
                        this._w = c1 * c2 * c3 - s1 * s2 * s3;
                        break;
                    case "ZYX":
                        this._x = s1 * c2 * c3 - c1 * s2 * s3;
                        this._y = c1 * s2 * c3 + s1 * c2 * s3;
                        this._z = c1 * c2 * s3 - s1 * s2 * c3;
                        this._w = c1 * c2 * c3 + s1 * s2 * s3;
                        break;
                    case "YZX":
                        this._x = s1 * c2 * c3 + c1 * s2 * s3;
                        this._y = c1 * s2 * c3 + s1 * c2 * s3;
                        this._z = c1 * c2 * s3 - s1 * s2 * c3;
                        this._w = c1 * c2 * c3 - s1 * s2 * s3;
                        break;
                    case "XZY":
                        this._x = s1 * c2 * c3 - c1 * s2 * s3;
                        this._y = c1 * s2 * c3 - s1 * c2 * s3;
                        this._z = c1 * c2 * s3 + s1 * s2 * c3;
                        this._w = c1 * c2 * c3 + s1 * s2 * s3;
                        break;
                    default:
                        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
                }
                if (update !== false) this._onChangeCallback();
                return this;
            }
        },
        {
            key: "setFromAxisAngle",
            value: function setFromAxisAngle(axis, angle) {
                // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
                // assumes axis is normalized
                var halfAngle = angle / 2, s = Math.sin(halfAngle);
                this._x = axis.x * s;
                this._y = axis.y * s;
                this._z = axis.z * s;
                this._w = Math.cos(halfAngle);
                this._onChangeCallback();
                return this;
            }
        },
        {
            key: "setFromRotationMatrix",
            value: function setFromRotationMatrix(m) {
                // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
                // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
                var te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
                if (trace > 0) {
                    var s = 0.5 / Math.sqrt(trace + 1.0);
                    this._w = 0.25 / s;
                    this._x = (m32 - m23) * s;
                    this._y = (m13 - m31) * s;
                    this._z = (m21 - m12) * s;
                } else if (m11 > m22 && m11 > m33) {
                    var s1 = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
                    this._w = (m32 - m23) / s1;
                    this._x = 0.25 * s1;
                    this._y = (m12 + m21) / s1;
                    this._z = (m13 + m31) / s1;
                } else if (m22 > m33) {
                    var s2 = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
                    this._w = (m13 - m31) / s2;
                    this._x = (m12 + m21) / s2;
                    this._y = 0.25 * s2;
                    this._z = (m23 + m32) / s2;
                } else {
                    var s3 = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
                    this._w = (m21 - m12) / s3;
                    this._x = (m13 + m31) / s3;
                    this._y = (m23 + m32) / s3;
                    this._z = 0.25 * s3;
                }
                this._onChangeCallback();
                return this;
            }
        },
        {
            key: "setFromUnitVectors",
            value: function setFromUnitVectors(vFrom, vTo) {
                // assumes direction vectors vFrom and vTo are normalized
                var r = vFrom.dot(vTo) + 1;
                if (r < Number.EPSILON) {
                    // vFrom and vTo point in opposite directions
                    r = 0;
                    if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
                        this._x = -vFrom.y;
                        this._y = vFrom.x;
                        this._z = 0;
                        this._w = r;
                    } else {
                        this._x = 0;
                        this._y = -vFrom.z;
                        this._z = vFrom.y;
                        this._w = r;
                    }
                } else {
                    // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
                    this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
                    this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
                    this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
                    this._w = r;
                }
                return this.normalize();
            }
        },
        {
            key: "angleTo",
            value: function angleTo(q) {
                return 2 * Math.acos(Math.abs($b383cde4e0574ff6$var$clamp(this.dot(q), -1, 1)));
            }
        },
        {
            key: "rotateTowards",
            value: function rotateTowards(q, step) {
                var angle = this.angleTo(q);
                if (angle === 0) return this;
                var t = Math.min(1, step / angle);
                this.slerp(q, t);
                return this;
            }
        },
        {
            key: "identity",
            value: function identity() {
                return this.set(0, 0, 0, 1);
            }
        },
        {
            key: "invert",
            value: function invert() {
                // quaternion is assumed to have unit length
                return this.conjugate();
            }
        },
        {
            key: "conjugate",
            value: function conjugate() {
                this._x *= -1;
                this._y *= -1;
                this._z *= -1;
                this._onChangeCallback();
                return this;
            }
        },
        {
            key: "dot",
            value: function dot(v) {
                return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
            }
        },
        {
            key: "lengthSq",
            value: function lengthSq() {
                return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
            }
        },
        {
            key: "length",
            value: function length() {
                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
            }
        },
        {
            key: "normalize",
            value: function normalize() {
                var l = this.length();
                if (l === 0) {
                    this._x = 0;
                    this._y = 0;
                    this._z = 0;
                    this._w = 1;
                } else {
                    l = 1 / l;
                    this._x = this._x * l;
                    this._y = this._y * l;
                    this._z = this._z * l;
                    this._w = this._w * l;
                }
                this._onChangeCallback();
                return this;
            }
        },
        {
            key: "multiply",
            value: function multiply(q, p) {
                if (p !== undefined) {
                    console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.");
                    return this.multiplyQuaternions(q, p);
                }
                return this.multiplyQuaternions(this, q);
            }
        },
        {
            key: "premultiply",
            value: function premultiply(q) {
                return this.multiplyQuaternions(q, this);
            }
        },
        {
            key: "multiplyQuaternions",
            value: function multiplyQuaternions(a, b) {
                // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
                var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
                var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
                this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
                this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
                this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
                this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
                this._onChangeCallback();
                return this;
            }
        },
        {
            key: "slerp",
            value: function slerp(qb, t) {
                if (t === 0) return this;
                if (t === 1) return this.copy(qb);
                var x = this._x, y = this._y, z = this._z, w = this._w;
                // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
                var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
                if (cosHalfTheta < 0) {
                    this._w = -qb._w;
                    this._x = -qb._x;
                    this._y = -qb._y;
                    this._z = -qb._z;
                    cosHalfTheta = -cosHalfTheta;
                } else this.copy(qb);
                if (cosHalfTheta >= 1.0) {
                    this._w = w;
                    this._x = x;
                    this._y = y;
                    this._z = z;
                    return this;
                }
                var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;
                if (sqrSinHalfTheta <= Number.EPSILON) {
                    var s = 1 - t;
                    this._w = s * w + t * this._w;
                    this._x = s * x + t * this._x;
                    this._y = s * y + t * this._y;
                    this._z = s * z + t * this._z;
                    this.normalize();
                    this._onChangeCallback();
                    return this;
                }
                var sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
                var halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
                var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
                this._w = w * ratioA + this._w * ratioB;
                this._x = x * ratioA + this._x * ratioB;
                this._y = y * ratioA + this._y * ratioB;
                this._z = z * ratioA + this._z * ratioB;
                this._onChangeCallback();
                return this;
            }
        },
        {
            key: "slerpQuaternions",
            value: function slerpQuaternions(qa, qb, t) {
                this.copy(qa).slerp(qb, t);
            }
        },
        {
            key: "random",
            value: function random() {
                // Derived from http://planning.cs.uiuc.edu/node198.html
                // Note, this source uses w, x, y, z ordering,
                // so we swap the order below.
                var u1 = Math.random();
                var sqrt1u1 = Math.sqrt(1 - u1);
                var sqrtu1 = Math.sqrt(u1);
                var u2 = 2 * Math.PI * Math.random();
                var u3 = 2 * Math.PI * Math.random();
                return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));
            }
        },
        {
            key: "equals",
            value: function equals(quaternion) {
                return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
            }
        },
        {
            key: "fromArray",
            value: function fromArray(array) {
                var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                this._x = array[offset];
                this._y = array[offset + 1];
                this._z = array[offset + 2];
                this._w = array[offset + 3];
                this._onChangeCallback();
                return this;
            }
        },
        {
            key: "toArray",
            value: function toArray() {
                var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                array[offset] = this._x;
                array[offset + 1] = this._y;
                array[offset + 2] = this._z;
                array[offset + 3] = this._w;
                return array;
            }
        },
        {
            key: "fromBufferAttribute",
            value: function fromBufferAttribute(attribute, index) {
                this._x = attribute.getX(index);
                this._y = attribute.getY(index);
                this._z = attribute.getZ(index);
                this._w = attribute.getW(index);
                return this;
            }
        },
        {
            key: "_onChange",
            value: function _onChange(callback) {
                this._onChangeCallback = callback;
                return this;
            }
        },
        {
            key: "_onChangeCallback",
            value: function _onChangeCallback() {}
        }
    ], [
        {
            key: "slerp",
            value: function slerp(qa, qb, qm, t) {
                console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.");
                return qm.slerpQuaternions(qa, qb, t);
            }
        },
        {
            key: "slerpFlat",
            value: function slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
                // fuzz-free, array-based Quaternion SLERP operation
                var x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
                var x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
                if (t === 0) {
                    dst[dstOffset + 0] = x0;
                    dst[dstOffset + 1] = y0;
                    dst[dstOffset + 2] = z0;
                    dst[dstOffset + 3] = w0;
                    return;
                }
                if (t === 1) {
                    dst[dstOffset + 0] = x1;
                    dst[dstOffset + 1] = y1;
                    dst[dstOffset + 2] = z1;
                    dst[dstOffset + 3] = w1;
                    return;
                }
                if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
                    var s = 1 - t;
                    var cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
                    // Skip the Slerp for tiny steps to avoid numeric problems:
                    if (sqrSin > Number.EPSILON) {
                        var sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
                        s = Math.sin(s * len) / sin;
                        t = Math.sin(t * len) / sin;
                    }
                    var tDir = t * dir;
                    x0 = x0 * s + x1 * tDir;
                    y0 = y0 * s + y1 * tDir;
                    z0 = z0 * s + z1 * tDir;
                    w0 = w0 * s + w1 * tDir;
                    // Normalize in case we just did a lerp:
                    if (s === 1 - t) {
                        var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
                        x0 *= f;
                        y0 *= f;
                        z0 *= f;
                        w0 *= f;
                    }
                }
                dst[dstOffset] = x0;
                dst[dstOffset + 1] = y0;
                dst[dstOffset + 2] = z0;
                dst[dstOffset + 3] = w0;
            }
        },
        {
            key: "multiplyQuaternionsFlat",
            value: function multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
                var x0 = src0[srcOffset0];
                var y0 = src0[srcOffset0 + 1];
                var z0 = src0[srcOffset0 + 2];
                var w0 = src0[srcOffset0 + 3];
                var x1 = src1[srcOffset1];
                var y1 = src1[srcOffset1 + 1];
                var z1 = src1[srcOffset1 + 2];
                var w1 = src1[srcOffset1 + 3];
                dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
                dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
                dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
                dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
                return dst;
            }
        }
    ]);
    return Quaternion;
}();
$b383cde4e0574ff6$export$23d6a54f0bbc85a3.prototype.isQuaternion = true;
var $b383cde4e0574ff6$export$64b5c384219d3699 = /*#__PURE__*/ function() {
    "use strict";
    function Vector3() {
        var x = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
        (0, $dnGTK.default)(this, Vector3);
        this.x = x;
        this.y = y;
        this.z = z;
    }
    (0, $9SLyD.default)(Vector3, [
        {
            key: "set",
            value: function set(x, y, z) {
                if (z === undefined) z = this.z; // sprite.scale.set(x,y)
                this.x = x;
                this.y = y;
                this.z = z;
                return this;
            }
        },
        {
            key: "setScalar",
            value: function setScalar(scalar) {
                this.x = scalar;
                this.y = scalar;
                this.z = scalar;
                return this;
            }
        },
        {
            key: "setX",
            value: function setX(x) {
                this.x = x;
                return this;
            }
        },
        {
            key: "setY",
            value: function setY(y) {
                this.y = y;
                return this;
            }
        },
        {
            key: "setZ",
            value: function setZ(z) {
                this.z = z;
                return this;
            }
        },
        {
            key: "setComponent",
            value: function setComponent(index, value) {
                switch(index){
                    case 0:
                        this.x = value;
                        break;
                    case 1:
                        this.y = value;
                        break;
                    case 2:
                        this.z = value;
                        break;
                    default:
                        throw new Error("index is out of range: " + index);
                }
                return this;
            }
        },
        {
            key: "getComponent",
            value: function getComponent(index) {
                switch(index){
                    case 0:
                        return this.x;
                    case 1:
                        return this.y;
                    case 2:
                        return this.z;
                    default:
                        throw new Error("index is out of range: " + index);
                }
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor(this.x, this.y, this.z);
            }
        },
        {
            key: "copy",
            value: function copy(v) {
                this.x = v.x;
                this.y = v.y;
                this.z = v.z;
                return this;
            }
        },
        {
            key: "add",
            value: function add(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
                    return this.addVectors(v, w);
                }
                this.x += v.x;
                this.y += v.y;
                this.z += v.z;
                return this;
            }
        },
        {
            key: "addScalar",
            value: function addScalar(s) {
                this.x += s;
                this.y += s;
                this.z += s;
                return this;
            }
        },
        {
            key: "addVectors",
            value: function addVectors(a, b) {
                this.x = a.x + b.x;
                this.y = a.y + b.y;
                this.z = a.z + b.z;
                return this;
            }
        },
        {
            key: "addScaledVector",
            value: function addScaledVector(v, s) {
                this.x += v.x * s;
                this.y += v.y * s;
                this.z += v.z * s;
                return this;
            }
        },
        {
            key: "sub",
            value: function sub(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
                    return this.subVectors(v, w);
                }
                this.x -= v.x;
                this.y -= v.y;
                this.z -= v.z;
                return this;
            }
        },
        {
            key: "subScalar",
            value: function subScalar(s) {
                this.x -= s;
                this.y -= s;
                this.z -= s;
                return this;
            }
        },
        {
            key: "subVectors",
            value: function subVectors(a, b) {
                this.x = a.x - b.x;
                this.y = a.y - b.y;
                this.z = a.z - b.z;
                return this;
            }
        },
        {
            key: "multiply",
            value: function multiply(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.");
                    return this.multiplyVectors(v, w);
                }
                this.x *= v.x;
                this.y *= v.y;
                this.z *= v.z;
                return this;
            }
        },
        {
            key: "multiplyScalar",
            value: function multiplyScalar(scalar) {
                this.x *= scalar;
                this.y *= scalar;
                this.z *= scalar;
                return this;
            }
        },
        {
            key: "multiplyVectors",
            value: function multiplyVectors(a, b) {
                this.x = a.x * b.x;
                this.y = a.y * b.y;
                this.z = a.z * b.z;
                return this;
            }
        },
        {
            key: "applyEuler",
            value: function applyEuler(euler) {
                if (!(euler && euler.isEuler)) console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
                return this.applyQuaternion($b383cde4e0574ff6$var$_quaternion$4.setFromEuler(euler));
            }
        },
        {
            key: "applyAxisAngle",
            value: function applyAxisAngle(axis, angle) {
                return this.applyQuaternion($b383cde4e0574ff6$var$_quaternion$4.setFromAxisAngle(axis, angle));
            }
        },
        {
            key: "applyMatrix3",
            value: function applyMatrix3(m) {
                var x = this.x, y = this.y, z = this.z;
                var e = m.elements;
                this.x = e[0] * x + e[3] * y + e[6] * z;
                this.y = e[1] * x + e[4] * y + e[7] * z;
                this.z = e[2] * x + e[5] * y + e[8] * z;
                return this;
            }
        },
        {
            key: "applyNormalMatrix",
            value: function applyNormalMatrix(m) {
                return this.applyMatrix3(m).normalize();
            }
        },
        {
            key: "applyMatrix4",
            value: function applyMatrix4(m) {
                var x = this.x, y = this.y, z = this.z;
                var e = m.elements;
                var w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
                this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
                this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
                this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
                return this;
            }
        },
        {
            key: "applyQuaternion",
            value: function applyQuaternion(q) {
                var x = this.x, y = this.y, z = this.z;
                var qx = q.x, qy = q.y, qz = q.z, qw = q.w;
                // calculate quat * vector
                var ix = qw * x + qy * z - qz * y;
                var iy = qw * y + qz * x - qx * z;
                var iz = qw * z + qx * y - qy * x;
                var iw = -qx * x - qy * y - qz * z;
                // calculate result * inverse quat
                this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
                return this;
            }
        },
        {
            key: "project",
            value: function project(camera) {
                return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
            }
        },
        {
            key: "unproject",
            value: function unproject(camera) {
                return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
            }
        },
        {
            key: "transformDirection",
            value: function transformDirection(m) {
                // input: THREE.Matrix4 affine matrix
                // vector interpreted as a direction
                var x = this.x, y = this.y, z = this.z;
                var e = m.elements;
                this.x = e[0] * x + e[4] * y + e[8] * z;
                this.y = e[1] * x + e[5] * y + e[9] * z;
                this.z = e[2] * x + e[6] * y + e[10] * z;
                return this.normalize();
            }
        },
        {
            key: "divide",
            value: function divide(v) {
                this.x /= v.x;
                this.y /= v.y;
                this.z /= v.z;
                return this;
            }
        },
        {
            key: "divideScalar",
            value: function divideScalar(scalar) {
                return this.multiplyScalar(1 / scalar);
            }
        },
        {
            key: "min",
            value: function min(v) {
                this.x = Math.min(this.x, v.x);
                this.y = Math.min(this.y, v.y);
                this.z = Math.min(this.z, v.z);
                return this;
            }
        },
        {
            key: "max",
            value: function max(v) {
                this.x = Math.max(this.x, v.x);
                this.y = Math.max(this.y, v.y);
                this.z = Math.max(this.z, v.z);
                return this;
            }
        },
        {
            key: "clamp",
            value: function clamp(min, max) {
                // assumes min < max, componentwise
                this.x = Math.max(min.x, Math.min(max.x, this.x));
                this.y = Math.max(min.y, Math.min(max.y, this.y));
                this.z = Math.max(min.z, Math.min(max.z, this.z));
                return this;
            }
        },
        {
            key: "clampScalar",
            value: function clampScalar(minVal, maxVal) {
                this.x = Math.max(minVal, Math.min(maxVal, this.x));
                this.y = Math.max(minVal, Math.min(maxVal, this.y));
                this.z = Math.max(minVal, Math.min(maxVal, this.z));
                return this;
            }
        },
        {
            key: "clampLength",
            value: function clampLength(min, max) {
                var length = this.length();
                return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
            }
        },
        {
            key: "floor",
            value: function floor() {
                this.x = Math.floor(this.x);
                this.y = Math.floor(this.y);
                this.z = Math.floor(this.z);
                return this;
            }
        },
        {
            key: "ceil",
            value: function ceil() {
                this.x = Math.ceil(this.x);
                this.y = Math.ceil(this.y);
                this.z = Math.ceil(this.z);
                return this;
            }
        },
        {
            key: "round",
            value: function round() {
                this.x = Math.round(this.x);
                this.y = Math.round(this.y);
                this.z = Math.round(this.z);
                return this;
            }
        },
        {
            key: "roundToZero",
            value: function roundToZero() {
                this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
                this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
                return this;
            }
        },
        {
            key: "negate",
            value: function negate() {
                this.x = -this.x;
                this.y = -this.y;
                this.z = -this.z;
                return this;
            }
        },
        {
            key: "dot",
            value: function dot(v) {
                return this.x * v.x + this.y * v.y + this.z * v.z;
            }
        },
        {
            // TODO lengthSquared?
            key: "lengthSq",
            value: function lengthSq() {
                return this.x * this.x + this.y * this.y + this.z * this.z;
            }
        },
        {
            key: "length",
            value: function length() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
            }
        },
        {
            key: "manhattanLength",
            value: function manhattanLength() {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
            }
        },
        {
            key: "normalize",
            value: function normalize() {
                return this.divideScalar(this.length() || 1);
            }
        },
        {
            key: "setLength",
            value: function setLength(length) {
                return this.normalize().multiplyScalar(length);
            }
        },
        {
            key: "lerp",
            value: function lerp(v, alpha) {
                this.x += (v.x - this.x) * alpha;
                this.y += (v.y - this.y) * alpha;
                this.z += (v.z - this.z) * alpha;
                return this;
            }
        },
        {
            key: "lerpVectors",
            value: function lerpVectors(v1, v2, alpha) {
                this.x = v1.x + (v2.x - v1.x) * alpha;
                this.y = v1.y + (v2.y - v1.y) * alpha;
                this.z = v1.z + (v2.z - v1.z) * alpha;
                return this;
            }
        },
        {
            key: "cross",
            value: function cross(v, w) {
                if (w !== undefined) {
                    console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.");
                    return this.crossVectors(v, w);
                }
                return this.crossVectors(this, v);
            }
        },
        {
            key: "crossVectors",
            value: function crossVectors(a, b) {
                var ax = a.x, ay = a.y, az = a.z;
                var bx = b.x, by = b.y, bz = b.z;
                this.x = ay * bz - az * by;
                this.y = az * bx - ax * bz;
                this.z = ax * by - ay * bx;
                return this;
            }
        },
        {
            key: "projectOnVector",
            value: function projectOnVector(v) {
                var denominator = v.lengthSq();
                if (denominator === 0) return this.set(0, 0, 0);
                var scalar = v.dot(this) / denominator;
                return this.copy(v).multiplyScalar(scalar);
            }
        },
        {
            key: "projectOnPlane",
            value: function projectOnPlane(planeNormal) {
                $b383cde4e0574ff6$var$_vector$c.copy(this).projectOnVector(planeNormal);
                return this.sub($b383cde4e0574ff6$var$_vector$c);
            }
        },
        {
            key: "reflect",
            value: function reflect(normal) {
                // reflect incident vector off plane orthogonal to normal
                // normal is assumed to have unit length
                return this.sub($b383cde4e0574ff6$var$_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
            }
        },
        {
            key: "angleTo",
            value: function angleTo(v) {
                var denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
                if (denominator === 0) return Math.PI / 2;
                var theta = this.dot(v) / denominator;
                // clamp, to handle numerical problems
                return Math.acos($b383cde4e0574ff6$var$clamp(theta, -1, 1));
            }
        },
        {
            key: "distanceTo",
            value: function distanceTo(v) {
                return Math.sqrt(this.distanceToSquared(v));
            }
        },
        {
            key: "distanceToSquared",
            value: function distanceToSquared(v) {
                var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
                return dx * dx + dy * dy + dz * dz;
            }
        },
        {
            key: "manhattanDistanceTo",
            value: function manhattanDistanceTo(v) {
                return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
            }
        },
        {
            key: "setFromSpherical",
            value: function setFromSpherical(s) {
                return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
            }
        },
        {
            key: "setFromSphericalCoords",
            value: function setFromSphericalCoords(radius, phi, theta) {
                var sinPhiRadius = Math.sin(phi) * radius;
                this.x = sinPhiRadius * Math.sin(theta);
                this.y = Math.cos(phi) * radius;
                this.z = sinPhiRadius * Math.cos(theta);
                return this;
            }
        },
        {
            key: "setFromCylindrical",
            value: function setFromCylindrical(c) {
                return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
            }
        },
        {
            key: "setFromCylindricalCoords",
            value: function setFromCylindricalCoords(radius, theta, y) {
                this.x = radius * Math.sin(theta);
                this.y = y;
                this.z = radius * Math.cos(theta);
                return this;
            }
        },
        {
            key: "setFromMatrixPosition",
            value: function setFromMatrixPosition(m) {
                var e = m.elements;
                this.x = e[12];
                this.y = e[13];
                this.z = e[14];
                return this;
            }
        },
        {
            key: "setFromMatrixScale",
            value: function setFromMatrixScale(m) {
                var sx = this.setFromMatrixColumn(m, 0).length();
                var sy = this.setFromMatrixColumn(m, 1).length();
                var sz = this.setFromMatrixColumn(m, 2).length();
                this.x = sx;
                this.y = sy;
                this.z = sz;
                return this;
            }
        },
        {
            key: "setFromMatrixColumn",
            value: function setFromMatrixColumn(m, index) {
                return this.fromArray(m.elements, index * 4);
            }
        },
        {
            key: "setFromMatrix3Column",
            value: function setFromMatrix3Column(m, index) {
                return this.fromArray(m.elements, index * 3);
            }
        },
        {
            key: "equals",
            value: function equals(v) {
                return v.x === this.x && v.y === this.y && v.z === this.z;
            }
        },
        {
            key: "fromArray",
            value: function fromArray(array) {
                var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                this.x = array[offset];
                this.y = array[offset + 1];
                this.z = array[offset + 2];
                return this;
            }
        },
        {
            key: "toArray",
            value: function toArray() {
                var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                array[offset] = this.x;
                array[offset + 1] = this.y;
                array[offset + 2] = this.z;
                return array;
            }
        },
        {
            key: "fromBufferAttribute",
            value: function fromBufferAttribute(attribute, index, offset) {
                if (offset !== undefined) console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
                this.x = attribute.getX(index);
                this.y = attribute.getY(index);
                this.z = attribute.getZ(index);
                return this;
            }
        },
        {
            key: "random",
            value: function random() {
                this.x = Math.random();
                this.y = Math.random();
                this.z = Math.random();
                return this;
            }
        },
        {
            key: "randomDirection",
            value: function randomDirection() {
                // Derived from https://mathworld.wolfram.com/SpherePointPicking.html
                var u = (Math.random() - 0.5) * 2;
                var t = Math.random() * Math.PI * 2;
                var f = Math.sqrt(1 - Math.pow(u, 2));
                this.x = f * Math.cos(t);
                this.y = f * Math.sin(t);
                this.z = u;
                return this;
            }
        },
        {
            key: Symbol.iterator,
            value: function value() {
                return (0, $672mD.__generator)(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                this.x
                            ];
                        case 1:
                            _state.sent();
                            return [
                                4,
                                this.y
                            ];
                        case 2:
                            _state.sent();
                            return [
                                4,
                                this.z
                            ];
                        case 3:
                            _state.sent();
                            return [
                                2
                            ];
                    }
                });
            }
        }
    ]);
    return Vector3;
}();
$b383cde4e0574ff6$export$64b5c384219d3699.prototype.isVector3 = true;
var $b383cde4e0574ff6$var$_vector$c = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_quaternion$4 = /*@__PURE__*/ new $b383cde4e0574ff6$export$23d6a54f0bbc85a3();
var $b383cde4e0574ff6$export$6f7d5a9418ab2aa3 = /*#__PURE__*/ function() {
    "use strict";
    function Box3() {
        var min = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$64b5c384219d3699(Infinity, Infinity, Infinity), max = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$64b5c384219d3699(-Infinity, -Infinity, -Infinity);
        (0, $dnGTK.default)(this, Box3);
        this.min = min;
        this.max = max;
    }
    (0, $9SLyD.default)(Box3, [
        {
            key: "set",
            value: function set(min, max) {
                this.min.copy(min);
                this.max.copy(max);
                return this;
            }
        },
        {
            key: "setFromArray",
            value: function setFromArray(array) {
                var minX = Infinity;
                var minY = Infinity;
                var minZ = Infinity;
                var maxX = -Infinity;
                var maxY = -Infinity;
                var maxZ = -Infinity;
                for(var i = 0, l = array.length; i < l; i += 3){
                    var x = array[i];
                    var y = array[i + 1];
                    var z = array[i + 2];
                    if (x < minX) minX = x;
                    if (y < minY) minY = y;
                    if (z < minZ) minZ = z;
                    if (x > maxX) maxX = x;
                    if (y > maxY) maxY = y;
                    if (z > maxZ) maxZ = z;
                }
                this.min.set(minX, minY, minZ);
                this.max.set(maxX, maxY, maxZ);
                return this;
            }
        },
        {
            key: "setFromBufferAttribute",
            value: function setFromBufferAttribute(attribute) {
                var minX = Infinity;
                var minY = Infinity;
                var minZ = Infinity;
                var maxX = -Infinity;
                var maxY = -Infinity;
                var maxZ = -Infinity;
                for(var i = 0, l = attribute.count; i < l; i++){
                    var x = attribute.getX(i);
                    var y = attribute.getY(i);
                    var z = attribute.getZ(i);
                    if (x < minX) minX = x;
                    if (y < minY) minY = y;
                    if (z < minZ) minZ = z;
                    if (x > maxX) maxX = x;
                    if (y > maxY) maxY = y;
                    if (z > maxZ) maxZ = z;
                }
                this.min.set(minX, minY, minZ);
                this.max.set(maxX, maxY, maxZ);
                return this;
            }
        },
        {
            key: "setFromPoints",
            value: function setFromPoints(points) {
                this.makeEmpty();
                for(var i = 0, il = points.length; i < il; i++)this.expandByPoint(points[i]);
                return this;
            }
        },
        {
            key: "setFromCenterAndSize",
            value: function setFromCenterAndSize(center, size) {
                var halfSize = $b383cde4e0574ff6$var$_vector$b.copy(size).multiplyScalar(0.5);
                this.min.copy(center).sub(halfSize);
                this.max.copy(center).add(halfSize);
                return this;
            }
        },
        {
            key: "setFromObject",
            value: function setFromObject(object) {
                this.makeEmpty();
                return this.expandByObject(object);
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        },
        {
            key: "copy",
            value: function copy(box) {
                this.min.copy(box.min);
                this.max.copy(box.max);
                return this;
            }
        },
        {
            key: "makeEmpty",
            value: function makeEmpty() {
                this.min.x = this.min.y = this.min.z = Infinity;
                this.max.x = this.max.y = this.max.z = -Infinity;
                return this;
            }
        },
        {
            key: "isEmpty",
            value: function isEmpty() {
                // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
                return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
            }
        },
        {
            key: "getCenter",
            value: function getCenter(target) {
                return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
            }
        },
        {
            key: "getSize",
            value: function getSize(target) {
                return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
            }
        },
        {
            key: "expandByPoint",
            value: function expandByPoint(point) {
                this.min.min(point);
                this.max.max(point);
                return this;
            }
        },
        {
            key: "expandByVector",
            value: function expandByVector(vector) {
                this.min.sub(vector);
                this.max.add(vector);
                return this;
            }
        },
        {
            key: "expandByScalar",
            value: function expandByScalar(scalar) {
                this.min.addScalar(-scalar);
                this.max.addScalar(scalar);
                return this;
            }
        },
        {
            key: "expandByObject",
            value: function expandByObject(object) {
                // Computes the world-axis-aligned bounding box of an object (including its children),
                // accounting for both the object's, and children's, world transforms
                object.updateWorldMatrix(false, false);
                var geometry = object.geometry;
                if (geometry !== undefined) {
                    if (geometry.boundingBox === null) geometry.computeBoundingBox();
                    $b383cde4e0574ff6$var$_box$3.copy(geometry.boundingBox);
                    $b383cde4e0574ff6$var$_box$3.applyMatrix4(object.matrixWorld);
                    this.union($b383cde4e0574ff6$var$_box$3);
                }
                var children = object.children;
                for(var i = 0, l = children.length; i < l; i++)this.expandByObject(children[i]);
                return this;
            }
        },
        {
            key: "containsPoint",
            value: function containsPoint(point) {
                return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
            }
        },
        {
            key: "containsBox",
            value: function containsBox(box) {
                return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
            }
        },
        {
            key: "getParameter",
            value: function getParameter(point, target) {
                // This can potentially have a divide by zero if the box
                // has a size dimension of 0.
                return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
            }
        },
        {
            key: "intersectsBox",
            value: function intersectsBox(box) {
                // using 6 splitting planes to rule out intersections.
                return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
            }
        },
        {
            key: "intersectsSphere",
            value: function intersectsSphere(sphere) {
                // Find the point on the AABB closest to the sphere center.
                this.clampPoint(sphere.center, $b383cde4e0574ff6$var$_vector$b);
                // If that point is inside the sphere, the AABB and sphere intersect.
                return $b383cde4e0574ff6$var$_vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
            }
        },
        {
            key: "intersectsPlane",
            value: function intersectsPlane(plane) {
                // We compute the minimum and maximum dot product values. If those values
                // are on the same side (back or front) of the plane, then there is no intersection.
                var min, max;
                if (plane.normal.x > 0) {
                    min = plane.normal.x * this.min.x;
                    max = plane.normal.x * this.max.x;
                } else {
                    min = plane.normal.x * this.max.x;
                    max = plane.normal.x * this.min.x;
                }
                if (plane.normal.y > 0) {
                    min += plane.normal.y * this.min.y;
                    max += plane.normal.y * this.max.y;
                } else {
                    min += plane.normal.y * this.max.y;
                    max += plane.normal.y * this.min.y;
                }
                if (plane.normal.z > 0) {
                    min += plane.normal.z * this.min.z;
                    max += plane.normal.z * this.max.z;
                } else {
                    min += plane.normal.z * this.max.z;
                    max += plane.normal.z * this.min.z;
                }
                return min <= -plane.constant && max >= -plane.constant;
            }
        },
        {
            key: "intersectsTriangle",
            value: function intersectsTriangle(triangle) {
                if (this.isEmpty()) return false;
                // compute box center and extents
                this.getCenter($b383cde4e0574ff6$var$_center);
                $b383cde4e0574ff6$var$_extents.subVectors(this.max, $b383cde4e0574ff6$var$_center);
                // translate triangle to aabb origin
                $b383cde4e0574ff6$var$_v0$2.subVectors(triangle.a, $b383cde4e0574ff6$var$_center);
                $b383cde4e0574ff6$var$_v1$7.subVectors(triangle.b, $b383cde4e0574ff6$var$_center);
                $b383cde4e0574ff6$var$_v2$3.subVectors(triangle.c, $b383cde4e0574ff6$var$_center);
                // compute edge vectors for triangle
                $b383cde4e0574ff6$var$_f0.subVectors($b383cde4e0574ff6$var$_v1$7, $b383cde4e0574ff6$var$_v0$2);
                $b383cde4e0574ff6$var$_f1.subVectors($b383cde4e0574ff6$var$_v2$3, $b383cde4e0574ff6$var$_v1$7);
                $b383cde4e0574ff6$var$_f2.subVectors($b383cde4e0574ff6$var$_v0$2, $b383cde4e0574ff6$var$_v2$3);
                // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
                // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
                // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
                var axes = [
                    0,
                    -$b383cde4e0574ff6$var$_f0.z,
                    $b383cde4e0574ff6$var$_f0.y,
                    0,
                    -$b383cde4e0574ff6$var$_f1.z,
                    $b383cde4e0574ff6$var$_f1.y,
                    0,
                    -$b383cde4e0574ff6$var$_f2.z,
                    $b383cde4e0574ff6$var$_f2.y,
                    $b383cde4e0574ff6$var$_f0.z,
                    0,
                    -$b383cde4e0574ff6$var$_f0.x,
                    $b383cde4e0574ff6$var$_f1.z,
                    0,
                    -$b383cde4e0574ff6$var$_f1.x,
                    $b383cde4e0574ff6$var$_f2.z,
                    0,
                    -$b383cde4e0574ff6$var$_f2.x,
                    -$b383cde4e0574ff6$var$_f0.y,
                    $b383cde4e0574ff6$var$_f0.x,
                    0,
                    -$b383cde4e0574ff6$var$_f1.y,
                    $b383cde4e0574ff6$var$_f1.x,
                    0,
                    -$b383cde4e0574ff6$var$_f2.y,
                    $b383cde4e0574ff6$var$_f2.x,
                    0
                ];
                if (!$b383cde4e0574ff6$var$satForAxes(axes, $b383cde4e0574ff6$var$_v0$2, $b383cde4e0574ff6$var$_v1$7, $b383cde4e0574ff6$var$_v2$3, $b383cde4e0574ff6$var$_extents)) return false;
                // test 3 face normals from the aabb
                axes = [
                    1,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    1
                ];
                if (!$b383cde4e0574ff6$var$satForAxes(axes, $b383cde4e0574ff6$var$_v0$2, $b383cde4e0574ff6$var$_v1$7, $b383cde4e0574ff6$var$_v2$3, $b383cde4e0574ff6$var$_extents)) return false;
                // finally testing the face normal of the triangle
                // use already existing triangle edge vectors here
                $b383cde4e0574ff6$var$_triangleNormal.crossVectors($b383cde4e0574ff6$var$_f0, $b383cde4e0574ff6$var$_f1);
                axes = [
                    $b383cde4e0574ff6$var$_triangleNormal.x,
                    $b383cde4e0574ff6$var$_triangleNormal.y,
                    $b383cde4e0574ff6$var$_triangleNormal.z
                ];
                return $b383cde4e0574ff6$var$satForAxes(axes, $b383cde4e0574ff6$var$_v0$2, $b383cde4e0574ff6$var$_v1$7, $b383cde4e0574ff6$var$_v2$3, $b383cde4e0574ff6$var$_extents);
            }
        },
        {
            key: "clampPoint",
            value: function clampPoint(point, target) {
                return target.copy(point).clamp(this.min, this.max);
            }
        },
        {
            key: "distanceToPoint",
            value: function distanceToPoint(point) {
                var clampedPoint = $b383cde4e0574ff6$var$_vector$b.copy(point).clamp(this.min, this.max);
                return clampedPoint.sub(point).length();
            }
        },
        {
            key: "getBoundingSphere",
            value: function getBoundingSphere(target) {
                this.getCenter(target.center);
                target.radius = this.getSize($b383cde4e0574ff6$var$_vector$b).length() * 0.5;
                return target;
            }
        },
        {
            key: "intersect",
            value: function intersect(box) {
                this.min.max(box.min);
                this.max.min(box.max);
                // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
                if (this.isEmpty()) this.makeEmpty();
                return this;
            }
        },
        {
            key: "union",
            value: function union(box) {
                this.min.min(box.min);
                this.max.max(box.max);
                return this;
            }
        },
        {
            key: "applyMatrix4",
            value: function applyMatrix4(matrix) {
                // transform of empty box is an empty box.
                if (this.isEmpty()) return this;
                // NOTE: I am using a binary pattern to specify all 2^3 combinations below
                $b383cde4e0574ff6$var$_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000
                $b383cde4e0574ff6$var$_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001
                $b383cde4e0574ff6$var$_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010
                $b383cde4e0574ff6$var$_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011
                $b383cde4e0574ff6$var$_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100
                $b383cde4e0574ff6$var$_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101
                $b383cde4e0574ff6$var$_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110
                $b383cde4e0574ff6$var$_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111
                this.setFromPoints($b383cde4e0574ff6$var$_points);
                return this;
            }
        },
        {
            key: "translate",
            value: function translate(offset) {
                this.min.add(offset);
                this.max.add(offset);
                return this;
            }
        },
        {
            key: "equals",
            value: function equals(box) {
                return box.min.equals(this.min) && box.max.equals(this.max);
            }
        }
    ]);
    return Box3;
}();
$b383cde4e0574ff6$export$6f7d5a9418ab2aa3.prototype.isBox3 = true;
var $b383cde4e0574ff6$var$_points = [
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699()
];
var $b383cde4e0574ff6$var$_vector$b = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_box$3 = /*@__PURE__*/ new $b383cde4e0574ff6$export$6f7d5a9418ab2aa3();
// triangle centered vertices
var $b383cde4e0574ff6$var$_v0$2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_v1$7 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_v2$3 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
// triangle edge vectors
var $b383cde4e0574ff6$var$_f0 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_f1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_f2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_center = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_extents = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_triangleNormal = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_testAxis = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
function $b383cde4e0574ff6$var$satForAxes(axes, v0, v1, v2, extents) {
    for(var i = 0, j = axes.length - 3; i <= j; i += 3){
        $b383cde4e0574ff6$var$_testAxis.fromArray(axes, i);
        // project the aabb onto the seperating axis
        var r = extents.x * Math.abs($b383cde4e0574ff6$var$_testAxis.x) + extents.y * Math.abs($b383cde4e0574ff6$var$_testAxis.y) + extents.z * Math.abs($b383cde4e0574ff6$var$_testAxis.z);
        // project all 3 vertices of the triangle onto the seperating axis
        var p0 = v0.dot($b383cde4e0574ff6$var$_testAxis);
        var p1 = v1.dot($b383cde4e0574ff6$var$_testAxis);
        var p2 = v2.dot($b383cde4e0574ff6$var$_testAxis);
        // actual test, basically see if either of the most extreme of the triangle points intersects r
        if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) // points of the projected triangle are outside the projected half-length of the aabb
        // the axis is seperating and we can exit
        return false;
    }
    return true;
}
var $b383cde4e0574ff6$var$_box$2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$6f7d5a9418ab2aa3();
var $b383cde4e0574ff6$var$_v1$6 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_toFarthestPoint = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_toPoint = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$805e8b72413ccaba = /*#__PURE__*/ function() {
    "use strict";
    function Sphere() {
        var center = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$64b5c384219d3699(), radius = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1;
        (0, $dnGTK.default)(this, Sphere);
        this.center = center;
        this.radius = radius;
    }
    (0, $9SLyD.default)(Sphere, [
        {
            key: "set",
            value: function set(center, radius) {
                this.center.copy(center);
                this.radius = radius;
                return this;
            }
        },
        {
            key: "setFromPoints",
            value: function setFromPoints(points, optionalCenter) {
                var center = this.center;
                if (optionalCenter !== undefined) center.copy(optionalCenter);
                else $b383cde4e0574ff6$var$_box$2.setFromPoints(points).getCenter(center);
                var maxRadiusSq = 0;
                for(var i = 0, il = points.length; i < il; i++)maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
                this.radius = Math.sqrt(maxRadiusSq);
                return this;
            }
        },
        {
            key: "copy",
            value: function copy(sphere) {
                this.center.copy(sphere.center);
                this.radius = sphere.radius;
                return this;
            }
        },
        {
            key: "isEmpty",
            value: function isEmpty() {
                return this.radius < 0;
            }
        },
        {
            key: "makeEmpty",
            value: function makeEmpty() {
                this.center.set(0, 0, 0);
                this.radius = -1;
                return this;
            }
        },
        {
            key: "containsPoint",
            value: function containsPoint(point) {
                return point.distanceToSquared(this.center) <= this.radius * this.radius;
            }
        },
        {
            key: "distanceToPoint",
            value: function distanceToPoint(point) {
                return point.distanceTo(this.center) - this.radius;
            }
        },
        {
            key: "intersectsSphere",
            value: function intersectsSphere(sphere) {
                var radiusSum = this.radius + sphere.radius;
                return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
            }
        },
        {
            key: "intersectsBox",
            value: function intersectsBox(box) {
                return box.intersectsSphere(this);
            }
        },
        {
            key: "intersectsPlane",
            value: function intersectsPlane(plane) {
                return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
            }
        },
        {
            key: "clampPoint",
            value: function clampPoint(point, target) {
                var deltaLengthSq = this.center.distanceToSquared(point);
                target.copy(point);
                if (deltaLengthSq > this.radius * this.radius) {
                    target.sub(this.center).normalize();
                    target.multiplyScalar(this.radius).add(this.center);
                }
                return target;
            }
        },
        {
            key: "getBoundingBox",
            value: function getBoundingBox(target) {
                if (this.isEmpty()) {
                    // Empty sphere produces empty bounding box
                    target.makeEmpty();
                    return target;
                }
                target.set(this.center, this.center);
                target.expandByScalar(this.radius);
                return target;
            }
        },
        {
            key: "applyMatrix4",
            value: function applyMatrix4(matrix) {
                this.center.applyMatrix4(matrix);
                this.radius = this.radius * matrix.getMaxScaleOnAxis();
                return this;
            }
        },
        {
            key: "translate",
            value: function translate(offset) {
                this.center.add(offset);
                return this;
            }
        },
        {
            key: "expandByPoint",
            value: function expandByPoint(point) {
                // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671
                $b383cde4e0574ff6$var$_toPoint.subVectors(point, this.center);
                var lengthSq = $b383cde4e0574ff6$var$_toPoint.lengthSq();
                if (lengthSq > this.radius * this.radius) {
                    var length = Math.sqrt(lengthSq);
                    var missingRadiusHalf = (length - this.radius) * 0.5;
                    // Nudge this sphere towards the target point. Add half the missing distance to radius,
                    // and the other half to position. This gives a tighter enclosure, instead of if
                    // the whole missing distance were just added to radius.
                    this.center.add($b383cde4e0574ff6$var$_toPoint.multiplyScalar(missingRadiusHalf / length));
                    this.radius += missingRadiusHalf;
                }
                return this;
            }
        },
        {
            key: "union",
            value: function union(sphere) {
                // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769
                // To enclose another sphere into this sphere, we only need to enclose two points:
                // 1) Enclose the farthest point on the other sphere into this sphere.
                // 2) Enclose the opposite point of the farthest point into this sphere.
                $b383cde4e0574ff6$var$_toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);
                this.expandByPoint($b383cde4e0574ff6$var$_v1$6.copy(sphere.center).add($b383cde4e0574ff6$var$_toFarthestPoint));
                this.expandByPoint($b383cde4e0574ff6$var$_v1$6.copy(sphere.center).sub($b383cde4e0574ff6$var$_toFarthestPoint));
                return this;
            }
        },
        {
            key: "equals",
            value: function equals(sphere) {
                return sphere.center.equals(this.center) && sphere.radius === this.radius;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        }
    ]);
    return Sphere;
}();
var $b383cde4e0574ff6$var$_vector$a = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_segCenter = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_segDir = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_diff = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_edge1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_edge2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_normal$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$a186db52eed6d40e = /*#__PURE__*/ function() {
    "use strict";
    function Ray() {
        var origin = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$64b5c384219d3699(), direction = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$64b5c384219d3699(0, 0, -1);
        (0, $dnGTK.default)(this, Ray);
        this.origin = origin;
        this.direction = direction;
    }
    (0, $9SLyD.default)(Ray, [
        {
            key: "set",
            value: function set(origin, direction) {
                this.origin.copy(origin);
                this.direction.copy(direction);
                return this;
            }
        },
        {
            key: "copy",
            value: function copy(ray) {
                this.origin.copy(ray.origin);
                this.direction.copy(ray.direction);
                return this;
            }
        },
        {
            key: "at",
            value: function at(t, target) {
                return target.copy(this.direction).multiplyScalar(t).add(this.origin);
            }
        },
        {
            key: "lookAt",
            value: function lookAt(v) {
                this.direction.copy(v).sub(this.origin).normalize();
                return this;
            }
        },
        {
            key: "recast",
            value: function recast(t) {
                this.origin.copy(this.at(t, $b383cde4e0574ff6$var$_vector$a));
                return this;
            }
        },
        {
            key: "closestPointToPoint",
            value: function closestPointToPoint(point, target) {
                target.subVectors(point, this.origin);
                var directionDistance = target.dot(this.direction);
                if (directionDistance < 0) return target.copy(this.origin);
                return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
            }
        },
        {
            key: "distanceToPoint",
            value: function distanceToPoint(point) {
                return Math.sqrt(this.distanceSqToPoint(point));
            }
        },
        {
            key: "distanceSqToPoint",
            value: function distanceSqToPoint(point) {
                var directionDistance = $b383cde4e0574ff6$var$_vector$a.subVectors(point, this.origin).dot(this.direction);
                // point behind the ray
                if (directionDistance < 0) return this.origin.distanceToSquared(point);
                $b383cde4e0574ff6$var$_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
                return $b383cde4e0574ff6$var$_vector$a.distanceToSquared(point);
            }
        },
        {
            key: "distanceSqToSegment",
            value: function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
                // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
                // It returns the min distance between the ray and the segment
                // defined by v0 and v1
                // It can also set two optional targets :
                // - The closest point on the ray
                // - The closest point on the segment
                $b383cde4e0574ff6$var$_segCenter.copy(v0).add(v1).multiplyScalar(0.5);
                $b383cde4e0574ff6$var$_segDir.copy(v1).sub(v0).normalize();
                $b383cde4e0574ff6$var$_diff.copy(this.origin).sub($b383cde4e0574ff6$var$_segCenter);
                var segExtent = v0.distanceTo(v1) * 0.5;
                var a01 = -this.direction.dot($b383cde4e0574ff6$var$_segDir);
                var b0 = $b383cde4e0574ff6$var$_diff.dot(this.direction);
                var b1 = -$b383cde4e0574ff6$var$_diff.dot($b383cde4e0574ff6$var$_segDir);
                var c = $b383cde4e0574ff6$var$_diff.lengthSq();
                var det = Math.abs(1 - a01 * a01);
                var s0, s1, sqrDist, extDet;
                if (det > 0) {
                    // The ray and segment are not parallel.
                    s0 = a01 * b1 - b0;
                    s1 = a01 * b0 - b1;
                    extDet = segExtent * det;
                    if (s0 >= 0) {
                        if (s1 >= -extDet) {
                            if (s1 <= extDet) {
                                // region 0
                                // Minimum at interior points of ray and segment.
                                var invDet = 1 / det;
                                s0 *= invDet;
                                s1 *= invDet;
                                sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
                            } else {
                                // region 1
                                s1 = segExtent;
                                s0 = Math.max(0, -(a01 * s1 + b0));
                                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                            }
                        } else {
                            // region 5
                            s1 = -segExtent;
                            s0 = Math.max(0, -(a01 * s1 + b0));
                            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                        }
                    } else {
                        if (s1 <= -extDet) {
                            // region 4
                            s0 = Math.max(0, -(-a01 * segExtent + b0));
                            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                        } else if (s1 <= extDet) {
                            // region 3
                            s0 = 0;
                            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
                            sqrDist = s1 * (s1 + 2 * b1) + c;
                        } else {
                            // region 2
                            s0 = Math.max(0, -(a01 * segExtent + b0));
                            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                        }
                    }
                } else {
                    // Ray and segment are parallel.
                    s1 = a01 > 0 ? -segExtent : segExtent;
                    s0 = Math.max(0, -(a01 * s1 + b0));
                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                }
                if (optionalPointOnRay) optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
                if (optionalPointOnSegment) optionalPointOnSegment.copy($b383cde4e0574ff6$var$_segDir).multiplyScalar(s1).add($b383cde4e0574ff6$var$_segCenter);
                return sqrDist;
            }
        },
        {
            key: "intersectSphere",
            value: function intersectSphere(sphere, target) {
                $b383cde4e0574ff6$var$_vector$a.subVectors(sphere.center, this.origin);
                var tca = $b383cde4e0574ff6$var$_vector$a.dot(this.direction);
                var d2 = $b383cde4e0574ff6$var$_vector$a.dot($b383cde4e0574ff6$var$_vector$a) - tca * tca;
                var radius2 = sphere.radius * sphere.radius;
                if (d2 > radius2) return null;
                var thc = Math.sqrt(radius2 - d2);
                // t0 = first intersect point - entrance on front of sphere
                var t0 = tca - thc;
                // t1 = second intersect point - exit point on back of sphere
                var t1 = tca + thc;
                // test to see if both t0 and t1 are behind the ray - if so, return null
                if (t0 < 0 && t1 < 0) return null;
                // test to see if t0 is behind the ray:
                // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
                // in order to always return an intersect point that is in front of the ray.
                if (t0 < 0) return this.at(t1, target);
                // else t0 is in front of the ray, so return the first collision point scaled by t0
                return this.at(t0, target);
            }
        },
        {
            key: "intersectsSphere",
            value: function intersectsSphere(sphere) {
                return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
            }
        },
        {
            key: "distanceToPlane",
            value: function distanceToPlane(plane) {
                var denominator = plane.normal.dot(this.direction);
                if (denominator === 0) {
                    // line is coplanar, return origin
                    if (plane.distanceToPoint(this.origin) === 0) return 0;
                    // Null is preferable to undefined since undefined means.... it is undefined
                    return null;
                }
                var t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
                // Return if the ray never intersects the plane
                return t >= 0 ? t : null;
            }
        },
        {
            key: "intersectPlane",
            value: function intersectPlane(plane, target) {
                var t = this.distanceToPlane(plane);
                if (t === null) return null;
                return this.at(t, target);
            }
        },
        {
            key: "intersectsPlane",
            value: function intersectsPlane(plane) {
                // check if the ray lies on the plane first
                var distToPoint = plane.distanceToPoint(this.origin);
                if (distToPoint === 0) return true;
                var denominator = plane.normal.dot(this.direction);
                if (denominator * distToPoint < 0) return true;
                // ray origin is behind the plane (and is pointing behind it)
                return false;
            }
        },
        {
            key: "intersectBox",
            value: function intersectBox(box, target) {
                var tmin, tmax, tymin, tymax, tzmin, tzmax;
                var invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
                var origin = this.origin;
                if (invdirx >= 0) {
                    tmin = (box.min.x - origin.x) * invdirx;
                    tmax = (box.max.x - origin.x) * invdirx;
                } else {
                    tmin = (box.max.x - origin.x) * invdirx;
                    tmax = (box.min.x - origin.x) * invdirx;
                }
                if (invdiry >= 0) {
                    tymin = (box.min.y - origin.y) * invdiry;
                    tymax = (box.max.y - origin.y) * invdiry;
                } else {
                    tymin = (box.max.y - origin.y) * invdiry;
                    tymax = (box.min.y - origin.y) * invdiry;
                }
                if (tmin > tymax || tymin > tmax) return null;
                // These lines also handle the case where tmin or tmax is NaN
                // (result of 0 * Infinity). x !== x returns true if x is NaN
                if (tymin > tmin || tmin !== tmin) tmin = tymin;
                if (tymax < tmax || tmax !== tmax) tmax = tymax;
                if (invdirz >= 0) {
                    tzmin = (box.min.z - origin.z) * invdirz;
                    tzmax = (box.max.z - origin.z) * invdirz;
                } else {
                    tzmin = (box.max.z - origin.z) * invdirz;
                    tzmax = (box.min.z - origin.z) * invdirz;
                }
                if (tmin > tzmax || tzmin > tmax) return null;
                if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
                if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
                //return point closest to the ray (positive side)
                if (tmax < 0) return null;
                return this.at(tmin >= 0 ? tmin : tmax, target);
            }
        },
        {
            key: "intersectsBox",
            value: function intersectsBox(box) {
                return this.intersectBox(box, $b383cde4e0574ff6$var$_vector$a) !== null;
            }
        },
        {
            key: "intersectTriangle",
            value: function intersectTriangle(a, b, c, backfaceCulling, target) {
                // Compute the offset origin, edges, and normal.
                // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
                $b383cde4e0574ff6$var$_edge1.subVectors(b, a);
                $b383cde4e0574ff6$var$_edge2.subVectors(c, a);
                $b383cde4e0574ff6$var$_normal$1.crossVectors($b383cde4e0574ff6$var$_edge1, $b383cde4e0574ff6$var$_edge2);
                // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
                // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
                //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
                //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
                //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
                var DdN = this.direction.dot($b383cde4e0574ff6$var$_normal$1);
                var sign;
                if (DdN > 0) {
                    if (backfaceCulling) return null;
                    sign = 1;
                } else if (DdN < 0) {
                    sign = -1;
                    DdN = -DdN;
                } else return null;
                $b383cde4e0574ff6$var$_diff.subVectors(this.origin, a);
                var DdQxE2 = sign * this.direction.dot($b383cde4e0574ff6$var$_edge2.crossVectors($b383cde4e0574ff6$var$_diff, $b383cde4e0574ff6$var$_edge2));
                // b1 < 0, no intersection
                if (DdQxE2 < 0) return null;
                var DdE1xQ = sign * this.direction.dot($b383cde4e0574ff6$var$_edge1.cross($b383cde4e0574ff6$var$_diff));
                // b2 < 0, no intersection
                if (DdE1xQ < 0) return null;
                // b1+b2 > 1, no intersection
                if (DdQxE2 + DdE1xQ > DdN) return null;
                // Line intersects triangle, check if ray does.
                var QdN = -sign * $b383cde4e0574ff6$var$_diff.dot($b383cde4e0574ff6$var$_normal$1);
                // t < 0, no intersection
                if (QdN < 0) return null;
                // Ray intersects triangle.
                return this.at(QdN / DdN, target);
            }
        },
        {
            key: "applyMatrix4",
            value: function applyMatrix4(matrix4) {
                this.origin.applyMatrix4(matrix4);
                this.direction.transformDirection(matrix4);
                return this;
            }
        },
        {
            key: "equals",
            value: function equals(ray) {
                return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        }
    ]);
    return Ray;
}();
var $b383cde4e0574ff6$export$2ae72fc923e5eb5 = /*#__PURE__*/ function() {
    "use strict";
    function Matrix4() {
        (0, $dnGTK.default)(this, Matrix4);
        this.elements = [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ];
        if (arguments.length > 0) console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
    }
    (0, $9SLyD.default)(Matrix4, [
        {
            key: "set",
            value: function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
                var te = this.elements;
                te[0] = n11;
                te[4] = n12;
                te[8] = n13;
                te[12] = n14;
                te[1] = n21;
                te[5] = n22;
                te[9] = n23;
                te[13] = n24;
                te[2] = n31;
                te[6] = n32;
                te[10] = n33;
                te[14] = n34;
                te[3] = n41;
                te[7] = n42;
                te[11] = n43;
                te[15] = n44;
                return this;
            }
        },
        {
            key: "identity",
            value: function identity() {
                this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
                return this;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new Matrix4().fromArray(this.elements);
            }
        },
        {
            key: "copy",
            value: function copy(m) {
                var te = this.elements;
                var me = m.elements;
                te[0] = me[0];
                te[1] = me[1];
                te[2] = me[2];
                te[3] = me[3];
                te[4] = me[4];
                te[5] = me[5];
                te[6] = me[6];
                te[7] = me[7];
                te[8] = me[8];
                te[9] = me[9];
                te[10] = me[10];
                te[11] = me[11];
                te[12] = me[12];
                te[13] = me[13];
                te[14] = me[14];
                te[15] = me[15];
                return this;
            }
        },
        {
            key: "copyPosition",
            value: function copyPosition(m) {
                var te = this.elements, me = m.elements;
                te[12] = me[12];
                te[13] = me[13];
                te[14] = me[14];
                return this;
            }
        },
        {
            key: "setFromMatrix3",
            value: function setFromMatrix3(m) {
                var me = m.elements;
                this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);
                return this;
            }
        },
        {
            key: "extractBasis",
            value: function extractBasis(xAxis, yAxis, zAxis) {
                xAxis.setFromMatrixColumn(this, 0);
                yAxis.setFromMatrixColumn(this, 1);
                zAxis.setFromMatrixColumn(this, 2);
                return this;
            }
        },
        {
            key: "makeBasis",
            value: function makeBasis(xAxis, yAxis, zAxis) {
                this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
                return this;
            }
        },
        {
            key: "extractRotation",
            value: function extractRotation(m) {
                // this method does not support reflection matrices
                var te = this.elements;
                var me = m.elements;
                var scaleX = 1 / $b383cde4e0574ff6$var$_v1$5.setFromMatrixColumn(m, 0).length();
                var scaleY = 1 / $b383cde4e0574ff6$var$_v1$5.setFromMatrixColumn(m, 1).length();
                var scaleZ = 1 / $b383cde4e0574ff6$var$_v1$5.setFromMatrixColumn(m, 2).length();
                te[0] = me[0] * scaleX;
                te[1] = me[1] * scaleX;
                te[2] = me[2] * scaleX;
                te[3] = 0;
                te[4] = me[4] * scaleY;
                te[5] = me[5] * scaleY;
                te[6] = me[6] * scaleY;
                te[7] = 0;
                te[8] = me[8] * scaleZ;
                te[9] = me[9] * scaleZ;
                te[10] = me[10] * scaleZ;
                te[11] = 0;
                te[12] = 0;
                te[13] = 0;
                te[14] = 0;
                te[15] = 1;
                return this;
            }
        },
        {
            key: "makeRotationFromEuler",
            value: function makeRotationFromEuler(euler) {
                if (!(euler && euler.isEuler)) console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
                var te = this.elements;
                var x = euler.x, y = euler.y, z = euler.z;
                var a = Math.cos(x), b = Math.sin(x);
                var c = Math.cos(y), d = Math.sin(y);
                var e = Math.cos(z), f = Math.sin(z);
                if (euler.order === "XYZ") {
                    var ae = a * e, af = a * f, be = b * e, bf = b * f;
                    te[0] = c * e;
                    te[4] = -c * f;
                    te[8] = d;
                    te[1] = af + be * d;
                    te[5] = ae - bf * d;
                    te[9] = -b * c;
                    te[2] = bf - ae * d;
                    te[6] = be + af * d;
                    te[10] = a * c;
                } else if (euler.order === "YXZ") {
                    var ce = c * e, cf = c * f, de = d * e, df = d * f;
                    te[0] = ce + df * b;
                    te[4] = de * b - cf;
                    te[8] = a * d;
                    te[1] = a * f;
                    te[5] = a * e;
                    te[9] = -b;
                    te[2] = cf * b - de;
                    te[6] = df + ce * b;
                    te[10] = a * c;
                } else if (euler.order === "ZXY") {
                    var ce1 = c * e, cf1 = c * f, de1 = d * e, df1 = d * f;
                    te[0] = ce1 - df1 * b;
                    te[4] = -a * f;
                    te[8] = de1 + cf1 * b;
                    te[1] = cf1 + de1 * b;
                    te[5] = a * e;
                    te[9] = df1 - ce1 * b;
                    te[2] = -a * d;
                    te[6] = b;
                    te[10] = a * c;
                } else if (euler.order === "ZYX") {
                    var ae1 = a * e, af1 = a * f, be1 = b * e, bf1 = b * f;
                    te[0] = c * e;
                    te[4] = be1 * d - af1;
                    te[8] = ae1 * d + bf1;
                    te[1] = c * f;
                    te[5] = bf1 * d + ae1;
                    te[9] = af1 * d - be1;
                    te[2] = -d;
                    te[6] = b * c;
                    te[10] = a * c;
                } else if (euler.order === "YZX") {
                    var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
                    te[0] = c * e;
                    te[4] = bd - ac * f;
                    te[8] = bc * f + ad;
                    te[1] = f;
                    te[5] = a * e;
                    te[9] = -b * e;
                    te[2] = -d * e;
                    te[6] = ad * f + bc;
                    te[10] = ac - bd * f;
                } else if (euler.order === "XZY") {
                    var ac1 = a * c, ad1 = a * d, bc1 = b * c, bd1 = b * d;
                    te[0] = c * e;
                    te[4] = -f;
                    te[8] = d * e;
                    te[1] = ac1 * f + bd1;
                    te[5] = a * e;
                    te[9] = ad1 * f - bc1;
                    te[2] = bc1 * f - ad1;
                    te[6] = b * e;
                    te[10] = bd1 * f + ac1;
                }
                // bottom row
                te[3] = 0;
                te[7] = 0;
                te[11] = 0;
                // last column
                te[12] = 0;
                te[13] = 0;
                te[14] = 0;
                te[15] = 1;
                return this;
            }
        },
        {
            key: "makeRotationFromQuaternion",
            value: function makeRotationFromQuaternion(q) {
                return this.compose($b383cde4e0574ff6$var$_zero, q, $b383cde4e0574ff6$var$_one);
            }
        },
        {
            key: "lookAt",
            value: function lookAt(eye, target, up) {
                var te = this.elements;
                $b383cde4e0574ff6$var$_z.subVectors(eye, target);
                if ($b383cde4e0574ff6$var$_z.lengthSq() === 0) // eye and target are in the same position
                $b383cde4e0574ff6$var$_z.z = 1;
                $b383cde4e0574ff6$var$_z.normalize();
                $b383cde4e0574ff6$var$_x.crossVectors(up, $b383cde4e0574ff6$var$_z);
                if ($b383cde4e0574ff6$var$_x.lengthSq() === 0) {
                    // up and z are parallel
                    if (Math.abs(up.z) === 1) $b383cde4e0574ff6$var$_z.x += 0.0001;
                    else $b383cde4e0574ff6$var$_z.z += 0.0001;
                    $b383cde4e0574ff6$var$_z.normalize();
                    $b383cde4e0574ff6$var$_x.crossVectors(up, $b383cde4e0574ff6$var$_z);
                }
                $b383cde4e0574ff6$var$_x.normalize();
                $b383cde4e0574ff6$var$_y.crossVectors($b383cde4e0574ff6$var$_z, $b383cde4e0574ff6$var$_x);
                te[0] = $b383cde4e0574ff6$var$_x.x;
                te[4] = $b383cde4e0574ff6$var$_y.x;
                te[8] = $b383cde4e0574ff6$var$_z.x;
                te[1] = $b383cde4e0574ff6$var$_x.y;
                te[5] = $b383cde4e0574ff6$var$_y.y;
                te[9] = $b383cde4e0574ff6$var$_z.y;
                te[2] = $b383cde4e0574ff6$var$_x.z;
                te[6] = $b383cde4e0574ff6$var$_y.z;
                te[10] = $b383cde4e0574ff6$var$_z.z;
                return this;
            }
        },
        {
            key: "multiply",
            value: function multiply(m, n) {
                if (n !== undefined) {
                    console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.");
                    return this.multiplyMatrices(m, n);
                }
                return this.multiplyMatrices(this, m);
            }
        },
        {
            key: "premultiply",
            value: function premultiply(m) {
                return this.multiplyMatrices(m, this);
            }
        },
        {
            key: "multiplyMatrices",
            value: function multiplyMatrices(a, b) {
                var ae = a.elements;
                var be = b.elements;
                var te = this.elements;
                var a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
                var a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
                var a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
                var a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
                var b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
                var b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
                var b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
                var b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
                te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
                te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
                te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
                te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
                te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
                te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
                te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
                te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
                te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
                te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
                te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
                te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
                te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
                te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
                te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
                te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
                return this;
            }
        },
        {
            key: "multiplyScalar",
            value: function multiplyScalar(s) {
                var te = this.elements;
                te[0] *= s;
                te[4] *= s;
                te[8] *= s;
                te[12] *= s;
                te[1] *= s;
                te[5] *= s;
                te[9] *= s;
                te[13] *= s;
                te[2] *= s;
                te[6] *= s;
                te[10] *= s;
                te[14] *= s;
                te[3] *= s;
                te[7] *= s;
                te[11] *= s;
                te[15] *= s;
                return this;
            }
        },
        {
            key: "determinant",
            value: function determinant() {
                var te = this.elements;
                var n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
                var n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
                var n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
                var n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
                //TODO: make this more efficient
                //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
                return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
            }
        },
        {
            key: "transpose",
            value: function transpose() {
                var te = this.elements;
                var tmp;
                tmp = te[1];
                te[1] = te[4];
                te[4] = tmp;
                tmp = te[2];
                te[2] = te[8];
                te[8] = tmp;
                tmp = te[6];
                te[6] = te[9];
                te[9] = tmp;
                tmp = te[3];
                te[3] = te[12];
                te[12] = tmp;
                tmp = te[7];
                te[7] = te[13];
                te[13] = tmp;
                tmp = te[11];
                te[11] = te[14];
                te[14] = tmp;
                return this;
            }
        },
        {
            key: "setPosition",
            value: function setPosition(x, y, z) {
                var te = this.elements;
                if (x.isVector3) {
                    te[12] = x.x;
                    te[13] = x.y;
                    te[14] = x.z;
                } else {
                    te[12] = x;
                    te[13] = y;
                    te[14] = z;
                }
                return this;
            }
        },
        {
            key: "invert",
            value: function invert() {
                // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
                var te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
                var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
                if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                var detInv = 1 / det;
                te[0] = t11 * detInv;
                te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
                te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
                te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
                te[4] = t12 * detInv;
                te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
                te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
                te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
                te[8] = t13 * detInv;
                te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
                te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
                te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
                te[12] = t14 * detInv;
                te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
                te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
                te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
                return this;
            }
        },
        {
            key: "scale",
            value: function scale(v) {
                var te = this.elements;
                var x = v.x, y = v.y, z = v.z;
                te[0] *= x;
                te[4] *= y;
                te[8] *= z;
                te[1] *= x;
                te[5] *= y;
                te[9] *= z;
                te[2] *= x;
                te[6] *= y;
                te[10] *= z;
                te[3] *= x;
                te[7] *= y;
                te[11] *= z;
                return this;
            }
        },
        {
            key: "getMaxScaleOnAxis",
            value: function getMaxScaleOnAxis() {
                var te = this.elements;
                var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
                var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
                var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
                return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
            }
        },
        {
            key: "makeTranslation",
            value: function makeTranslation(x, y, z) {
                this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
                return this;
            }
        },
        {
            key: "makeRotationX",
            value: function makeRotationX(theta) {
                var c = Math.cos(theta), s = Math.sin(theta);
                this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
                return this;
            }
        },
        {
            key: "makeRotationY",
            value: function makeRotationY(theta) {
                var c = Math.cos(theta), s = Math.sin(theta);
                this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
                return this;
            }
        },
        {
            key: "makeRotationZ",
            value: function makeRotationZ(theta) {
                var c = Math.cos(theta), s = Math.sin(theta);
                this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
                return this;
            }
        },
        {
            key: "makeRotationAxis",
            value: function makeRotationAxis(axis, angle) {
                // Based on http://www.gamedev.net/reference/articles/article1199.asp
                var c = Math.cos(angle);
                var s = Math.sin(angle);
                var t = 1 - c;
                var x = axis.x, y = axis.y, z = axis.z;
                var tx = t * x, ty = t * y;
                this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
                return this;
            }
        },
        {
            key: "makeScale",
            value: function makeScale(x, y, z) {
                this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
                return this;
            }
        },
        {
            key: "makeShear",
            value: function makeShear(xy, xz, yx, yz, zx, zy) {
                this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);
                return this;
            }
        },
        {
            key: "compose",
            value: function compose(position, quaternion, scale) {
                var te = this.elements;
                var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
                var x2 = x + x, y2 = y + y, z2 = z + z;
                var xx = x * x2, xy = x * y2, xz = x * z2;
                var yy = y * y2, yz = y * z2, zz = z * z2;
                var wx = w * x2, wy = w * y2, wz = w * z2;
                var sx = scale.x, sy = scale.y, sz = scale.z;
                te[0] = (1 - (yy + zz)) * sx;
                te[1] = (xy + wz) * sx;
                te[2] = (xz - wy) * sx;
                te[3] = 0;
                te[4] = (xy - wz) * sy;
                te[5] = (1 - (xx + zz)) * sy;
                te[6] = (yz + wx) * sy;
                te[7] = 0;
                te[8] = (xz + wy) * sz;
                te[9] = (yz - wx) * sz;
                te[10] = (1 - (xx + yy)) * sz;
                te[11] = 0;
                te[12] = position.x;
                te[13] = position.y;
                te[14] = position.z;
                te[15] = 1;
                return this;
            }
        },
        {
            key: "decompose",
            value: function decompose(position, quaternion, scale) {
                var te = this.elements;
                var sx = $b383cde4e0574ff6$var$_v1$5.set(te[0], te[1], te[2]).length();
                var sy = $b383cde4e0574ff6$var$_v1$5.set(te[4], te[5], te[6]).length();
                var sz = $b383cde4e0574ff6$var$_v1$5.set(te[8], te[9], te[10]).length();
                // if determine is negative, we need to invert one scale
                var det = this.determinant();
                if (det < 0) sx = -sx;
                position.x = te[12];
                position.y = te[13];
                position.z = te[14];
                // scale the rotation part
                $b383cde4e0574ff6$var$_m1$2.copy(this);
                var invSX = 1 / sx;
                var invSY = 1 / sy;
                var invSZ = 1 / sz;
                $b383cde4e0574ff6$var$_m1$2.elements[0] *= invSX;
                $b383cde4e0574ff6$var$_m1$2.elements[1] *= invSX;
                $b383cde4e0574ff6$var$_m1$2.elements[2] *= invSX;
                $b383cde4e0574ff6$var$_m1$2.elements[4] *= invSY;
                $b383cde4e0574ff6$var$_m1$2.elements[5] *= invSY;
                $b383cde4e0574ff6$var$_m1$2.elements[6] *= invSY;
                $b383cde4e0574ff6$var$_m1$2.elements[8] *= invSZ;
                $b383cde4e0574ff6$var$_m1$2.elements[9] *= invSZ;
                $b383cde4e0574ff6$var$_m1$2.elements[10] *= invSZ;
                quaternion.setFromRotationMatrix($b383cde4e0574ff6$var$_m1$2);
                scale.x = sx;
                scale.y = sy;
                scale.z = sz;
                return this;
            }
        },
        {
            key: "makePerspective",
            value: function makePerspective(left, right, top, bottom, near, far) {
                if (far === undefined) console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
                var te = this.elements;
                var x = 2 * near / (right - left);
                var y = 2 * near / (top - bottom);
                var a = (right + left) / (right - left);
                var b = (top + bottom) / (top - bottom);
                var c = -(far + near) / (far - near);
                var d = -2 * far * near / (far - near);
                te[0] = x;
                te[4] = 0;
                te[8] = a;
                te[12] = 0;
                te[1] = 0;
                te[5] = y;
                te[9] = b;
                te[13] = 0;
                te[2] = 0;
                te[6] = 0;
                te[10] = c;
                te[14] = d;
                te[3] = 0;
                te[7] = 0;
                te[11] = -1;
                te[15] = 0;
                return this;
            }
        },
        {
            key: "makeOrthographic",
            value: function makeOrthographic(left, right, top, bottom, near, far) {
                var te = this.elements;
                var w = 1.0 / (right - left);
                var h = 1.0 / (top - bottom);
                var p = 1.0 / (far - near);
                var x = (right + left) * w;
                var y = (top + bottom) * h;
                var z = (far + near) * p;
                te[0] = 2 * w;
                te[4] = 0;
                te[8] = 0;
                te[12] = -x;
                te[1] = 0;
                te[5] = 2 * h;
                te[9] = 0;
                te[13] = -y;
                te[2] = 0;
                te[6] = 0;
                te[10] = -2 * p;
                te[14] = -z;
                te[3] = 0;
                te[7] = 0;
                te[11] = 0;
                te[15] = 1;
                return this;
            }
        },
        {
            key: "equals",
            value: function equals(matrix) {
                var te = this.elements;
                var me = matrix.elements;
                for(var i = 0; i < 16; i++){
                    if (te[i] !== me[i]) return false;
                }
                return true;
            }
        },
        {
            key: "fromArray",
            value: function fromArray(array) {
                var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                for(var i = 0; i < 16; i++)this.elements[i] = array[i + offset];
                return this;
            }
        },
        {
            key: "toArray",
            value: function toArray() {
                var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                var te = this.elements;
                array[offset] = te[0];
                array[offset + 1] = te[1];
                array[offset + 2] = te[2];
                array[offset + 3] = te[3];
                array[offset + 4] = te[4];
                array[offset + 5] = te[5];
                array[offset + 6] = te[6];
                array[offset + 7] = te[7];
                array[offset + 8] = te[8];
                array[offset + 9] = te[9];
                array[offset + 10] = te[10];
                array[offset + 11] = te[11];
                array[offset + 12] = te[12];
                array[offset + 13] = te[13];
                array[offset + 14] = te[14];
                array[offset + 15] = te[15];
                return array;
            }
        }
    ]);
    return Matrix4;
}();
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.isMatrix4 = true;
var $b383cde4e0574ff6$var$_v1$5 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_m1$2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_zero = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(0, 0, 0);
var $b383cde4e0574ff6$var$_one = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(1, 1, 1);
var $b383cde4e0574ff6$var$_x = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_y = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_z = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_matrix$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_quaternion$3 = /*@__PURE__*/ new $b383cde4e0574ff6$export$23d6a54f0bbc85a3();
var $b383cde4e0574ff6$export$d93cc409a0768c5f = /*#__PURE__*/ function() {
    "use strict";
    function Euler() {
        var x = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, z = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, order = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Euler.DefaultOrder;
        (0, $dnGTK.default)(this, Euler);
        this._x = x;
        this._y = y;
        this._z = z;
        this._order = order;
    }
    (0, $9SLyD.default)(Euler, [
        {
            key: "x",
            get: function get() {
                return this._x;
            },
            set: function set(value) {
                this._x = value;
                this._onChangeCallback();
            }
        },
        {
            key: "y",
            get: function get() {
                return this._y;
            },
            set: function set(value) {
                this._y = value;
                this._onChangeCallback();
            }
        },
        {
            key: "z",
            get: function get() {
                return this._z;
            },
            set: function set(value) {
                this._z = value;
                this._onChangeCallback();
            }
        },
        {
            key: "order",
            get: function get() {
                return this._order;
            },
            set: function set(value) {
                this._order = value;
                this._onChangeCallback();
            }
        },
        {
            key: "set",
            value: function set(x, y, z) {
                var order = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : this._order;
                this._x = x;
                this._y = y;
                this._z = z;
                this._order = order;
                this._onChangeCallback();
                return this;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor(this._x, this._y, this._z, this._order);
            }
        },
        {
            key: "copy",
            value: function copy(euler) {
                this._x = euler._x;
                this._y = euler._y;
                this._z = euler._z;
                this._order = euler._order;
                this._onChangeCallback();
                return this;
            }
        },
        {
            key: "setFromRotationMatrix",
            value: function setFromRotationMatrix(m) {
                var order = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this._order, update = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
                // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
                var te = m.elements;
                var m11 = te[0], m12 = te[4], m13 = te[8];
                var m21 = te[1], m22 = te[5], m23 = te[9];
                var m31 = te[2], m32 = te[6], m33 = te[10];
                switch(order){
                    case "XYZ":
                        this._y = Math.asin($b383cde4e0574ff6$var$clamp(m13, -1, 1));
                        if (Math.abs(m13) < 0.9999999) {
                            this._x = Math.atan2(-m23, m33);
                            this._z = Math.atan2(-m12, m11);
                        } else {
                            this._x = Math.atan2(m32, m22);
                            this._z = 0;
                        }
                        break;
                    case "YXZ":
                        this._x = Math.asin(-$b383cde4e0574ff6$var$clamp(m23, -1, 1));
                        if (Math.abs(m23) < 0.9999999) {
                            this._y = Math.atan2(m13, m33);
                            this._z = Math.atan2(m21, m22);
                        } else {
                            this._y = Math.atan2(-m31, m11);
                            this._z = 0;
                        }
                        break;
                    case "ZXY":
                        this._x = Math.asin($b383cde4e0574ff6$var$clamp(m32, -1, 1));
                        if (Math.abs(m32) < 0.9999999) {
                            this._y = Math.atan2(-m31, m33);
                            this._z = Math.atan2(-m12, m22);
                        } else {
                            this._y = 0;
                            this._z = Math.atan2(m21, m11);
                        }
                        break;
                    case "ZYX":
                        this._y = Math.asin(-$b383cde4e0574ff6$var$clamp(m31, -1, 1));
                        if (Math.abs(m31) < 0.9999999) {
                            this._x = Math.atan2(m32, m33);
                            this._z = Math.atan2(m21, m11);
                        } else {
                            this._x = 0;
                            this._z = Math.atan2(-m12, m22);
                        }
                        break;
                    case "YZX":
                        this._z = Math.asin($b383cde4e0574ff6$var$clamp(m21, -1, 1));
                        if (Math.abs(m21) < 0.9999999) {
                            this._x = Math.atan2(-m23, m22);
                            this._y = Math.atan2(-m31, m11);
                        } else {
                            this._x = 0;
                            this._y = Math.atan2(m13, m33);
                        }
                        break;
                    case "XZY":
                        this._z = Math.asin(-$b383cde4e0574ff6$var$clamp(m12, -1, 1));
                        if (Math.abs(m12) < 0.9999999) {
                            this._x = Math.atan2(m32, m22);
                            this._y = Math.atan2(m13, m11);
                        } else {
                            this._x = Math.atan2(-m23, m33);
                            this._y = 0;
                        }
                        break;
                    default:
                        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
                }
                this._order = order;
                if (update === true) this._onChangeCallback();
                return this;
            }
        },
        {
            key: "setFromQuaternion",
            value: function setFromQuaternion(q, order, update) {
                $b383cde4e0574ff6$var$_matrix$1.makeRotationFromQuaternion(q);
                return this.setFromRotationMatrix($b383cde4e0574ff6$var$_matrix$1, order, update);
            }
        },
        {
            key: "setFromVector3",
            value: function setFromVector3(v) {
                var order = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this._order;
                return this.set(v.x, v.y, v.z, order);
            }
        },
        {
            key: "reorder",
            value: function reorder(newOrder) {
                // WARNING: this discards revolution information -bhouston
                $b383cde4e0574ff6$var$_quaternion$3.setFromEuler(this);
                return this.setFromQuaternion($b383cde4e0574ff6$var$_quaternion$3, newOrder);
            }
        },
        {
            key: "equals",
            value: function equals(euler) {
                return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
            }
        },
        {
            key: "fromArray",
            value: function fromArray(array) {
                this._x = array[0];
                this._y = array[1];
                this._z = array[2];
                if (array[3] !== undefined) this._order = array[3];
                this._onChangeCallback();
                return this;
            }
        },
        {
            key: "toArray",
            value: function toArray() {
                var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                array[offset] = this._x;
                array[offset + 1] = this._y;
                array[offset + 2] = this._z;
                array[offset + 3] = this._order;
                return array;
            }
        },
        {
            key: "toVector3",
            value: function toVector3(optionalResult) {
                if (optionalResult) return optionalResult.set(this._x, this._y, this._z);
                else return new $b383cde4e0574ff6$export$64b5c384219d3699(this._x, this._y, this._z);
            }
        },
        {
            key: "_onChange",
            value: function _onChange(callback) {
                this._onChangeCallback = callback;
                return this;
            }
        },
        {
            key: "_onChangeCallback",
            value: function _onChangeCallback() {}
        }
    ]);
    return Euler;
}();
$b383cde4e0574ff6$export$d93cc409a0768c5f.prototype.isEuler = true;
$b383cde4e0574ff6$export$d93cc409a0768c5f.DefaultOrder = "XYZ";
$b383cde4e0574ff6$export$d93cc409a0768c5f.RotationOrders = [
    "XYZ",
    "YZX",
    "ZXY",
    "XZY",
    "YXZ",
    "ZYX"
];
var $b383cde4e0574ff6$export$89312ce47c0ca777 = /*#__PURE__*/ function() {
    "use strict";
    function Layers() {
        (0, $dnGTK.default)(this, Layers);
        this.mask = 1;
    }
    (0, $9SLyD.default)(Layers, [
        {
            key: "set",
            value: function set(channel) {
                this.mask = 1 << channel | 0;
            }
        },
        {
            key: "enable",
            value: function enable(channel) {
                this.mask |= 1 << channel | 0;
            }
        },
        {
            key: "enableAll",
            value: function enableAll() {
                this.mask = -1;
            }
        },
        {
            key: "toggle",
            value: function toggle(channel) {
                this.mask ^= 1 << channel | 0;
            }
        },
        {
            key: "disable",
            value: function disable(channel) {
                this.mask &= ~(1 << channel | 0);
            }
        },
        {
            key: "disableAll",
            value: function disableAll() {
                this.mask = 0;
            }
        },
        {
            key: "test",
            value: function test(layers) {
                return (this.mask & layers.mask) !== 0;
            }
        }
    ]);
    return Layers;
}();
var $b383cde4e0574ff6$var$_object3DId = 0;
var $b383cde4e0574ff6$var$_v1$4 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_q1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$23d6a54f0bbc85a3();
var $b383cde4e0574ff6$var$_m1$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_target = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_position$3 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_scale$2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_quaternion$2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$23d6a54f0bbc85a3();
var $b383cde4e0574ff6$var$_xAxis = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(1, 0, 0);
var $b383cde4e0574ff6$var$_yAxis = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(0, 1, 0);
var $b383cde4e0574ff6$var$_zAxis = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(0, 0, 1);
var $b383cde4e0574ff6$var$_addedEvent = {
    type: "added"
};
var $b383cde4e0574ff6$var$_removedEvent = {
    type: "removed"
};
var $b383cde4e0574ff6$export$e4dd07dff30cc924 = /*#__PURE__*/ function(EventDispatcher) {
    "use strict";
    (0, $gQI4D.default)(Object3D, EventDispatcher);
    var _super = (0, $a0Xbx.default)(Object3D);
    function Object3D() {
        (0, $dnGTK.default)(this, Object3D);
        var _this;
        var onRotationChange = function onRotationChange() {
            quaternion.setFromEuler(rotation, false);
        };
        var onQuaternionChange = function onQuaternionChange() {
            rotation.setFromQuaternion(quaternion, undefined, false);
        };
        _this = _super.call(this);
        Object.defineProperty((0, $4enQD.default)(_this), "id", {
            value: $b383cde4e0574ff6$var$_object3DId++
        });
        _this.uuid = $b383cde4e0574ff6$var$generateUUID();
        _this.name = "";
        _this.type = "Object3D";
        _this.parent = null;
        _this.children = [];
        _this.up = Object3D.DefaultUp.clone();
        var position = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var rotation = new $b383cde4e0574ff6$export$d93cc409a0768c5f();
        var quaternion = new $b383cde4e0574ff6$export$23d6a54f0bbc85a3();
        var scale = new $b383cde4e0574ff6$export$64b5c384219d3699(1, 1, 1);
        rotation._onChange(onRotationChange);
        quaternion._onChange(onQuaternionChange);
        Object.defineProperties((0, $4enQD.default)(_this), {
            position: {
                configurable: true,
                enumerable: true,
                value: position
            },
            rotation: {
                configurable: true,
                enumerable: true,
                value: rotation
            },
            quaternion: {
                configurable: true,
                enumerable: true,
                value: quaternion
            },
            scale: {
                configurable: true,
                enumerable: true,
                value: scale
            },
            modelViewMatrix: {
                value: new $b383cde4e0574ff6$export$2ae72fc923e5eb5()
            },
            normalMatrix: {
                value: new $b383cde4e0574ff6$export$8ff26dafa08918()
            }
        });
        _this.matrix = new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
        _this.matrixWorld = new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
        _this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
        _this.matrixWorldNeedsUpdate = false;
        _this.layers = new $b383cde4e0574ff6$export$89312ce47c0ca777();
        _this.visible = true;
        _this.castShadow = false;
        _this.receiveShadow = false;
        _this.frustumCulled = true;
        _this.renderOrder = 0;
        _this.animations = [];
        _this.userData = {};
        return _this;
    }
    (0, $9SLyD.default)(Object3D, [
        {
            key: "onBeforeRender",
            value: function onBeforeRender() {}
        },
        {
            key: "onAfterRender",
            value: function onAfterRender() {}
        },
        {
            key: "applyMatrix4",
            value: function applyMatrix4(matrix) {
                if (this.matrixAutoUpdate) this.updateMatrix();
                this.matrix.premultiply(matrix);
                this.matrix.decompose(this.position, this.quaternion, this.scale);
            }
        },
        {
            key: "applyQuaternion",
            value: function applyQuaternion(q) {
                this.quaternion.premultiply(q);
                return this;
            }
        },
        {
            key: "setRotationFromAxisAngle",
            value: function setRotationFromAxisAngle(axis, angle) {
                // assumes axis is normalized
                this.quaternion.setFromAxisAngle(axis, angle);
            }
        },
        {
            key: "setRotationFromEuler",
            value: function setRotationFromEuler(euler) {
                this.quaternion.setFromEuler(euler, true);
            }
        },
        {
            key: "setRotationFromMatrix",
            value: function setRotationFromMatrix(m) {
                // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
                this.quaternion.setFromRotationMatrix(m);
            }
        },
        {
            key: "setRotationFromQuaternion",
            value: function setRotationFromQuaternion(q) {
                // assumes q is normalized
                this.quaternion.copy(q);
            }
        },
        {
            key: "rotateOnAxis",
            value: function rotateOnAxis(axis, angle) {
                // rotate object on axis in object space
                // axis is assumed to be normalized
                $b383cde4e0574ff6$var$_q1.setFromAxisAngle(axis, angle);
                this.quaternion.multiply($b383cde4e0574ff6$var$_q1);
                return this;
            }
        },
        {
            key: "rotateOnWorldAxis",
            value: function rotateOnWorldAxis(axis, angle) {
                // rotate object on axis in world space
                // axis is assumed to be normalized
                // method assumes no rotated parent
                $b383cde4e0574ff6$var$_q1.setFromAxisAngle(axis, angle);
                this.quaternion.premultiply($b383cde4e0574ff6$var$_q1);
                return this;
            }
        },
        {
            key: "rotateX",
            value: function rotateX(angle) {
                return this.rotateOnAxis($b383cde4e0574ff6$var$_xAxis, angle);
            }
        },
        {
            key: "rotateY",
            value: function rotateY(angle) {
                return this.rotateOnAxis($b383cde4e0574ff6$var$_yAxis, angle);
            }
        },
        {
            key: "rotateZ",
            value: function rotateZ(angle) {
                return this.rotateOnAxis($b383cde4e0574ff6$var$_zAxis, angle);
            }
        },
        {
            key: "translateOnAxis",
            value: function translateOnAxis(axis, distance) {
                // translate object by distance along axis in object space
                // axis is assumed to be normalized
                $b383cde4e0574ff6$var$_v1$4.copy(axis).applyQuaternion(this.quaternion);
                this.position.add($b383cde4e0574ff6$var$_v1$4.multiplyScalar(distance));
                return this;
            }
        },
        {
            key: "translateX",
            value: function translateX(distance) {
                return this.translateOnAxis($b383cde4e0574ff6$var$_xAxis, distance);
            }
        },
        {
            key: "translateY",
            value: function translateY(distance) {
                return this.translateOnAxis($b383cde4e0574ff6$var$_yAxis, distance);
            }
        },
        {
            key: "translateZ",
            value: function translateZ(distance) {
                return this.translateOnAxis($b383cde4e0574ff6$var$_zAxis, distance);
            }
        },
        {
            key: "localToWorld",
            value: function localToWorld(vector) {
                return vector.applyMatrix4(this.matrixWorld);
            }
        },
        {
            key: "worldToLocal",
            value: function worldToLocal(vector) {
                return vector.applyMatrix4($b383cde4e0574ff6$var$_m1$1.copy(this.matrixWorld).invert());
            }
        },
        {
            key: "lookAt",
            value: function lookAt(x, y, z) {
                // This method does not support objects having non-uniformly-scaled parent(s)
                if (x.isVector3) $b383cde4e0574ff6$var$_target.copy(x);
                else $b383cde4e0574ff6$var$_target.set(x, y, z);
                var parent = this.parent;
                this.updateWorldMatrix(true, false);
                $b383cde4e0574ff6$var$_position$3.setFromMatrixPosition(this.matrixWorld);
                if (this.isCamera || this.isLight) $b383cde4e0574ff6$var$_m1$1.lookAt($b383cde4e0574ff6$var$_position$3, $b383cde4e0574ff6$var$_target, this.up);
                else $b383cde4e0574ff6$var$_m1$1.lookAt($b383cde4e0574ff6$var$_target, $b383cde4e0574ff6$var$_position$3, this.up);
                this.quaternion.setFromRotationMatrix($b383cde4e0574ff6$var$_m1$1);
                if (parent) {
                    $b383cde4e0574ff6$var$_m1$1.extractRotation(parent.matrixWorld);
                    $b383cde4e0574ff6$var$_q1.setFromRotationMatrix($b383cde4e0574ff6$var$_m1$1);
                    this.quaternion.premultiply($b383cde4e0574ff6$var$_q1.invert());
                }
            }
        },
        {
            key: "add",
            value: function add(object) {
                if (arguments.length > 1) {
                    for(var i = 0; i < arguments.length; i++)this.add(arguments[i]);
                    return this;
                }
                if (object === this) {
                    console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
                    return this;
                }
                if (object && object.isObject3D) {
                    if (object.parent !== null) object.parent.remove(object);
                    object.parent = this;
                    this.children.push(object);
                    object.dispatchEvent($b383cde4e0574ff6$var$_addedEvent);
                } else console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
                return this;
            }
        },
        {
            key: "remove",
            value: function remove(object) {
                if (arguments.length > 1) {
                    for(var i = 0; i < arguments.length; i++)this.remove(arguments[i]);
                    return this;
                }
                var index = this.children.indexOf(object);
                if (index !== -1) {
                    object.parent = null;
                    this.children.splice(index, 1);
                    object.dispatchEvent($b383cde4e0574ff6$var$_removedEvent);
                }
                return this;
            }
        },
        {
            key: "removeFromParent",
            value: function removeFromParent() {
                var parent = this.parent;
                if (parent !== null) parent.remove(this);
                return this;
            }
        },
        {
            key: "clear",
            value: function clear() {
                for(var i = 0; i < this.children.length; i++){
                    var object = this.children[i];
                    object.parent = null;
                    object.dispatchEvent($b383cde4e0574ff6$var$_removedEvent);
                }
                this.children.length = 0;
                return this;
            }
        },
        {
            key: "attach",
            value: function attach(object) {
                // adds object as a child of this, while maintaining the object's world transform
                this.updateWorldMatrix(true, false);
                $b383cde4e0574ff6$var$_m1$1.copy(this.matrixWorld).invert();
                if (object.parent !== null) {
                    object.parent.updateWorldMatrix(true, false);
                    $b383cde4e0574ff6$var$_m1$1.multiply(object.parent.matrixWorld);
                }
                object.applyMatrix4($b383cde4e0574ff6$var$_m1$1);
                this.add(object);
                object.updateWorldMatrix(false, true);
                return this;
            }
        },
        {
            key: "getObjectById",
            value: function getObjectById(id) {
                return this.getObjectByProperty("id", id);
            }
        },
        {
            key: "getObjectByName",
            value: function getObjectByName(name) {
                return this.getObjectByProperty("name", name);
            }
        },
        {
            key: "getObjectByProperty",
            value: function getObjectByProperty(name, value) {
                if (this[name] === value) return this;
                for(var i = 0, l = this.children.length; i < l; i++){
                    var child = this.children[i];
                    var object = child.getObjectByProperty(name, value);
                    if (object !== undefined) return object;
                }
                return undefined;
            }
        },
        {
            key: "getWorldPosition",
            value: function getWorldPosition(target) {
                this.updateWorldMatrix(true, false);
                return target.setFromMatrixPosition(this.matrixWorld);
            }
        },
        {
            key: "getWorldQuaternion",
            value: function getWorldQuaternion(target) {
                this.updateWorldMatrix(true, false);
                this.matrixWorld.decompose($b383cde4e0574ff6$var$_position$3, target, $b383cde4e0574ff6$var$_scale$2);
                return target;
            }
        },
        {
            key: "getWorldScale",
            value: function getWorldScale(target) {
                this.updateWorldMatrix(true, false);
                this.matrixWorld.decompose($b383cde4e0574ff6$var$_position$3, $b383cde4e0574ff6$var$_quaternion$2, target);
                return target;
            }
        },
        {
            key: "getWorldDirection",
            value: function getWorldDirection(target) {
                this.updateWorldMatrix(true, false);
                var e = this.matrixWorld.elements;
                return target.set(e[8], e[9], e[10]).normalize();
            }
        },
        {
            key: "raycast",
            value: function raycast() {}
        },
        {
            key: "traverse",
            value: function traverse(callback) {
                callback(this);
                var children = this.children;
                for(var i = 0, l = children.length; i < l; i++)children[i].traverse(callback);
            }
        },
        {
            key: "traverseVisible",
            value: function traverseVisible(callback) {
                if (this.visible === false) return;
                callback(this);
                var children = this.children;
                for(var i = 0, l = children.length; i < l; i++)children[i].traverseVisible(callback);
            }
        },
        {
            key: "traverseAncestors",
            value: function traverseAncestors(callback) {
                var parent = this.parent;
                if (parent !== null) {
                    callback(parent);
                    parent.traverseAncestors(callback);
                }
            }
        },
        {
            key: "updateMatrix",
            value: function updateMatrix() {
                this.matrix.compose(this.position, this.quaternion, this.scale);
                this.matrixWorldNeedsUpdate = true;
            }
        },
        {
            key: "updateMatrixWorld",
            value: function updateMatrixWorld(force) {
                if (this.matrixAutoUpdate) this.updateMatrix();
                if (this.matrixWorldNeedsUpdate || force) {
                    if (this.parent === null) this.matrixWorld.copy(this.matrix);
                    else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
                    this.matrixWorldNeedsUpdate = false;
                    force = true;
                }
                // update children
                var children = this.children;
                for(var i = 0, l = children.length; i < l; i++)children[i].updateMatrixWorld(force);
            }
        },
        {
            key: "updateWorldMatrix",
            value: function updateWorldMatrix(updateParents, updateChildren) {
                var parent = this.parent;
                if (updateParents === true && parent !== null) parent.updateWorldMatrix(true, false);
                if (this.matrixAutoUpdate) this.updateMatrix();
                if (this.parent === null) this.matrixWorld.copy(this.matrix);
                else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
                // update children
                if (updateChildren === true) {
                    var children = this.children;
                    for(var i = 0, l = children.length; i < l; i++)children[i].updateWorldMatrix(false, true);
                }
            }
        },
        {
            key: "toJSON",
            value: function toJSON(meta) {
                var serialize = //
                function serialize(library, element) {
                    if (library[element.uuid] === undefined) library[element.uuid] = element.toJSON(meta);
                    return element.uuid;
                };
                var extractFromCache = // extract data from the cache hash
                // remove metadata on each item
                // and return as array
                function extractFromCache(cache) {
                    var values = [];
                    for(var key in cache){
                        var data = cache[key];
                        delete data.metadata;
                        values.push(data);
                    }
                    return values;
                };
                // meta is a string when called from JSON.stringify
                var isRootObject = meta === undefined || typeof meta === "string";
                var output = {};
                // meta is a hash used to collect geometries, materials.
                // not providing it implies that this is the root object
                // being serialized.
                if (isRootObject) {
                    // initialize meta obj
                    meta = {
                        geometries: {},
                        materials: {},
                        textures: {},
                        images: {},
                        shapes: {},
                        skeletons: {},
                        animations: {}
                    };
                    output.metadata = {
                        version: 4.5,
                        type: "Object",
                        generator: "Object3D.toJSON"
                    };
                }
                // standard Object3D serialization
                var object = {};
                object.uuid = this.uuid;
                object.type = this.type;
                if (this.name !== "") object.name = this.name;
                if (this.castShadow === true) object.castShadow = true;
                if (this.receiveShadow === true) object.receiveShadow = true;
                if (this.visible === false) object.visible = false;
                if (this.frustumCulled === false) object.frustumCulled = false;
                if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
                if (JSON.stringify(this.userData) !== "{}") object.userData = this.userData;
                object.layers = this.layers.mask;
                object.matrix = this.matrix.toArray();
                if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
                // object specific properties
                if (this.isInstancedMesh) {
                    object.type = "InstancedMesh";
                    object.count = this.count;
                    object.instanceMatrix = this.instanceMatrix.toJSON();
                    if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
                }
                if (this.isScene) {
                    if (this.background) {
                        if (this.background.isColor) object.background = this.background.toJSON();
                        else if (this.background.isTexture) object.background = this.background.toJSON(meta).uuid;
                    }
                    if (this.environment && this.environment.isTexture) object.environment = this.environment.toJSON(meta).uuid;
                } else if (this.isMesh || this.isLine || this.isPoints) {
                    object.geometry = serialize(meta.geometries, this.geometry);
                    var parameters = this.geometry.parameters;
                    if (parameters !== undefined && parameters.shapes !== undefined) {
                        var shapes = parameters.shapes;
                        if (Array.isArray(shapes)) for(var i = 0, l = shapes.length; i < l; i++){
                            var shape = shapes[i];
                            serialize(meta.shapes, shape);
                        }
                        else serialize(meta.shapes, shapes);
                    }
                }
                if (this.isSkinnedMesh) {
                    object.bindMode = this.bindMode;
                    object.bindMatrix = this.bindMatrix.toArray();
                    if (this.skeleton !== undefined) {
                        serialize(meta.skeletons, this.skeleton);
                        object.skeleton = this.skeleton.uuid;
                    }
                }
                if (this.material !== undefined) {
                    if (Array.isArray(this.material)) {
                        var uuids = [];
                        for(var i1 = 0, l1 = this.material.length; i1 < l1; i1++)uuids.push(serialize(meta.materials, this.material[i1]));
                        object.material = uuids;
                    } else object.material = serialize(meta.materials, this.material);
                }
                //
                if (this.children.length > 0) {
                    object.children = [];
                    for(var i2 = 0; i2 < this.children.length; i2++)object.children.push(this.children[i2].toJSON(meta).object);
                }
                //
                if (this.animations.length > 0) {
                    object.animations = [];
                    for(var i3 = 0; i3 < this.animations.length; i3++){
                        var animation = this.animations[i3];
                        object.animations.push(serialize(meta.animations, animation));
                    }
                }
                if (isRootObject) {
                    var geometries = extractFromCache(meta.geometries);
                    var materials = extractFromCache(meta.materials);
                    var textures = extractFromCache(meta.textures);
                    var images = extractFromCache(meta.images);
                    var shapes1 = extractFromCache(meta.shapes);
                    var skeletons = extractFromCache(meta.skeletons);
                    var animations = extractFromCache(meta.animations);
                    if (geometries.length > 0) output.geometries = geometries;
                    if (materials.length > 0) output.materials = materials;
                    if (textures.length > 0) output.textures = textures;
                    if (images.length > 0) output.images = images;
                    if (shapes1.length > 0) output.shapes = shapes1;
                    if (skeletons.length > 0) output.skeletons = skeletons;
                    if (animations.length > 0) output.animations = animations;
                }
                output.object = object;
                return output;
            }
        },
        {
            key: "clone",
            value: function clone(recursive) {
                return new this.constructor().copy(this, recursive);
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                var recursive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
                this.name = source.name;
                this.up.copy(source.up);
                this.position.copy(source.position);
                this.rotation.order = source.rotation.order;
                this.quaternion.copy(source.quaternion);
                this.scale.copy(source.scale);
                this.matrix.copy(source.matrix);
                this.matrixWorld.copy(source.matrixWorld);
                this.matrixAutoUpdate = source.matrixAutoUpdate;
                this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
                this.layers.mask = source.layers.mask;
                this.visible = source.visible;
                this.castShadow = source.castShadow;
                this.receiveShadow = source.receiveShadow;
                this.frustumCulled = source.frustumCulled;
                this.renderOrder = source.renderOrder;
                this.userData = JSON.parse(JSON.stringify(source.userData));
                if (recursive === true) for(var i = 0; i < source.children.length; i++){
                    var child = source.children[i];
                    this.add(child.clone());
                }
                return this;
            }
        }
    ]);
    return Object3D;
}($b383cde4e0574ff6$export$ec8b666c5fe2c75a);
$b383cde4e0574ff6$export$e4dd07dff30cc924.DefaultUp = new $b383cde4e0574ff6$export$64b5c384219d3699(0, 1, 0);
$b383cde4e0574ff6$export$e4dd07dff30cc924.DefaultMatrixAutoUpdate = true;
$b383cde4e0574ff6$export$e4dd07dff30cc924.prototype.isObject3D = true;
var $b383cde4e0574ff6$var$_v0$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_v1$3 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_v2$2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_v3$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_vab = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_vac = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_vbc = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_vap = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_vbp = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_vcp = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$5a465592bfe74b48 = /*#__PURE__*/ function() {
    "use strict";
    function Triangle() {
        var a = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$64b5c384219d3699(), b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$64b5c384219d3699(), c = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new $b383cde4e0574ff6$export$64b5c384219d3699();
        (0, $dnGTK.default)(this, Triangle);
        this.a = a;
        this.b = b;
        this.c = c;
    }
    (0, $9SLyD.default)(Triangle, [
        {
            key: "set",
            value: function set(a, b, c) {
                this.a.copy(a);
                this.b.copy(b);
                this.c.copy(c);
                return this;
            }
        },
        {
            key: "setFromPointsAndIndices",
            value: function setFromPointsAndIndices(points, i0, i1, i2) {
                this.a.copy(points[i0]);
                this.b.copy(points[i1]);
                this.c.copy(points[i2]);
                return this;
            }
        },
        {
            key: "setFromAttributeAndIndices",
            value: function setFromAttributeAndIndices(attribute, i0, i1, i2) {
                this.a.fromBufferAttribute(attribute, i0);
                this.b.fromBufferAttribute(attribute, i1);
                this.c.fromBufferAttribute(attribute, i2);
                return this;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        },
        {
            key: "copy",
            value: function copy(triangle) {
                this.a.copy(triangle.a);
                this.b.copy(triangle.b);
                this.c.copy(triangle.c);
                return this;
            }
        },
        {
            key: "getArea",
            value: function getArea() {
                $b383cde4e0574ff6$var$_v0$1.subVectors(this.c, this.b);
                $b383cde4e0574ff6$var$_v1$3.subVectors(this.a, this.b);
                return $b383cde4e0574ff6$var$_v0$1.cross($b383cde4e0574ff6$var$_v1$3).length() * 0.5;
            }
        },
        {
            key: "getMidpoint",
            value: function getMidpoint(target) {
                return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
            }
        },
        {
            key: "getNormal",
            value: function getNormal(target) {
                return Triangle.getNormal(this.a, this.b, this.c, target);
            }
        },
        {
            key: "getPlane",
            value: function getPlane(target) {
                return target.setFromCoplanarPoints(this.a, this.b, this.c);
            }
        },
        {
            key: "getBarycoord",
            value: function getBarycoord(point, target) {
                return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
            }
        },
        {
            key: "getUV",
            value: function getUV(point, uv1, uv2, uv3, target) {
                return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
            }
        },
        {
            key: "containsPoint",
            value: function containsPoint(point) {
                return Triangle.containsPoint(point, this.a, this.b, this.c);
            }
        },
        {
            key: "isFrontFacing",
            value: function isFrontFacing(direction) {
                return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
            }
        },
        {
            key: "intersectsBox",
            value: function intersectsBox(box) {
                return box.intersectsTriangle(this);
            }
        },
        {
            key: "closestPointToPoint",
            value: function closestPointToPoint(p, target) {
                var a = this.a, b = this.b, c = this.c;
                var v, w;
                // algorithm thanks to Real-Time Collision Detection by Christer Ericson,
                // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
                // under the accompanying license; see chapter 5.1.5 for detailed explanation.
                // basically, we're distinguishing which of the voronoi regions of the triangle
                // the point lies in with the minimum amount of redundant computation.
                $b383cde4e0574ff6$var$_vab.subVectors(b, a);
                $b383cde4e0574ff6$var$_vac.subVectors(c, a);
                $b383cde4e0574ff6$var$_vap.subVectors(p, a);
                var d1 = $b383cde4e0574ff6$var$_vab.dot($b383cde4e0574ff6$var$_vap);
                var d2 = $b383cde4e0574ff6$var$_vac.dot($b383cde4e0574ff6$var$_vap);
                if (d1 <= 0 && d2 <= 0) // vertex region of A; barycentric coords (1, 0, 0)
                return target.copy(a);
                $b383cde4e0574ff6$var$_vbp.subVectors(p, b);
                var d3 = $b383cde4e0574ff6$var$_vab.dot($b383cde4e0574ff6$var$_vbp);
                var d4 = $b383cde4e0574ff6$var$_vac.dot($b383cde4e0574ff6$var$_vbp);
                if (d3 >= 0 && d4 <= d3) // vertex region of B; barycentric coords (0, 1, 0)
                return target.copy(b);
                var vc = d1 * d4 - d3 * d2;
                if (vc <= 0 && d1 >= 0 && d3 <= 0) {
                    v = d1 / (d1 - d3);
                    // edge region of AB; barycentric coords (1-v, v, 0)
                    return target.copy(a).addScaledVector($b383cde4e0574ff6$var$_vab, v);
                }
                $b383cde4e0574ff6$var$_vcp.subVectors(p, c);
                var d5 = $b383cde4e0574ff6$var$_vab.dot($b383cde4e0574ff6$var$_vcp);
                var d6 = $b383cde4e0574ff6$var$_vac.dot($b383cde4e0574ff6$var$_vcp);
                if (d6 >= 0 && d5 <= d6) // vertex region of C; barycentric coords (0, 0, 1)
                return target.copy(c);
                var vb = d5 * d2 - d1 * d6;
                if (vb <= 0 && d2 >= 0 && d6 <= 0) {
                    w = d2 / (d2 - d6);
                    // edge region of AC; barycentric coords (1-w, 0, w)
                    return target.copy(a).addScaledVector($b383cde4e0574ff6$var$_vac, w);
                }
                var va = d3 * d6 - d5 * d4;
                if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
                    $b383cde4e0574ff6$var$_vbc.subVectors(c, b);
                    w = (d4 - d3) / (d4 - d3 + (d5 - d6));
                    // edge region of BC; barycentric coords (0, 1-w, w)
                    return target.copy(b).addScaledVector($b383cde4e0574ff6$var$_vbc, w); // edge region of BC
                }
                // face region
                var denom = 1 / (va + vb + vc);
                // u = va * denom
                v = vb * denom;
                w = vc * denom;
                return target.copy(a).addScaledVector($b383cde4e0574ff6$var$_vab, v).addScaledVector($b383cde4e0574ff6$var$_vac, w);
            }
        },
        {
            key: "equals",
            value: function equals(triangle) {
                return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
            }
        }
    ], [
        {
            key: "getNormal",
            value: function getNormal(a, b, c, target) {
                target.subVectors(c, b);
                $b383cde4e0574ff6$var$_v0$1.subVectors(a, b);
                target.cross($b383cde4e0574ff6$var$_v0$1);
                var targetLengthSq = target.lengthSq();
                if (targetLengthSq > 0) return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
                return target.set(0, 0, 0);
            }
        },
        {
            key: "getBarycoord",
            value: // static/instance method to calculate barycentric coordinates
            // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
            function getBarycoord(point, a, b, c, target) {
                $b383cde4e0574ff6$var$_v0$1.subVectors(c, a);
                $b383cde4e0574ff6$var$_v1$3.subVectors(b, a);
                $b383cde4e0574ff6$var$_v2$2.subVectors(point, a);
                var dot00 = $b383cde4e0574ff6$var$_v0$1.dot($b383cde4e0574ff6$var$_v0$1);
                var dot01 = $b383cde4e0574ff6$var$_v0$1.dot($b383cde4e0574ff6$var$_v1$3);
                var dot02 = $b383cde4e0574ff6$var$_v0$1.dot($b383cde4e0574ff6$var$_v2$2);
                var dot11 = $b383cde4e0574ff6$var$_v1$3.dot($b383cde4e0574ff6$var$_v1$3);
                var dot12 = $b383cde4e0574ff6$var$_v1$3.dot($b383cde4e0574ff6$var$_v2$2);
                var denom = dot00 * dot11 - dot01 * dot01;
                // collinear or singular triangle
                if (denom === 0) // arbitrary location outside of triangle?
                // not sure if this is the best idea, maybe should be returning undefined
                return target.set(-2, -1, -1);
                var invDenom = 1 / denom;
                var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
                var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
                // barycentric coordinates must always sum to 1
                return target.set(1 - u - v, v, u);
            }
        },
        {
            key: "containsPoint",
            value: function containsPoint(point, a, b, c) {
                this.getBarycoord(point, a, b, c, $b383cde4e0574ff6$var$_v3$1);
                return $b383cde4e0574ff6$var$_v3$1.x >= 0 && $b383cde4e0574ff6$var$_v3$1.y >= 0 && $b383cde4e0574ff6$var$_v3$1.x + $b383cde4e0574ff6$var$_v3$1.y <= 1;
            }
        },
        {
            key: "getUV",
            value: function getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
                this.getBarycoord(point, p1, p2, p3, $b383cde4e0574ff6$var$_v3$1);
                target.set(0, 0);
                target.addScaledVector(uv1, $b383cde4e0574ff6$var$_v3$1.x);
                target.addScaledVector(uv2, $b383cde4e0574ff6$var$_v3$1.y);
                target.addScaledVector(uv3, $b383cde4e0574ff6$var$_v3$1.z);
                return target;
            }
        },
        {
            key: "isFrontFacing",
            value: function isFrontFacing(a, b, c, direction) {
                $b383cde4e0574ff6$var$_v0$1.subVectors(c, b);
                $b383cde4e0574ff6$var$_v1$3.subVectors(a, b);
                // strictly front facing
                return $b383cde4e0574ff6$var$_v0$1.cross($b383cde4e0574ff6$var$_v1$3).dot(direction) < 0 ? true : false;
            }
        }
    ]);
    return Triangle;
}();
var $b383cde4e0574ff6$var$materialId = 0;
var $b383cde4e0574ff6$export$a2d8b23205c25948 = /*#__PURE__*/ function(EventDispatcher) {
    "use strict";
    (0, $gQI4D.default)(Material, EventDispatcher);
    var _super = (0, $a0Xbx.default)(Material);
    function Material() {
        (0, $dnGTK.default)(this, Material);
        var _this;
        _this = _super.call(this);
        Object.defineProperty((0, $4enQD.default)(_this), "id", {
            value: $b383cde4e0574ff6$var$materialId++
        });
        _this.uuid = $b383cde4e0574ff6$var$generateUUID();
        _this.name = "";
        _this.type = "Material";
        _this.fog = true;
        _this.blending = $b383cde4e0574ff6$export$5b29a26d96ee6af0;
        _this.side = $b383cde4e0574ff6$export$2ede184fc2998901;
        _this.vertexColors = false;
        _this.opacity = 1;
        _this.format = $b383cde4e0574ff6$export$3f8bb04b555a363c;
        _this.transparent = false;
        _this.blendSrc = $b383cde4e0574ff6$export$d5773124e86cf28c;
        _this.blendDst = $b383cde4e0574ff6$export$11d468cc7f19e971;
        _this.blendEquation = $b383cde4e0574ff6$export$20183a0484ce21a0;
        _this.blendSrcAlpha = null;
        _this.blendDstAlpha = null;
        _this.blendEquationAlpha = null;
        _this.depthFunc = $b383cde4e0574ff6$export$296f78a0b892f81a;
        _this.depthTest = true;
        _this.depthWrite = true;
        _this.stencilWriteMask = 0xff;
        _this.stencilFunc = $b383cde4e0574ff6$export$14cf96713ddd97a8;
        _this.stencilRef = 0;
        _this.stencilFuncMask = 0xff;
        _this.stencilFail = $b383cde4e0574ff6$export$9f542ae4b5baca34;
        _this.stencilZFail = $b383cde4e0574ff6$export$9f542ae4b5baca34;
        _this.stencilZPass = $b383cde4e0574ff6$export$9f542ae4b5baca34;
        _this.stencilWrite = false;
        _this.clippingPlanes = null;
        _this.clipIntersection = false;
        _this.clipShadows = false;
        _this.shadowSide = null;
        _this.colorWrite = true;
        _this.precision = null; // override the renderer's default precision for this material
        _this.polygonOffset = false;
        _this.polygonOffsetFactor = 0;
        _this.polygonOffsetUnits = 0;
        _this.dithering = false;
        _this.alphaToCoverage = false;
        _this.premultipliedAlpha = false;
        _this.visible = true;
        _this.toneMapped = true;
        _this.userData = {};
        _this.version = 0;
        _this._alphaTest = 0;
        return _this;
    }
    (0, $9SLyD.default)(Material, [
        {
            key: "alphaTest",
            get: function get() {
                return this._alphaTest;
            },
            set: function set(value) {
                if (this._alphaTest > 0 !== value > 0) this.version++;
                this._alphaTest = value;
            }
        },
        {
            key: "onBuild",
            value: function onBuild() {}
        },
        {
            key: "onBeforeRender",
            value: function onBeforeRender() {}
        },
        {
            key: "onBeforeCompile",
            value: function onBeforeCompile() {}
        },
        {
            key: "customProgramCacheKey",
            value: function customProgramCacheKey() {
                return this.onBeforeCompile.toString();
            }
        },
        {
            key: "setValues",
            value: function setValues(values) {
                if (values === undefined) return;
                for(var key in values){
                    var newValue = values[key];
                    if (newValue === undefined) {
                        console.warn("THREE.Material: '" + key + "' parameter is undefined.");
                        continue;
                    }
                    // for backward compatability if shading is set in the constructor
                    if (key === "shading") {
                        console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
                        this.flatShading = newValue === $b383cde4e0574ff6$export$a62047d29c96d8ff ? true : false;
                        continue;
                    }
                    var currentValue = this[key];
                    if (currentValue === undefined) {
                        console.warn("THREE." + this.type + ": '" + key + "' is not a property of this material.");
                        continue;
                    }
                    if (currentValue && currentValue.isColor) currentValue.set(newValue);
                    else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) currentValue.copy(newValue);
                    else this[key] = newValue;
                }
            }
        },
        {
            key: "toJSON",
            value: function toJSON(meta) {
                var extractFromCache = // TODO: Copied from Object3D.toJSON
                function extractFromCache(cache) {
                    var values = [];
                    for(var key in cache){
                        var data = cache[key];
                        delete data.metadata;
                        values.push(data);
                    }
                    return values;
                };
                var isRoot = meta === undefined || typeof meta === "string";
                if (isRoot) meta = {
                    textures: {},
                    images: {}
                };
                var data = {
                    metadata: {
                        version: 4.5,
                        type: "Material",
                        generator: "Material.toJSON"
                    }
                };
                // standard Material serialization
                data.uuid = this.uuid;
                data.type = this.type;
                if (this.name !== "") data.name = this.name;
                if (this.color && this.color.isColor) data.color = this.color.getHex();
                if (this.roughness !== undefined) data.roughness = this.roughness;
                if (this.metalness !== undefined) data.metalness = this.metalness;
                if (this.sheen !== undefined) data.sheen = this.sheen;
                if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
                if (this.sheenRoughness !== undefined) data.sheenRoughness = this.sheenRoughness;
                if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
                if (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
                if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
                if (this.specularIntensity !== undefined) data.specularIntensity = this.specularIntensity;
                if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
                if (this.shininess !== undefined) data.shininess = this.shininess;
                if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;
                if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;
                if (this.clearcoatMap && this.clearcoatMap.isTexture) data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
                if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
                if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
                    data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
                    data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
                }
                if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
                if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
                if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
                if (this.lightMap && this.lightMap.isTexture) {
                    data.lightMap = this.lightMap.toJSON(meta).uuid;
                    data.lightMapIntensity = this.lightMapIntensity;
                }
                if (this.aoMap && this.aoMap.isTexture) {
                    data.aoMap = this.aoMap.toJSON(meta).uuid;
                    data.aoMapIntensity = this.aoMapIntensity;
                }
                if (this.bumpMap && this.bumpMap.isTexture) {
                    data.bumpMap = this.bumpMap.toJSON(meta).uuid;
                    data.bumpScale = this.bumpScale;
                }
                if (this.normalMap && this.normalMap.isTexture) {
                    data.normalMap = this.normalMap.toJSON(meta).uuid;
                    data.normalMapType = this.normalMapType;
                    data.normalScale = this.normalScale.toArray();
                }
                if (this.displacementMap && this.displacementMap.isTexture) {
                    data.displacementMap = this.displacementMap.toJSON(meta).uuid;
                    data.displacementScale = this.displacementScale;
                    data.displacementBias = this.displacementBias;
                }
                if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
                if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
                if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
                if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
                if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
                if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
                if (this.envMap && this.envMap.isTexture) {
                    data.envMap = this.envMap.toJSON(meta).uuid;
                    if (this.combine !== undefined) data.combine = this.combine;
                }
                if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;
                if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;
                if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;
                if (this.gradientMap && this.gradientMap.isTexture) data.gradientMap = this.gradientMap.toJSON(meta).uuid;
                if (this.transmission !== undefined) data.transmission = this.transmission;
                if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
                if (this.thickness !== undefined) data.thickness = this.thickness;
                if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
                if (this.attenuationDistance !== undefined) data.attenuationDistance = this.attenuationDistance;
                if (this.attenuationColor !== undefined) data.attenuationColor = this.attenuationColor.getHex();
                if (this.size !== undefined) data.size = this.size;
                if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
                if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;
                if (this.blending !== $b383cde4e0574ff6$export$5b29a26d96ee6af0) data.blending = this.blending;
                if (this.side !== $b383cde4e0574ff6$export$2ede184fc2998901) data.side = this.side;
                if (this.vertexColors) data.vertexColors = true;
                if (this.opacity < 1) data.opacity = this.opacity;
                if (this.format !== $b383cde4e0574ff6$export$3f8bb04b555a363c) data.format = this.format;
                if (this.transparent === true) data.transparent = this.transparent;
                data.depthFunc = this.depthFunc;
                data.depthTest = this.depthTest;
                data.depthWrite = this.depthWrite;
                data.colorWrite = this.colorWrite;
                data.stencilWrite = this.stencilWrite;
                data.stencilWriteMask = this.stencilWriteMask;
                data.stencilFunc = this.stencilFunc;
                data.stencilRef = this.stencilRef;
                data.stencilFuncMask = this.stencilFuncMask;
                data.stencilFail = this.stencilFail;
                data.stencilZFail = this.stencilZFail;
                data.stencilZPass = this.stencilZPass;
                // rotation (SpriteMaterial)
                if (this.rotation && this.rotation !== 0) data.rotation = this.rotation;
                if (this.polygonOffset === true) data.polygonOffset = true;
                if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
                if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
                if (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;
                if (this.dashSize !== undefined) data.dashSize = this.dashSize;
                if (this.gapSize !== undefined) data.gapSize = this.gapSize;
                if (this.scale !== undefined) data.scale = this.scale;
                if (this.dithering === true) data.dithering = true;
                if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
                if (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;
                if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;
                if (this.wireframe === true) data.wireframe = this.wireframe;
                if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
                if (this.wireframeLinecap !== "round") data.wireframeLinecap = this.wireframeLinecap;
                if (this.wireframeLinejoin !== "round") data.wireframeLinejoin = this.wireframeLinejoin;
                if (this.flatShading === true) data.flatShading = this.flatShading;
                if (this.visible === false) data.visible = false;
                if (this.toneMapped === false) data.toneMapped = false;
                if (JSON.stringify(this.userData) !== "{}") data.userData = this.userData;
                if (isRoot) {
                    var textures = extractFromCache(meta.textures);
                    var images = extractFromCache(meta.images);
                    if (textures.length > 0) data.textures = textures;
                    if (images.length > 0) data.images = images;
                }
                return data;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                this.name = source.name;
                this.fog = source.fog;
                this.blending = source.blending;
                this.side = source.side;
                this.vertexColors = source.vertexColors;
                this.opacity = source.opacity;
                this.format = source.format;
                this.transparent = source.transparent;
                this.blendSrc = source.blendSrc;
                this.blendDst = source.blendDst;
                this.blendEquation = source.blendEquation;
                this.blendSrcAlpha = source.blendSrcAlpha;
                this.blendDstAlpha = source.blendDstAlpha;
                this.blendEquationAlpha = source.blendEquationAlpha;
                this.depthFunc = source.depthFunc;
                this.depthTest = source.depthTest;
                this.depthWrite = source.depthWrite;
                this.stencilWriteMask = source.stencilWriteMask;
                this.stencilFunc = source.stencilFunc;
                this.stencilRef = source.stencilRef;
                this.stencilFuncMask = source.stencilFuncMask;
                this.stencilFail = source.stencilFail;
                this.stencilZFail = source.stencilZFail;
                this.stencilZPass = source.stencilZPass;
                this.stencilWrite = source.stencilWrite;
                var srcPlanes = source.clippingPlanes;
                var dstPlanes = null;
                if (srcPlanes !== null) {
                    var n = srcPlanes.length;
                    dstPlanes = new Array(n);
                    for(var i = 0; i !== n; ++i)dstPlanes[i] = srcPlanes[i].clone();
                }
                this.clippingPlanes = dstPlanes;
                this.clipIntersection = source.clipIntersection;
                this.clipShadows = source.clipShadows;
                this.shadowSide = source.shadowSide;
                this.colorWrite = source.colorWrite;
                this.precision = source.precision;
                this.polygonOffset = source.polygonOffset;
                this.polygonOffsetFactor = source.polygonOffsetFactor;
                this.polygonOffsetUnits = source.polygonOffsetUnits;
                this.dithering = source.dithering;
                this.alphaTest = source.alphaTest;
                this.alphaToCoverage = source.alphaToCoverage;
                this.premultipliedAlpha = source.premultipliedAlpha;
                this.visible = source.visible;
                this.toneMapped = source.toneMapped;
                this.userData = JSON.parse(JSON.stringify(source.userData));
                return this;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.dispatchEvent({
                    type: "dispose"
                });
            }
        },
        {
            key: "needsUpdate",
            set: function set(value) {
                if (value === true) this.version++;
            }
        }
    ]);
    return Material;
}($b383cde4e0574ff6$export$ec8b666c5fe2c75a);
$b383cde4e0574ff6$export$a2d8b23205c25948.prototype.isMaterial = true;
var $b383cde4e0574ff6$var$_colorKeywords = {
    "aliceblue": 0xF0F8FF,
    "antiquewhite": 0xFAEBD7,
    "aqua": 0x00FFFF,
    "aquamarine": 0x7FFFD4,
    "azure": 0xF0FFFF,
    "beige": 0xF5F5DC,
    "bisque": 0xFFE4C4,
    "black": 0x000000,
    "blanchedalmond": 0xFFEBCD,
    "blue": 0x0000FF,
    "blueviolet": 0x8A2BE2,
    "brown": 0xA52A2A,
    "burlywood": 0xDEB887,
    "cadetblue": 0x5F9EA0,
    "chartreuse": 0x7FFF00,
    "chocolate": 0xD2691E,
    "coral": 0xFF7F50,
    "cornflowerblue": 0x6495ED,
    "cornsilk": 0xFFF8DC,
    "crimson": 0xDC143C,
    "cyan": 0x00FFFF,
    "darkblue": 0x00008B,
    "darkcyan": 0x008B8B,
    "darkgoldenrod": 0xB8860B,
    "darkgray": 0xA9A9A9,
    "darkgreen": 0x006400,
    "darkgrey": 0xA9A9A9,
    "darkkhaki": 0xBDB76B,
    "darkmagenta": 0x8B008B,
    "darkolivegreen": 0x556B2F,
    "darkorange": 0xFF8C00,
    "darkorchid": 0x9932CC,
    "darkred": 0x8B0000,
    "darksalmon": 0xE9967A,
    "darkseagreen": 0x8FBC8F,
    "darkslateblue": 0x483D8B,
    "darkslategray": 0x2F4F4F,
    "darkslategrey": 0x2F4F4F,
    "darkturquoise": 0x00CED1,
    "darkviolet": 0x9400D3,
    "deeppink": 0xFF1493,
    "deepskyblue": 0x00BFFF,
    "dimgray": 0x696969,
    "dimgrey": 0x696969,
    "dodgerblue": 0x1E90FF,
    "firebrick": 0xB22222,
    "floralwhite": 0xFFFAF0,
    "forestgreen": 0x228B22,
    "fuchsia": 0xFF00FF,
    "gainsboro": 0xDCDCDC,
    "ghostwhite": 0xF8F8FF,
    "gold": 0xFFD700,
    "goldenrod": 0xDAA520,
    "gray": 0x808080,
    "green": 0x008000,
    "greenyellow": 0xADFF2F,
    "grey": 0x808080,
    "honeydew": 0xF0FFF0,
    "hotpink": 0xFF69B4,
    "indianred": 0xCD5C5C,
    "indigo": 0x4B0082,
    "ivory": 0xFFFFF0,
    "khaki": 0xF0E68C,
    "lavender": 0xE6E6FA,
    "lavenderblush": 0xFFF0F5,
    "lawngreen": 0x7CFC00,
    "lemonchiffon": 0xFFFACD,
    "lightblue": 0xADD8E6,
    "lightcoral": 0xF08080,
    "lightcyan": 0xE0FFFF,
    "lightgoldenrodyellow": 0xFAFAD2,
    "lightgray": 0xD3D3D3,
    "lightgreen": 0x90EE90,
    "lightgrey": 0xD3D3D3,
    "lightpink": 0xFFB6C1,
    "lightsalmon": 0xFFA07A,
    "lightseagreen": 0x20B2AA,
    "lightskyblue": 0x87CEFA,
    "lightslategray": 0x778899,
    "lightslategrey": 0x778899,
    "lightsteelblue": 0xB0C4DE,
    "lightyellow": 0xFFFFE0,
    "lime": 0x00FF00,
    "limegreen": 0x32CD32,
    "linen": 0xFAF0E6,
    "magenta": 0xFF00FF,
    "maroon": 0x800000,
    "mediumaquamarine": 0x66CDAA,
    "mediumblue": 0x0000CD,
    "mediumorchid": 0xBA55D3,
    "mediumpurple": 0x9370DB,
    "mediumseagreen": 0x3CB371,
    "mediumslateblue": 0x7B68EE,
    "mediumspringgreen": 0x00FA9A,
    "mediumturquoise": 0x48D1CC,
    "mediumvioletred": 0xC71585,
    "midnightblue": 0x191970,
    "mintcream": 0xF5FFFA,
    "mistyrose": 0xFFE4E1,
    "moccasin": 0xFFE4B5,
    "navajowhite": 0xFFDEAD,
    "navy": 0x000080,
    "oldlace": 0xFDF5E6,
    "olive": 0x808000,
    "olivedrab": 0x6B8E23,
    "orange": 0xFFA500,
    "orangered": 0xFF4500,
    "orchid": 0xDA70D6,
    "palegoldenrod": 0xEEE8AA,
    "palegreen": 0x98FB98,
    "paleturquoise": 0xAFEEEE,
    "palevioletred": 0xDB7093,
    "papayawhip": 0xFFEFD5,
    "peachpuff": 0xFFDAB9,
    "peru": 0xCD853F,
    "pink": 0xFFC0CB,
    "plum": 0xDDA0DD,
    "powderblue": 0xB0E0E6,
    "purple": 0x800080,
    "rebeccapurple": 0x663399,
    "red": 0xFF0000,
    "rosybrown": 0xBC8F8F,
    "royalblue": 0x4169E1,
    "saddlebrown": 0x8B4513,
    "salmon": 0xFA8072,
    "sandybrown": 0xF4A460,
    "seagreen": 0x2E8B57,
    "seashell": 0xFFF5EE,
    "sienna": 0xA0522D,
    "silver": 0xC0C0C0,
    "skyblue": 0x87CEEB,
    "slateblue": 0x6A5ACD,
    "slategray": 0x708090,
    "slategrey": 0x708090,
    "snow": 0xFFFAFA,
    "springgreen": 0x00FF7F,
    "steelblue": 0x4682B4,
    "tan": 0xD2B48C,
    "teal": 0x008080,
    "thistle": 0xD8BFD8,
    "tomato": 0xFF6347,
    "turquoise": 0x40E0D0,
    "violet": 0xEE82EE,
    "wheat": 0xF5DEB3,
    "white": 0xFFFFFF,
    "whitesmoke": 0xF5F5F5,
    "yellow": 0xFFFF00,
    "yellowgreen": 0x9ACD32
};
var $b383cde4e0574ff6$var$_hslA = {
    h: 0,
    s: 0,
    l: 0
};
var $b383cde4e0574ff6$var$_hslB = {
    h: 0,
    s: 0,
    l: 0
};
function $b383cde4e0574ff6$var$hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 0.5) return q;
    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
    return p;
}
function $b383cde4e0574ff6$var$SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
}
function $b383cde4e0574ff6$var$LinearToSRGB(c) {
    return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
}
var $b383cde4e0574ff6$export$892596cec99bc70e = /*#__PURE__*/ function() {
    "use strict";
    function Color(r, g, b) {
        (0, $dnGTK.default)(this, Color);
        if (g === undefined && b === undefined) // r is THREE.Color, hex or string
        return this.set(r);
        return this.setRGB(r, g, b);
    }
    (0, $9SLyD.default)(Color, [
        {
            key: "set",
            value: function set(value) {
                if (value && value.isColor) this.copy(value);
                else if (typeof value === "number") this.setHex(value);
                else if (typeof value === "string") this.setStyle(value);
                return this;
            }
        },
        {
            key: "setScalar",
            value: function setScalar(scalar) {
                this.r = scalar;
                this.g = scalar;
                this.b = scalar;
                return this;
            }
        },
        {
            key: "setHex",
            value: function setHex(hex) {
                hex = Math.floor(hex);
                this.r = (hex >> 16 & 255) / 255;
                this.g = (hex >> 8 & 255) / 255;
                this.b = (hex & 255) / 255;
                return this;
            }
        },
        {
            key: "setRGB",
            value: function setRGB(r, g, b) {
                this.r = r;
                this.g = g;
                this.b = b;
                return this;
            }
        },
        {
            key: "setHSL",
            value: function setHSL(h, s, l) {
                // h,s,l ranges are in 0.0 - 1.0
                h = $b383cde4e0574ff6$var$euclideanModulo(h, 1);
                s = $b383cde4e0574ff6$var$clamp(s, 0, 1);
                l = $b383cde4e0574ff6$var$clamp(l, 0, 1);
                if (s === 0) this.r = this.g = this.b = l;
                else {
                    var p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
                    var q = 2 * l - p;
                    this.r = $b383cde4e0574ff6$var$hue2rgb(q, p, h + 1 / 3);
                    this.g = $b383cde4e0574ff6$var$hue2rgb(q, p, h);
                    this.b = $b383cde4e0574ff6$var$hue2rgb(q, p, h - 1 / 3);
                }
                return this;
            }
        },
        {
            key: "setStyle",
            value: function setStyle(style) {
                var handleAlpha = function handleAlpha(string) {
                    if (string === undefined) return;
                    if (parseFloat(string) < 1) console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
                };
                var m;
                if (m = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)) {
                    // rgb / hsl
                    var color;
                    var name = m[1];
                    var components = m[2];
                    switch(name){
                        case "rgb":
                        case "rgba":
                            if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                                // rgb(255,0,0) rgba(255,0,0,0.5)
                                this.r = Math.min(255, parseInt(color[1], 10)) / 255;
                                this.g = Math.min(255, parseInt(color[2], 10)) / 255;
                                this.b = Math.min(255, parseInt(color[3], 10)) / 255;
                                handleAlpha(color[4]);
                                return this;
                            }
                            if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                                // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
                                this.r = Math.min(100, parseInt(color[1], 10)) / 100;
                                this.g = Math.min(100, parseInt(color[2], 10)) / 100;
                                this.b = Math.min(100, parseInt(color[3], 10)) / 100;
                                handleAlpha(color[4]);
                                return this;
                            }
                            break;
                        case "hsl":
                        case "hsla":
                            if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                                // hsl(120,50%,50%) hsla(120,50%,50%,0.5)
                                var h = parseFloat(color[1]) / 360;
                                var s = parseInt(color[2], 10) / 100;
                                var l = parseInt(color[3], 10) / 100;
                                handleAlpha(color[4]);
                                return this.setHSL(h, s, l);
                            }
                            break;
                    }
                } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
                    // hex color
                    var hex = m[1];
                    var size = hex.length;
                    if (size === 3) {
                        // #ff0
                        this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
                        this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
                        this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;
                        return this;
                    } else if (size === 6) {
                        // #ff0000
                        this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
                        this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
                        this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;
                        return this;
                    }
                }
                if (style && style.length > 0) return this.setColorName(style);
                return this;
            }
        },
        {
            key: "setColorName",
            value: function setColorName(style) {
                // color keywords
                var hex = $b383cde4e0574ff6$var$_colorKeywords[style.toLowerCase()];
                if (hex !== undefined) // red
                this.setHex(hex);
                else // unknown color
                console.warn("THREE.Color: Unknown color " + style);
                return this;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor(this.r, this.g, this.b);
            }
        },
        {
            key: "copy",
            value: function copy(color) {
                this.r = color.r;
                this.g = color.g;
                this.b = color.b;
                return this;
            }
        },
        {
            key: "copyGammaToLinear",
            value: function copyGammaToLinear(color) {
                var gammaFactor = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2.0;
                this.r = Math.pow(color.r, gammaFactor);
                this.g = Math.pow(color.g, gammaFactor);
                this.b = Math.pow(color.b, gammaFactor);
                return this;
            }
        },
        {
            key: "copyLinearToGamma",
            value: function copyLinearToGamma(color) {
                var gammaFactor = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2.0;
                var safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;
                this.r = Math.pow(color.r, safeInverse);
                this.g = Math.pow(color.g, safeInverse);
                this.b = Math.pow(color.b, safeInverse);
                return this;
            }
        },
        {
            key: "convertGammaToLinear",
            value: function convertGammaToLinear(gammaFactor) {
                this.copyGammaToLinear(this, gammaFactor);
                return this;
            }
        },
        {
            key: "convertLinearToGamma",
            value: function convertLinearToGamma(gammaFactor) {
                this.copyLinearToGamma(this, gammaFactor);
                return this;
            }
        },
        {
            key: "copySRGBToLinear",
            value: function copySRGBToLinear(color) {
                this.r = $b383cde4e0574ff6$var$SRGBToLinear(color.r);
                this.g = $b383cde4e0574ff6$var$SRGBToLinear(color.g);
                this.b = $b383cde4e0574ff6$var$SRGBToLinear(color.b);
                return this;
            }
        },
        {
            key: "copyLinearToSRGB",
            value: function copyLinearToSRGB(color) {
                this.r = $b383cde4e0574ff6$var$LinearToSRGB(color.r);
                this.g = $b383cde4e0574ff6$var$LinearToSRGB(color.g);
                this.b = $b383cde4e0574ff6$var$LinearToSRGB(color.b);
                return this;
            }
        },
        {
            key: "convertSRGBToLinear",
            value: function convertSRGBToLinear() {
                this.copySRGBToLinear(this);
                return this;
            }
        },
        {
            key: "convertLinearToSRGB",
            value: function convertLinearToSRGB() {
                this.copyLinearToSRGB(this);
                return this;
            }
        },
        {
            key: "getHex",
            value: function getHex() {
                return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
            }
        },
        {
            key: "getHexString",
            value: function getHexString() {
                return ("000000" + this.getHex().toString(16)).slice(-6);
            }
        },
        {
            key: "getHSL",
            value: function getHSL(target) {
                // h,s,l ranges are in 0.0 - 1.0
                var r = this.r, g = this.g, b = this.b;
                var max = Math.max(r, g, b);
                var min = Math.min(r, g, b);
                var hue, saturation;
                var lightness = (min + max) / 2.0;
                if (min === max) {
                    hue = 0;
                    saturation = 0;
                } else {
                    var delta = max - min;
                    saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
                    switch(max){
                        case r:
                            hue = (g - b) / delta + (g < b ? 6 : 0);
                            break;
                        case g:
                            hue = (b - r) / delta + 2;
                            break;
                        case b:
                            hue = (r - g) / delta + 4;
                            break;
                    }
                    hue /= 6;
                }
                target.h = hue;
                target.s = saturation;
                target.l = lightness;
                return target;
            }
        },
        {
            key: "getStyle",
            value: function getStyle() {
                return "rgb(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + ")";
            }
        },
        {
            key: "offsetHSL",
            value: function offsetHSL(h, s, l) {
                this.getHSL($b383cde4e0574ff6$var$_hslA);
                $b383cde4e0574ff6$var$_hslA.h += h;
                $b383cde4e0574ff6$var$_hslA.s += s;
                $b383cde4e0574ff6$var$_hslA.l += l;
                this.setHSL($b383cde4e0574ff6$var$_hslA.h, $b383cde4e0574ff6$var$_hslA.s, $b383cde4e0574ff6$var$_hslA.l);
                return this;
            }
        },
        {
            key: "add",
            value: function add(color) {
                this.r += color.r;
                this.g += color.g;
                this.b += color.b;
                return this;
            }
        },
        {
            key: "addColors",
            value: function addColors(color1, color2) {
                this.r = color1.r + color2.r;
                this.g = color1.g + color2.g;
                this.b = color1.b + color2.b;
                return this;
            }
        },
        {
            key: "addScalar",
            value: function addScalar(s) {
                this.r += s;
                this.g += s;
                this.b += s;
                return this;
            }
        },
        {
            key: "sub",
            value: function sub(color) {
                this.r = Math.max(0, this.r - color.r);
                this.g = Math.max(0, this.g - color.g);
                this.b = Math.max(0, this.b - color.b);
                return this;
            }
        },
        {
            key: "multiply",
            value: function multiply(color) {
                this.r *= color.r;
                this.g *= color.g;
                this.b *= color.b;
                return this;
            }
        },
        {
            key: "multiplyScalar",
            value: function multiplyScalar(s) {
                this.r *= s;
                this.g *= s;
                this.b *= s;
                return this;
            }
        },
        {
            key: "lerp",
            value: function lerp(color, alpha) {
                this.r += (color.r - this.r) * alpha;
                this.g += (color.g - this.g) * alpha;
                this.b += (color.b - this.b) * alpha;
                return this;
            }
        },
        {
            key: "lerpColors",
            value: function lerpColors(color1, color2, alpha) {
                this.r = color1.r + (color2.r - color1.r) * alpha;
                this.g = color1.g + (color2.g - color1.g) * alpha;
                this.b = color1.b + (color2.b - color1.b) * alpha;
                return this;
            }
        },
        {
            key: "lerpHSL",
            value: function lerpHSL(color, alpha) {
                this.getHSL($b383cde4e0574ff6$var$_hslA);
                color.getHSL($b383cde4e0574ff6$var$_hslB);
                var h = $b383cde4e0574ff6$var$lerp($b383cde4e0574ff6$var$_hslA.h, $b383cde4e0574ff6$var$_hslB.h, alpha);
                var s = $b383cde4e0574ff6$var$lerp($b383cde4e0574ff6$var$_hslA.s, $b383cde4e0574ff6$var$_hslB.s, alpha);
                var l = $b383cde4e0574ff6$var$lerp($b383cde4e0574ff6$var$_hslA.l, $b383cde4e0574ff6$var$_hslB.l, alpha);
                this.setHSL(h, s, l);
                return this;
            }
        },
        {
            key: "equals",
            value: function equals(c) {
                return c.r === this.r && c.g === this.g && c.b === this.b;
            }
        },
        {
            key: "fromArray",
            value: function fromArray(array) {
                var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                this.r = array[offset];
                this.g = array[offset + 1];
                this.b = array[offset + 2];
                return this;
            }
        },
        {
            key: "toArray",
            value: function toArray() {
                var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                array[offset] = this.r;
                array[offset + 1] = this.g;
                array[offset + 2] = this.b;
                return array;
            }
        },
        {
            key: "fromBufferAttribute",
            value: function fromBufferAttribute(attribute, index) {
                this.r = attribute.getX(index);
                this.g = attribute.getY(index);
                this.b = attribute.getZ(index);
                if (attribute.normalized === true) {
                    // assuming Uint8Array
                    this.r /= 255;
                    this.g /= 255;
                    this.b /= 255;
                }
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return this.getHex();
            }
        }
    ]);
    return Color;
}();
$b383cde4e0574ff6$export$892596cec99bc70e.NAMES = $b383cde4e0574ff6$var$_colorKeywords;
$b383cde4e0574ff6$export$892596cec99bc70e.prototype.isColor = true;
$b383cde4e0574ff6$export$892596cec99bc70e.prototype.r = 1;
$b383cde4e0574ff6$export$892596cec99bc70e.prototype.g = 1;
$b383cde4e0574ff6$export$892596cec99bc70e.prototype.b = 1;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 * }
 */ var $b383cde4e0574ff6$export$55cbcc9b622fe1f5 = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(MeshBasicMaterial, Material);
    var _super = (0, $a0Xbx.default)(MeshBasicMaterial);
    function MeshBasicMaterial(parameters) {
        (0, $dnGTK.default)(this, MeshBasicMaterial);
        var _this;
        _this = _super.call(this);
        _this.type = "MeshBasicMaterial";
        _this.color = new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff); // emissive
        _this.map = null;
        _this.lightMap = null;
        _this.lightMapIntensity = 1.0;
        _this.aoMap = null;
        _this.aoMapIntensity = 1.0;
        _this.specularMap = null;
        _this.alphaMap = null;
        _this.envMap = null;
        _this.combine = $b383cde4e0574ff6$export$e50ac29801f1774d;
        _this.reflectivity = 1;
        _this.refractionRatio = 0.98;
        _this.wireframe = false;
        _this.wireframeLinewidth = 1;
        _this.wireframeLinecap = "round";
        _this.wireframeLinejoin = "round";
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(MeshBasicMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(MeshBasicMaterial.prototype), "copy", this).call(this, source);
                this.color.copy(source.color);
                this.map = source.map;
                this.lightMap = source.lightMap;
                this.lightMapIntensity = source.lightMapIntensity;
                this.aoMap = source.aoMap;
                this.aoMapIntensity = source.aoMapIntensity;
                this.specularMap = source.specularMap;
                this.alphaMap = source.alphaMap;
                this.envMap = source.envMap;
                this.combine = source.combine;
                this.reflectivity = source.reflectivity;
                this.refractionRatio = source.refractionRatio;
                this.wireframe = source.wireframe;
                this.wireframeLinewidth = source.wireframeLinewidth;
                this.wireframeLinecap = source.wireframeLinecap;
                this.wireframeLinejoin = source.wireframeLinejoin;
                return this;
            }
        }
    ]);
    return MeshBasicMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$55cbcc9b622fe1f5.prototype.isMeshBasicMaterial = true;
var $b383cde4e0574ff6$var$_vector$9 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_vector2$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$c977b3e384af9ae1();
var $b383cde4e0574ff6$export$8dea267bd6bde117 = /*#__PURE__*/ function() {
    "use strict";
    function BufferAttribute(array, itemSize, normalized) {
        (0, $dnGTK.default)(this, BufferAttribute);
        if (Array.isArray(array)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        this.name = "";
        this.array = array;
        this.itemSize = itemSize;
        this.count = array !== undefined ? array.length / itemSize : 0;
        this.normalized = normalized === true;
        this.usage = $b383cde4e0574ff6$export$763e8360f4d7f77d;
        this.updateRange = {
            offset: 0,
            count: -1
        };
        this.version = 0;
    }
    (0, $9SLyD.default)(BufferAttribute, [
        {
            key: "onUploadCallback",
            value: function onUploadCallback() {}
        },
        {
            key: "needsUpdate",
            set: function set(value) {
                if (value === true) this.version++;
            }
        },
        {
            key: "setUsage",
            value: function setUsage(value) {
                this.usage = value;
                return this;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                this.name = source.name;
                this.array = new source.array.constructor(source.array);
                this.itemSize = source.itemSize;
                this.count = source.count;
                this.normalized = source.normalized;
                this.usage = source.usage;
                return this;
            }
        },
        {
            key: "copyAt",
            value: function copyAt(index1, attribute, index2) {
                index1 *= this.itemSize;
                index2 *= attribute.itemSize;
                for(var i = 0, l = this.itemSize; i < l; i++)this.array[index1 + i] = attribute.array[index2 + i];
                return this;
            }
        },
        {
            key: "copyArray",
            value: function copyArray(array) {
                this.array.set(array);
                return this;
            }
        },
        {
            key: "copyColorsArray",
            value: function copyColorsArray(colors) {
                var array = this.array;
                var offset = 0;
                for(var i = 0, l = colors.length; i < l; i++){
                    var color = colors[i];
                    if (color === undefined) {
                        console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i);
                        color = new $b383cde4e0574ff6$export$892596cec99bc70e();
                    }
                    array[offset++] = color.r;
                    array[offset++] = color.g;
                    array[offset++] = color.b;
                }
                return this;
            }
        },
        {
            key: "copyVector2sArray",
            value: function copyVector2sArray(vectors) {
                var array = this.array;
                var offset = 0;
                for(var i = 0, l = vectors.length; i < l; i++){
                    var vector = vectors[i];
                    if (vector === undefined) {
                        console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i);
                        vector = new $b383cde4e0574ff6$export$c977b3e384af9ae1();
                    }
                    array[offset++] = vector.x;
                    array[offset++] = vector.y;
                }
                return this;
            }
        },
        {
            key: "copyVector3sArray",
            value: function copyVector3sArray(vectors) {
                var array = this.array;
                var offset = 0;
                for(var i = 0, l = vectors.length; i < l; i++){
                    var vector = vectors[i];
                    if (vector === undefined) {
                        console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i);
                        vector = new $b383cde4e0574ff6$export$64b5c384219d3699();
                    }
                    array[offset++] = vector.x;
                    array[offset++] = vector.y;
                    array[offset++] = vector.z;
                }
                return this;
            }
        },
        {
            key: "copyVector4sArray",
            value: function copyVector4sArray(vectors) {
                var array = this.array;
                var offset = 0;
                for(var i = 0, l = vectors.length; i < l; i++){
                    var vector = vectors[i];
                    if (vector === undefined) {
                        console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i);
                        vector = new $b383cde4e0574ff6$export$fa7daccca11cdbe3();
                    }
                    array[offset++] = vector.x;
                    array[offset++] = vector.y;
                    array[offset++] = vector.z;
                    array[offset++] = vector.w;
                }
                return this;
            }
        },
        {
            key: "applyMatrix3",
            value: function applyMatrix3(m) {
                if (this.itemSize === 2) for(var i = 0, l = this.count; i < l; i++){
                    $b383cde4e0574ff6$var$_vector2$1.fromBufferAttribute(this, i);
                    $b383cde4e0574ff6$var$_vector2$1.applyMatrix3(m);
                    this.setXY(i, $b383cde4e0574ff6$var$_vector2$1.x, $b383cde4e0574ff6$var$_vector2$1.y);
                }
                else if (this.itemSize === 3) for(var i1 = 0, l1 = this.count; i1 < l1; i1++){
                    $b383cde4e0574ff6$var$_vector$9.fromBufferAttribute(this, i1);
                    $b383cde4e0574ff6$var$_vector$9.applyMatrix3(m);
                    this.setXYZ(i1, $b383cde4e0574ff6$var$_vector$9.x, $b383cde4e0574ff6$var$_vector$9.y, $b383cde4e0574ff6$var$_vector$9.z);
                }
                return this;
            }
        },
        {
            key: "applyMatrix4",
            value: function applyMatrix4(m) {
                for(var i = 0, l = this.count; i < l; i++){
                    $b383cde4e0574ff6$var$_vector$9.x = this.getX(i);
                    $b383cde4e0574ff6$var$_vector$9.y = this.getY(i);
                    $b383cde4e0574ff6$var$_vector$9.z = this.getZ(i);
                    $b383cde4e0574ff6$var$_vector$9.applyMatrix4(m);
                    this.setXYZ(i, $b383cde4e0574ff6$var$_vector$9.x, $b383cde4e0574ff6$var$_vector$9.y, $b383cde4e0574ff6$var$_vector$9.z);
                }
                return this;
            }
        },
        {
            key: "applyNormalMatrix",
            value: function applyNormalMatrix(m) {
                for(var i = 0, l = this.count; i < l; i++){
                    $b383cde4e0574ff6$var$_vector$9.x = this.getX(i);
                    $b383cde4e0574ff6$var$_vector$9.y = this.getY(i);
                    $b383cde4e0574ff6$var$_vector$9.z = this.getZ(i);
                    $b383cde4e0574ff6$var$_vector$9.applyNormalMatrix(m);
                    this.setXYZ(i, $b383cde4e0574ff6$var$_vector$9.x, $b383cde4e0574ff6$var$_vector$9.y, $b383cde4e0574ff6$var$_vector$9.z);
                }
                return this;
            }
        },
        {
            key: "transformDirection",
            value: function transformDirection(m) {
                for(var i = 0, l = this.count; i < l; i++){
                    $b383cde4e0574ff6$var$_vector$9.x = this.getX(i);
                    $b383cde4e0574ff6$var$_vector$9.y = this.getY(i);
                    $b383cde4e0574ff6$var$_vector$9.z = this.getZ(i);
                    $b383cde4e0574ff6$var$_vector$9.transformDirection(m);
                    this.setXYZ(i, $b383cde4e0574ff6$var$_vector$9.x, $b383cde4e0574ff6$var$_vector$9.y, $b383cde4e0574ff6$var$_vector$9.z);
                }
                return this;
            }
        },
        {
            key: "set",
            value: function set(value) {
                var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                this.array.set(value, offset);
                return this;
            }
        },
        {
            key: "getX",
            value: function getX(index) {
                return this.array[index * this.itemSize];
            }
        },
        {
            key: "setX",
            value: function setX(index, x) {
                this.array[index * this.itemSize] = x;
                return this;
            }
        },
        {
            key: "getY",
            value: function getY(index) {
                return this.array[index * this.itemSize + 1];
            }
        },
        {
            key: "setY",
            value: function setY(index, y) {
                this.array[index * this.itemSize + 1] = y;
                return this;
            }
        },
        {
            key: "getZ",
            value: function getZ(index) {
                return this.array[index * this.itemSize + 2];
            }
        },
        {
            key: "setZ",
            value: function setZ(index, z) {
                this.array[index * this.itemSize + 2] = z;
                return this;
            }
        },
        {
            key: "getW",
            value: function getW(index) {
                return this.array[index * this.itemSize + 3];
            }
        },
        {
            key: "setW",
            value: function setW(index, w) {
                this.array[index * this.itemSize + 3] = w;
                return this;
            }
        },
        {
            key: "setXY",
            value: function setXY(index, x, y) {
                index *= this.itemSize;
                this.array[index + 0] = x;
                this.array[index + 1] = y;
                return this;
            }
        },
        {
            key: "setXYZ",
            value: function setXYZ(index, x, y, z) {
                index *= this.itemSize;
                this.array[index + 0] = x;
                this.array[index + 1] = y;
                this.array[index + 2] = z;
                return this;
            }
        },
        {
            key: "setXYZW",
            value: function setXYZW(index, x, y, z, w) {
                index *= this.itemSize;
                this.array[index + 0] = x;
                this.array[index + 1] = y;
                this.array[index + 2] = z;
                this.array[index + 3] = w;
                return this;
            }
        },
        {
            key: "onUpload",
            value: function onUpload(callback) {
                this.onUploadCallback = callback;
                return this;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor(this.array, this.itemSize).copy(this);
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = {
                    itemSize: this.itemSize,
                    type: this.array.constructor.name,
                    array: Array.prototype.slice.call(this.array),
                    normalized: this.normalized
                };
                if (this.name !== "") data.name = this.name;
                if (this.usage !== $b383cde4e0574ff6$export$763e8360f4d7f77d) data.usage = this.usage;
                if (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;
                return data;
            }
        }
    ]);
    return BufferAttribute;
}();
$b383cde4e0574ff6$export$8dea267bd6bde117.prototype.isBufferAttribute = true;
//
var $b383cde4e0574ff6$export$f9ff2d6a20248cbf = /*#__PURE__*/ function(BufferAttribute) {
    "use strict";
    (0, $gQI4D.default)(Int8BufferAttribute, BufferAttribute);
    var _super = (0, $a0Xbx.default)(Int8BufferAttribute);
    function Int8BufferAttribute(array, itemSize, normalized) {
        (0, $dnGTK.default)(this, Int8BufferAttribute);
        return _super.call(this, new Int8Array(array), itemSize, normalized);
    }
    return Int8BufferAttribute;
}($b383cde4e0574ff6$export$8dea267bd6bde117);
var $b383cde4e0574ff6$export$cacc90cf35d11cdd = /*#__PURE__*/ function(BufferAttribute) {
    "use strict";
    (0, $gQI4D.default)(Uint8BufferAttribute, BufferAttribute);
    var _super = (0, $a0Xbx.default)(Uint8BufferAttribute);
    function Uint8BufferAttribute(array, itemSize, normalized) {
        (0, $dnGTK.default)(this, Uint8BufferAttribute);
        return _super.call(this, new Uint8Array(array), itemSize, normalized);
    }
    return Uint8BufferAttribute;
}($b383cde4e0574ff6$export$8dea267bd6bde117);
var $b383cde4e0574ff6$export$baaa85a1a812c157 = /*#__PURE__*/ function(BufferAttribute) {
    "use strict";
    (0, $gQI4D.default)(Uint8ClampedBufferAttribute, BufferAttribute);
    var _super = (0, $a0Xbx.default)(Uint8ClampedBufferAttribute);
    function Uint8ClampedBufferAttribute(array, itemSize, normalized) {
        (0, $dnGTK.default)(this, Uint8ClampedBufferAttribute);
        return _super.call(this, new Uint8ClampedArray(array), itemSize, normalized);
    }
    return Uint8ClampedBufferAttribute;
}($b383cde4e0574ff6$export$8dea267bd6bde117);
var $b383cde4e0574ff6$export$2b755a102ccdcefe = /*#__PURE__*/ function(BufferAttribute) {
    "use strict";
    (0, $gQI4D.default)(Int16BufferAttribute, BufferAttribute);
    var _super = (0, $a0Xbx.default)(Int16BufferAttribute);
    function Int16BufferAttribute(array, itemSize, normalized) {
        (0, $dnGTK.default)(this, Int16BufferAttribute);
        return _super.call(this, new Int16Array(array), itemSize, normalized);
    }
    return Int16BufferAttribute;
}($b383cde4e0574ff6$export$8dea267bd6bde117);
var $b383cde4e0574ff6$export$640a853f68025f2e = /*#__PURE__*/ function(BufferAttribute) {
    "use strict";
    (0, $gQI4D.default)(Uint16BufferAttribute, BufferAttribute);
    var _super = (0, $a0Xbx.default)(Uint16BufferAttribute);
    function Uint16BufferAttribute(array, itemSize, normalized) {
        (0, $dnGTK.default)(this, Uint16BufferAttribute);
        return _super.call(this, new Uint16Array(array), itemSize, normalized);
    }
    return Uint16BufferAttribute;
}($b383cde4e0574ff6$export$8dea267bd6bde117);
var $b383cde4e0574ff6$export$46b369aed2968a0a = /*#__PURE__*/ function(BufferAttribute) {
    "use strict";
    (0, $gQI4D.default)(Int32BufferAttribute, BufferAttribute);
    var _super = (0, $a0Xbx.default)(Int32BufferAttribute);
    function Int32BufferAttribute(array, itemSize, normalized) {
        (0, $dnGTK.default)(this, Int32BufferAttribute);
        return _super.call(this, new Int32Array(array), itemSize, normalized);
    }
    return Int32BufferAttribute;
}($b383cde4e0574ff6$export$8dea267bd6bde117);
var $b383cde4e0574ff6$export$7eb8c9fa25cd5bd6 = /*#__PURE__*/ function(BufferAttribute) {
    "use strict";
    (0, $gQI4D.default)(Uint32BufferAttribute, BufferAttribute);
    var _super = (0, $a0Xbx.default)(Uint32BufferAttribute);
    function Uint32BufferAttribute(array, itemSize, normalized) {
        (0, $dnGTK.default)(this, Uint32BufferAttribute);
        return _super.call(this, new Uint32Array(array), itemSize, normalized);
    }
    return Uint32BufferAttribute;
}($b383cde4e0574ff6$export$8dea267bd6bde117);
var $b383cde4e0574ff6$export$dbd3698c64958d69 = /*#__PURE__*/ function(BufferAttribute) {
    "use strict";
    (0, $gQI4D.default)(Float16BufferAttribute, BufferAttribute);
    var _super = (0, $a0Xbx.default)(Float16BufferAttribute);
    function Float16BufferAttribute(array, itemSize, normalized) {
        (0, $dnGTK.default)(this, Float16BufferAttribute);
        return _super.call(this, new Uint16Array(array), itemSize, normalized);
    }
    return Float16BufferAttribute;
}($b383cde4e0574ff6$export$8dea267bd6bde117);
$b383cde4e0574ff6$export$dbd3698c64958d69.prototype.isFloat16BufferAttribute = true;
var $b383cde4e0574ff6$export$cbe7a62641830ebd = /*#__PURE__*/ function(BufferAttribute) {
    "use strict";
    (0, $gQI4D.default)(Float32BufferAttribute, BufferAttribute);
    var _super = (0, $a0Xbx.default)(Float32BufferAttribute);
    function Float32BufferAttribute(array, itemSize, normalized) {
        (0, $dnGTK.default)(this, Float32BufferAttribute);
        return _super.call(this, new Float32Array(array), itemSize, normalized);
    }
    return Float32BufferAttribute;
}($b383cde4e0574ff6$export$8dea267bd6bde117);
var $b383cde4e0574ff6$export$9e0ade74842adbb8 = /*#__PURE__*/ function(BufferAttribute) {
    "use strict";
    (0, $gQI4D.default)(Float64BufferAttribute, BufferAttribute);
    var _super = (0, $a0Xbx.default)(Float64BufferAttribute);
    function Float64BufferAttribute(array, itemSize, normalized) {
        (0, $dnGTK.default)(this, Float64BufferAttribute);
        return _super.call(this, new Float64Array(array), itemSize, normalized);
    }
    return Float64BufferAttribute;
}($b383cde4e0574ff6$export$8dea267bd6bde117);
var $b383cde4e0574ff6$var$_id = 0;
var $b383cde4e0574ff6$var$_m1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_obj = /*@__PURE__*/ new $b383cde4e0574ff6$export$e4dd07dff30cc924();
var $b383cde4e0574ff6$var$_offset = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_box$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$6f7d5a9418ab2aa3();
var $b383cde4e0574ff6$var$_boxMorphTargets = /*@__PURE__*/ new $b383cde4e0574ff6$export$6f7d5a9418ab2aa3();
var $b383cde4e0574ff6$var$_vector$8 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$b7be63a67df8959 = /*#__PURE__*/ function(EventDispatcher) {
    "use strict";
    (0, $gQI4D.default)(BufferGeometry, EventDispatcher);
    var _super = (0, $a0Xbx.default)(BufferGeometry);
    function BufferGeometry() {
        (0, $dnGTK.default)(this, BufferGeometry);
        var _this;
        _this = _super.call(this);
        Object.defineProperty((0, $4enQD.default)(_this), "id", {
            value: $b383cde4e0574ff6$var$_id++
        });
        _this.uuid = $b383cde4e0574ff6$var$generateUUID();
        _this.name = "";
        _this.type = "BufferGeometry";
        _this.index = null;
        _this.attributes = {};
        _this.morphAttributes = {};
        _this.morphTargetsRelative = false;
        _this.groups = [];
        _this.boundingBox = null;
        _this.boundingSphere = null;
        _this.drawRange = {
            start: 0,
            count: Infinity
        };
        _this.userData = {};
        return _this;
    }
    (0, $9SLyD.default)(BufferGeometry, [
        {
            key: "getIndex",
            value: function getIndex() {
                return this.index;
            }
        },
        {
            key: "setIndex",
            value: function setIndex(index) {
                if (Array.isArray(index)) this.index = new ($b383cde4e0574ff6$var$arrayMax(index) > 65535 ? $b383cde4e0574ff6$export$7eb8c9fa25cd5bd6 : $b383cde4e0574ff6$export$640a853f68025f2e)(index, 1);
                else this.index = index;
                return this;
            }
        },
        {
            key: "getAttribute",
            value: function getAttribute(name) {
                return this.attributes[name];
            }
        },
        {
            key: "setAttribute",
            value: function setAttribute(name, attribute) {
                this.attributes[name] = attribute;
                return this;
            }
        },
        {
            key: "deleteAttribute",
            value: function deleteAttribute(name) {
                delete this.attributes[name];
                return this;
            }
        },
        {
            key: "hasAttribute",
            value: function hasAttribute(name) {
                return this.attributes[name] !== undefined;
            }
        },
        {
            key: "addGroup",
            value: function addGroup(start, count) {
                var materialIndex = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
                this.groups.push({
                    start: start,
                    count: count,
                    materialIndex: materialIndex
                });
            }
        },
        {
            key: "clearGroups",
            value: function clearGroups() {
                this.groups = [];
            }
        },
        {
            key: "setDrawRange",
            value: function setDrawRange(start, count) {
                this.drawRange.start = start;
                this.drawRange.count = count;
            }
        },
        {
            key: "applyMatrix4",
            value: function applyMatrix4(matrix) {
                var position = this.attributes.position;
                if (position !== undefined) {
                    position.applyMatrix4(matrix);
                    position.needsUpdate = true;
                }
                var normal = this.attributes.normal;
                if (normal !== undefined) {
                    var normalMatrix = new $b383cde4e0574ff6$export$8ff26dafa08918().getNormalMatrix(matrix);
                    normal.applyNormalMatrix(normalMatrix);
                    normal.needsUpdate = true;
                }
                var tangent = this.attributes.tangent;
                if (tangent !== undefined) {
                    tangent.transformDirection(matrix);
                    tangent.needsUpdate = true;
                }
                if (this.boundingBox !== null) this.computeBoundingBox();
                if (this.boundingSphere !== null) this.computeBoundingSphere();
                return this;
            }
        },
        {
            key: "applyQuaternion",
            value: function applyQuaternion(q) {
                $b383cde4e0574ff6$var$_m1.makeRotationFromQuaternion(q);
                this.applyMatrix4($b383cde4e0574ff6$var$_m1);
                return this;
            }
        },
        {
            key: "rotateX",
            value: function rotateX(angle) {
                // rotate geometry around world x-axis
                $b383cde4e0574ff6$var$_m1.makeRotationX(angle);
                this.applyMatrix4($b383cde4e0574ff6$var$_m1);
                return this;
            }
        },
        {
            key: "rotateY",
            value: function rotateY(angle) {
                // rotate geometry around world y-axis
                $b383cde4e0574ff6$var$_m1.makeRotationY(angle);
                this.applyMatrix4($b383cde4e0574ff6$var$_m1);
                return this;
            }
        },
        {
            key: "rotateZ",
            value: function rotateZ(angle) {
                // rotate geometry around world z-axis
                $b383cde4e0574ff6$var$_m1.makeRotationZ(angle);
                this.applyMatrix4($b383cde4e0574ff6$var$_m1);
                return this;
            }
        },
        {
            key: "translate",
            value: function translate(x, y, z) {
                // translate geometry
                $b383cde4e0574ff6$var$_m1.makeTranslation(x, y, z);
                this.applyMatrix4($b383cde4e0574ff6$var$_m1);
                return this;
            }
        },
        {
            key: "scale",
            value: function scale(x, y, z) {
                // scale geometry
                $b383cde4e0574ff6$var$_m1.makeScale(x, y, z);
                this.applyMatrix4($b383cde4e0574ff6$var$_m1);
                return this;
            }
        },
        {
            key: "lookAt",
            value: function lookAt(vector) {
                $b383cde4e0574ff6$var$_obj.lookAt(vector);
                $b383cde4e0574ff6$var$_obj.updateMatrix();
                this.applyMatrix4($b383cde4e0574ff6$var$_obj.matrix);
                return this;
            }
        },
        {
            key: "center",
            value: function center() {
                this.computeBoundingBox();
                this.boundingBox.getCenter($b383cde4e0574ff6$var$_offset).negate();
                this.translate($b383cde4e0574ff6$var$_offset.x, $b383cde4e0574ff6$var$_offset.y, $b383cde4e0574ff6$var$_offset.z);
                return this;
            }
        },
        {
            key: "setFromPoints",
            value: function setFromPoints(points) {
                var position = [];
                for(var i = 0, l = points.length; i < l; i++){
                    var point = points[i];
                    position.push(point.x, point.y, point.z || 0);
                }
                this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(position, 3));
                return this;
            }
        },
        {
            key: "computeBoundingBox",
            value: function computeBoundingBox() {
                if (this.boundingBox === null) this.boundingBox = new $b383cde4e0574ff6$export$6f7d5a9418ab2aa3();
                var position = this.attributes.position;
                var morphAttributesPosition = this.morphAttributes.position;
                if (position && position.isGLBufferAttribute) {
                    console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
                    this.boundingBox.set(new $b383cde4e0574ff6$export$64b5c384219d3699(-Infinity, -Infinity, -Infinity), new $b383cde4e0574ff6$export$64b5c384219d3699(Infinity, Infinity, Infinity));
                    return;
                }
                if (position !== undefined) {
                    this.boundingBox.setFromBufferAttribute(position);
                    // process morph attributes if present
                    if (morphAttributesPosition) for(var i = 0, il = morphAttributesPosition.length; i < il; i++){
                        var morphAttribute = morphAttributesPosition[i];
                        $b383cde4e0574ff6$var$_box$1.setFromBufferAttribute(morphAttribute);
                        if (this.morphTargetsRelative) {
                            $b383cde4e0574ff6$var$_vector$8.addVectors(this.boundingBox.min, $b383cde4e0574ff6$var$_box$1.min);
                            this.boundingBox.expandByPoint($b383cde4e0574ff6$var$_vector$8);
                            $b383cde4e0574ff6$var$_vector$8.addVectors(this.boundingBox.max, $b383cde4e0574ff6$var$_box$1.max);
                            this.boundingBox.expandByPoint($b383cde4e0574ff6$var$_vector$8);
                        } else {
                            this.boundingBox.expandByPoint($b383cde4e0574ff6$var$_box$1.min);
                            this.boundingBox.expandByPoint($b383cde4e0574ff6$var$_box$1.max);
                        }
                    }
                } else this.boundingBox.makeEmpty();
                if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
            }
        },
        {
            key: "computeBoundingSphere",
            value: function computeBoundingSphere() {
                if (this.boundingSphere === null) this.boundingSphere = new $b383cde4e0574ff6$export$805e8b72413ccaba();
                var position = this.attributes.position;
                var morphAttributesPosition = this.morphAttributes.position;
                if (position && position.isGLBufferAttribute) {
                    console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
                    this.boundingSphere.set(new $b383cde4e0574ff6$export$64b5c384219d3699(), Infinity);
                    return;
                }
                if (position) {
                    // first, find the center of the bounding sphere
                    var center = this.boundingSphere.center;
                    $b383cde4e0574ff6$var$_box$1.setFromBufferAttribute(position);
                    // process morph attributes if present
                    if (morphAttributesPosition) for(var i = 0, il = morphAttributesPosition.length; i < il; i++){
                        var morphAttribute = morphAttributesPosition[i];
                        $b383cde4e0574ff6$var$_boxMorphTargets.setFromBufferAttribute(morphAttribute);
                        if (this.morphTargetsRelative) {
                            $b383cde4e0574ff6$var$_vector$8.addVectors($b383cde4e0574ff6$var$_box$1.min, $b383cde4e0574ff6$var$_boxMorphTargets.min);
                            $b383cde4e0574ff6$var$_box$1.expandByPoint($b383cde4e0574ff6$var$_vector$8);
                            $b383cde4e0574ff6$var$_vector$8.addVectors($b383cde4e0574ff6$var$_box$1.max, $b383cde4e0574ff6$var$_boxMorphTargets.max);
                            $b383cde4e0574ff6$var$_box$1.expandByPoint($b383cde4e0574ff6$var$_vector$8);
                        } else {
                            $b383cde4e0574ff6$var$_box$1.expandByPoint($b383cde4e0574ff6$var$_boxMorphTargets.min);
                            $b383cde4e0574ff6$var$_box$1.expandByPoint($b383cde4e0574ff6$var$_boxMorphTargets.max);
                        }
                    }
                    $b383cde4e0574ff6$var$_box$1.getCenter(center);
                    // second, try to find a boundingSphere with a radius smaller than the
                    // boundingSphere of the boundingBox: sqrt(3) smaller in the best case
                    var maxRadiusSq = 0;
                    for(var i1 = 0, il1 = position.count; i1 < il1; i1++){
                        $b383cde4e0574ff6$var$_vector$8.fromBufferAttribute(position, i1);
                        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared($b383cde4e0574ff6$var$_vector$8));
                    }
                    // process morph attributes if present
                    if (morphAttributesPosition) for(var i2 = 0, il2 = morphAttributesPosition.length; i2 < il2; i2++){
                        var morphAttribute1 = morphAttributesPosition[i2];
                        var morphTargetsRelative = this.morphTargetsRelative;
                        for(var j = 0, jl = morphAttribute1.count; j < jl; j++){
                            $b383cde4e0574ff6$var$_vector$8.fromBufferAttribute(morphAttribute1, j);
                            if (morphTargetsRelative) {
                                $b383cde4e0574ff6$var$_offset.fromBufferAttribute(position, j);
                                $b383cde4e0574ff6$var$_vector$8.add($b383cde4e0574ff6$var$_offset);
                            }
                            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared($b383cde4e0574ff6$var$_vector$8));
                        }
                    }
                    this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
                    if (isNaN(this.boundingSphere.radius)) console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
                }
            }
        },
        {
            key: "computeTangents",
            value: function computeTangents() {
                var handleTriangle = function handleTriangle(a, b, c) {
                    vA.fromArray(positions, a * 3);
                    vB.fromArray(positions, b * 3);
                    vC.fromArray(positions, c * 3);
                    uvA.fromArray(uvs, a * 2);
                    uvB.fromArray(uvs, b * 2);
                    uvC.fromArray(uvs, c * 2);
                    vB.sub(vA);
                    vC.sub(vA);
                    uvB.sub(uvA);
                    uvC.sub(uvA);
                    var r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y);
                    // silently ignore degenerate uv triangles having coincident or colinear vertices
                    if (!isFinite(r)) return;
                    sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
                    tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
                    tan1[a].add(sdir);
                    tan1[b].add(sdir);
                    tan1[c].add(sdir);
                    tan2[a].add(tdir);
                    tan2[b].add(tdir);
                    tan2[c].add(tdir);
                };
                var handleVertex = function handleVertex(v) {
                    n.fromArray(normals, v * 3);
                    n2.copy(n);
                    var t = tan1[v];
                    // Gram-Schmidt orthogonalize
                    tmp.copy(t);
                    tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
                    // Calculate handedness
                    tmp2.crossVectors(n2, t);
                    var test = tmp2.dot(tan2[v]);
                    var w = test < 0.0 ? -1 : 1.0;
                    tangents[v * 4] = tmp.x;
                    tangents[v * 4 + 1] = tmp.y;
                    tangents[v * 4 + 2] = tmp.z;
                    tangents[v * 4 + 3] = w;
                };
                var index = this.index;
                var attributes = this.attributes;
                // based on http://www.terathon.com/code/tangent.html
                // (per vertex tangents)
                if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {
                    console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
                    return;
                }
                var indices = index.array;
                var positions = attributes.position.array;
                var normals = attributes.normal.array;
                var uvs = attributes.uv.array;
                var nVertices = positions.length / 3;
                if (attributes.tangent === undefined) this.setAttribute("tangent", new $b383cde4e0574ff6$export$8dea267bd6bde117(new Float32Array(4 * nVertices), 4));
                var tangents = attributes.tangent.array;
                var tan1 = [], tan2 = [];
                for(var i = 0; i < nVertices; i++){
                    tan1[i] = new $b383cde4e0574ff6$export$64b5c384219d3699();
                    tan2[i] = new $b383cde4e0574ff6$export$64b5c384219d3699();
                }
                var vA = new $b383cde4e0574ff6$export$64b5c384219d3699(), vB = new $b383cde4e0574ff6$export$64b5c384219d3699(), vC = new $b383cde4e0574ff6$export$64b5c384219d3699(), uvA = new $b383cde4e0574ff6$export$c977b3e384af9ae1(), uvB = new $b383cde4e0574ff6$export$c977b3e384af9ae1(), uvC = new $b383cde4e0574ff6$export$c977b3e384af9ae1(), sdir = new $b383cde4e0574ff6$export$64b5c384219d3699(), tdir = new $b383cde4e0574ff6$export$64b5c384219d3699();
                var groups = this.groups;
                if (groups.length === 0) groups = [
                    {
                        start: 0,
                        count: indices.length
                    }
                ];
                for(var i1 = 0, il = groups.length; i1 < il; ++i1){
                    var group = groups[i1];
                    var start = group.start;
                    var count = group.count;
                    for(var j = start, jl = start + count; j < jl; j += 3)handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);
                }
                var tmp = new $b383cde4e0574ff6$export$64b5c384219d3699(), tmp2 = new $b383cde4e0574ff6$export$64b5c384219d3699();
                var n = new $b383cde4e0574ff6$export$64b5c384219d3699(), n2 = new $b383cde4e0574ff6$export$64b5c384219d3699();
                for(var i2 = 0, il1 = groups.length; i2 < il1; ++i2){
                    var group1 = groups[i2];
                    var start1 = group1.start;
                    var count1 = group1.count;
                    for(var j1 = start1, jl1 = start1 + count1; j1 < jl1; j1 += 3){
                        handleVertex(indices[j1 + 0]);
                        handleVertex(indices[j1 + 1]);
                        handleVertex(indices[j1 + 2]);
                    }
                }
            }
        },
        {
            key: "computeVertexNormals",
            value: function computeVertexNormals() {
                var index = this.index;
                var positionAttribute = this.getAttribute("position");
                if (positionAttribute !== undefined) {
                    var normalAttribute = this.getAttribute("normal");
                    if (normalAttribute === undefined) {
                        normalAttribute = new $b383cde4e0574ff6$export$8dea267bd6bde117(new Float32Array(positionAttribute.count * 3), 3);
                        this.setAttribute("normal", normalAttribute);
                    } else // reset existing normals to zero
                    for(var i = 0, il = normalAttribute.count; i < il; i++)normalAttribute.setXYZ(i, 0, 0, 0);
                    var pA = new $b383cde4e0574ff6$export$64b5c384219d3699(), pB = new $b383cde4e0574ff6$export$64b5c384219d3699(), pC = new $b383cde4e0574ff6$export$64b5c384219d3699();
                    var nA = new $b383cde4e0574ff6$export$64b5c384219d3699(), nB = new $b383cde4e0574ff6$export$64b5c384219d3699(), nC = new $b383cde4e0574ff6$export$64b5c384219d3699();
                    var cb = new $b383cde4e0574ff6$export$64b5c384219d3699(), ab = new $b383cde4e0574ff6$export$64b5c384219d3699();
                    // indexed elements
                    if (index) for(var i1 = 0, il1 = index.count; i1 < il1; i1 += 3){
                        var vA = index.getX(i1 + 0);
                        var vB = index.getX(i1 + 1);
                        var vC = index.getX(i1 + 2);
                        pA.fromBufferAttribute(positionAttribute, vA);
                        pB.fromBufferAttribute(positionAttribute, vB);
                        pC.fromBufferAttribute(positionAttribute, vC);
                        cb.subVectors(pC, pB);
                        ab.subVectors(pA, pB);
                        cb.cross(ab);
                        nA.fromBufferAttribute(normalAttribute, vA);
                        nB.fromBufferAttribute(normalAttribute, vB);
                        nC.fromBufferAttribute(normalAttribute, vC);
                        nA.add(cb);
                        nB.add(cb);
                        nC.add(cb);
                        normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
                        normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
                        normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
                    }
                    else // non-indexed elements (unconnected triangle soup)
                    for(var i2 = 0, il2 = positionAttribute.count; i2 < il2; i2 += 3){
                        pA.fromBufferAttribute(positionAttribute, i2 + 0);
                        pB.fromBufferAttribute(positionAttribute, i2 + 1);
                        pC.fromBufferAttribute(positionAttribute, i2 + 2);
                        cb.subVectors(pC, pB);
                        ab.subVectors(pA, pB);
                        cb.cross(ab);
                        normalAttribute.setXYZ(i2 + 0, cb.x, cb.y, cb.z);
                        normalAttribute.setXYZ(i2 + 1, cb.x, cb.y, cb.z);
                        normalAttribute.setXYZ(i2 + 2, cb.x, cb.y, cb.z);
                    }
                    this.normalizeNormals();
                    normalAttribute.needsUpdate = true;
                }
            }
        },
        {
            key: "merge",
            value: function merge(geometry, offset) {
                if (!(geometry && geometry.isBufferGeometry)) {
                    console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", geometry);
                    return;
                }
                if (offset === undefined) {
                    offset = 0;
                    console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.");
                }
                var attributes = this.attributes;
                for(var key in attributes){
                    if (geometry.attributes[key] === undefined) continue;
                    var attribute1 = attributes[key];
                    var attributeArray1 = attribute1.array;
                    var attribute2 = geometry.attributes[key];
                    var attributeArray2 = attribute2.array;
                    var attributeOffset = attribute2.itemSize * offset;
                    var length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);
                    for(var i = 0, j = attributeOffset; i < length; i++, j++)attributeArray1[j] = attributeArray2[i];
                }
                return this;
            }
        },
        {
            key: "normalizeNormals",
            value: function normalizeNormals() {
                var normals = this.attributes.normal;
                for(var i = 0, il = normals.count; i < il; i++){
                    $b383cde4e0574ff6$var$_vector$8.fromBufferAttribute(normals, i);
                    $b383cde4e0574ff6$var$_vector$8.normalize();
                    normals.setXYZ(i, $b383cde4e0574ff6$var$_vector$8.x, $b383cde4e0574ff6$var$_vector$8.y, $b383cde4e0574ff6$var$_vector$8.z);
                }
            }
        },
        {
            key: "toNonIndexed",
            value: function toNonIndexed() {
                var convertBufferAttribute = function convertBufferAttribute(attribute, indices) {
                    var array = attribute.array;
                    var itemSize = attribute.itemSize;
                    var normalized = attribute.normalized;
                    var array2 = new array.constructor(indices.length * itemSize);
                    var index = 0, index2 = 0;
                    for(var i = 0, l = indices.length; i < l; i++){
                        if (attribute.isInterleavedBufferAttribute) index = indices[i] * attribute.data.stride + attribute.offset;
                        else index = indices[i] * itemSize;
                        for(var j = 0; j < itemSize; j++)array2[index2++] = array[index++];
                    }
                    return new $b383cde4e0574ff6$export$8dea267bd6bde117(array2, itemSize, normalized);
                };
                //
                if (this.index === null) {
                    console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
                    return this;
                }
                var geometry2 = new BufferGeometry();
                var indices = this.index.array;
                var attributes = this.attributes;
                // attributes
                for(var name in attributes){
                    var attribute = attributes[name];
                    var newAttribute = convertBufferAttribute(attribute, indices);
                    geometry2.setAttribute(name, newAttribute);
                }
                // morph attributes
                var morphAttributes = this.morphAttributes;
                for(var name1 in morphAttributes){
                    var morphArray = [];
                    var morphAttribute = morphAttributes[name1]; // morphAttribute: array of Float32BufferAttributes
                    for(var i = 0, il = morphAttribute.length; i < il; i++){
                        var attribute1 = morphAttribute[i];
                        var newAttribute1 = convertBufferAttribute(attribute1, indices);
                        morphArray.push(newAttribute1);
                    }
                    geometry2.morphAttributes[name1] = morphArray;
                }
                geometry2.morphTargetsRelative = this.morphTargetsRelative;
                // groups
                var groups = this.groups;
                for(var i1 = 0, l = groups.length; i1 < l; i1++){
                    var group = groups[i1];
                    geometry2.addGroup(group.start, group.count, group.materialIndex);
                }
                return geometry2;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = {
                    metadata: {
                        version: 4.5,
                        type: "BufferGeometry",
                        generator: "BufferGeometry.toJSON"
                    }
                };
                // standard BufferGeometry serialization
                data.uuid = this.uuid;
                data.type = this.type;
                if (this.name !== "") data.name = this.name;
                if (Object.keys(this.userData).length > 0) data.userData = this.userData;
                if (this.parameters !== undefined) {
                    var parameters = this.parameters;
                    for(var key in parameters)if (parameters[key] !== undefined) data[key] = parameters[key];
                    return data;
                }
                // for simplicity the code assumes attributes are not shared across geometries, see #15811
                data.data = {
                    attributes: {}
                };
                var index = this.index;
                if (index !== null) data.data.index = {
                    type: index.array.constructor.name,
                    array: Array.prototype.slice.call(index.array)
                };
                var attributes = this.attributes;
                for(var key1 in attributes){
                    var attribute = attributes[key1];
                    data.data.attributes[key1] = attribute.toJSON(data.data);
                }
                var morphAttributes = {};
                var hasMorphAttributes = false;
                for(var key2 in this.morphAttributes){
                    var attributeArray = this.morphAttributes[key2];
                    var array = [];
                    for(var i = 0, il = attributeArray.length; i < il; i++){
                        var attribute1 = attributeArray[i];
                        array.push(attribute1.toJSON(data.data));
                    }
                    if (array.length > 0) {
                        morphAttributes[key2] = array;
                        hasMorphAttributes = true;
                    }
                }
                if (hasMorphAttributes) {
                    data.data.morphAttributes = morphAttributes;
                    data.data.morphTargetsRelative = this.morphTargetsRelative;
                }
                var groups = this.groups;
                if (groups.length > 0) data.data.groups = JSON.parse(JSON.stringify(groups));
                var boundingSphere = this.boundingSphere;
                if (boundingSphere !== null) data.data.boundingSphere = {
                    center: boundingSphere.center.toArray(),
                    radius: boundingSphere.radius
                };
                return data;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                // reset
                this.index = null;
                this.attributes = {};
                this.morphAttributes = {};
                this.groups = [];
                this.boundingBox = null;
                this.boundingSphere = null;
                // used for storing cloned, shared data
                var data = {};
                // name
                this.name = source.name;
                // index
                var index = source.index;
                if (index !== null) this.setIndex(index.clone(data));
                // attributes
                var attributes = source.attributes;
                for(var name in attributes){
                    var attribute = attributes[name];
                    this.setAttribute(name, attribute.clone(data));
                }
                // morph attributes
                var morphAttributes = source.morphAttributes;
                for(var name1 in morphAttributes){
                    var array = [];
                    var morphAttribute = morphAttributes[name1]; // morphAttribute: array of Float32BufferAttributes
                    for(var i = 0, l = morphAttribute.length; i < l; i++)array.push(morphAttribute[i].clone(data));
                    this.morphAttributes[name1] = array;
                }
                this.morphTargetsRelative = source.morphTargetsRelative;
                // groups
                var groups = source.groups;
                for(var i1 = 0, l1 = groups.length; i1 < l1; i1++){
                    var group = groups[i1];
                    this.addGroup(group.start, group.count, group.materialIndex);
                }
                // bounding box
                var boundingBox = source.boundingBox;
                if (boundingBox !== null) this.boundingBox = boundingBox.clone();
                // bounding sphere
                var boundingSphere = source.boundingSphere;
                if (boundingSphere !== null) this.boundingSphere = boundingSphere.clone();
                // draw range
                this.drawRange.start = source.drawRange.start;
                this.drawRange.count = source.drawRange.count;
                // user data
                this.userData = source.userData;
                // geometry generator parameters
                if (source.parameters !== undefined) this.parameters = Object.assign({}, source.parameters);
                return this;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.dispatchEvent({
                    type: "dispose"
                });
            }
        }
    ]);
    return BufferGeometry;
}($b383cde4e0574ff6$export$ec8b666c5fe2c75a);
$b383cde4e0574ff6$export$b7be63a67df8959.prototype.isBufferGeometry = true;
var $b383cde4e0574ff6$var$_inverseMatrix$2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_ray$2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$a186db52eed6d40e();
var $b383cde4e0574ff6$var$_sphere$3 = /*@__PURE__*/ new $b383cde4e0574ff6$export$805e8b72413ccaba();
var $b383cde4e0574ff6$var$_vA$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_vB$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_vC$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_tempA = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_tempB = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_tempC = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_morphA = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_morphB = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_morphC = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_uvA$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$c977b3e384af9ae1();
var $b383cde4e0574ff6$var$_uvB$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$c977b3e384af9ae1();
var $b383cde4e0574ff6$var$_uvC$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$c977b3e384af9ae1();
var $b383cde4e0574ff6$var$_intersectionPoint = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_intersectionPointWorld = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$e176487c05830cc5 = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(Mesh, Object3D);
    var _super = (0, $a0Xbx.default)(Mesh);
    function Mesh() {
        var geometry = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$b7be63a67df8959(), material = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$55cbcc9b622fe1f5();
        (0, $dnGTK.default)(this, Mesh);
        var _this;
        _this = _super.call(this);
        _this.type = "Mesh";
        _this.geometry = geometry;
        _this.material = material;
        _this.updateMorphTargets();
        return _this;
    }
    (0, $9SLyD.default)(Mesh, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(Mesh.prototype), "copy", this).call(this, source);
                if (source.morphTargetInfluences !== undefined) this.morphTargetInfluences = source.morphTargetInfluences.slice();
                if (source.morphTargetDictionary !== undefined) this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
                this.material = source.material;
                this.geometry = source.geometry;
                return this;
            }
        },
        {
            key: "updateMorphTargets",
            value: function updateMorphTargets() {
                var geometry = this.geometry;
                if (geometry.isBufferGeometry) {
                    var morphAttributes = geometry.morphAttributes;
                    var keys = Object.keys(morphAttributes);
                    if (keys.length > 0) {
                        var morphAttribute = morphAttributes[keys[0]];
                        if (morphAttribute !== undefined) {
                            this.morphTargetInfluences = [];
                            this.morphTargetDictionary = {};
                            for(var m = 0, ml = morphAttribute.length; m < ml; m++){
                                var name = morphAttribute[m].name || String(m);
                                this.morphTargetInfluences.push(0);
                                this.morphTargetDictionary[name] = m;
                            }
                        }
                    }
                } else {
                    var morphTargets = geometry.morphTargets;
                    if (morphTargets !== undefined && morphTargets.length > 0) console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
                }
            }
        },
        {
            key: "raycast",
            value: function raycast(raycaster, intersects) {
                var geometry = this.geometry;
                var material = this.material;
                var matrixWorld = this.matrixWorld;
                if (material === undefined) return;
                // Checking boundingSphere distance to ray
                if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
                $b383cde4e0574ff6$var$_sphere$3.copy(geometry.boundingSphere);
                $b383cde4e0574ff6$var$_sphere$3.applyMatrix4(matrixWorld);
                if (raycaster.ray.intersectsSphere($b383cde4e0574ff6$var$_sphere$3) === false) return;
                //
                $b383cde4e0574ff6$var$_inverseMatrix$2.copy(matrixWorld).invert();
                $b383cde4e0574ff6$var$_ray$2.copy(raycaster.ray).applyMatrix4($b383cde4e0574ff6$var$_inverseMatrix$2);
                // Check boundingBox before continuing
                if (geometry.boundingBox !== null) {
                    if ($b383cde4e0574ff6$var$_ray$2.intersectsBox(geometry.boundingBox) === false) return;
                }
                var intersection;
                if (geometry.isBufferGeometry) {
                    var index = geometry.index;
                    var position = geometry.attributes.position;
                    var morphPosition = geometry.morphAttributes.position;
                    var morphTargetsRelative = geometry.morphTargetsRelative;
                    var uv = geometry.attributes.uv;
                    var uv2 = geometry.attributes.uv2;
                    var groups = geometry.groups;
                    var drawRange = geometry.drawRange;
                    if (index !== null) {
                        // indexed buffer geometry
                        if (Array.isArray(material)) for(var i = 0, il = groups.length; i < il; i++){
                            var group = groups[i];
                            var groupMaterial = material[group.materialIndex];
                            var start = Math.max(group.start, drawRange.start);
                            var end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
                            for(var j = start, jl = end; j < jl; j += 3){
                                var a = index.getX(j);
                                var b = index.getX(j + 1);
                                var c = index.getX(j + 2);
                                intersection = $b383cde4e0574ff6$var$checkBufferGeometryIntersection(this, groupMaterial, raycaster, $b383cde4e0574ff6$var$_ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
                                if (intersection) {
                                    intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics
                                    intersection.face.materialIndex = group.materialIndex;
                                    intersects.push(intersection);
                                }
                            }
                        }
                        else {
                            var start1 = Math.max(0, drawRange.start);
                            var end1 = Math.min(index.count, drawRange.start + drawRange.count);
                            for(var i1 = start1, il1 = end1; i1 < il1; i1 += 3){
                                var a1 = index.getX(i1);
                                var b1 = index.getX(i1 + 1);
                                var c1 = index.getX(i1 + 2);
                                intersection = $b383cde4e0574ff6$var$checkBufferGeometryIntersection(this, material, raycaster, $b383cde4e0574ff6$var$_ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a1, b1, c1);
                                if (intersection) {
                                    intersection.faceIndex = Math.floor(i1 / 3); // triangle number in indexed buffer semantics
                                    intersects.push(intersection);
                                }
                            }
                        }
                    } else if (position !== undefined) {
                        // non-indexed buffer geometry
                        if (Array.isArray(material)) for(var i2 = 0, il2 = groups.length; i2 < il2; i2++){
                            var group1 = groups[i2];
                            var groupMaterial1 = material[group1.materialIndex];
                            var start2 = Math.max(group1.start, drawRange.start);
                            var end2 = Math.min(position.count, Math.min(group1.start + group1.count, drawRange.start + drawRange.count));
                            for(var j1 = start2, jl1 = end2; j1 < jl1; j1 += 3){
                                var a2 = j1;
                                var b2 = j1 + 1;
                                var c2 = j1 + 2;
                                intersection = $b383cde4e0574ff6$var$checkBufferGeometryIntersection(this, groupMaterial1, raycaster, $b383cde4e0574ff6$var$_ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a2, b2, c2);
                                if (intersection) {
                                    intersection.faceIndex = Math.floor(j1 / 3); // triangle number in non-indexed buffer semantics
                                    intersection.face.materialIndex = group1.materialIndex;
                                    intersects.push(intersection);
                                }
                            }
                        }
                        else {
                            var start3 = Math.max(0, drawRange.start);
                            var end3 = Math.min(position.count, drawRange.start + drawRange.count);
                            for(var i3 = start3, il3 = end3; i3 < il3; i3 += 3){
                                var a3 = i3;
                                var b3 = i3 + 1;
                                var c3 = i3 + 2;
                                intersection = $b383cde4e0574ff6$var$checkBufferGeometryIntersection(this, material, raycaster, $b383cde4e0574ff6$var$_ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a3, b3, c3);
                                if (intersection) {
                                    intersection.faceIndex = Math.floor(i3 / 3); // triangle number in non-indexed buffer semantics
                                    intersects.push(intersection);
                                }
                            }
                        }
                    }
                } else if (geometry.isGeometry) console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
            }
        }
    ]);
    return Mesh;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
$b383cde4e0574ff6$export$e176487c05830cc5.prototype.isMesh = true;
function $b383cde4e0574ff6$var$checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
    var intersect;
    if (material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace) intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    else intersect = ray.intersectTriangle(pA, pB, pC, material.side !== $b383cde4e0574ff6$export$3b296b6f144d5b03, point);
    if (intersect === null) return null;
    $b383cde4e0574ff6$var$_intersectionPointWorld.copy(point);
    $b383cde4e0574ff6$var$_intersectionPointWorld.applyMatrix4(object.matrixWorld);
    var distance = raycaster.ray.origin.distanceTo($b383cde4e0574ff6$var$_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far) return null;
    return {
        distance: distance,
        point: $b383cde4e0574ff6$var$_intersectionPointWorld.clone(),
        object: object
    };
}
function $b383cde4e0574ff6$var$checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {
    $b383cde4e0574ff6$var$_vA$1.fromBufferAttribute(position, a);
    $b383cde4e0574ff6$var$_vB$1.fromBufferAttribute(position, b);
    $b383cde4e0574ff6$var$_vC$1.fromBufferAttribute(position, c);
    var morphInfluences = object.morphTargetInfluences;
    if (morphPosition && morphInfluences) {
        $b383cde4e0574ff6$var$_morphA.set(0, 0, 0);
        $b383cde4e0574ff6$var$_morphB.set(0, 0, 0);
        $b383cde4e0574ff6$var$_morphC.set(0, 0, 0);
        for(var i = 0, il = morphPosition.length; i < il; i++){
            var influence = morphInfluences[i];
            var morphAttribute = morphPosition[i];
            if (influence === 0) continue;
            $b383cde4e0574ff6$var$_tempA.fromBufferAttribute(morphAttribute, a);
            $b383cde4e0574ff6$var$_tempB.fromBufferAttribute(morphAttribute, b);
            $b383cde4e0574ff6$var$_tempC.fromBufferAttribute(morphAttribute, c);
            if (morphTargetsRelative) {
                $b383cde4e0574ff6$var$_morphA.addScaledVector($b383cde4e0574ff6$var$_tempA, influence);
                $b383cde4e0574ff6$var$_morphB.addScaledVector($b383cde4e0574ff6$var$_tempB, influence);
                $b383cde4e0574ff6$var$_morphC.addScaledVector($b383cde4e0574ff6$var$_tempC, influence);
            } else {
                $b383cde4e0574ff6$var$_morphA.addScaledVector($b383cde4e0574ff6$var$_tempA.sub($b383cde4e0574ff6$var$_vA$1), influence);
                $b383cde4e0574ff6$var$_morphB.addScaledVector($b383cde4e0574ff6$var$_tempB.sub($b383cde4e0574ff6$var$_vB$1), influence);
                $b383cde4e0574ff6$var$_morphC.addScaledVector($b383cde4e0574ff6$var$_tempC.sub($b383cde4e0574ff6$var$_vC$1), influence);
            }
        }
        $b383cde4e0574ff6$var$_vA$1.add($b383cde4e0574ff6$var$_morphA);
        $b383cde4e0574ff6$var$_vB$1.add($b383cde4e0574ff6$var$_morphB);
        $b383cde4e0574ff6$var$_vC$1.add($b383cde4e0574ff6$var$_morphC);
    }
    if (object.isSkinnedMesh) {
        object.boneTransform(a, $b383cde4e0574ff6$var$_vA$1);
        object.boneTransform(b, $b383cde4e0574ff6$var$_vB$1);
        object.boneTransform(c, $b383cde4e0574ff6$var$_vC$1);
    }
    var intersection = $b383cde4e0574ff6$var$checkIntersection(object, material, raycaster, ray, $b383cde4e0574ff6$var$_vA$1, $b383cde4e0574ff6$var$_vB$1, $b383cde4e0574ff6$var$_vC$1, $b383cde4e0574ff6$var$_intersectionPoint);
    if (intersection) {
        if (uv) {
            $b383cde4e0574ff6$var$_uvA$1.fromBufferAttribute(uv, a);
            $b383cde4e0574ff6$var$_uvB$1.fromBufferAttribute(uv, b);
            $b383cde4e0574ff6$var$_uvC$1.fromBufferAttribute(uv, c);
            intersection.uv = $b383cde4e0574ff6$export$5a465592bfe74b48.getUV($b383cde4e0574ff6$var$_intersectionPoint, $b383cde4e0574ff6$var$_vA$1, $b383cde4e0574ff6$var$_vB$1, $b383cde4e0574ff6$var$_vC$1, $b383cde4e0574ff6$var$_uvA$1, $b383cde4e0574ff6$var$_uvB$1, $b383cde4e0574ff6$var$_uvC$1, new $b383cde4e0574ff6$export$c977b3e384af9ae1());
        }
        if (uv2) {
            $b383cde4e0574ff6$var$_uvA$1.fromBufferAttribute(uv2, a);
            $b383cde4e0574ff6$var$_uvB$1.fromBufferAttribute(uv2, b);
            $b383cde4e0574ff6$var$_uvC$1.fromBufferAttribute(uv2, c);
            intersection.uv2 = $b383cde4e0574ff6$export$5a465592bfe74b48.getUV($b383cde4e0574ff6$var$_intersectionPoint, $b383cde4e0574ff6$var$_vA$1, $b383cde4e0574ff6$var$_vB$1, $b383cde4e0574ff6$var$_vC$1, $b383cde4e0574ff6$var$_uvA$1, $b383cde4e0574ff6$var$_uvB$1, $b383cde4e0574ff6$var$_uvC$1, new $b383cde4e0574ff6$export$c977b3e384af9ae1());
        }
        var face = {
            a: a,
            b: b,
            c: c,
            normal: new $b383cde4e0574ff6$export$64b5c384219d3699(),
            materialIndex: 0
        };
        $b383cde4e0574ff6$export$5a465592bfe74b48.getNormal($b383cde4e0574ff6$var$_vA$1, $b383cde4e0574ff6$var$_vB$1, $b383cde4e0574ff6$var$_vC$1, face.normal);
        intersection.face = face;
    }
    return intersection;
}
var $b383cde4e0574ff6$export$ab3456a079aa7d80 = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(BoxGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(BoxGeometry);
    function BoxGeometry() {
        var width = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, height = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, widthSegments = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1, heightSegments = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 1, depthSegments = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 1;
        (0, $dnGTK.default)(this, BoxGeometry);
        var _this;
        var buildPlane = function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {
            var segmentWidth = width / gridX;
            var segmentHeight = height / gridY;
            var widthHalf = width / 2;
            var heightHalf = height / 2;
            var depthHalf = depth / 2;
            var gridX1 = gridX + 1;
            var gridY1 = gridY + 1;
            var vertexCounter = 0;
            var groupCount = 0;
            var vector = new $b383cde4e0574ff6$export$64b5c384219d3699();
            // generate vertices, normals and uvs
            for(var iy = 0; iy < gridY1; iy++){
                var y = iy * segmentHeight - heightHalf;
                for(var ix = 0; ix < gridX1; ix++){
                    var x = ix * segmentWidth - widthHalf;
                    // set values to correct vector component
                    vector[u] = x * udir;
                    vector[v] = y * vdir;
                    vector[w] = depthHalf;
                    // now apply vector to vertex buffer
                    vertices.push(vector.x, vector.y, vector.z);
                    // set values to correct vector component
                    vector[u] = 0;
                    vector[v] = 0;
                    vector[w] = depth > 0 ? 1 : -1;
                    // now apply vector to normal buffer
                    normals.push(vector.x, vector.y, vector.z);
                    // uvs
                    uvs.push(ix / gridX);
                    uvs.push(1 - iy / gridY);
                    // counters
                    vertexCounter += 1;
                }
            }
            // indices
            // 1. you need three indices to draw a single face
            // 2. a single segment consists of two faces
            // 3. so we need to generate six (2*3) indices per segment
            for(var iy1 = 0; iy1 < gridY; iy1++)for(var ix1 = 0; ix1 < gridX; ix1++){
                var a = numberOfVertices + ix1 + gridX1 * iy1;
                var b = numberOfVertices + ix1 + gridX1 * (iy1 + 1);
                var c = numberOfVertices + (ix1 + 1) + gridX1 * (iy1 + 1);
                var d = numberOfVertices + (ix1 + 1) + gridX1 * iy1;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
                // increase counter
                groupCount += 6;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, materialIndex);
            // calculate new start value for groups
            groupStart += groupCount;
            // update total number of vertices
            numberOfVertices += vertexCounter;
        };
        _this = _super.call(this);
        _this.type = "BoxGeometry";
        _this.parameters = {
            width: width,
            height: height,
            depth: depth,
            widthSegments: widthSegments,
            heightSegments: heightSegments,
            depthSegments: depthSegments
        };
        var scope = (0, $4enQD.default)(_this);
        // segments
        widthSegments = Math.floor(widthSegments);
        heightSegments = Math.floor(heightSegments);
        depthSegments = Math.floor(depthSegments);
        // buffers
        var indices = [];
        var vertices = [];
        var normals = [];
        var uvs = [];
        // helper variables
        var numberOfVertices = 0;
        var groupStart = 0;
        // build each side of the box geometry
        buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px
        buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx
        buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py
        buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny
        buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz
        buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz
        // build geometry
        _this.setIndex(indices);
        _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        _this.setAttribute("normal", new $b383cde4e0574ff6$export$cbe7a62641830ebd(normals, 3));
        _this.setAttribute("uv", new $b383cde4e0574ff6$export$cbe7a62641830ebd(uvs, 2));
        return _this;
    }
    (0, $9SLyD.default)(BoxGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
            }
        }
    ]);
    return BoxGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
/**
 * Uniform Utilities
 */ function $b383cde4e0574ff6$var$cloneUniforms(src) {
    var dst = {};
    for(var u in src){
        dst[u] = {};
        for(var p in src[u]){
            var property = src[u][p];
            if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) dst[u][p] = property.clone();
            else if (Array.isArray(property)) dst[u][p] = property.slice();
            else dst[u][p] = property;
        }
    }
    return dst;
}
function $b383cde4e0574ff6$var$mergeUniforms(uniforms) {
    var merged = {};
    for(var u = 0; u < uniforms.length; u++){
        var tmp = $b383cde4e0574ff6$var$cloneUniforms(uniforms[u]);
        for(var p in tmp)merged[p] = tmp[p];
    }
    return merged;
}
// Legacy
var $b383cde4e0574ff6$export$d8ecdf8615bfea69 = {
    clone: $b383cde4e0574ff6$var$cloneUniforms,
    merge: $b383cde4e0574ff6$var$mergeUniforms
};
var $b383cde4e0574ff6$var$default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
var $b383cde4e0574ff6$var$default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
/**
 * parameters = {
 *  defines: { "label" : "value" },
 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
 *
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>
 * }
 */ var $b383cde4e0574ff6$export$83c7d75d550a8b0d = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(ShaderMaterial, Material);
    var _super = (0, $a0Xbx.default)(ShaderMaterial);
    function ShaderMaterial(parameters) {
        (0, $dnGTK.default)(this, ShaderMaterial);
        var _this;
        _this = _super.call(this);
        _this.type = "ShaderMaterial";
        _this.defines = {};
        _this.uniforms = {};
        _this.vertexShader = $b383cde4e0574ff6$var$default_vertex;
        _this.fragmentShader = $b383cde4e0574ff6$var$default_fragment;
        _this.linewidth = 1;
        _this.wireframe = false;
        _this.wireframeLinewidth = 1;
        _this.fog = false; // set to use scene fog
        _this.lights = false; // set to use scene lights
        _this.clipping = false; // set to use user-defined clipping planes
        _this.extensions = {
            derivatives: false,
            fragDepth: false,
            drawBuffers: false,
            shaderTextureLOD: false // set to use shader texture LOD
        };
        // When rendered geometry doesn't include these attributes but the material does,
        // use these default values in WebGL. This avoids errors when buffer data is missing.
        _this.defaultAttributeValues = {
            "color": [
                1,
                1,
                1
            ],
            "uv": [
                0,
                0
            ],
            "uv2": [
                0,
                0
            ]
        };
        _this.index0AttributeName = undefined;
        _this.uniformsNeedUpdate = false;
        _this.glslVersion = null;
        if (parameters !== undefined) {
            if (parameters.attributes !== undefined) console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.");
            _this.setValues(parameters);
        }
        return _this;
    }
    (0, $9SLyD.default)(ShaderMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(ShaderMaterial.prototype), "copy", this).call(this, source);
                this.fragmentShader = source.fragmentShader;
                this.vertexShader = source.vertexShader;
                this.uniforms = $b383cde4e0574ff6$var$cloneUniforms(source.uniforms);
                this.defines = Object.assign({}, source.defines);
                this.wireframe = source.wireframe;
                this.wireframeLinewidth = source.wireframeLinewidth;
                this.lights = source.lights;
                this.clipping = source.clipping;
                this.extensions = Object.assign({}, source.extensions);
                this.glslVersion = source.glslVersion;
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON(meta) {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(ShaderMaterial.prototype), "toJSON", this).call(this, meta);
                data.glslVersion = this.glslVersion;
                data.uniforms = {};
                for(var name in this.uniforms){
                    var uniform = this.uniforms[name];
                    var value = uniform.value;
                    if (value && value.isTexture) data.uniforms[name] = {
                        type: "t",
                        value: value.toJSON(meta).uuid
                    };
                    else if (value && value.isColor) data.uniforms[name] = {
                        type: "c",
                        value: value.getHex()
                    };
                    else if (value && value.isVector2) data.uniforms[name] = {
                        type: "v2",
                        value: value.toArray()
                    };
                    else if (value && value.isVector3) data.uniforms[name] = {
                        type: "v3",
                        value: value.toArray()
                    };
                    else if (value && value.isVector4) data.uniforms[name] = {
                        type: "v4",
                        value: value.toArray()
                    };
                    else if (value && value.isMatrix3) data.uniforms[name] = {
                        type: "m3",
                        value: value.toArray()
                    };
                    else if (value && value.isMatrix4) data.uniforms[name] = {
                        type: "m4",
                        value: value.toArray()
                    };
                    else data.uniforms[name] = {
                        value: value
                    };
                }
                if (Object.keys(this.defines).length > 0) data.defines = this.defines;
                data.vertexShader = this.vertexShader;
                data.fragmentShader = this.fragmentShader;
                var extensions = {};
                for(var key in this.extensions)if (this.extensions[key] === true) extensions[key] = true;
                if (Object.keys(extensions).length > 0) data.extensions = extensions;
                return data;
            }
        }
    ]);
    return ShaderMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$83c7d75d550a8b0d.prototype.isShaderMaterial = true;
var $b383cde4e0574ff6$export$79f141de891a5fed = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(Camera, Object3D);
    var _super = (0, $a0Xbx.default)(Camera);
    function Camera() {
        (0, $dnGTK.default)(this, Camera);
        var _this;
        _this = _super.call(this);
        _this.type = "Camera";
        _this.matrixWorldInverse = new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
        _this.projectionMatrix = new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
        _this.projectionMatrixInverse = new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
        return _this;
    }
    (0, $9SLyD.default)(Camera, [
        {
            key: "copy",
            value: function copy(source, recursive) {
                (0, $bWs11.default)((0, $6gb2n.default)(Camera.prototype), "copy", this).call(this, source, recursive);
                this.matrixWorldInverse.copy(source.matrixWorldInverse);
                this.projectionMatrix.copy(source.projectionMatrix);
                this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
                return this;
            }
        },
        {
            key: "getWorldDirection",
            value: function getWorldDirection(target) {
                this.updateWorldMatrix(true, false);
                var e = this.matrixWorld.elements;
                return target.set(-e[8], -e[9], -e[10]).normalize();
            }
        },
        {
            key: "updateMatrixWorld",
            value: function updateMatrixWorld(force) {
                (0, $bWs11.default)((0, $6gb2n.default)(Camera.prototype), "updateMatrixWorld", this).call(this, force);
                this.matrixWorldInverse.copy(this.matrixWorld).invert();
            }
        },
        {
            key: "updateWorldMatrix",
            value: function updateWorldMatrix(updateParents, updateChildren) {
                (0, $bWs11.default)((0, $6gb2n.default)(Camera.prototype), "updateWorldMatrix", this).call(this, updateParents, updateChildren);
                this.matrixWorldInverse.copy(this.matrixWorld).invert();
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        }
    ]);
    return Camera;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
$b383cde4e0574ff6$export$79f141de891a5fed.prototype.isCamera = true;
var $b383cde4e0574ff6$export$74e4ae24825f68d7 = /*#__PURE__*/ function(Camera) {
    "use strict";
    (0, $gQI4D.default)(PerspectiveCamera, Camera);
    var _super = (0, $a0Xbx.default)(PerspectiveCamera);
    function PerspectiveCamera() {
        var fov = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 50, aspect = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, near = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0.1, far = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 2000;
        (0, $dnGTK.default)(this, PerspectiveCamera);
        var _this;
        _this = _super.call(this);
        _this.type = "PerspectiveCamera";
        _this.fov = fov;
        _this.zoom = 1;
        _this.near = near;
        _this.far = far;
        _this.focus = 10;
        _this.aspect = aspect;
        _this.view = null;
        _this.filmGauge = 35; // width of the film (default in millimeters)
        _this.filmOffset = 0; // horizontal film offset (same unit as gauge)
        _this.updateProjectionMatrix();
        return _this;
    }
    (0, $9SLyD.default)(PerspectiveCamera, [
        {
            key: "copy",
            value: function copy(source, recursive) {
                (0, $bWs11.default)((0, $6gb2n.default)(PerspectiveCamera.prototype), "copy", this).call(this, source, recursive);
                this.fov = source.fov;
                this.zoom = source.zoom;
                this.near = source.near;
                this.far = source.far;
                this.focus = source.focus;
                this.aspect = source.aspect;
                this.view = source.view === null ? null : Object.assign({}, source.view);
                this.filmGauge = source.filmGauge;
                this.filmOffset = source.filmOffset;
                return this;
            }
        },
        {
            /**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */ key: "setFocalLength",
            value: function setFocalLength(focalLength) {
                /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */ var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
                this.fov = $b383cde4e0574ff6$var$RAD2DEG * 2 * Math.atan(vExtentSlope);
                this.updateProjectionMatrix();
            }
        },
        {
            /**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */ key: "getFocalLength",
            value: function getFocalLength() {
                var vExtentSlope = Math.tan($b383cde4e0574ff6$var$DEG2RAD * 0.5 * this.fov);
                return 0.5 * this.getFilmHeight() / vExtentSlope;
            }
        },
        {
            key: "getEffectiveFOV",
            value: function getEffectiveFOV() {
                return $b383cde4e0574ff6$var$RAD2DEG * 2 * Math.atan(Math.tan($b383cde4e0574ff6$var$DEG2RAD * 0.5 * this.fov) / this.zoom);
            }
        },
        {
            key: "getFilmWidth",
            value: function getFilmWidth() {
                // film not completely covered in portrait format (aspect < 1)
                return this.filmGauge * Math.min(this.aspect, 1);
            }
        },
        {
            key: "getFilmHeight",
            value: function getFilmHeight() {
                // film not completely covered in landscape format (aspect > 1)
                return this.filmGauge / Math.max(this.aspect, 1);
            }
        },
        {
            /**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   const w = 1920;
	 *   const h = 1080;
	 *   const fullWidth = w * 3;
	 *   const fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */ key: "setViewOffset",
            value: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {
                this.aspect = fullWidth / fullHeight;
                if (this.view === null) this.view = {
                    enabled: true,
                    fullWidth: 1,
                    fullHeight: 1,
                    offsetX: 0,
                    offsetY: 0,
                    width: 1,
                    height: 1
                };
                this.view.enabled = true;
                this.view.fullWidth = fullWidth;
                this.view.fullHeight = fullHeight;
                this.view.offsetX = x;
                this.view.offsetY = y;
                this.view.width = width;
                this.view.height = height;
                this.updateProjectionMatrix();
            }
        },
        {
            key: "clearViewOffset",
            value: function clearViewOffset() {
                if (this.view !== null) this.view.enabled = false;
                this.updateProjectionMatrix();
            }
        },
        {
            key: "updateProjectionMatrix",
            value: function updateProjectionMatrix() {
                var near = this.near;
                var top = near * Math.tan($b383cde4e0574ff6$var$DEG2RAD * 0.5 * this.fov) / this.zoom;
                var height = 2 * top;
                var width = this.aspect * height;
                var left = -0.5 * width;
                var view = this.view;
                if (this.view !== null && this.view.enabled) {
                    var fullWidth = view.fullWidth, fullHeight = view.fullHeight;
                    left += view.offsetX * width / fullWidth;
                    top -= view.offsetY * height / fullHeight;
                    width *= view.width / fullWidth;
                    height *= view.height / fullHeight;
                }
                var skew = this.filmOffset;
                if (skew !== 0) left += near * skew / this.getFilmWidth();
                this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
                this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
            }
        },
        {
            key: "toJSON",
            value: function toJSON(meta) {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(PerspectiveCamera.prototype), "toJSON", this).call(this, meta);
                data.object.fov = this.fov;
                data.object.zoom = this.zoom;
                data.object.near = this.near;
                data.object.far = this.far;
                data.object.focus = this.focus;
                data.object.aspect = this.aspect;
                if (this.view !== null) data.object.view = Object.assign({}, this.view);
                data.object.filmGauge = this.filmGauge;
                data.object.filmOffset = this.filmOffset;
                return data;
            }
        }
    ]);
    return PerspectiveCamera;
}($b383cde4e0574ff6$export$79f141de891a5fed);
$b383cde4e0574ff6$export$74e4ae24825f68d7.prototype.isPerspectiveCamera = true;
var $b383cde4e0574ff6$var$fov = 90, $b383cde4e0574ff6$var$aspect = 1;
var $b383cde4e0574ff6$export$d0cdd0bd804995de = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(CubeCamera, Object3D);
    var _super = (0, $a0Xbx.default)(CubeCamera);
    function CubeCamera(near, far, renderTarget) {
        (0, $dnGTK.default)(this, CubeCamera);
        var _this;
        _this = _super.call(this);
        _this.type = "CubeCamera";
        if (renderTarget.isWebGLCubeRenderTarget !== true) {
            console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");
            return (0, $2MVFf.default)(_this);
        }
        _this.renderTarget = renderTarget;
        var cameraPX = new $b383cde4e0574ff6$export$74e4ae24825f68d7($b383cde4e0574ff6$var$fov, $b383cde4e0574ff6$var$aspect, near, far);
        cameraPX.layers = _this.layers;
        cameraPX.up.set(0, -1, 0);
        cameraPX.lookAt(new $b383cde4e0574ff6$export$64b5c384219d3699(1, 0, 0));
        _this.add(cameraPX);
        var cameraNX = new $b383cde4e0574ff6$export$74e4ae24825f68d7($b383cde4e0574ff6$var$fov, $b383cde4e0574ff6$var$aspect, near, far);
        cameraNX.layers = _this.layers;
        cameraNX.up.set(0, -1, 0);
        cameraNX.lookAt(new $b383cde4e0574ff6$export$64b5c384219d3699(-1, 0, 0));
        _this.add(cameraNX);
        var cameraPY = new $b383cde4e0574ff6$export$74e4ae24825f68d7($b383cde4e0574ff6$var$fov, $b383cde4e0574ff6$var$aspect, near, far);
        cameraPY.layers = _this.layers;
        cameraPY.up.set(0, 0, 1);
        cameraPY.lookAt(new $b383cde4e0574ff6$export$64b5c384219d3699(0, 1, 0));
        _this.add(cameraPY);
        var cameraNY = new $b383cde4e0574ff6$export$74e4ae24825f68d7($b383cde4e0574ff6$var$fov, $b383cde4e0574ff6$var$aspect, near, far);
        cameraNY.layers = _this.layers;
        cameraNY.up.set(0, 0, -1);
        cameraNY.lookAt(new $b383cde4e0574ff6$export$64b5c384219d3699(0, -1, 0));
        _this.add(cameraNY);
        var cameraPZ = new $b383cde4e0574ff6$export$74e4ae24825f68d7($b383cde4e0574ff6$var$fov, $b383cde4e0574ff6$var$aspect, near, far);
        cameraPZ.layers = _this.layers;
        cameraPZ.up.set(0, -1, 0);
        cameraPZ.lookAt(new $b383cde4e0574ff6$export$64b5c384219d3699(0, 0, 1));
        _this.add(cameraPZ);
        var cameraNZ = new $b383cde4e0574ff6$export$74e4ae24825f68d7($b383cde4e0574ff6$var$fov, $b383cde4e0574ff6$var$aspect, near, far);
        cameraNZ.layers = _this.layers;
        cameraNZ.up.set(0, -1, 0);
        cameraNZ.lookAt(new $b383cde4e0574ff6$export$64b5c384219d3699(0, 0, -1));
        _this.add(cameraNZ);
        return _this;
    }
    (0, $9SLyD.default)(CubeCamera, [
        {
            key: "update",
            value: function update(renderer, scene) {
                if (this.parent === null) this.updateMatrixWorld();
                var renderTarget = this.renderTarget;
                var _children = (0, $8B770.default)(this.children, 6), cameraPX = _children[0], cameraNX = _children[1], cameraPY = _children[2], cameraNY = _children[3], cameraPZ = _children[4], cameraNZ = _children[5];
                var currentXrEnabled = renderer.xr.enabled;
                var currentRenderTarget = renderer.getRenderTarget();
                renderer.xr.enabled = false;
                var generateMipmaps = renderTarget.texture.generateMipmaps;
                renderTarget.texture.generateMipmaps = false;
                renderer.setRenderTarget(renderTarget, 0);
                renderer.render(scene, cameraPX);
                renderer.setRenderTarget(renderTarget, 1);
                renderer.render(scene, cameraNX);
                renderer.setRenderTarget(renderTarget, 2);
                renderer.render(scene, cameraPY);
                renderer.setRenderTarget(renderTarget, 3);
                renderer.render(scene, cameraNY);
                renderer.setRenderTarget(renderTarget, 4);
                renderer.render(scene, cameraPZ);
                renderTarget.texture.generateMipmaps = generateMipmaps;
                renderer.setRenderTarget(renderTarget, 5);
                renderer.render(scene, cameraNZ);
                renderer.setRenderTarget(currentRenderTarget);
                renderer.xr.enabled = currentXrEnabled;
            }
        }
    ]);
    return CubeCamera;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
var $b383cde4e0574ff6$export$ee2e5a18258a4049 = /*#__PURE__*/ function(Texture) {
    "use strict";
    (0, $gQI4D.default)(CubeTexture, Texture);
    var _super = (0, $a0Xbx.default)(CubeTexture);
    function CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
        (0, $dnGTK.default)(this, CubeTexture);
        var _this;
        images = images !== undefined ? images : [];
        mapping = mapping !== undefined ? mapping : $b383cde4e0574ff6$export$8759762a6477f2c4;
        _this = _super.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
        _this.flipY = false;
        return _this;
    }
    (0, $9SLyD.default)(CubeTexture, [
        {
            key: "images",
            get: function get() {
                return this.image;
            },
            set: function set(value) {
                this.image = value;
            }
        }
    ]);
    return CubeTexture;
}($b383cde4e0574ff6$export$5431306cf43de24a);
$b383cde4e0574ff6$export$ee2e5a18258a4049.prototype.isCubeTexture = true;
var $b383cde4e0574ff6$export$ac386671d651941e = /*#__PURE__*/ function(WebGLRenderTarget) {
    "use strict";
    (0, $gQI4D.default)(WebGLCubeRenderTarget, WebGLRenderTarget);
    var _super = (0, $a0Xbx.default)(WebGLCubeRenderTarget);
    function WebGLCubeRenderTarget(size, options, dummy) {
        (0, $dnGTK.default)(this, WebGLCubeRenderTarget);
        var _this;
        if (Number.isInteger(options)) {
            console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )");
            options = dummy;
        }
        _this = _super.call(this, size, size, options);
        options = options || {};
        // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
        // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
        // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
        // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
        // and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
        // as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).
        _this.texture = new $b383cde4e0574ff6$export$ee2e5a18258a4049(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
        _this.texture.isRenderTargetTexture = true;
        _this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
        _this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : $b383cde4e0574ff6$export$8a72f490b25c56c8;
        _this.texture._needsFlipEnvMap = false;
        return _this;
    }
    (0, $9SLyD.default)(WebGLCubeRenderTarget, [
        {
            key: "fromEquirectangularTexture",
            value: function fromEquirectangularTexture(renderer, texture) {
                this.texture.type = texture.type;
                this.texture.format = $b383cde4e0574ff6$export$3f8bb04b555a363c; // see #18859
                this.texture.encoding = texture.encoding;
                this.texture.generateMipmaps = texture.generateMipmaps;
                this.texture.minFilter = texture.minFilter;
                this.texture.magFilter = texture.magFilter;
                var shader = {
                    uniforms: {
                        tEquirect: {
                            value: null
                        }
                    },
                    vertexShader: "\n\n				varying vec3 vWorldDirection;\n\n				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n				}\n\n				void main() {\n\n					vWorldDirection = transformDirection( position, modelMatrix );\n\n					#include <begin_vertex>\n					#include <project_vertex>\n\n				}\n			",
                    fragmentShader: "\n\n				uniform sampler2D tEquirect;\n\n				varying vec3 vWorldDirection;\n\n				#include <common>\n\n				void main() {\n\n					vec3 direction = normalize( vWorldDirection );\n\n					vec2 sampleUV = equirectUv( direction );\n\n					gl_FragColor = texture2D( tEquirect, sampleUV );\n\n				}\n			"
                };
                var geometry = new $b383cde4e0574ff6$export$ab3456a079aa7d80(5, 5, 5);
                var material = new $b383cde4e0574ff6$export$83c7d75d550a8b0d({
                    name: "CubemapFromEquirect",
                    uniforms: $b383cde4e0574ff6$var$cloneUniforms(shader.uniforms),
                    vertexShader: shader.vertexShader,
                    fragmentShader: shader.fragmentShader,
                    side: $b383cde4e0574ff6$export$d9f0486e75b5ace,
                    blending: $b383cde4e0574ff6$export$63b8d6b580fc65ba
                });
                material.uniforms.tEquirect.value = texture;
                var mesh = new $b383cde4e0574ff6$export$e176487c05830cc5(geometry, material);
                var currentMinFilter = texture.minFilter;
                // Avoid blurred poles
                if (texture.minFilter === $b383cde4e0574ff6$export$5d8599b6a933fb1b) texture.minFilter = $b383cde4e0574ff6$export$8a72f490b25c56c8;
                var camera = new $b383cde4e0574ff6$export$d0cdd0bd804995de(1, 10, this);
                camera.update(renderer, mesh);
                texture.minFilter = currentMinFilter;
                mesh.geometry.dispose();
                mesh.material.dispose();
                return this;
            }
        },
        {
            key: "clear",
            value: function clear(renderer, color, depth, stencil) {
                var currentRenderTarget = renderer.getRenderTarget();
                for(var i = 0; i < 6; i++){
                    renderer.setRenderTarget(this, i);
                    renderer.clear(color, depth, stencil);
                }
                renderer.setRenderTarget(currentRenderTarget);
            }
        }
    ]);
    return WebGLCubeRenderTarget;
}($b383cde4e0574ff6$export$3c052beb2e51e23f);
$b383cde4e0574ff6$export$ac386671d651941e.prototype.isWebGLCubeRenderTarget = true;
var $b383cde4e0574ff6$var$_vector1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_vector2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_normalMatrix = /*@__PURE__*/ new $b383cde4e0574ff6$export$8ff26dafa08918();
var $b383cde4e0574ff6$export$7ff5ac152ef991b0 = /*#__PURE__*/ function() {
    "use strict";
    function Plane() {
        var normal = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$64b5c384219d3699(1, 0, 0), constant = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        (0, $dnGTK.default)(this, Plane);
        // normal is assumed to be normalized
        this.normal = normal;
        this.constant = constant;
    }
    (0, $9SLyD.default)(Plane, [
        {
            key: "set",
            value: function set(normal, constant) {
                this.normal.copy(normal);
                this.constant = constant;
                return this;
            }
        },
        {
            key: "setComponents",
            value: function setComponents(x, y, z, w) {
                this.normal.set(x, y, z);
                this.constant = w;
                return this;
            }
        },
        {
            key: "setFromNormalAndCoplanarPoint",
            value: function setFromNormalAndCoplanarPoint(normal, point) {
                this.normal.copy(normal);
                this.constant = -point.dot(this.normal);
                return this;
            }
        },
        {
            key: "setFromCoplanarPoints",
            value: function setFromCoplanarPoints(a, b, c) {
                var normal = $b383cde4e0574ff6$var$_vector1.subVectors(c, b).cross($b383cde4e0574ff6$var$_vector2.subVectors(a, b)).normalize();
                // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
                this.setFromNormalAndCoplanarPoint(normal, a);
                return this;
            }
        },
        {
            key: "copy",
            value: function copy(plane) {
                this.normal.copy(plane.normal);
                this.constant = plane.constant;
                return this;
            }
        },
        {
            key: "normalize",
            value: function normalize() {
                // Note: will lead to a divide by zero if the plane is invalid.
                var inverseNormalLength = 1.0 / this.normal.length();
                this.normal.multiplyScalar(inverseNormalLength);
                this.constant *= inverseNormalLength;
                return this;
            }
        },
        {
            key: "negate",
            value: function negate() {
                this.constant *= -1;
                this.normal.negate();
                return this;
            }
        },
        {
            key: "distanceToPoint",
            value: function distanceToPoint(point) {
                return this.normal.dot(point) + this.constant;
            }
        },
        {
            key: "distanceToSphere",
            value: function distanceToSphere(sphere) {
                return this.distanceToPoint(sphere.center) - sphere.radius;
            }
        },
        {
            key: "projectPoint",
            value: function projectPoint(point, target) {
                return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
            }
        },
        {
            key: "intersectLine",
            value: function intersectLine(line, target) {
                var direction = line.delta($b383cde4e0574ff6$var$_vector1);
                var denominator = this.normal.dot(direction);
                if (denominator === 0) {
                    // line is coplanar, return origin
                    if (this.distanceToPoint(line.start) === 0) return target.copy(line.start);
                    // Unsure if this is the correct method to handle this case.
                    return null;
                }
                var t = -(line.start.dot(this.normal) + this.constant) / denominator;
                if (t < 0 || t > 1) return null;
                return target.copy(direction).multiplyScalar(t).add(line.start);
            }
        },
        {
            key: "intersectsLine",
            value: function intersectsLine(line) {
                // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
                var startSign = this.distanceToPoint(line.start);
                var endSign = this.distanceToPoint(line.end);
                return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
            }
        },
        {
            key: "intersectsBox",
            value: function intersectsBox(box) {
                return box.intersectsPlane(this);
            }
        },
        {
            key: "intersectsSphere",
            value: function intersectsSphere(sphere) {
                return sphere.intersectsPlane(this);
            }
        },
        {
            key: "coplanarPoint",
            value: function coplanarPoint(target) {
                return target.copy(this.normal).multiplyScalar(-this.constant);
            }
        },
        {
            key: "applyMatrix4",
            value: function applyMatrix4(matrix, optionalNormalMatrix) {
                var normalMatrix = optionalNormalMatrix || $b383cde4e0574ff6$var$_normalMatrix.getNormalMatrix(matrix);
                var referencePoint = this.coplanarPoint($b383cde4e0574ff6$var$_vector1).applyMatrix4(matrix);
                var normal = this.normal.applyMatrix3(normalMatrix).normalize();
                this.constant = -referencePoint.dot(normal);
                return this;
            }
        },
        {
            key: "translate",
            value: function translate(offset) {
                this.constant -= offset.dot(this.normal);
                return this;
            }
        },
        {
            key: "equals",
            value: function equals(plane) {
                return plane.normal.equals(this.normal) && plane.constant === this.constant;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        }
    ]);
    return Plane;
}();
$b383cde4e0574ff6$export$7ff5ac152ef991b0.prototype.isPlane = true;
var $b383cde4e0574ff6$var$_sphere$2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$805e8b72413ccaba();
var $b383cde4e0574ff6$var$_vector$7 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$35efe6f4c85463d2 = /*#__PURE__*/ function() {
    "use strict";
    function Frustum() {
        var p0 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$7ff5ac152ef991b0(), p1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$7ff5ac152ef991b0(), p2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new $b383cde4e0574ff6$export$7ff5ac152ef991b0(), p3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : new $b383cde4e0574ff6$export$7ff5ac152ef991b0(), p4 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : new $b383cde4e0574ff6$export$7ff5ac152ef991b0(), p5 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : new $b383cde4e0574ff6$export$7ff5ac152ef991b0();
        (0, $dnGTK.default)(this, Frustum);
        this.planes = [
            p0,
            p1,
            p2,
            p3,
            p4,
            p5
        ];
    }
    (0, $9SLyD.default)(Frustum, [
        {
            key: "set",
            value: function set(p0, p1, p2, p3, p4, p5) {
                var planes = this.planes;
                planes[0].copy(p0);
                planes[1].copy(p1);
                planes[2].copy(p2);
                planes[3].copy(p3);
                planes[4].copy(p4);
                planes[5].copy(p5);
                return this;
            }
        },
        {
            key: "copy",
            value: function copy(frustum) {
                var planes = this.planes;
                for(var i = 0; i < 6; i++)planes[i].copy(frustum.planes[i]);
                return this;
            }
        },
        {
            key: "setFromProjectionMatrix",
            value: function setFromProjectionMatrix(m) {
                var planes = this.planes;
                var me = m.elements;
                var me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
                var me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
                var me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
                var me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
                planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
                planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
                planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
                planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
                planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
                planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
                return this;
            }
        },
        {
            key: "intersectsObject",
            value: function intersectsObject(object) {
                var geometry = object.geometry;
                if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
                $b383cde4e0574ff6$var$_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
                return this.intersectsSphere($b383cde4e0574ff6$var$_sphere$2);
            }
        },
        {
            key: "intersectsSprite",
            value: function intersectsSprite(sprite) {
                $b383cde4e0574ff6$var$_sphere$2.center.set(0, 0, 0);
                $b383cde4e0574ff6$var$_sphere$2.radius = 0.7071067811865476;
                $b383cde4e0574ff6$var$_sphere$2.applyMatrix4(sprite.matrixWorld);
                return this.intersectsSphere($b383cde4e0574ff6$var$_sphere$2);
            }
        },
        {
            key: "intersectsSphere",
            value: function intersectsSphere(sphere) {
                var planes = this.planes;
                var center = sphere.center;
                var negRadius = -sphere.radius;
                for(var i = 0; i < 6; i++){
                    var distance = planes[i].distanceToPoint(center);
                    if (distance < negRadius) return false;
                }
                return true;
            }
        },
        {
            key: "intersectsBox",
            value: function intersectsBox(box) {
                var planes = this.planes;
                for(var i = 0; i < 6; i++){
                    var plane = planes[i];
                    // corner at max distance
                    $b383cde4e0574ff6$var$_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
                    $b383cde4e0574ff6$var$_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
                    $b383cde4e0574ff6$var$_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;
                    if (plane.distanceToPoint($b383cde4e0574ff6$var$_vector$7) < 0) return false;
                }
                return true;
            }
        },
        {
            key: "containsPoint",
            value: function containsPoint(point) {
                var planes = this.planes;
                for(var i = 0; i < 6; i++){
                    if (planes[i].distanceToPoint(point) < 0) return false;
                }
                return true;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        }
    ]);
    return Frustum;
}();
function $b383cde4e0574ff6$var$WebGLAnimation() {
    var context = null;
    var isAnimating = false;
    var animationLoop = null;
    var requestId = null;
    function onAnimationFrame(time, frame) {
        animationLoop(time, frame);
        requestId = context.requestAnimationFrame(onAnimationFrame);
    }
    return {
        start: function start() {
            if (isAnimating === true) return;
            if (animationLoop === null) return;
            requestId = context.requestAnimationFrame(onAnimationFrame);
            isAnimating = true;
        },
        stop: function stop() {
            context.cancelAnimationFrame(requestId);
            isAnimating = false;
        },
        setAnimationLoop: function setAnimationLoop(callback) {
            animationLoop = callback;
        },
        setContext: function setContext(value) {
            context = value;
        }
    };
}
function $b383cde4e0574ff6$var$WebGLAttributes(gl, capabilities) {
    var createBuffer = function createBuffer(attribute, bufferType) {
        var array = attribute.array;
        var usage = attribute.usage;
        var buffer = gl.createBuffer();
        gl.bindBuffer(bufferType, buffer);
        gl.bufferData(bufferType, array, usage);
        attribute.onUploadCallback();
        var type = 5126;
        if (array instanceof Float32Array) type = 5126;
        else if (array instanceof Float64Array) console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.");
        else if (array instanceof Uint16Array) {
            if (attribute.isFloat16BufferAttribute) {
                if (isWebGL2) type = 5131;
                else console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
            } else type = 5123;
        } else if (array instanceof Int16Array) type = 5122;
        else if (array instanceof Uint32Array) type = 5125;
        else if (array instanceof Int32Array) type = 5124;
        else if (array instanceof Int8Array) type = 5120;
        else if (array instanceof Uint8Array) type = 5121;
        else if (array instanceof Uint8ClampedArray) type = 5121;
        return {
            buffer: buffer,
            type: type,
            bytesPerElement: array.BYTES_PER_ELEMENT,
            version: attribute.version
        };
    };
    var updateBuffer = function updateBuffer(buffer, attribute, bufferType) {
        var array = attribute.array;
        var updateRange = attribute.updateRange;
        gl.bindBuffer(bufferType, buffer);
        if (updateRange.count === -1) // Not using update ranges
        gl.bufferSubData(bufferType, 0, array);
        else {
            if (isWebGL2) gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);
            else gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
            updateRange.count = -1; // reset range
        }
    };
    var get = //
    function get(attribute) {
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        return buffers.get(attribute);
    };
    var remove = function remove(attribute) {
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        var data = buffers.get(attribute);
        if (data) {
            gl.deleteBuffer(data.buffer);
            buffers.delete(attribute);
        }
    };
    var update = function update(attribute, bufferType) {
        if (attribute.isGLBufferAttribute) {
            var cached = buffers.get(attribute);
            if (!cached || cached.version < attribute.version) buffers.set(attribute, {
                buffer: attribute.buffer,
                type: attribute.type,
                bytesPerElement: attribute.elementSize,
                version: attribute.version
            });
            return;
        }
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        var data = buffers.get(attribute);
        if (data === undefined) buffers.set(attribute, createBuffer(attribute, bufferType));
        else if (data.version < attribute.version) {
            updateBuffer(data.buffer, attribute, bufferType);
            data.version = attribute.version;
        }
    };
    var isWebGL2 = capabilities.isWebGL2;
    var buffers = new WeakMap();
    return {
        get: get,
        remove: remove,
        update: update
    };
}
var $b383cde4e0574ff6$export$e789a11a194ca4e0 = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(PlaneGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(PlaneGeometry);
    function PlaneGeometry() {
        var width = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, height = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, widthSegments = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, heightSegments = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
        (0, $dnGTK.default)(this, PlaneGeometry);
        var _this;
        _this = _super.call(this);
        _this.type = "PlaneGeometry";
        _this.parameters = {
            width: width,
            height: height,
            widthSegments: widthSegments,
            heightSegments: heightSegments
        };
        var width_half = width / 2;
        var height_half = height / 2;
        var gridX = Math.floor(widthSegments);
        var gridY = Math.floor(heightSegments);
        var gridX1 = gridX + 1;
        var gridY1 = gridY + 1;
        var segment_width = width / gridX;
        var segment_height = height / gridY;
        //
        var indices = [];
        var vertices = [];
        var normals = [];
        var uvs = [];
        for(var iy = 0; iy < gridY1; iy++){
            var y = iy * segment_height - height_half;
            for(var ix = 0; ix < gridX1; ix++){
                var x = ix * segment_width - width_half;
                vertices.push(x, -y, 0);
                normals.push(0, 0, 1);
                uvs.push(ix / gridX);
                uvs.push(1 - iy / gridY);
            }
        }
        for(var iy1 = 0; iy1 < gridY; iy1++)for(var ix1 = 0; ix1 < gridX; ix1++){
            var a = ix1 + gridX1 * iy1;
            var b = ix1 + gridX1 * (iy1 + 1);
            var c = ix1 + 1 + gridX1 * (iy1 + 1);
            var d = ix1 + 1 + gridX1 * iy1;
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        _this.setIndex(indices);
        _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        _this.setAttribute("normal", new $b383cde4e0574ff6$export$cbe7a62641830ebd(normals, 3));
        _this.setAttribute("uv", new $b383cde4e0574ff6$export$cbe7a62641830ebd(uvs, 2));
        return _this;
    }
    (0, $9SLyD.default)(PlaneGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
            }
        }
    ]);
    return PlaneGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
var $b383cde4e0574ff6$var$alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
var $b383cde4e0574ff6$var$alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var $b383cde4e0574ff6$var$alphatest_fragment = "#ifdef USE_ALPHATEST\n	if ( diffuseColor.a < alphaTest ) discard;\n#endif";
var $b383cde4e0574ff6$var$alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
var $b383cde4e0574ff6$var$aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
var $b383cde4e0574ff6$var$aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
var $b383cde4e0574ff6$var$begin_vertex = "vec3 transformed = vec3( position );";
var $b383cde4e0574ff6$var$beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
var $b383cde4e0574ff6$var$bsdfs = "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif";
var $b383cde4e0574ff6$var$bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
var $b383cde4e0574ff6$var$clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";
var $b383cde4e0574ff6$var$clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
var $b383cde4e0574ff6$var$clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
var $b383cde4e0574ff6$var$clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
var $b383cde4e0574ff6$var$color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
var $b383cde4e0574ff6$var$color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
var $b383cde4e0574ff6$var$color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
var $b383cde4e0574ff6$var$color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
var $b383cde4e0574ff6$var$common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n	return dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}";
var $b383cde4e0574ff6$var$cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_maxMipLevel 8.0\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_maxTileSize 256.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n		vec2 f = fract( uv );\n		uv += 0.5 - f;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		if ( mipInt < cubeUV_maxMipLevel ) {\n			uv.y += 2.0 * cubeUV_maxTileSize;\n		}\n		uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n		uv *= texelSize;\n		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.x += texelSize;\n		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.y += texelSize;\n		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.x -= texelSize;\n		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		vec3 tm = mix( tl, tr, f.x );\n		vec3 bm = mix( bl, br, f.x );\n		return mix( tm, bm, f.y );\n	}\n	#define r0 1.0\n	#define v0 0.339\n	#define m0 - 2.0\n	#define r1 0.8\n	#define v1 0.276\n	#define m1 - 1.0\n	#define r4 0.4\n	#define v4 0.046\n	#define m4 2.0\n	#define r5 0.305\n	#define v5 0.016\n	#define m5 3.0\n	#define r6 0.21\n	#define v6 0.0038\n	#define m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= r1 ) {\n			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n		} else if ( roughness >= r4 ) {\n			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n		} else if ( roughness >= r5 ) {\n			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n		} else if ( roughness >= r6 ) {\n			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
var $b383cde4e0574ff6$var$defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
var $b383cde4e0574ff6$var$displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
var $b383cde4e0574ff6$var$displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
var $b383cde4e0574ff6$var$emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
var $b383cde4e0574ff6$var$emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
var $b383cde4e0574ff6$var$encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var $b383cde4e0574ff6$var$encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n	float maxComponent = max( max( value.r, value.g ), value.b );\n	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n	M = ceil( M * 255.0 ) / 255.0;\n	return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float D = max( maxRange / maxRGB, 1.0 );\n	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n	vec4 vResult;\n	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n	vResult.w = fract( Le );\n	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n	return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n	float Le = value.z * 255.0 + value.w;\n	vec3 Xp_Y_XYZp;\n	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n	return vec4( max( vRGB, 0.0 ), 1.0 );\n}";
var $b383cde4e0574ff6$var$envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n		envColor = envMapTexelToLinear( envColor );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
var $b383cde4e0574ff6$var$envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform int maxMipLevel;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
var $b383cde4e0574ff6$var$envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
var $b383cde4e0574ff6$var$envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
var $b383cde4e0574ff6$var$envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
var $b383cde4e0574ff6$var$fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
var $b383cde4e0574ff6$var$fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
var $b383cde4e0574ff6$var$fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
var $b383cde4e0574ff6$var$fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
var $b383cde4e0574ff6$var$gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return texture2D( gradientMap, coord ).rgb;\n	#else\n		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n	#endif\n}";
var $b383cde4e0574ff6$var$lightmap_fragment = "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vUv2 );\n	vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		lightMapIrradiance *= PI;\n	#endif\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
var $b383cde4e0574ff6$var$lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
var $b383cde4e0574ff6$var$lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n	vIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointLightInfo( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotLightInfo( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		#ifdef DOUBLE_SIDED\n			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif";
var $b383cde4e0574ff6$var$lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#else\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
var $b383cde4e0574ff6$var$envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n	#ifdef ENVMAP_MODE_REFRACTION\n		uniform float refractionRatio;\n	#endif\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#if defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#if defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 reflectVec;\n			#ifdef ENVMAP_MODE_REFLECTION\n				reflectVec = reflect( - viewDir, normal );\n				reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			#else\n				reflectVec = refract( - viewDir, normal, refractionRatio );\n			#endif\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n#endif";
var $b383cde4e0574ff6$var$lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
var $b383cde4e0574ff6$var$lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )	(0)";
var $b383cde4e0574ff6$var$lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
var $b383cde4e0574ff6$var$lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)";
var $b383cde4e0574ff6$var$lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	#ifdef SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULARINTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n		#endif\n		#ifdef USE_SPECULARCOLORMAP\n			specularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEENCOLORMAP\n		material.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEENROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n	#endif\n#endif";
var $b383cde4e0574ff6$var$lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	vec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		reflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
var $b383cde4e0574ff6$var$lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
var $b383cde4e0574ff6$var$lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vUv2 );\n		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometry.normal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
var $b383cde4e0574ff6$var$lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
var $b383cde4e0574ff6$var$logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
var $b383cde4e0574ff6$var$logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
var $b383cde4e0574ff6$var$logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";
var $b383cde4e0574ff6$var$logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";
var $b383cde4e0574ff6$var$map_fragment = "#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif";
var $b383cde4e0574ff6$var$map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
var $b383cde4e0574ff6$var$map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n	vec4 mapTexel = texture2D( map, uv );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
var $b383cde4e0574ff6$var$map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	uniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var $b383cde4e0574ff6$var$metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
var $b383cde4e0574ff6$var$metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
var $b383cde4e0574ff6$var$morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif";
var $b383cde4e0574ff6$var$morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		uniform sampler2DArray morphTargetsTexture;\n		uniform vec2 morphTargetsTextureSize;\n		vec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n			float texelIndex = float( vertexIndex * stride + offset );\n			float y = floor( texelIndex / morphTargetsTextureSize.x );\n			float x = texelIndex - y * morphTargetsTextureSize.x;\n			vec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n			return texture( morphTargetsTexture, morphUV ).xyz;\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif";
var $b383cde4e0574ff6$var$morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			#ifndef USE_MORPHNORMALS\n				if ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n			#else\n				if ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n			#endif\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif";
var $b383cde4e0574ff6$var$normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	#ifdef USE_TANGENT\n		vec3 tangent = normalize( vTangent );\n		vec3 bitangent = normalize( vBitangent );\n		#ifdef DOUBLE_SIDED\n			tangent = tangent * faceDirection;\n			bitangent = bitangent * faceDirection;\n		#endif\n		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n			mat3 vTBN = mat3( tangent, bitangent, normal );\n		#endif\n	#endif\n#endif\nvec3 geometryNormal = normal;";
var $b383cde4e0574ff6$var$normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	#ifdef USE_TANGENT\n		normal = normalize( vTBN * mapN );\n	#else\n		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n	#endif\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
var $b383cde4e0574ff6$var$normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var $b383cde4e0574ff6$var$normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var $b383cde4e0574ff6$var$normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
var $b383cde4e0574ff6$var$normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n	}\n#endif";
var $b383cde4e0574ff6$var$clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif";
var $b383cde4e0574ff6$var$clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	#ifdef USE_TANGENT\n		clearcoatNormal = normalize( vTBN * clearcoatMapN );\n	#else\n		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n	#endif\n#endif";
var $b383cde4e0574ff6$var$clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif";
var $b383cde4e0574ff6$var$output_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
var $b383cde4e0574ff6$var$packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n	return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
var $b383cde4e0574ff6$var$premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
var $b383cde4e0574ff6$var$project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
var $b383cde4e0574ff6$var$dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
var $b383cde4e0574ff6$var$dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
var $b383cde4e0574ff6$var$roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
var $b383cde4e0574ff6$var$roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
var $b383cde4e0574ff6$var$shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";
var $b383cde4e0574ff6$var$shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
var $b383cde4e0574ff6$var$shadowmap_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		vec4 shadowWorldPosition;\n	#endif\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n#endif";
var $b383cde4e0574ff6$var$shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
var $b383cde4e0574ff6$var$skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
var $b383cde4e0574ff6$var$skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform highp sampler2D boneTexture;\n		uniform int boneTextureSize;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureSize ) );\n			float y = floor( j / float( boneTextureSize ) );\n			float dx = 1.0 / float( boneTextureSize );\n			float dy = 1.0 / float( boneTextureSize );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif";
var $b383cde4e0574ff6$var$skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
var $b383cde4e0574ff6$var$skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
var $b383cde4e0574ff6$var$specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
var $b383cde4e0574ff6$var$specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
var $b383cde4e0574ff6$var$tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
var $b383cde4e0574ff6$var$tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
var $b383cde4e0574ff6$var$transmission_fragment = "#ifdef USE_TRANSMISSION\n	float transmissionAlpha = 1.0;\n	float transmissionFactor = transmission;\n	float thicknessFactor = thickness;\n	#ifdef USE_TRANSMISSIONMAP\n		transmissionFactor *= texture2D( transmissionMap, vUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		thicknessFactor *= texture2D( thicknessMap, vUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmission = getIBLVolumeRefraction(\n		n, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n		attenuationColor, attenuationDistance );\n	totalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n	transmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif";
var $b383cde4e0574ff6$var$transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	vec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( float roughness, float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\n		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		#ifdef TEXTURE_LOD_EXT\n			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n		#else\n			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n		#endif\n	}\n	vec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\n		if ( attenuationDistance == 0.0 ) {\n			return radiance;\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\n		vec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\n		vec3 attenuationColor, float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n	}\n#endif";
var $b383cde4e0574ff6$var$uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n	varying vec2 vUv;\n#endif";
var $b383cde4e0574ff6$var$uv_pars_vertex = "#ifdef USE_UV\n	#ifdef UVS_VERTEX_ONLY\n		vec2 vUv;\n	#else\n		varying vec2 vUv;\n	#endif\n	uniform mat3 uvTransform;\n#endif";
var $b383cde4e0574ff6$var$uv_vertex = "#ifdef USE_UV\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
var $b383cde4e0574ff6$var$uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif";
var $b383cde4e0574ff6$var$uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n	uniform mat3 uv2Transform;\n#endif";
var $b383cde4e0574ff6$var$uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";
var $b383cde4e0574ff6$var$worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
var $b383cde4e0574ff6$var$vertex$g = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
var $b383cde4e0574ff6$var$fragment$g = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
var $b383cde4e0574ff6$var$vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
var $b383cde4e0574ff6$var$fragment$f = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	vec3 vReflect = vWorldDirection;\n	#include <envmap_fragment>\n	gl_FragColor = envColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
var $b383cde4e0574ff6$var$vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
var $b383cde4e0574ff6$var$fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
var $b383cde4e0574ff6$var$vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
var $b383cde4e0574ff6$var$fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
var $b383cde4e0574ff6$var$vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
var $b383cde4e0574ff6$var$fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	vec4 texColor = texture2D( tEquirect, sampleUV );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
var $b383cde4e0574ff6$var$vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
var $b383cde4e0574ff6$var$fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
var $b383cde4e0574ff6$var$vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
var $b383cde4e0574ff6$var$fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var $b383cde4e0574ff6$var$vertex$9 = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var $b383cde4e0574ff6$var$fragment$9 = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	#ifdef DOUBLE_SIDED\n		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n	#else\n		reflectedLight.indirectDiffuse += vIndirectFront;\n	#endif\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var $b383cde4e0574ff6$var$vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
var $b383cde4e0574ff6$var$fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n		matcapColor = matcapTexelToLinear( matcapColor );\n	#else\n		vec4 matcapColor = vec4( 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var $b383cde4e0574ff6$var$vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
var $b383cde4e0574ff6$var$fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";
var $b383cde4e0574ff6$var$vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var $b383cde4e0574ff6$var$fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var $b383cde4e0574ff6$var$vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
var $b383cde4e0574ff6$var$fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULARINTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n	#ifdef USE_SPECULARCOLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEENCOLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEENROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;\n	#endif\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var $b383cde4e0574ff6$var$vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var $b383cde4e0574ff6$var$fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var $b383cde4e0574ff6$var$vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
var $b383cde4e0574ff6$var$fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
var $b383cde4e0574ff6$var$vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var $b383cde4e0574ff6$var$fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
var $b383cde4e0574ff6$var$vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
var $b383cde4e0574ff6$var$fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
var $b383cde4e0574ff6$export$955f9f2e84c43c8b = {
    alphamap_fragment: $b383cde4e0574ff6$var$alphamap_fragment,
    alphamap_pars_fragment: $b383cde4e0574ff6$var$alphamap_pars_fragment,
    alphatest_fragment: $b383cde4e0574ff6$var$alphatest_fragment,
    alphatest_pars_fragment: $b383cde4e0574ff6$var$alphatest_pars_fragment,
    aomap_fragment: $b383cde4e0574ff6$var$aomap_fragment,
    aomap_pars_fragment: $b383cde4e0574ff6$var$aomap_pars_fragment,
    begin_vertex: $b383cde4e0574ff6$var$begin_vertex,
    beginnormal_vertex: $b383cde4e0574ff6$var$beginnormal_vertex,
    bsdfs: $b383cde4e0574ff6$var$bsdfs,
    bumpmap_pars_fragment: $b383cde4e0574ff6$var$bumpmap_pars_fragment,
    clipping_planes_fragment: $b383cde4e0574ff6$var$clipping_planes_fragment,
    clipping_planes_pars_fragment: $b383cde4e0574ff6$var$clipping_planes_pars_fragment,
    clipping_planes_pars_vertex: $b383cde4e0574ff6$var$clipping_planes_pars_vertex,
    clipping_planes_vertex: $b383cde4e0574ff6$var$clipping_planes_vertex,
    color_fragment: $b383cde4e0574ff6$var$color_fragment,
    color_pars_fragment: $b383cde4e0574ff6$var$color_pars_fragment,
    color_pars_vertex: $b383cde4e0574ff6$var$color_pars_vertex,
    color_vertex: $b383cde4e0574ff6$var$color_vertex,
    common: $b383cde4e0574ff6$var$common,
    cube_uv_reflection_fragment: $b383cde4e0574ff6$var$cube_uv_reflection_fragment,
    defaultnormal_vertex: $b383cde4e0574ff6$var$defaultnormal_vertex,
    displacementmap_pars_vertex: $b383cde4e0574ff6$var$displacementmap_pars_vertex,
    displacementmap_vertex: $b383cde4e0574ff6$var$displacementmap_vertex,
    emissivemap_fragment: $b383cde4e0574ff6$var$emissivemap_fragment,
    emissivemap_pars_fragment: $b383cde4e0574ff6$var$emissivemap_pars_fragment,
    encodings_fragment: $b383cde4e0574ff6$var$encodings_fragment,
    encodings_pars_fragment: $b383cde4e0574ff6$var$encodings_pars_fragment,
    envmap_fragment: $b383cde4e0574ff6$var$envmap_fragment,
    envmap_common_pars_fragment: $b383cde4e0574ff6$var$envmap_common_pars_fragment,
    envmap_pars_fragment: $b383cde4e0574ff6$var$envmap_pars_fragment,
    envmap_pars_vertex: $b383cde4e0574ff6$var$envmap_pars_vertex,
    envmap_physical_pars_fragment: $b383cde4e0574ff6$var$envmap_physical_pars_fragment,
    envmap_vertex: $b383cde4e0574ff6$var$envmap_vertex,
    fog_vertex: $b383cde4e0574ff6$var$fog_vertex,
    fog_pars_vertex: $b383cde4e0574ff6$var$fog_pars_vertex,
    fog_fragment: $b383cde4e0574ff6$var$fog_fragment,
    fog_pars_fragment: $b383cde4e0574ff6$var$fog_pars_fragment,
    gradientmap_pars_fragment: $b383cde4e0574ff6$var$gradientmap_pars_fragment,
    lightmap_fragment: $b383cde4e0574ff6$var$lightmap_fragment,
    lightmap_pars_fragment: $b383cde4e0574ff6$var$lightmap_pars_fragment,
    lights_lambert_vertex: $b383cde4e0574ff6$var$lights_lambert_vertex,
    lights_pars_begin: $b383cde4e0574ff6$var$lights_pars_begin,
    lights_toon_fragment: $b383cde4e0574ff6$var$lights_toon_fragment,
    lights_toon_pars_fragment: $b383cde4e0574ff6$var$lights_toon_pars_fragment,
    lights_phong_fragment: $b383cde4e0574ff6$var$lights_phong_fragment,
    lights_phong_pars_fragment: $b383cde4e0574ff6$var$lights_phong_pars_fragment,
    lights_physical_fragment: $b383cde4e0574ff6$var$lights_physical_fragment,
    lights_physical_pars_fragment: $b383cde4e0574ff6$var$lights_physical_pars_fragment,
    lights_fragment_begin: $b383cde4e0574ff6$var$lights_fragment_begin,
    lights_fragment_maps: $b383cde4e0574ff6$var$lights_fragment_maps,
    lights_fragment_end: $b383cde4e0574ff6$var$lights_fragment_end,
    logdepthbuf_fragment: $b383cde4e0574ff6$var$logdepthbuf_fragment,
    logdepthbuf_pars_fragment: $b383cde4e0574ff6$var$logdepthbuf_pars_fragment,
    logdepthbuf_pars_vertex: $b383cde4e0574ff6$var$logdepthbuf_pars_vertex,
    logdepthbuf_vertex: $b383cde4e0574ff6$var$logdepthbuf_vertex,
    map_fragment: $b383cde4e0574ff6$var$map_fragment,
    map_pars_fragment: $b383cde4e0574ff6$var$map_pars_fragment,
    map_particle_fragment: $b383cde4e0574ff6$var$map_particle_fragment,
    map_particle_pars_fragment: $b383cde4e0574ff6$var$map_particle_pars_fragment,
    metalnessmap_fragment: $b383cde4e0574ff6$var$metalnessmap_fragment,
    metalnessmap_pars_fragment: $b383cde4e0574ff6$var$metalnessmap_pars_fragment,
    morphnormal_vertex: $b383cde4e0574ff6$var$morphnormal_vertex,
    morphtarget_pars_vertex: $b383cde4e0574ff6$var$morphtarget_pars_vertex,
    morphtarget_vertex: $b383cde4e0574ff6$var$morphtarget_vertex,
    normal_fragment_begin: $b383cde4e0574ff6$var$normal_fragment_begin,
    normal_fragment_maps: $b383cde4e0574ff6$var$normal_fragment_maps,
    normal_pars_fragment: $b383cde4e0574ff6$var$normal_pars_fragment,
    normal_pars_vertex: $b383cde4e0574ff6$var$normal_pars_vertex,
    normal_vertex: $b383cde4e0574ff6$var$normal_vertex,
    normalmap_pars_fragment: $b383cde4e0574ff6$var$normalmap_pars_fragment,
    clearcoat_normal_fragment_begin: $b383cde4e0574ff6$var$clearcoat_normal_fragment_begin,
    clearcoat_normal_fragment_maps: $b383cde4e0574ff6$var$clearcoat_normal_fragment_maps,
    clearcoat_pars_fragment: $b383cde4e0574ff6$var$clearcoat_pars_fragment,
    output_fragment: $b383cde4e0574ff6$var$output_fragment,
    packing: $b383cde4e0574ff6$var$packing,
    premultiplied_alpha_fragment: $b383cde4e0574ff6$var$premultiplied_alpha_fragment,
    project_vertex: $b383cde4e0574ff6$var$project_vertex,
    dithering_fragment: $b383cde4e0574ff6$var$dithering_fragment,
    dithering_pars_fragment: $b383cde4e0574ff6$var$dithering_pars_fragment,
    roughnessmap_fragment: $b383cde4e0574ff6$var$roughnessmap_fragment,
    roughnessmap_pars_fragment: $b383cde4e0574ff6$var$roughnessmap_pars_fragment,
    shadowmap_pars_fragment: $b383cde4e0574ff6$var$shadowmap_pars_fragment,
    shadowmap_pars_vertex: $b383cde4e0574ff6$var$shadowmap_pars_vertex,
    shadowmap_vertex: $b383cde4e0574ff6$var$shadowmap_vertex,
    shadowmask_pars_fragment: $b383cde4e0574ff6$var$shadowmask_pars_fragment,
    skinbase_vertex: $b383cde4e0574ff6$var$skinbase_vertex,
    skinning_pars_vertex: $b383cde4e0574ff6$var$skinning_pars_vertex,
    skinning_vertex: $b383cde4e0574ff6$var$skinning_vertex,
    skinnormal_vertex: $b383cde4e0574ff6$var$skinnormal_vertex,
    specularmap_fragment: $b383cde4e0574ff6$var$specularmap_fragment,
    specularmap_pars_fragment: $b383cde4e0574ff6$var$specularmap_pars_fragment,
    tonemapping_fragment: $b383cde4e0574ff6$var$tonemapping_fragment,
    tonemapping_pars_fragment: $b383cde4e0574ff6$var$tonemapping_pars_fragment,
    transmission_fragment: $b383cde4e0574ff6$var$transmission_fragment,
    transmission_pars_fragment: $b383cde4e0574ff6$var$transmission_pars_fragment,
    uv_pars_fragment: $b383cde4e0574ff6$var$uv_pars_fragment,
    uv_pars_vertex: $b383cde4e0574ff6$var$uv_pars_vertex,
    uv_vertex: $b383cde4e0574ff6$var$uv_vertex,
    uv2_pars_fragment: $b383cde4e0574ff6$var$uv2_pars_fragment,
    uv2_pars_vertex: $b383cde4e0574ff6$var$uv2_pars_vertex,
    uv2_vertex: $b383cde4e0574ff6$var$uv2_vertex,
    worldpos_vertex: $b383cde4e0574ff6$var$worldpos_vertex,
    background_vert: $b383cde4e0574ff6$var$vertex$g,
    background_frag: $b383cde4e0574ff6$var$fragment$g,
    cube_vert: $b383cde4e0574ff6$var$vertex$f,
    cube_frag: $b383cde4e0574ff6$var$fragment$f,
    depth_vert: $b383cde4e0574ff6$var$vertex$e,
    depth_frag: $b383cde4e0574ff6$var$fragment$e,
    distanceRGBA_vert: $b383cde4e0574ff6$var$vertex$d,
    distanceRGBA_frag: $b383cde4e0574ff6$var$fragment$d,
    equirect_vert: $b383cde4e0574ff6$var$vertex$c,
    equirect_frag: $b383cde4e0574ff6$var$fragment$c,
    linedashed_vert: $b383cde4e0574ff6$var$vertex$b,
    linedashed_frag: $b383cde4e0574ff6$var$fragment$b,
    meshbasic_vert: $b383cde4e0574ff6$var$vertex$a,
    meshbasic_frag: $b383cde4e0574ff6$var$fragment$a,
    meshlambert_vert: $b383cde4e0574ff6$var$vertex$9,
    meshlambert_frag: $b383cde4e0574ff6$var$fragment$9,
    meshmatcap_vert: $b383cde4e0574ff6$var$vertex$8,
    meshmatcap_frag: $b383cde4e0574ff6$var$fragment$8,
    meshnormal_vert: $b383cde4e0574ff6$var$vertex$7,
    meshnormal_frag: $b383cde4e0574ff6$var$fragment$7,
    meshphong_vert: $b383cde4e0574ff6$var$vertex$6,
    meshphong_frag: $b383cde4e0574ff6$var$fragment$6,
    meshphysical_vert: $b383cde4e0574ff6$var$vertex$5,
    meshphysical_frag: $b383cde4e0574ff6$var$fragment$5,
    meshtoon_vert: $b383cde4e0574ff6$var$vertex$4,
    meshtoon_frag: $b383cde4e0574ff6$var$fragment$4,
    points_vert: $b383cde4e0574ff6$var$vertex$3,
    points_frag: $b383cde4e0574ff6$var$fragment$3,
    shadow_vert: $b383cde4e0574ff6$var$vertex$2,
    shadow_frag: $b383cde4e0574ff6$var$fragment$2,
    sprite_vert: $b383cde4e0574ff6$var$vertex$1,
    sprite_frag: $b383cde4e0574ff6$var$fragment$1
};
/**
 * Uniforms library for shared webgl shaders
 */ var $b383cde4e0574ff6$export$6643083551874bf5 = {
    common: {
        diffuse: {
            value: new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff)
        },
        opacity: {
            value: 1.0
        },
        map: {
            value: null
        },
        uvTransform: {
            value: new $b383cde4e0574ff6$export$8ff26dafa08918()
        },
        uv2Transform: {
            value: new $b383cde4e0574ff6$export$8ff26dafa08918()
        },
        alphaMap: {
            value: null
        },
        alphaTest: {
            value: 0
        }
    },
    specularmap: {
        specularMap: {
            value: null
        }
    },
    envmap: {
        envMap: {
            value: null
        },
        flipEnvMap: {
            value: -1
        },
        reflectivity: {
            value: 1.0
        },
        ior: {
            value: 1.5
        },
        refractionRatio: {
            value: 0.98
        },
        maxMipLevel: {
            value: 0
        }
    },
    aomap: {
        aoMap: {
            value: null
        },
        aoMapIntensity: {
            value: 1
        }
    },
    lightmap: {
        lightMap: {
            value: null
        },
        lightMapIntensity: {
            value: 1
        }
    },
    emissivemap: {
        emissiveMap: {
            value: null
        }
    },
    bumpmap: {
        bumpMap: {
            value: null
        },
        bumpScale: {
            value: 1
        }
    },
    normalmap: {
        normalMap: {
            value: null
        },
        normalScale: {
            value: new $b383cde4e0574ff6$export$c977b3e384af9ae1(1, 1)
        }
    },
    displacementmap: {
        displacementMap: {
            value: null
        },
        displacementScale: {
            value: 1
        },
        displacementBias: {
            value: 0
        }
    },
    roughnessmap: {
        roughnessMap: {
            value: null
        }
    },
    metalnessmap: {
        metalnessMap: {
            value: null
        }
    },
    gradientmap: {
        gradientMap: {
            value: null
        }
    },
    fog: {
        fogDensity: {
            value: 0.00025
        },
        fogNear: {
            value: 1
        },
        fogFar: {
            value: 2000
        },
        fogColor: {
            value: new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff)
        }
    },
    lights: {
        ambientLightColor: {
            value: []
        },
        lightProbe: {
            value: []
        },
        directionalLights: {
            value: [],
            properties: {
                direction: {},
                color: {}
            }
        },
        directionalLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
            }
        },
        directionalShadowMap: {
            value: []
        },
        directionalShadowMatrix: {
            value: []
        },
        spotLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                direction: {},
                distance: {},
                coneCos: {},
                penumbraCos: {},
                decay: {}
            }
        },
        spotLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {}
            }
        },
        spotShadowMap: {
            value: []
        },
        spotShadowMatrix: {
            value: []
        },
        pointLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                decay: {},
                distance: {}
            }
        },
        pointLightShadows: {
            value: [],
            properties: {
                shadowBias: {},
                shadowNormalBias: {},
                shadowRadius: {},
                shadowMapSize: {},
                shadowCameraNear: {},
                shadowCameraFar: {}
            }
        },
        pointShadowMap: {
            value: []
        },
        pointShadowMatrix: {
            value: []
        },
        hemisphereLights: {
            value: [],
            properties: {
                direction: {},
                skyColor: {},
                groundColor: {}
            }
        },
        // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
        rectAreaLights: {
            value: [],
            properties: {
                color: {},
                position: {},
                width: {},
                height: {}
            }
        },
        ltc_1: {
            value: null
        },
        ltc_2: {
            value: null
        }
    },
    points: {
        diffuse: {
            value: new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff)
        },
        opacity: {
            value: 1.0
        },
        size: {
            value: 1.0
        },
        scale: {
            value: 1.0
        },
        map: {
            value: null
        },
        alphaMap: {
            value: null
        },
        alphaTest: {
            value: 0
        },
        uvTransform: {
            value: new $b383cde4e0574ff6$export$8ff26dafa08918()
        }
    },
    sprite: {
        diffuse: {
            value: new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff)
        },
        opacity: {
            value: 1.0
        },
        center: {
            value: new $b383cde4e0574ff6$export$c977b3e384af9ae1(0.5, 0.5)
        },
        rotation: {
            value: 0.0
        },
        map: {
            value: null
        },
        alphaMap: {
            value: null
        },
        alphaTest: {
            value: 0
        },
        uvTransform: {
            value: new $b383cde4e0574ff6$export$8ff26dafa08918()
        }
    }
};
var $b383cde4e0574ff6$export$bee4a7d47f8f5014 = {
    basic: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.common,
            $b383cde4e0574ff6$export$6643083551874bf5.specularmap,
            $b383cde4e0574ff6$export$6643083551874bf5.envmap,
            $b383cde4e0574ff6$export$6643083551874bf5.aomap,
            $b383cde4e0574ff6$export$6643083551874bf5.lightmap,
            $b383cde4e0574ff6$export$6643083551874bf5.fog
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshbasic_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshbasic_frag
    },
    lambert: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.common,
            $b383cde4e0574ff6$export$6643083551874bf5.specularmap,
            $b383cde4e0574ff6$export$6643083551874bf5.envmap,
            $b383cde4e0574ff6$export$6643083551874bf5.aomap,
            $b383cde4e0574ff6$export$6643083551874bf5.lightmap,
            $b383cde4e0574ff6$export$6643083551874bf5.emissivemap,
            $b383cde4e0574ff6$export$6643083551874bf5.fog,
            $b383cde4e0574ff6$export$6643083551874bf5.lights,
            {
                emissive: {
                    value: new $b383cde4e0574ff6$export$892596cec99bc70e(0x000000)
                }
            }
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshlambert_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshlambert_frag
    },
    phong: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.common,
            $b383cde4e0574ff6$export$6643083551874bf5.specularmap,
            $b383cde4e0574ff6$export$6643083551874bf5.envmap,
            $b383cde4e0574ff6$export$6643083551874bf5.aomap,
            $b383cde4e0574ff6$export$6643083551874bf5.lightmap,
            $b383cde4e0574ff6$export$6643083551874bf5.emissivemap,
            $b383cde4e0574ff6$export$6643083551874bf5.bumpmap,
            $b383cde4e0574ff6$export$6643083551874bf5.normalmap,
            $b383cde4e0574ff6$export$6643083551874bf5.displacementmap,
            $b383cde4e0574ff6$export$6643083551874bf5.fog,
            $b383cde4e0574ff6$export$6643083551874bf5.lights,
            {
                emissive: {
                    value: new $b383cde4e0574ff6$export$892596cec99bc70e(0x000000)
                },
                specular: {
                    value: new $b383cde4e0574ff6$export$892596cec99bc70e(0x111111)
                },
                shininess: {
                    value: 30
                }
            }
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshphong_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshphong_frag
    },
    standard: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.common,
            $b383cde4e0574ff6$export$6643083551874bf5.envmap,
            $b383cde4e0574ff6$export$6643083551874bf5.aomap,
            $b383cde4e0574ff6$export$6643083551874bf5.lightmap,
            $b383cde4e0574ff6$export$6643083551874bf5.emissivemap,
            $b383cde4e0574ff6$export$6643083551874bf5.bumpmap,
            $b383cde4e0574ff6$export$6643083551874bf5.normalmap,
            $b383cde4e0574ff6$export$6643083551874bf5.displacementmap,
            $b383cde4e0574ff6$export$6643083551874bf5.roughnessmap,
            $b383cde4e0574ff6$export$6643083551874bf5.metalnessmap,
            $b383cde4e0574ff6$export$6643083551874bf5.fog,
            $b383cde4e0574ff6$export$6643083551874bf5.lights,
            {
                emissive: {
                    value: new $b383cde4e0574ff6$export$892596cec99bc70e(0x000000)
                },
                roughness: {
                    value: 1.0
                },
                metalness: {
                    value: 0.0
                },
                envMapIntensity: {
                    value: 1
                } // temporary
            }
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshphysical_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshphysical_frag
    },
    toon: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.common,
            $b383cde4e0574ff6$export$6643083551874bf5.aomap,
            $b383cde4e0574ff6$export$6643083551874bf5.lightmap,
            $b383cde4e0574ff6$export$6643083551874bf5.emissivemap,
            $b383cde4e0574ff6$export$6643083551874bf5.bumpmap,
            $b383cde4e0574ff6$export$6643083551874bf5.normalmap,
            $b383cde4e0574ff6$export$6643083551874bf5.displacementmap,
            $b383cde4e0574ff6$export$6643083551874bf5.gradientmap,
            $b383cde4e0574ff6$export$6643083551874bf5.fog,
            $b383cde4e0574ff6$export$6643083551874bf5.lights,
            {
                emissive: {
                    value: new $b383cde4e0574ff6$export$892596cec99bc70e(0x000000)
                }
            }
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshtoon_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshtoon_frag
    },
    matcap: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.common,
            $b383cde4e0574ff6$export$6643083551874bf5.bumpmap,
            $b383cde4e0574ff6$export$6643083551874bf5.normalmap,
            $b383cde4e0574ff6$export$6643083551874bf5.displacementmap,
            $b383cde4e0574ff6$export$6643083551874bf5.fog,
            {
                matcap: {
                    value: null
                }
            }
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshmatcap_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshmatcap_frag
    },
    points: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.points,
            $b383cde4e0574ff6$export$6643083551874bf5.fog
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.points_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.points_frag
    },
    dashed: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.common,
            $b383cde4e0574ff6$export$6643083551874bf5.fog,
            {
                scale: {
                    value: 1
                },
                dashSize: {
                    value: 1
                },
                totalSize: {
                    value: 2
                }
            }
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.linedashed_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.linedashed_frag
    },
    depth: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.common,
            $b383cde4e0574ff6$export$6643083551874bf5.displacementmap
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.depth_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.depth_frag
    },
    normal: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.common,
            $b383cde4e0574ff6$export$6643083551874bf5.bumpmap,
            $b383cde4e0574ff6$export$6643083551874bf5.normalmap,
            $b383cde4e0574ff6$export$6643083551874bf5.displacementmap,
            {
                opacity: {
                    value: 1.0
                }
            }
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshnormal_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshnormal_frag
    },
    sprite: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.sprite,
            $b383cde4e0574ff6$export$6643083551874bf5.fog
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.sprite_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.sprite_frag
    },
    background: {
        uniforms: {
            uvTransform: {
                value: new $b383cde4e0574ff6$export$8ff26dafa08918()
            },
            t2D: {
                value: null
            }
        },
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.background_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.background_frag
    },
    /* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */ cube: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.envmap,
            {
                opacity: {
                    value: 1.0
                }
            }
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.cube_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.cube_frag
    },
    equirect: {
        uniforms: {
            tEquirect: {
                value: null
            }
        },
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.equirect_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.equirect_frag
    },
    distanceRGBA: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.common,
            $b383cde4e0574ff6$export$6643083551874bf5.displacementmap,
            {
                referencePosition: {
                    value: new $b383cde4e0574ff6$export$64b5c384219d3699()
                },
                nearDistance: {
                    value: 1
                },
                farDistance: {
                    value: 1000
                }
            }
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.distanceRGBA_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.distanceRGBA_frag
    },
    shadow: {
        uniforms: $b383cde4e0574ff6$var$mergeUniforms([
            $b383cde4e0574ff6$export$6643083551874bf5.lights,
            $b383cde4e0574ff6$export$6643083551874bf5.fog,
            {
                color: {
                    value: new $b383cde4e0574ff6$export$892596cec99bc70e(0x00000)
                },
                opacity: {
                    value: 1.0
                }
            }
        ]),
        vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.shadow_vert,
        fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.shadow_frag
    }
};
$b383cde4e0574ff6$export$bee4a7d47f8f5014.physical = {
    uniforms: $b383cde4e0574ff6$var$mergeUniforms([
        $b383cde4e0574ff6$export$bee4a7d47f8f5014.standard.uniforms,
        {
            clearcoat: {
                value: 0
            },
            clearcoatMap: {
                value: null
            },
            clearcoatRoughness: {
                value: 0
            },
            clearcoatRoughnessMap: {
                value: null
            },
            clearcoatNormalScale: {
                value: new $b383cde4e0574ff6$export$c977b3e384af9ae1(1, 1)
            },
            clearcoatNormalMap: {
                value: null
            },
            sheen: {
                value: 0
            },
            sheenColor: {
                value: new $b383cde4e0574ff6$export$892596cec99bc70e(0x000000)
            },
            sheenColorMap: {
                value: null
            },
            sheenRoughness: {
                value: 0
            },
            sheenRoughnessMap: {
                value: null
            },
            transmission: {
                value: 0
            },
            transmissionMap: {
                value: null
            },
            transmissionSamplerSize: {
                value: new $b383cde4e0574ff6$export$c977b3e384af9ae1()
            },
            transmissionSamplerMap: {
                value: null
            },
            thickness: {
                value: 0
            },
            thicknessMap: {
                value: null
            },
            attenuationDistance: {
                value: 0
            },
            attenuationColor: {
                value: new $b383cde4e0574ff6$export$892596cec99bc70e(0x000000)
            },
            specularIntensity: {
                value: 0
            },
            specularIntensityMap: {
                value: null
            },
            specularColor: {
                value: new $b383cde4e0574ff6$export$892596cec99bc70e(1, 1, 1)
            },
            specularColorMap: {
                value: null
            }
        }
    ]),
    vertexShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshphysical_vert,
    fragmentShader: $b383cde4e0574ff6$export$955f9f2e84c43c8b.meshphysical_frag
};
function $b383cde4e0574ff6$var$WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {
    var render = function render(renderList, scene) {
        var forceClear = false;
        var background = scene.isScene === true ? scene.background : null;
        if (background && background.isTexture) background = cubemaps.get(background);
        // Ignore background in AR
        // TODO: Reconsider this.
        var xr = renderer.xr;
        var session = xr.getSession && xr.getSession();
        if (session && session.environmentBlendMode === "additive") background = null;
        if (background === null) setClear(clearColor, clearAlpha);
        else if (background && background.isColor) {
            setClear(background, 1);
            forceClear = true;
        }
        if (renderer.autoClear || forceClear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
        if (background && (background.isCubeTexture || background.mapping === $b383cde4e0574ff6$export$dbf3e70ff37af79)) {
            if (boxMesh === undefined) {
                boxMesh = new $b383cde4e0574ff6$export$e176487c05830cc5(new $b383cde4e0574ff6$export$ab3456a079aa7d80(1, 1, 1), new $b383cde4e0574ff6$export$83c7d75d550a8b0d({
                    name: "BackgroundCubeMaterial",
                    uniforms: $b383cde4e0574ff6$var$cloneUniforms($b383cde4e0574ff6$export$bee4a7d47f8f5014.cube.uniforms),
                    vertexShader: $b383cde4e0574ff6$export$bee4a7d47f8f5014.cube.vertexShader,
                    fragmentShader: $b383cde4e0574ff6$export$bee4a7d47f8f5014.cube.fragmentShader,
                    side: $b383cde4e0574ff6$export$d9f0486e75b5ace,
                    depthTest: false,
                    depthWrite: false,
                    fog: false
                }));
                boxMesh.geometry.deleteAttribute("normal");
                boxMesh.geometry.deleteAttribute("uv");
                boxMesh.onBeforeRender = function(renderer, scene, camera) {
                    this.matrixWorld.copyPosition(camera.matrixWorld);
                };
                // enable code injection for non-built-in material
                Object.defineProperty(boxMesh.material, "envMap", {
                    get: function get() {
                        return this.uniforms.envMap.value;
                    }
                });
                objects.update(boxMesh);
            }
            boxMesh.material.uniforms.envMap.value = background;
            boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
            if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
                boxMesh.material.needsUpdate = true;
                currentBackground = background;
                currentBackgroundVersion = background.version;
                currentTonemapping = renderer.toneMapping;
            }
            // push to the pre-sorted opaque render list
            renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
        } else if (background && background.isTexture) {
            if (planeMesh === undefined) {
                planeMesh = new $b383cde4e0574ff6$export$e176487c05830cc5(new $b383cde4e0574ff6$export$e789a11a194ca4e0(2, 2), new $b383cde4e0574ff6$export$83c7d75d550a8b0d({
                    name: "BackgroundMaterial",
                    uniforms: $b383cde4e0574ff6$var$cloneUniforms($b383cde4e0574ff6$export$bee4a7d47f8f5014.background.uniforms),
                    vertexShader: $b383cde4e0574ff6$export$bee4a7d47f8f5014.background.vertexShader,
                    fragmentShader: $b383cde4e0574ff6$export$bee4a7d47f8f5014.background.fragmentShader,
                    side: $b383cde4e0574ff6$export$2ede184fc2998901,
                    depthTest: false,
                    depthWrite: false,
                    fog: false
                }));
                planeMesh.geometry.deleteAttribute("normal");
                // enable code injection for non-built-in material
                Object.defineProperty(planeMesh.material, "map", {
                    get: function get() {
                        return this.uniforms.t2D.value;
                    }
                });
                objects.update(planeMesh);
            }
            planeMesh.material.uniforms.t2D.value = background;
            if (background.matrixAutoUpdate === true) background.updateMatrix();
            planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
            if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
                planeMesh.material.needsUpdate = true;
                currentBackground = background;
                currentBackgroundVersion = background.version;
                currentTonemapping = renderer.toneMapping;
            }
            // push to the pre-sorted opaque render list
            renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
        }
    };
    var setClear = function setClear(color, alpha) {
        state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);
    };
    var clearColor = new $b383cde4e0574ff6$export$892596cec99bc70e(0x000000);
    var clearAlpha = 0;
    var planeMesh;
    var boxMesh;
    var currentBackground = null;
    var currentBackgroundVersion = 0;
    var currentTonemapping = null;
    return {
        getClearColor: function getClearColor() {
            return clearColor;
        },
        setClearColor: function setClearColor(color) {
            var alpha = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
            clearColor.set(color);
            clearAlpha = alpha;
            setClear(clearColor, clearAlpha);
        },
        getClearAlpha: function getClearAlpha() {
            return clearAlpha;
        },
        setClearAlpha: function setClearAlpha(alpha) {
            clearAlpha = alpha;
            setClear(clearColor, clearAlpha);
        },
        render: render
    };
}
function $b383cde4e0574ff6$var$WebGLBindingStates(gl, extensions, attributes, capabilities) {
    var setup = function setup(object, material, program, geometry, index) {
        var updateBuffers = false;
        if (vaoAvailable) {
            var state = getBindingState(geometry, program, material);
            if (currentState !== state) {
                currentState = state;
                bindVertexArrayObject(currentState.object);
            }
            updateBuffers = needsUpdate(geometry, index);
            if (updateBuffers) saveCache(geometry, index);
        } else {
            var wireframe = material.wireframe === true;
            if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
                currentState.geometry = geometry.id;
                currentState.program = program.id;
                currentState.wireframe = wireframe;
                updateBuffers = true;
            }
        }
        if (object.isInstancedMesh === true) updateBuffers = true;
        if (index !== null) attributes.update(index, 34963);
        if (updateBuffers) {
            setupVertexAttributes(object, material, program, geometry);
            if (index !== null) gl.bindBuffer(34963, attributes.get(index).buffer);
        }
    };
    var createVertexArrayObject = function createVertexArrayObject() {
        if (capabilities.isWebGL2) return gl.createVertexArray();
        return extension.createVertexArrayOES();
    };
    var bindVertexArrayObject = function bindVertexArrayObject(vao) {
        if (capabilities.isWebGL2) return gl.bindVertexArray(vao);
        return extension.bindVertexArrayOES(vao);
    };
    var deleteVertexArrayObject = function deleteVertexArrayObject(vao) {
        if (capabilities.isWebGL2) return gl.deleteVertexArray(vao);
        return extension.deleteVertexArrayOES(vao);
    };
    var getBindingState = function getBindingState(geometry, program, material) {
        var wireframe = material.wireframe === true;
        var programMap = bindingStates[geometry.id];
        if (programMap === undefined) {
            programMap = {};
            bindingStates[geometry.id] = programMap;
        }
        var stateMap = programMap[program.id];
        if (stateMap === undefined) {
            stateMap = {};
            programMap[program.id] = stateMap;
        }
        var state = stateMap[wireframe];
        if (state === undefined) {
            state = createBindingState(createVertexArrayObject());
            stateMap[wireframe] = state;
        }
        return state;
    };
    var createBindingState = function createBindingState(vao) {
        var newAttributes = [];
        var enabledAttributes = [];
        var attributeDivisors = [];
        for(var i = 0; i < maxVertexAttributes; i++){
            newAttributes[i] = 0;
            enabledAttributes[i] = 0;
            attributeDivisors[i] = 0;
        }
        return {
            // for backward compatibility on non-VAO support browser
            geometry: null,
            program: null,
            wireframe: false,
            newAttributes: newAttributes,
            enabledAttributes: enabledAttributes,
            attributeDivisors: attributeDivisors,
            object: vao,
            attributes: {},
            index: null
        };
    };
    var needsUpdate = function needsUpdate(geometry, index) {
        var cachedAttributes = currentState.attributes;
        var geometryAttributes = geometry.attributes;
        var attributesNum = 0;
        for(var key in geometryAttributes){
            var cachedAttribute = cachedAttributes[key];
            var geometryAttribute = geometryAttributes[key];
            if (cachedAttribute === undefined) return true;
            if (cachedAttribute.attribute !== geometryAttribute) return true;
            if (cachedAttribute.data !== geometryAttribute.data) return true;
            attributesNum++;
        }
        if (currentState.attributesNum !== attributesNum) return true;
        if (currentState.index !== index) return true;
        return false;
    };
    var saveCache = function saveCache(geometry, index) {
        var cache = {};
        var attributes = geometry.attributes;
        var attributesNum = 0;
        for(var key in attributes){
            var attribute = attributes[key];
            var data = {};
            data.attribute = attribute;
            if (attribute.data) data.data = attribute.data;
            cache[key] = data;
            attributesNum++;
        }
        currentState.attributes = cache;
        currentState.attributesNum = attributesNum;
        currentState.index = index;
    };
    var initAttributes = function initAttributes() {
        var newAttributes = currentState.newAttributes;
        for(var i = 0, il = newAttributes.length; i < il; i++)newAttributes[i] = 0;
    };
    var enableAttribute = function enableAttribute(attribute) {
        enableAttributeAndDivisor(attribute, 0);
    };
    var enableAttributeAndDivisor = function enableAttributeAndDivisor(attribute, meshPerAttribute) {
        var newAttributes = currentState.newAttributes;
        var enabledAttributes = currentState.enabledAttributes;
        var attributeDivisors = currentState.attributeDivisors;
        newAttributes[attribute] = 1;
        if (enabledAttributes[attribute] === 0) {
            gl.enableVertexAttribArray(attribute);
            enabledAttributes[attribute] = 1;
        }
        if (attributeDivisors[attribute] !== meshPerAttribute) {
            var extension = capabilities.isWebGL2 ? gl : extensions.get("ANGLE_instanced_arrays");
            extension[capabilities.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](attribute, meshPerAttribute);
            attributeDivisors[attribute] = meshPerAttribute;
        }
    };
    var disableUnusedAttributes = function disableUnusedAttributes() {
        var newAttributes = currentState.newAttributes;
        var enabledAttributes = currentState.enabledAttributes;
        for(var i = 0, il = enabledAttributes.length; i < il; i++)if (enabledAttributes[i] !== newAttributes[i]) {
            gl.disableVertexAttribArray(i);
            enabledAttributes[i] = 0;
        }
    };
    var vertexAttribPointer = function vertexAttribPointer(index, size, type, normalized, stride, offset) {
        if (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) gl.vertexAttribIPointer(index, size, type, stride, offset);
        else gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
    };
    var setupVertexAttributes = function setupVertexAttributes(object, material, program, geometry) {
        if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
            if (extensions.get("ANGLE_instanced_arrays") === null) return;
        }
        initAttributes();
        var geometryAttributes = geometry.attributes;
        var programAttributes = program.getAttributes();
        var materialDefaultAttributeValues = material.defaultAttributeValues;
        for(var name in programAttributes){
            var programAttribute = programAttributes[name];
            if (programAttribute.location >= 0) {
                var geometryAttribute = geometryAttributes[name];
                if (geometryAttribute === undefined) {
                    if (name === "instanceMatrix" && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
                    if (name === "instanceColor" && object.instanceColor) geometryAttribute = object.instanceColor;
                }
                if (geometryAttribute !== undefined) {
                    var normalized = geometryAttribute.normalized;
                    var size = geometryAttribute.itemSize;
                    var attribute = attributes.get(geometryAttribute);
                    // TODO Attribute may not be available on context restore
                    if (attribute === undefined) continue;
                    var buffer = attribute.buffer;
                    var type = attribute.type;
                    var bytesPerElement = attribute.bytesPerElement;
                    if (geometryAttribute.isInterleavedBufferAttribute) {
                        var data = geometryAttribute.data;
                        var stride = data.stride;
                        var offset = geometryAttribute.offset;
                        if (data && data.isInstancedInterleavedBuffer) {
                            for(var i = 0; i < programAttribute.locationSize; i++)enableAttributeAndDivisor(programAttribute.location + i, data.meshPerAttribute);
                            if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) geometry._maxInstanceCount = data.meshPerAttribute * data.count;
                        } else for(var i1 = 0; i1 < programAttribute.locationSize; i1++)enableAttribute(programAttribute.location + i1);
                        gl.bindBuffer(34962, buffer);
                        for(var i2 = 0; i2 < programAttribute.locationSize; i2++)vertexAttribPointer(programAttribute.location + i2, size / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size / programAttribute.locationSize * i2) * bytesPerElement);
                    } else {
                        if (geometryAttribute.isInstancedBufferAttribute) {
                            for(var i3 = 0; i3 < programAttribute.locationSize; i3++)enableAttributeAndDivisor(programAttribute.location + i3, geometryAttribute.meshPerAttribute);
                            if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                        } else for(var i4 = 0; i4 < programAttribute.locationSize; i4++)enableAttribute(programAttribute.location + i4);
                        gl.bindBuffer(34962, buffer);
                        for(var i5 = 0; i5 < programAttribute.locationSize; i5++)vertexAttribPointer(programAttribute.location + i5, size / programAttribute.locationSize, type, normalized, size * bytesPerElement, size / programAttribute.locationSize * i5 * bytesPerElement);
                    }
                } else if (materialDefaultAttributeValues !== undefined) {
                    var value = materialDefaultAttributeValues[name];
                    if (value !== undefined) switch(value.length){
                        case 2:
                            gl.vertexAttrib2fv(programAttribute.location, value);
                            break;
                        case 3:
                            gl.vertexAttrib3fv(programAttribute.location, value);
                            break;
                        case 4:
                            gl.vertexAttrib4fv(programAttribute.location, value);
                            break;
                        default:
                            gl.vertexAttrib1fv(programAttribute.location, value);
                    }
                }
            }
        }
        disableUnusedAttributes();
    };
    var dispose = function dispose() {
        reset();
        for(var geometryId in bindingStates){
            var programMap = bindingStates[geometryId];
            for(var programId in programMap){
                var stateMap = programMap[programId];
                for(var wireframe in stateMap){
                    deleteVertexArrayObject(stateMap[wireframe].object);
                    delete stateMap[wireframe];
                }
                delete programMap[programId];
            }
            delete bindingStates[geometryId];
        }
    };
    var releaseStatesOfGeometry = function releaseStatesOfGeometry(geometry) {
        if (bindingStates[geometry.id] === undefined) return;
        var programMap = bindingStates[geometry.id];
        for(var programId in programMap){
            var stateMap = programMap[programId];
            for(var wireframe in stateMap){
                deleteVertexArrayObject(stateMap[wireframe].object);
                delete stateMap[wireframe];
            }
            delete programMap[programId];
        }
        delete bindingStates[geometry.id];
    };
    var releaseStatesOfProgram = function releaseStatesOfProgram(program) {
        for(var geometryId in bindingStates){
            var programMap = bindingStates[geometryId];
            if (programMap[program.id] === undefined) continue;
            var stateMap = programMap[program.id];
            for(var wireframe in stateMap){
                deleteVertexArrayObject(stateMap[wireframe].object);
                delete stateMap[wireframe];
            }
            delete programMap[program.id];
        }
    };
    var reset = function reset() {
        resetDefaultState();
        if (currentState === defaultState) return;
        currentState = defaultState;
        bindVertexArrayObject(currentState.object);
    };
    var resetDefaultState = // for backward-compatilibity
    function resetDefaultState() {
        defaultState.geometry = null;
        defaultState.program = null;
        defaultState.wireframe = false;
    };
    var maxVertexAttributes = gl.getParameter(34921);
    var extension = capabilities.isWebGL2 ? null : extensions.get("OES_vertex_array_object");
    var vaoAvailable = capabilities.isWebGL2 || extension !== null;
    var bindingStates = {};
    var defaultState = createBindingState(null);
    var currentState = defaultState;
    return {
        setup: setup,
        reset: reset,
        resetDefaultState: resetDefaultState,
        dispose: dispose,
        releaseStatesOfGeometry: releaseStatesOfGeometry,
        releaseStatesOfProgram: releaseStatesOfProgram,
        initAttributes: initAttributes,
        enableAttribute: enableAttribute,
        disableUnusedAttributes: disableUnusedAttributes
    };
}
function $b383cde4e0574ff6$var$WebGLBufferRenderer(gl, extensions, info, capabilities) {
    var setMode = function setMode(value) {
        mode = value;
    };
    var render = function render(start, count) {
        gl.drawArrays(mode, start, count);
        info.update(count, mode, 1);
    };
    var renderInstances = function renderInstances(start, count, primcount) {
        if (primcount === 0) return;
        var extension, methodName;
        if (isWebGL2) {
            extension = gl;
            methodName = "drawArraysInstanced";
        } else {
            extension = extensions.get("ANGLE_instanced_arrays");
            methodName = "drawArraysInstancedANGLE";
            if (extension === null) {
                console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                return;
            }
        }
        extension[methodName](mode, start, count, primcount);
        info.update(count, mode, primcount);
    };
    var isWebGL2 = capabilities.isWebGL2;
    var mode;
    //
    this.setMode = setMode;
    this.render = render;
    this.renderInstances = renderInstances;
}
function $b383cde4e0574ff6$var$WebGLCapabilities(gl, extensions, parameters) {
    var getMaxAnisotropy = function getMaxAnisotropy() {
        if (maxAnisotropy !== undefined) return maxAnisotropy;
        if (extensions.has("EXT_texture_filter_anisotropic") === true) {
            var extension = extensions.get("EXT_texture_filter_anisotropic");
            maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        } else maxAnisotropy = 0;
        return maxAnisotropy;
    };
    var getMaxPrecision = function getMaxPrecision(precision) {
        if (precision === "highp") {
            if (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) return "highp";
            precision = "mediump";
        }
        if (precision === "mediump") {
            if (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) return "mediump";
        }
        return "lowp";
    };
    var maxAnisotropy;
    /* eslint-disable no-undef */ var isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== "undefined" && gl instanceof WebGL2ComputeRenderingContext;
    /* eslint-enable no-undef */ var precision = parameters.precision !== undefined ? parameters.precision : "highp";
    var maxPrecision = getMaxPrecision(precision);
    if (maxPrecision !== precision) {
        console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
        precision = maxPrecision;
    }
    var drawBuffers = isWebGL2 || extensions.has("WEBGL_draw_buffers");
    var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    var maxTextures = gl.getParameter(34930);
    var maxVertexTextures = gl.getParameter(35660);
    var maxTextureSize = gl.getParameter(3379);
    var maxCubemapSize = gl.getParameter(34076);
    var maxAttributes = gl.getParameter(34921);
    var maxVertexUniforms = gl.getParameter(36347);
    var maxVaryings = gl.getParameter(36348);
    var maxFragmentUniforms = gl.getParameter(36349);
    var vertexTextures = maxVertexTextures > 0;
    var floatFragmentTextures = isWebGL2 || extensions.has("OES_texture_float");
    var floatVertexTextures = vertexTextures && floatFragmentTextures;
    var maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;
    return {
        isWebGL2: isWebGL2,
        drawBuffers: drawBuffers,
        getMaxAnisotropy: getMaxAnisotropy,
        getMaxPrecision: getMaxPrecision,
        precision: precision,
        logarithmicDepthBuffer: logarithmicDepthBuffer,
        maxTextures: maxTextures,
        maxVertexTextures: maxVertexTextures,
        maxTextureSize: maxTextureSize,
        maxCubemapSize: maxCubemapSize,
        maxAttributes: maxAttributes,
        maxVertexUniforms: maxVertexUniforms,
        maxVaryings: maxVaryings,
        maxFragmentUniforms: maxFragmentUniforms,
        vertexTextures: vertexTextures,
        floatFragmentTextures: floatFragmentTextures,
        floatVertexTextures: floatVertexTextures,
        maxSamples: maxSamples
    };
}
function $b383cde4e0574ff6$var$WebGLClipping(properties) {
    var resetGlobalState = function resetGlobalState() {
        if (uniform.value !== globalState) {
            uniform.value = globalState;
            uniform.needsUpdate = numGlobalPlanes > 0;
        }
        scope.numPlanes = numGlobalPlanes;
        scope.numIntersection = 0;
    };
    var projectPlanes = function projectPlanes(planes, camera, dstOffset, skipTransform) {
        var nPlanes = planes !== null ? planes.length : 0;
        var dstArray = null;
        if (nPlanes !== 0) {
            dstArray = uniform.value;
            if (skipTransform !== true || dstArray === null) {
                var flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;
                viewNormalMatrix.getNormalMatrix(viewMatrix);
                if (dstArray === null || dstArray.length < flatSize) dstArray = new Float32Array(flatSize);
                for(var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4){
                    plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
                    plane.normal.toArray(dstArray, i4);
                    dstArray[i4 + 3] = plane.constant;
                }
            }
            uniform.value = dstArray;
            uniform.needsUpdate = true;
        }
        scope.numPlanes = nPlanes;
        scope.numIntersection = 0;
        return dstArray;
    };
    var scope = this;
    var globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
    var plane = new $b383cde4e0574ff6$export$7ff5ac152ef991b0(), viewNormalMatrix = new $b383cde4e0574ff6$export$8ff26dafa08918(), uniform = {
        value: null,
        needsUpdate: false
    };
    this.uniform = uniform;
    this.numPlanes = 0;
    this.numIntersection = 0;
    this.init = function(planes, enableLocalClipping, camera) {
        var enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
        // run another frame in order to reset the state:
        numGlobalPlanes !== 0 || localClippingEnabled;
        localClippingEnabled = enableLocalClipping;
        globalState = projectPlanes(planes, camera, 0);
        numGlobalPlanes = planes.length;
        return enabled;
    };
    this.beginShadows = function() {
        renderingShadows = true;
        projectPlanes(null);
    };
    this.endShadows = function() {
        renderingShadows = false;
        resetGlobalState();
    };
    this.setState = function(material, camera, useCache) {
        var planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
        var materialProperties = properties.get(material);
        if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
            // there's no local clipping
            if (renderingShadows) // there's no global clipping
            projectPlanes(null);
            else resetGlobalState();
        } else {
            var nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
            var dstArray = materialProperties.clippingState || null;
            uniform.value = dstArray; // ensure unique state
            dstArray = projectPlanes(planes, camera, lGlobal, useCache);
            for(var i = 0; i !== lGlobal; ++i)dstArray[i] = globalState[i];
            materialProperties.clippingState = dstArray;
            this.numIntersection = clipIntersection ? this.numPlanes : 0;
            this.numPlanes += nGlobal;
        }
    };
}
function $b383cde4e0574ff6$var$WebGLCubeMaps(renderer) {
    var mapTextureMapping = function mapTextureMapping(texture, mapping) {
        if (mapping === $b383cde4e0574ff6$export$d64030b316d3b087) texture.mapping = $b383cde4e0574ff6$export$8759762a6477f2c4;
        else if (mapping === $b383cde4e0574ff6$export$ee99d97d46898098) texture.mapping = $b383cde4e0574ff6$export$dc59f8aed047f61d;
        return texture;
    };
    var get = function get(texture) {
        if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
            var mapping = texture.mapping;
            if (mapping === $b383cde4e0574ff6$export$d64030b316d3b087 || mapping === $b383cde4e0574ff6$export$ee99d97d46898098) {
                if (cubemaps.has(texture)) {
                    var cubemap = cubemaps.get(texture).texture;
                    return mapTextureMapping(cubemap, texture.mapping);
                } else {
                    var image = texture.image;
                    if (image && image.height > 0) {
                        var currentRenderTarget = renderer.getRenderTarget();
                        var renderTarget = new $b383cde4e0574ff6$export$ac386671d651941e(image.height / 2);
                        renderTarget.fromEquirectangularTexture(renderer, texture);
                        cubemaps.set(texture, renderTarget);
                        renderer.setRenderTarget(currentRenderTarget);
                        texture.addEventListener("dispose", onTextureDispose);
                        return mapTextureMapping(renderTarget.texture, texture.mapping);
                    } else // image not yet ready. try the conversion next frame
                    return null;
                }
            }
        }
        return texture;
    };
    var dispose = function dispose() {
        cubemaps = new WeakMap();
    };
    var cubemaps = new WeakMap();
    function onTextureDispose(event) {
        var texture = event.target;
        texture.removeEventListener("dispose", onTextureDispose);
        var cubemap = cubemaps.get(texture);
        if (cubemap !== undefined) {
            cubemaps.delete(texture);
            cubemap.dispose();
        }
    }
    return {
        get: get,
        dispose: dispose
    };
}
var $b383cde4e0574ff6$export$9ebf355ee4ed261b = /*#__PURE__*/ function(Camera) {
    "use strict";
    (0, $gQI4D.default)(OrthographicCamera, Camera);
    var _super = (0, $a0Xbx.default)(OrthographicCamera);
    function OrthographicCamera() {
        var left = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : -1, right = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, top = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, bottom = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : -1, near = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0.1, far = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 2000;
        (0, $dnGTK.default)(this, OrthographicCamera);
        var _this;
        _this = _super.call(this);
        _this.type = "OrthographicCamera";
        _this.zoom = 1;
        _this.view = null;
        _this.left = left;
        _this.right = right;
        _this.top = top;
        _this.bottom = bottom;
        _this.near = near;
        _this.far = far;
        _this.updateProjectionMatrix();
        return _this;
    }
    (0, $9SLyD.default)(OrthographicCamera, [
        {
            key: "copy",
            value: function copy(source, recursive) {
                (0, $bWs11.default)((0, $6gb2n.default)(OrthographicCamera.prototype), "copy", this).call(this, source, recursive);
                this.left = source.left;
                this.right = source.right;
                this.top = source.top;
                this.bottom = source.bottom;
                this.near = source.near;
                this.far = source.far;
                this.zoom = source.zoom;
                this.view = source.view === null ? null : Object.assign({}, source.view);
                return this;
            }
        },
        {
            key: "setViewOffset",
            value: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {
                if (this.view === null) this.view = {
                    enabled: true,
                    fullWidth: 1,
                    fullHeight: 1,
                    offsetX: 0,
                    offsetY: 0,
                    width: 1,
                    height: 1
                };
                this.view.enabled = true;
                this.view.fullWidth = fullWidth;
                this.view.fullHeight = fullHeight;
                this.view.offsetX = x;
                this.view.offsetY = y;
                this.view.width = width;
                this.view.height = height;
                this.updateProjectionMatrix();
            }
        },
        {
            key: "clearViewOffset",
            value: function clearViewOffset() {
                if (this.view !== null) this.view.enabled = false;
                this.updateProjectionMatrix();
            }
        },
        {
            key: "updateProjectionMatrix",
            value: function updateProjectionMatrix() {
                var dx = (this.right - this.left) / (2 * this.zoom);
                var dy = (this.top - this.bottom) / (2 * this.zoom);
                var cx = (this.right + this.left) / 2;
                var cy = (this.top + this.bottom) / 2;
                var left = cx - dx;
                var right = cx + dx;
                var top = cy + dy;
                var bottom = cy - dy;
                if (this.view !== null && this.view.enabled) {
                    var scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
                    var scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
                    left += scaleW * this.view.offsetX;
                    right = left + scaleW * this.view.width;
                    top -= scaleH * this.view.offsetY;
                    bottom = top - scaleH * this.view.height;
                }
                this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
                this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
            }
        },
        {
            key: "toJSON",
            value: function toJSON(meta) {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(OrthographicCamera.prototype), "toJSON", this).call(this, meta);
                data.object.zoom = this.zoom;
                data.object.left = this.left;
                data.object.right = this.right;
                data.object.top = this.top;
                data.object.bottom = this.bottom;
                data.object.near = this.near;
                data.object.far = this.far;
                if (this.view !== null) data.object.view = Object.assign({}, this.view);
                return data;
            }
        }
    ]);
    return OrthographicCamera;
}($b383cde4e0574ff6$export$79f141de891a5fed);
$b383cde4e0574ff6$export$9ebf355ee4ed261b.prototype.isOrthographicCamera = true;
var $b383cde4e0574ff6$export$21c421a2e1df9d22 = /*#__PURE__*/ function(ShaderMaterial) {
    "use strict";
    (0, $gQI4D.default)(RawShaderMaterial, ShaderMaterial);
    var _super = (0, $a0Xbx.default)(RawShaderMaterial);
    function RawShaderMaterial(parameters) {
        (0, $dnGTK.default)(this, RawShaderMaterial);
        var _this;
        _this = _super.call(this, parameters);
        _this.type = "RawShaderMaterial";
        return _this;
    }
    return RawShaderMaterial;
}($b383cde4e0574ff6$export$83c7d75d550a8b0d);
$b383cde4e0574ff6$export$21c421a2e1df9d22.prototype.isRawShaderMaterial = true;
var $b383cde4e0574ff6$var$LOD_MIN = 4;
var $b383cde4e0574ff6$var$LOD_MAX = 8;
var $b383cde4e0574ff6$var$SIZE_MAX = Math.pow(2, $b383cde4e0574ff6$var$LOD_MAX);
// The standard deviations (radians) associated with the extra mips. These are
// chosen to approximate a Trowbridge-Reitz distribution function times the
// geometric shadowing function. These sigma values squared must match the
// variance #defines in cube_uv_reflection_fragment.glsl.js.
var $b383cde4e0574ff6$var$EXTRA_LOD_SIGMA = [
    0.125,
    0.215,
    0.35,
    0.446,
    0.526,
    0.582
];
var $b383cde4e0574ff6$var$TOTAL_LODS = $b383cde4e0574ff6$var$LOD_MAX - $b383cde4e0574ff6$var$LOD_MIN + 1 + $b383cde4e0574ff6$var$EXTRA_LOD_SIGMA.length;
// The maximum length of the blur for loop. Smaller sigmas will use fewer
// samples and exit early, but not recompile the shader.
var $b383cde4e0574ff6$var$MAX_SAMPLES = 20;
var $b383cde4e0574ff6$var$_obj1;
var $b383cde4e0574ff6$var$ENCODINGS = ($b383cde4e0574ff6$var$_obj1 = {}, (0, $dK6Ta.default)($b383cde4e0574ff6$var$_obj1, $b383cde4e0574ff6$export$7207336e4151a112, 0), (0, $dK6Ta.default)($b383cde4e0574ff6$var$_obj1, $b383cde4e0574ff6$export$f32388edbb32674, 1), (0, $dK6Ta.default)($b383cde4e0574ff6$var$_obj1, $b383cde4e0574ff6$export$3be4c466a12b5dcf, 2), (0, $dK6Ta.default)($b383cde4e0574ff6$var$_obj1, $b383cde4e0574ff6$export$2c4bdfd76b188654, 3), (0, $dK6Ta.default)($b383cde4e0574ff6$var$_obj1, $b383cde4e0574ff6$export$48a0051d6a5a9b9, 4), (0, $dK6Ta.default)($b383cde4e0574ff6$var$_obj1, $b383cde4e0574ff6$export$ca2f89b13b49d951, 5), (0, $dK6Ta.default)($b383cde4e0574ff6$var$_obj1, $b383cde4e0574ff6$export$eaab32c1bcea1817, 6), $b383cde4e0574ff6$var$_obj1);
var $b383cde4e0574ff6$var$_flatCamera = /*@__PURE__*/ new $b383cde4e0574ff6$export$9ebf355ee4ed261b();
var /*@__PURE__*/ $b383cde4e0574ff6$var$ref = $b383cde4e0574ff6$var$_createPlanes(), $b383cde4e0574ff6$var$_lodPlanes = $b383cde4e0574ff6$var$ref._lodPlanes, $b383cde4e0574ff6$var$_sizeLods = $b383cde4e0574ff6$var$ref._sizeLods, $b383cde4e0574ff6$var$_sigmas = $b383cde4e0574ff6$var$ref._sigmas;
var $b383cde4e0574ff6$var$_clearColor = /*@__PURE__*/ new $b383cde4e0574ff6$export$892596cec99bc70e();
var $b383cde4e0574ff6$var$_oldTarget = null;
// Golden Ratio
var $b383cde4e0574ff6$var$PHI = (1 + Math.sqrt(5)) / 2;
var $b383cde4e0574ff6$var$INV_PHI = 1 / $b383cde4e0574ff6$var$PHI;
// Vertices of a dodecahedron (except the opposites, which represent the
// same axis), used as axis directions evenly spread on a sphere.
var $b383cde4e0574ff6$var$_axisDirections = [
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(1, 1, 1),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(-1, 1, 1),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(1, 1, -1),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(-1, 1, -1),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(0, $b383cde4e0574ff6$var$PHI, $b383cde4e0574ff6$var$INV_PHI),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(0, $b383cde4e0574ff6$var$PHI, -$b383cde4e0574ff6$var$INV_PHI),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699($b383cde4e0574ff6$var$INV_PHI, 0, $b383cde4e0574ff6$var$PHI),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(-$b383cde4e0574ff6$var$INV_PHI, 0, $b383cde4e0574ff6$var$PHI),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699($b383cde4e0574ff6$var$PHI, $b383cde4e0574ff6$var$INV_PHI, 0),
    /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699(-$b383cde4e0574ff6$var$PHI, $b383cde4e0574ff6$var$INV_PHI, 0)
];
/**
 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 * (PMREM) from a cubeMap environment texture. This allows different levels of
 * blur to be quickly accessed based on material roughness. It is packed into a
 * special CubeUV format that allows us to perform custom interpolation so that
 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
 * higher roughness levels. In this way we maintain resolution to smoothly
 * interpolate diffuse lighting while limiting sampling computation.
 *
 * Paper: Fast, Accurate Image-Based Lighting
 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
*/ var $b383cde4e0574ff6$export$6add42717753e221 = /*#__PURE__*/ function() {
    "use strict";
    function PMREMGenerator(renderer) {
        (0, $dnGTK.default)(this, PMREMGenerator);
        this._renderer = renderer;
        this._pingPongRenderTarget = null;
        this._blurMaterial = $b383cde4e0574ff6$var$_getBlurShader($b383cde4e0574ff6$var$MAX_SAMPLES);
        this._equirectShader = null;
        this._cubemapShader = null;
        this._compileMaterial(this._blurMaterial);
    }
    (0, $9SLyD.default)(PMREMGenerator, [
        {
            /**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
	 * is placed at the origin).
	 */ key: "fromScene",
            value: function fromScene(scene) {
                var sigma = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, near = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0.1, far = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 100;
                $b383cde4e0574ff6$var$_oldTarget = this._renderer.getRenderTarget();
                var cubeUVRenderTarget = this._allocateTargets();
                this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
                if (sigma > 0) this._blur(cubeUVRenderTarget, 0, 0, sigma);
                this._applyPMREM(cubeUVRenderTarget);
                this._cleanup(cubeUVRenderTarget);
                return cubeUVRenderTarget;
            }
        },
        {
            /**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 */ key: "fromEquirectangular",
            value: function fromEquirectangular(equirectangular) {
                return this._fromTexture(equirectangular);
            }
        },
        {
            /**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 */ key: "fromCubemap",
            value: function fromCubemap(cubemap) {
                return this._fromTexture(cubemap);
            }
        },
        {
            /**
	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */ key: "compileCubemapShader",
            value: function compileCubemapShader() {
                if (this._cubemapShader === null) {
                    this._cubemapShader = $b383cde4e0574ff6$var$_getCubemapShader();
                    this._compileMaterial(this._cubemapShader);
                }
            }
        },
        {
            /**
	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */ key: "compileEquirectangularShader",
            value: function compileEquirectangularShader() {
                if (this._equirectShader === null) {
                    this._equirectShader = $b383cde4e0574ff6$var$_getEquirectShader();
                    this._compileMaterial(this._equirectShader);
                }
            }
        },
        {
            /**
	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
	 * one of them will cause any others to also become unusable.
	 */ key: "dispose",
            value: function dispose() {
                this._blurMaterial.dispose();
                if (this._cubemapShader !== null) this._cubemapShader.dispose();
                if (this._equirectShader !== null) this._equirectShader.dispose();
                for(var i = 0; i < $b383cde4e0574ff6$var$_lodPlanes.length; i++)$b383cde4e0574ff6$var$_lodPlanes[i].dispose();
            }
        },
        {
            // private interface
            key: "_cleanup",
            value: function _cleanup(outputTarget) {
                this._pingPongRenderTarget.dispose();
                this._renderer.setRenderTarget($b383cde4e0574ff6$var$_oldTarget);
                outputTarget.scissorTest = false;
                $b383cde4e0574ff6$var$_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
            }
        },
        {
            key: "_fromTexture",
            value: function _fromTexture(texture) {
                $b383cde4e0574ff6$var$_oldTarget = this._renderer.getRenderTarget();
                var cubeUVRenderTarget = this._allocateTargets(texture);
                this._textureToCubeUV(texture, cubeUVRenderTarget);
                this._applyPMREM(cubeUVRenderTarget);
                this._cleanup(cubeUVRenderTarget);
                return cubeUVRenderTarget;
            }
        },
        {
            key: "_allocateTargets",
            value: function _allocateTargets(texture) {
                var params = {
                    magFilter: $b383cde4e0574ff6$export$727aa5ec3fe39bf0,
                    minFilter: $b383cde4e0574ff6$export$727aa5ec3fe39bf0,
                    generateMipmaps: false,
                    type: $b383cde4e0574ff6$export$2e8ce08d3f6f5e10,
                    format: $b383cde4e0574ff6$export$7f419e36e2229a1d,
                    encoding: $b383cde4e0574ff6$var$_isLDR(texture) ? texture.encoding : $b383cde4e0574ff6$export$3be4c466a12b5dcf,
                    depthBuffer: false
                };
                var cubeUVRenderTarget = $b383cde4e0574ff6$var$_createRenderTarget(params);
                cubeUVRenderTarget.depthBuffer = texture ? false : true;
                this._pingPongRenderTarget = $b383cde4e0574ff6$var$_createRenderTarget(params);
                return cubeUVRenderTarget;
            }
        },
        {
            key: "_compileMaterial",
            value: function _compileMaterial(material) {
                var tmpMesh = new $b383cde4e0574ff6$export$e176487c05830cc5($b383cde4e0574ff6$var$_lodPlanes[0], material);
                this._renderer.compile(tmpMesh, $b383cde4e0574ff6$var$_flatCamera);
            }
        },
        {
            key: "_sceneToCubeUV",
            value: function _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
                var fov = 90;
                var aspect = 1;
                var cubeCamera = new $b383cde4e0574ff6$export$74e4ae24825f68d7(fov, aspect, near, far);
                var upSign = [
                    1,
                    -1,
                    1,
                    1,
                    1,
                    1
                ];
                var forwardSign = [
                    1,
                    1,
                    1,
                    -1,
                    -1,
                    -1
                ];
                var renderer = this._renderer;
                var originalAutoClear = renderer.autoClear;
                var outputEncoding = renderer.outputEncoding;
                var toneMapping = renderer.toneMapping;
                renderer.getClearColor($b383cde4e0574ff6$var$_clearColor);
                renderer.toneMapping = $b383cde4e0574ff6$export$9fcb6b4294603b2;
                renderer.outputEncoding = $b383cde4e0574ff6$export$7207336e4151a112;
                renderer.autoClear = false;
                var backgroundMaterial = new $b383cde4e0574ff6$export$55cbcc9b622fe1f5({
                    name: "PMREM.Background",
                    side: $b383cde4e0574ff6$export$d9f0486e75b5ace,
                    depthWrite: false,
                    depthTest: false
                });
                var backgroundBox = new $b383cde4e0574ff6$export$e176487c05830cc5(new $b383cde4e0574ff6$export$ab3456a079aa7d80(), backgroundMaterial);
                var useSolidColor = false;
                var background = scene.background;
                if (background) {
                    if (background.isColor) {
                        backgroundMaterial.color.copy(background);
                        scene.background = null;
                        useSolidColor = true;
                    }
                } else {
                    backgroundMaterial.color.copy($b383cde4e0574ff6$var$_clearColor);
                    useSolidColor = true;
                }
                for(var i = 0; i < 6; i++){
                    var col = i % 3;
                    if (col == 0) {
                        cubeCamera.up.set(0, upSign[i], 0);
                        cubeCamera.lookAt(forwardSign[i], 0, 0);
                    } else if (col == 1) {
                        cubeCamera.up.set(0, 0, upSign[i]);
                        cubeCamera.lookAt(0, forwardSign[i], 0);
                    } else {
                        cubeCamera.up.set(0, upSign[i], 0);
                        cubeCamera.lookAt(0, 0, forwardSign[i]);
                    }
                    $b383cde4e0574ff6$var$_setViewport(cubeUVRenderTarget, col * $b383cde4e0574ff6$var$SIZE_MAX, i > 2 ? $b383cde4e0574ff6$var$SIZE_MAX : 0, $b383cde4e0574ff6$var$SIZE_MAX, $b383cde4e0574ff6$var$SIZE_MAX);
                    renderer.setRenderTarget(cubeUVRenderTarget);
                    if (useSolidColor) renderer.render(backgroundBox, cubeCamera);
                    renderer.render(scene, cubeCamera);
                }
                backgroundBox.geometry.dispose();
                backgroundBox.material.dispose();
                renderer.toneMapping = toneMapping;
                renderer.outputEncoding = outputEncoding;
                renderer.autoClear = originalAutoClear;
                scene.background = background;
            }
        },
        {
            key: "_setEncoding",
            value: function _setEncoding(uniform, texture) {
                if (this._renderer.capabilities.isWebGL2 === true && texture.format === $b383cde4e0574ff6$export$3f8bb04b555a363c && texture.type === $b383cde4e0574ff6$export$2e8ce08d3f6f5e10 && texture.encoding === $b383cde4e0574ff6$export$f32388edbb32674) uniform.value = $b383cde4e0574ff6$var$ENCODINGS[$b383cde4e0574ff6$export$7207336e4151a112];
                else uniform.value = $b383cde4e0574ff6$var$ENCODINGS[texture.encoding];
            }
        },
        {
            key: "_textureToCubeUV",
            value: function _textureToCubeUV(texture, cubeUVRenderTarget) {
                var renderer = this._renderer;
                var isCubeTexture = texture.mapping === $b383cde4e0574ff6$export$8759762a6477f2c4 || texture.mapping === $b383cde4e0574ff6$export$dc59f8aed047f61d;
                if (isCubeTexture) {
                    if (this._cubemapShader == null) this._cubemapShader = $b383cde4e0574ff6$var$_getCubemapShader();
                } else if (this._equirectShader == null) this._equirectShader = $b383cde4e0574ff6$var$_getEquirectShader();
                var material = isCubeTexture ? this._cubemapShader : this._equirectShader;
                var mesh = new $b383cde4e0574ff6$export$e176487c05830cc5($b383cde4e0574ff6$var$_lodPlanes[0], material);
                var uniforms = material.uniforms;
                uniforms["envMap"].value = texture;
                if (!isCubeTexture) uniforms["texelSize"].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);
                this._setEncoding(uniforms["inputEncoding"], texture);
                this._setEncoding(uniforms["outputEncoding"], cubeUVRenderTarget.texture);
                $b383cde4e0574ff6$var$_setViewport(cubeUVRenderTarget, 0, 0, 3 * $b383cde4e0574ff6$var$SIZE_MAX, 2 * $b383cde4e0574ff6$var$SIZE_MAX);
                renderer.setRenderTarget(cubeUVRenderTarget);
                renderer.render(mesh, $b383cde4e0574ff6$var$_flatCamera);
            }
        },
        {
            key: "_applyPMREM",
            value: function _applyPMREM(cubeUVRenderTarget) {
                var renderer = this._renderer;
                var autoClear = renderer.autoClear;
                renderer.autoClear = false;
                for(var i = 1; i < $b383cde4e0574ff6$var$TOTAL_LODS; i++){
                    var sigma = Math.sqrt($b383cde4e0574ff6$var$_sigmas[i] * $b383cde4e0574ff6$var$_sigmas[i] - $b383cde4e0574ff6$var$_sigmas[i - 1] * $b383cde4e0574ff6$var$_sigmas[i - 1]);
                    var poleAxis = $b383cde4e0574ff6$var$_axisDirections[(i - 1) % $b383cde4e0574ff6$var$_axisDirections.length];
                    this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
                }
                renderer.autoClear = autoClear;
            }
        },
        {
            /**
	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
	 * vertically and horizontally, but this breaks down on a cube. Here we apply
	 * the blur latitudinally (around the poles), and then longitudinally (towards
	 * the poles) to approximate the orthogonally-separable blur. It is least
	 * accurate at the poles, but still does a decent job.
	 */ key: "_blur",
            value: function _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
                var pingPongRenderTarget = this._pingPongRenderTarget;
                this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, "latitudinal", poleAxis);
                this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, "longitudinal", poleAxis);
            }
        },
        {
            key: "_halfBlur",
            value: function _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
                var renderer = this._renderer;
                var blurMaterial = this._blurMaterial;
                if (direction !== "latitudinal" && direction !== "longitudinal") console.error("blur direction must be either latitudinal or longitudinal!");
                // Number of standard deviations at which to cut off the discrete approximation.
                var STANDARD_DEVIATIONS = 3;
                var blurMesh = new $b383cde4e0574ff6$export$e176487c05830cc5($b383cde4e0574ff6$var$_lodPlanes[lodOut], blurMaterial);
                var blurUniforms = blurMaterial.uniforms;
                var pixels = $b383cde4e0574ff6$var$_sizeLods[lodIn] - 1;
                var radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * $b383cde4e0574ff6$var$MAX_SAMPLES - 1);
                var sigmaPixels = sigmaRadians / radiansPerPixel;
                var samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : $b383cde4e0574ff6$var$MAX_SAMPLES;
                if (samples > $b383cde4e0574ff6$var$MAX_SAMPLES) console.warn("sigmaRadians, ".concat(sigmaRadians, ", is too large and will clip, as it requested ").concat(samples, " samples when the maximum is set to ").concat($b383cde4e0574ff6$var$MAX_SAMPLES));
                var weights = [];
                var sum = 0;
                for(var i = 0; i < $b383cde4e0574ff6$var$MAX_SAMPLES; ++i){
                    var x = i / sigmaPixels;
                    var weight = Math.exp(-x * x / 2);
                    weights.push(weight);
                    if (i == 0) sum += weight;
                    else if (i < samples) sum += 2 * weight;
                }
                for(var i1 = 0; i1 < weights.length; i1++)weights[i1] = weights[i1] / sum;
                blurUniforms["envMap"].value = targetIn.texture;
                blurUniforms["samples"].value = samples;
                blurUniforms["weights"].value = weights;
                blurUniforms["latitudinal"].value = direction === "latitudinal";
                if (poleAxis) blurUniforms["poleAxis"].value = poleAxis;
                blurUniforms["dTheta"].value = radiansPerPixel;
                blurUniforms["mipInt"].value = $b383cde4e0574ff6$var$LOD_MAX - lodIn;
                this._setEncoding(blurUniforms["inputEncoding"], targetIn.texture);
                this._setEncoding(blurUniforms["outputEncoding"], targetIn.texture);
                var outputSize = $b383cde4e0574ff6$var$_sizeLods[lodOut];
                var x1 = 3 * Math.max(0, $b383cde4e0574ff6$var$SIZE_MAX - 2 * outputSize);
                var y = (lodOut === 0 ? 0 : 2 * $b383cde4e0574ff6$var$SIZE_MAX) + 2 * outputSize * (lodOut > $b383cde4e0574ff6$var$LOD_MAX - $b383cde4e0574ff6$var$LOD_MIN ? lodOut - $b383cde4e0574ff6$var$LOD_MAX + $b383cde4e0574ff6$var$LOD_MIN : 0);
                $b383cde4e0574ff6$var$_setViewport(targetOut, x1, y, 3 * outputSize, 2 * outputSize);
                renderer.setRenderTarget(targetOut);
                renderer.render(blurMesh, $b383cde4e0574ff6$var$_flatCamera);
            }
        }
    ]);
    return PMREMGenerator;
}();
function $b383cde4e0574ff6$var$_isLDR(texture) {
    if (texture === undefined || texture.type !== $b383cde4e0574ff6$export$2e8ce08d3f6f5e10) return false;
    return texture.encoding === $b383cde4e0574ff6$export$7207336e4151a112 || texture.encoding === $b383cde4e0574ff6$export$f32388edbb32674 || texture.encoding === $b383cde4e0574ff6$export$eaab32c1bcea1817;
}
function $b383cde4e0574ff6$var$_createPlanes() {
    var _lodPlanes = [];
    var _sizeLods = [];
    var _sigmas = [];
    var lod = $b383cde4e0574ff6$var$LOD_MAX;
    for(var i = 0; i < $b383cde4e0574ff6$var$TOTAL_LODS; i++){
        var sizeLod = Math.pow(2, lod);
        _sizeLods.push(sizeLod);
        var sigma = 1.0 / sizeLod;
        if (i > $b383cde4e0574ff6$var$LOD_MAX - $b383cde4e0574ff6$var$LOD_MIN) sigma = $b383cde4e0574ff6$var$EXTRA_LOD_SIGMA[i - $b383cde4e0574ff6$var$LOD_MAX + $b383cde4e0574ff6$var$LOD_MIN - 1];
        else if (i == 0) sigma = 0;
        _sigmas.push(sigma);
        var texelSize = 1.0 / (sizeLod - 1);
        var min = -texelSize / 2;
        var max = 1 + texelSize / 2;
        var uv1 = [
            min,
            min,
            max,
            min,
            max,
            max,
            min,
            min,
            max,
            max,
            min,
            max
        ];
        var cubeFaces = 6;
        var vertices = 6;
        var positionSize = 3;
        var uvSize = 2;
        var faceIndexSize = 1;
        var position = new Float32Array(positionSize * vertices * cubeFaces);
        var uv = new Float32Array(uvSize * vertices * cubeFaces);
        var faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
        for(var face = 0; face < cubeFaces; face++){
            var x = face % 3 * 2 / 3 - 1;
            var y = face > 2 ? 0 : -1;
            var coordinates = [
                x,
                y,
                0,
                x + 2 / 3,
                y,
                0,
                x + 2 / 3,
                y + 1,
                0,
                x,
                y,
                0,
                x + 2 / 3,
                y + 1,
                0,
                x,
                y + 1,
                0
            ];
            position.set(coordinates, positionSize * vertices * face);
            uv.set(uv1, uvSize * vertices * face);
            var fill = [
                face,
                face,
                face,
                face,
                face,
                face
            ];
            faceIndex.set(fill, faceIndexSize * vertices * face);
        }
        var planes = new $b383cde4e0574ff6$export$b7be63a67df8959();
        planes.setAttribute("position", new $b383cde4e0574ff6$export$8dea267bd6bde117(position, positionSize));
        planes.setAttribute("uv", new $b383cde4e0574ff6$export$8dea267bd6bde117(uv, uvSize));
        planes.setAttribute("faceIndex", new $b383cde4e0574ff6$export$8dea267bd6bde117(faceIndex, faceIndexSize));
        _lodPlanes.push(planes);
        if (lod > $b383cde4e0574ff6$var$LOD_MIN) lod--;
    }
    return {
        _lodPlanes: _lodPlanes,
        _sizeLods: _sizeLods,
        _sigmas: _sigmas
    };
}
function $b383cde4e0574ff6$var$_createRenderTarget(params) {
    var cubeUVRenderTarget = new $b383cde4e0574ff6$export$3c052beb2e51e23f(3 * $b383cde4e0574ff6$var$SIZE_MAX, 3 * $b383cde4e0574ff6$var$SIZE_MAX, params);
    cubeUVRenderTarget.texture.mapping = $b383cde4e0574ff6$export$dbf3e70ff37af79;
    cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
    cubeUVRenderTarget.scissorTest = true;
    return cubeUVRenderTarget;
}
function $b383cde4e0574ff6$var$_setViewport(target, x, y, width, height) {
    target.viewport.set(x, y, width, height);
    target.scissor.set(x, y, width, height);
}
function $b383cde4e0574ff6$var$_getBlurShader(maxSamples) {
    var weights = new Float32Array(maxSamples);
    var poleAxis = new $b383cde4e0574ff6$export$64b5c384219d3699(0, 1, 0);
    var shaderMaterial = new $b383cde4e0574ff6$export$21c421a2e1df9d22({
        name: "SphericalGaussianBlur",
        defines: {
            "n": maxSamples
        },
        uniforms: {
            "envMap": {
                value: null
            },
            "samples": {
                value: 1
            },
            "weights": {
                value: weights
            },
            "latitudinal": {
                value: false
            },
            "dTheta": {
                value: 0
            },
            "mipInt": {
                value: 0
            },
            "poleAxis": {
                value: poleAxis
            },
            "inputEncoding": {
                value: $b383cde4e0574ff6$var$ENCODINGS[$b383cde4e0574ff6$export$7207336e4151a112]
            },
            "outputEncoding": {
                value: $b383cde4e0574ff6$var$ENCODINGS[$b383cde4e0574ff6$export$7207336e4151a112]
            }
        },
        vertexShader: $b383cde4e0574ff6$var$_getCommonVertexShader(),
        fragmentShader: /* glsl */ "\n\n			precision mediump float;\n			precision mediump int;\n\n			varying vec3 vOutputDirection;\n\n			uniform sampler2D envMap;\n			uniform int samples;\n			uniform float weights[ n ];\n			uniform bool latitudinal;\n			uniform float dTheta;\n			uniform float mipInt;\n			uniform vec3 poleAxis;\n\n			".concat($b383cde4e0574ff6$var$_getEncodings(), "\n\n			#define ENVMAP_TYPE_CUBE_UV\n			#include <cube_uv_reflection_fragment>\n\n			vec3 getSample( float theta, vec3 axis ) {\n\n				float cosTheta = cos( theta );\n				// Rodrigues' axis-angle rotation\n				vec3 sampleDirection = vOutputDirection * cosTheta\n					+ cross( axis, vOutputDirection ) * sin( theta )\n					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n				return bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n			}\n\n			void main() {\n\n				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n				}\n\n				axis = normalize( axis );\n\n				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n				for ( int i = 1; i < n; i++ ) {\n\n					if ( i >= samples ) {\n\n						break;\n\n					}\n\n					float theta = dTheta * float( i );\n					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n				}\n\n				gl_FragColor = linearToOutputTexel( gl_FragColor );\n\n			}\n		"),
        blending: $b383cde4e0574ff6$export$63b8d6b580fc65ba,
        depthTest: false,
        depthWrite: false
    });
    return shaderMaterial;
}
function $b383cde4e0574ff6$var$_getEquirectShader() {
    var texelSize = new $b383cde4e0574ff6$export$c977b3e384af9ae1(1, 1);
    var shaderMaterial = new $b383cde4e0574ff6$export$21c421a2e1df9d22({
        name: "EquirectangularToCubeUV",
        uniforms: {
            "envMap": {
                value: null
            },
            "texelSize": {
                value: texelSize
            },
            "inputEncoding": {
                value: $b383cde4e0574ff6$var$ENCODINGS[$b383cde4e0574ff6$export$7207336e4151a112]
            },
            "outputEncoding": {
                value: $b383cde4e0574ff6$var$ENCODINGS[$b383cde4e0574ff6$export$7207336e4151a112]
            }
        },
        vertexShader: $b383cde4e0574ff6$var$_getCommonVertexShader(),
        fragmentShader: /* glsl */ "\n\n			precision mediump float;\n			precision mediump int;\n\n			varying vec3 vOutputDirection;\n\n			uniform sampler2D envMap;\n			uniform vec2 texelSize;\n\n			".concat($b383cde4e0574ff6$var$_getEncodings(), "\n\n			#include <common>\n\n			void main() {\n\n				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n				vec3 outputDirection = normalize( vOutputDirection );\n				vec2 uv = equirectUv( outputDirection );\n\n				vec2 f = fract( uv / texelSize - 0.5 );\n				uv -= f * texelSize;\n				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n				uv.x += texelSize.x;\n				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n				uv.y += texelSize.y;\n				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n				uv.x -= texelSize.x;\n				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n				vec3 tm = mix( tl, tr, f.x );\n				vec3 bm = mix( bl, br, f.x );\n				gl_FragColor.rgb = mix( tm, bm, f.y );\n\n				gl_FragColor = linearToOutputTexel( gl_FragColor );\n\n			}\n		"),
        blending: $b383cde4e0574ff6$export$63b8d6b580fc65ba,
        depthTest: false,
        depthWrite: false
    });
    return shaderMaterial;
}
function $b383cde4e0574ff6$var$_getCubemapShader() {
    var shaderMaterial = new $b383cde4e0574ff6$export$21c421a2e1df9d22({
        name: "CubemapToCubeUV",
        uniforms: {
            "envMap": {
                value: null
            },
            "inputEncoding": {
                value: $b383cde4e0574ff6$var$ENCODINGS[$b383cde4e0574ff6$export$7207336e4151a112]
            },
            "outputEncoding": {
                value: $b383cde4e0574ff6$var$ENCODINGS[$b383cde4e0574ff6$export$7207336e4151a112]
            }
        },
        vertexShader: $b383cde4e0574ff6$var$_getCommonVertexShader(),
        fragmentShader: /* glsl */ "\n\n			precision mediump float;\n			precision mediump int;\n\n			varying vec3 vOutputDirection;\n\n			uniform samplerCube envMap;\n\n			".concat($b383cde4e0574ff6$var$_getEncodings(), "\n\n			void main() {\n\n				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n				gl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n				gl_FragColor = linearToOutputTexel( gl_FragColor );\n\n			}\n		"),
        blending: $b383cde4e0574ff6$export$63b8d6b580fc65ba,
        depthTest: false,
        depthWrite: false
    });
    return shaderMaterial;
}
function $b383cde4e0574ff6$var$_getCommonVertexShader() {
    return "\n\n		precision mediump float;\n		precision mediump int;\n\n		attribute vec3 position;\n		attribute vec2 uv;\n		attribute float faceIndex;\n\n		varying vec3 vOutputDirection;\n\n		// RH coordinate system; PMREM face-indexing convention\n		vec3 getDirection( vec2 uv, float face ) {\n\n			uv = 2.0 * uv - 1.0;\n\n			vec3 direction = vec3( uv, 1.0 );\n\n			if ( face == 0.0 ) {\n\n				direction = direction.zyx; // ( 1, v, u ) pos x\n\n			} else if ( face == 1.0 ) {\n\n				direction = direction.xzy;\n				direction.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n			} else if ( face == 2.0 ) {\n\n				direction.x *= -1.0; // ( -u, v, 1 ) pos z\n\n			} else if ( face == 3.0 ) {\n\n				direction = direction.zyx;\n				direction.xz *= -1.0; // ( -1, v, -u ) neg x\n\n			} else if ( face == 4.0 ) {\n\n				direction = direction.xzy;\n				direction.xy *= -1.0; // ( -u, -1, v ) neg y\n\n			} else if ( face == 5.0 ) {\n\n				direction.z *= -1.0; // ( u, v, -1 ) neg z\n\n			}\n\n			return direction;\n\n		}\n\n		void main() {\n\n			vOutputDirection = getDirection( uv, faceIndex );\n			gl_Position = vec4( position, 1.0 );\n\n		}\n	";
}
function $b383cde4e0574ff6$var$_getEncodings() {
    return "\n\n		uniform int inputEncoding;\n		uniform int outputEncoding;\n\n		#include <encodings_pars_fragment>\n\n		vec4 inputTexelToLinear( vec4 value ) {\n\n			if ( inputEncoding == 0 ) {\n\n				return value;\n\n			} else if ( inputEncoding == 1 ) {\n\n				return sRGBToLinear( value );\n\n			} else if ( inputEncoding == 2 ) {\n\n				return RGBEToLinear( value );\n\n			} else if ( inputEncoding == 3 ) {\n\n				return RGBMToLinear( value, 7.0 );\n\n			} else if ( inputEncoding == 4 ) {\n\n				return RGBMToLinear( value, 16.0 );\n\n			} else if ( inputEncoding == 5 ) {\n\n				return RGBDToLinear( value, 256.0 );\n\n			} else {\n\n				return GammaToLinear( value, 2.2 );\n\n			}\n\n		}\n\n		vec4 linearToOutputTexel( vec4 value ) {\n\n			if ( outputEncoding == 0 ) {\n\n				return value;\n\n			} else if ( outputEncoding == 1 ) {\n\n				return LinearTosRGB( value );\n\n			} else if ( outputEncoding == 2 ) {\n\n				return LinearToRGBE( value );\n\n			} else if ( outputEncoding == 3 ) {\n\n				return LinearToRGBM( value, 7.0 );\n\n			} else if ( outputEncoding == 4 ) {\n\n				return LinearToRGBM( value, 16.0 );\n\n			} else if ( outputEncoding == 5 ) {\n\n				return LinearToRGBD( value, 256.0 );\n\n			} else {\n\n				return LinearToGamma( value, 2.2 );\n\n			}\n\n		}\n\n		vec4 envMapTexelToLinear( vec4 color ) {\n\n			return inputTexelToLinear( color );\n\n		}\n	";
}
function $b383cde4e0574ff6$var$WebGLCubeUVMaps(renderer) {
    var get = function get(texture) {
        if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
            var mapping = texture.mapping;
            var isEquirectMap = mapping === $b383cde4e0574ff6$export$d64030b316d3b087 || mapping === $b383cde4e0574ff6$export$ee99d97d46898098;
            var isCubeMap = mapping === $b383cde4e0574ff6$export$8759762a6477f2c4 || mapping === $b383cde4e0574ff6$export$dc59f8aed047f61d;
            if (isEquirectMap || isCubeMap) {
                // equirect/cube map to cubeUV conversion
                if (cubeUVmaps.has(texture)) return cubeUVmaps.get(texture).texture;
                else {
                    var image = texture.image;
                    if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
                        var currentRenderTarget = renderer.getRenderTarget();
                        if (pmremGenerator === null) pmremGenerator = new $b383cde4e0574ff6$export$6add42717753e221(renderer);
                        var renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
                        cubeUVmaps.set(texture, renderTarget);
                        renderer.setRenderTarget(currentRenderTarget);
                        texture.addEventListener("dispose", onTextureDispose);
                        return renderTarget.texture;
                    } else // image not yet ready. try the conversion next frame
                    return null;
                }
            }
        }
        return texture;
    };
    var isCubeTextureComplete = function isCubeTextureComplete(image) {
        var count = 0;
        var length = 6;
        for(var i = 0; i < length; i++)if (image[i] !== undefined) count++;
        return count === length;
    };
    var dispose = function dispose() {
        cubeUVmaps = new WeakMap();
        if (pmremGenerator !== null) {
            pmremGenerator.dispose();
            pmremGenerator = null;
        }
    };
    var cubeUVmaps = new WeakMap();
    var pmremGenerator = null;
    function onTextureDispose(event) {
        var texture = event.target;
        texture.removeEventListener("dispose", onTextureDispose);
        var cubemapUV = cubeUVmaps.get(texture);
        if (cubemapUV !== undefined) {
            cubeUVmaps.delete(texture);
            cubemapUV.dispose();
        }
    }
    return {
        get: get,
        dispose: dispose
    };
}
function $b383cde4e0574ff6$var$WebGLExtensions(gl) {
    var getExtension = function getExtension(name) {
        if (extensions[name] !== undefined) return extensions[name];
        var extension;
        switch(name){
            case "WEBGL_depth_texture":
                extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
                break;
            case "EXT_texture_filter_anisotropic":
                extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                break;
            case "WEBGL_compressed_texture_s3tc":
                extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                break;
            case "WEBGL_compressed_texture_pvrtc":
                extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                break;
            default:
                extension = gl.getExtension(name);
        }
        extensions[name] = extension;
        return extension;
    };
    var extensions = {};
    return {
        has: function has(name) {
            return getExtension(name) !== null;
        },
        init: function init(capabilities) {
            if (capabilities.isWebGL2) getExtension("EXT_color_buffer_float");
            else {
                getExtension("WEBGL_depth_texture");
                getExtension("OES_texture_float");
                getExtension("OES_texture_half_float");
                getExtension("OES_texture_half_float_linear");
                getExtension("OES_standard_derivatives");
                getExtension("OES_element_index_uint");
                getExtension("OES_vertex_array_object");
                getExtension("ANGLE_instanced_arrays");
            }
            getExtension("OES_texture_float_linear");
            getExtension("EXT_color_buffer_half_float");
        },
        get: function get(name) {
            var extension = getExtension(name);
            if (extension === null) console.warn("THREE.WebGLRenderer: " + name + " extension not supported.");
            return extension;
        }
    };
}
function $b383cde4e0574ff6$var$WebGLGeometries(gl, attributes, info, bindingStates) {
    var get = function get(object, geometry) {
        if (geometries[geometry.id] === true) return geometry;
        geometry.addEventListener("dispose", onGeometryDispose);
        geometries[geometry.id] = true;
        info.memory.geometries++;
        return geometry;
    };
    var update = function update(geometry) {
        var geometryAttributes = geometry.attributes;
        // Updating index buffer in VAO now. See WebGLBindingStates.
        for(var name in geometryAttributes)attributes.update(geometryAttributes[name], 34962);
        // morph targets
        var morphAttributes = geometry.morphAttributes;
        for(var name1 in morphAttributes){
            var array = morphAttributes[name1];
            for(var i = 0, l = array.length; i < l; i++)attributes.update(array[i], 34962);
        }
    };
    var updateWireframeAttribute = function updateWireframeAttribute(geometry) {
        var indices = [];
        var geometryIndex = geometry.index;
        var geometryPosition = geometry.attributes.position;
        var version = 0;
        if (geometryIndex !== null) {
            var array = geometryIndex.array;
            version = geometryIndex.version;
            for(var i = 0, l = array.length; i < l; i += 3){
                var a = array[i + 0];
                var b = array[i + 1];
                var c = array[i + 2];
                indices.push(a, b, b, c, c, a);
            }
        } else {
            var array1 = geometryPosition.array;
            version = geometryPosition.version;
            for(var i1 = 0, l1 = array1.length / 3 - 1; i1 < l1; i1 += 3){
                var a1 = i1 + 0;
                var b1 = i1 + 1;
                var c1 = i1 + 2;
                indices.push(a1, b1, b1, c1, c1, a1);
            }
        }
        var attribute = new ($b383cde4e0574ff6$var$arrayMax(indices) > 65535 ? $b383cde4e0574ff6$export$7eb8c9fa25cd5bd6 : $b383cde4e0574ff6$export$640a853f68025f2e)(indices, 1);
        attribute.version = version;
        // Updating index buffer in VAO now. See WebGLBindingStates
        //
        var previousAttribute = wireframeAttributes.get(geometry);
        if (previousAttribute) attributes.remove(previousAttribute);
        //
        wireframeAttributes.set(geometry, attribute);
    };
    var getWireframeAttribute = function getWireframeAttribute(geometry) {
        var currentAttribute = wireframeAttributes.get(geometry);
        if (currentAttribute) {
            var geometryIndex = geometry.index;
            if (geometryIndex !== null) // if the attribute is obsolete, create a new one
            {
                if (currentAttribute.version < geometryIndex.version) updateWireframeAttribute(geometry);
            }
        } else updateWireframeAttribute(geometry);
        return wireframeAttributes.get(geometry);
    };
    var geometries = {};
    var wireframeAttributes = new WeakMap();
    function onGeometryDispose(event) {
        var geometry = event.target;
        if (geometry.index !== null) attributes.remove(geometry.index);
        for(var name in geometry.attributes)attributes.remove(geometry.attributes[name]);
        geometry.removeEventListener("dispose", onGeometryDispose);
        delete geometries[geometry.id];
        var attribute = wireframeAttributes.get(geometry);
        if (attribute) {
            attributes.remove(attribute);
            wireframeAttributes.delete(geometry);
        }
        bindingStates.releaseStatesOfGeometry(geometry);
        if (geometry.isInstancedBufferGeometry === true) delete geometry._maxInstanceCount;
        //
        info.memory.geometries--;
    }
    return {
        get: get,
        update: update,
        getWireframeAttribute: getWireframeAttribute
    };
}
function $b383cde4e0574ff6$var$WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
    var setMode = function setMode(value) {
        mode = value;
    };
    var setIndex = function setIndex(value) {
        type = value.type;
        bytesPerElement = value.bytesPerElement;
    };
    var render = function render(start, count) {
        gl.drawElements(mode, count, type, start * bytesPerElement);
        info.update(count, mode, 1);
    };
    var renderInstances = function renderInstances(start, count, primcount) {
        if (primcount === 0) return;
        var extension, methodName;
        if (isWebGL2) {
            extension = gl;
            methodName = "drawElementsInstanced";
        } else {
            extension = extensions.get("ANGLE_instanced_arrays");
            methodName = "drawElementsInstancedANGLE";
            if (extension === null) {
                console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                return;
            }
        }
        extension[methodName](mode, count, type, start * bytesPerElement, primcount);
        info.update(count, mode, primcount);
    };
    var isWebGL2 = capabilities.isWebGL2;
    var mode;
    var type, bytesPerElement;
    //
    this.setMode = setMode;
    this.setIndex = setIndex;
    this.render = render;
    this.renderInstances = renderInstances;
}
function $b383cde4e0574ff6$var$WebGLInfo(gl) {
    var update = function update(count, mode, instanceCount) {
        render.calls++;
        switch(mode){
            case 4:
                render.triangles += instanceCount * (count / 3);
                break;
            case 1:
                render.lines += instanceCount * (count / 2);
                break;
            case 3:
                render.lines += instanceCount * (count - 1);
                break;
            case 2:
                render.lines += instanceCount * count;
                break;
            case 0:
                render.points += instanceCount * count;
                break;
            default:
                console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
                break;
        }
    };
    var reset = function reset() {
        render.frame++;
        render.calls = 0;
        render.triangles = 0;
        render.points = 0;
        render.lines = 0;
    };
    var memory = {
        geometries: 0,
        textures: 0
    };
    var render = {
        frame: 0,
        calls: 0,
        triangles: 0,
        points: 0,
        lines: 0
    };
    return {
        memory: memory,
        render: render,
        programs: null,
        autoReset: true,
        reset: reset,
        update: update
    };
}
var $b383cde4e0574ff6$export$e38bf4541665bbbd = /*#__PURE__*/ function(Texture) {
    "use strict";
    (0, $gQI4D.default)(DataTexture2DArray, Texture);
    var _super = (0, $a0Xbx.default)(DataTexture2DArray);
    function DataTexture2DArray() {
        var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, width = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, height = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, depth = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
        (0, $dnGTK.default)(this, DataTexture2DArray);
        var _this;
        _this = _super.call(this, null);
        _this.image = {
            data: data,
            width: width,
            height: height,
            depth: depth
        };
        _this.magFilter = $b383cde4e0574ff6$export$727aa5ec3fe39bf0;
        _this.minFilter = $b383cde4e0574ff6$export$727aa5ec3fe39bf0;
        _this.wrapR = $b383cde4e0574ff6$export$9d9334239a5a5e06;
        _this.generateMipmaps = false;
        _this.flipY = false;
        _this.unpackAlignment = 1;
        _this.needsUpdate = true;
        return _this;
    }
    return DataTexture2DArray;
}($b383cde4e0574ff6$export$5431306cf43de24a);
$b383cde4e0574ff6$export$e38bf4541665bbbd.prototype.isDataTexture2DArray = true;
function $b383cde4e0574ff6$var$numericalSort(a, b) {
    return a[0] - b[0];
}
function $b383cde4e0574ff6$var$absNumericalSort(a, b) {
    return Math.abs(b[1]) - Math.abs(a[1]);
}
function $b383cde4e0574ff6$var$denormalize(morph, attribute) {
    var denominator = 1;
    var array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;
    if (array instanceof Int8Array) denominator = 127;
    else if (array instanceof Int16Array) denominator = 32767;
    else if (array instanceof Int32Array) denominator = 2147483647;
    else console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ", array);
    morph.divideScalar(denominator);
}
function $b383cde4e0574ff6$var$WebGLMorphtargets(gl, capabilities, textures) {
    var update = function update(object, geometry, material, program) {
        var objectInfluences = object.morphTargetInfluences;
        if (capabilities.isWebGL2 === true) {
            // instead of using attributes, the WebGL 2 code path encodes morph targets
            // into an array of data textures. Each layer represents a single morph target.
            var numberOfMorphTargets = geometry.morphAttributes.position.length;
            var entry = morphTextures.get(geometry);
            if (entry === undefined || entry.count !== numberOfMorphTargets) {
                if (entry !== undefined) entry.texture.dispose();
                var hasMorphNormals = geometry.morphAttributes.normal !== undefined;
                var morphTargets = geometry.morphAttributes.position;
                var morphNormals = geometry.morphAttributes.normal || [];
                var numberOfVertices = geometry.attributes.position.count;
                var numberOfVertexData = hasMorphNormals === true ? 2 : 1; // (v,n) vs. (v)
                var width = numberOfVertices * numberOfVertexData;
                var height = 1;
                if (width > capabilities.maxTextureSize) {
                    height = Math.ceil(width / capabilities.maxTextureSize);
                    width = capabilities.maxTextureSize;
                }
                var buffer = new Float32Array(width * height * 4 * numberOfMorphTargets);
                var texture = new $b383cde4e0574ff6$export$e38bf4541665bbbd(buffer, width, height, numberOfMorphTargets);
                texture.format = $b383cde4e0574ff6$export$3f8bb04b555a363c; // using RGBA since RGB might be emulated (and is thus slower)
                texture.type = $b383cde4e0574ff6$export$f6d331659b644596;
                // fill buffer
                var vertexDataStride = numberOfVertexData * 4;
                for(var i = 0; i < numberOfMorphTargets; i++){
                    var morphTarget = morphTargets[i];
                    var morphNormal = morphNormals[i];
                    var offset = width * height * 4 * i;
                    for(var j = 0; j < morphTarget.count; j++){
                        morph.fromBufferAttribute(morphTarget, j);
                        if (morphTarget.normalized === true) $b383cde4e0574ff6$var$denormalize(morph, morphTarget);
                        var stride = j * vertexDataStride;
                        buffer[offset + stride + 0] = morph.x;
                        buffer[offset + stride + 1] = morph.y;
                        buffer[offset + stride + 2] = morph.z;
                        buffer[offset + stride + 3] = 0;
                        if (hasMorphNormals === true) {
                            morph.fromBufferAttribute(morphNormal, j);
                            if (morphNormal.normalized === true) $b383cde4e0574ff6$var$denormalize(morph, morphNormal);
                            buffer[offset + stride + 4] = morph.x;
                            buffer[offset + stride + 5] = morph.y;
                            buffer[offset + stride + 6] = morph.z;
                            buffer[offset + stride + 7] = 0;
                        }
                    }
                }
                entry = {
                    count: numberOfMorphTargets,
                    texture: texture,
                    size: new $b383cde4e0574ff6$export$c977b3e384af9ae1(width, height)
                };
                morphTextures.set(geometry, entry);
            }
            //
            var morphInfluencesSum = 0;
            for(var i1 = 0; i1 < objectInfluences.length; i1++)morphInfluencesSum += objectInfluences[i1];
            var morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
            program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
            program.getUniforms().setValue(gl, "morphTargetInfluences", objectInfluences);
            program.getUniforms().setValue(gl, "morphTargetsTexture", entry.texture, textures);
            program.getUniforms().setValue(gl, "morphTargetsTextureSize", entry.size);
        } else {
            // When object doesn't have morph target influences defined, we treat it as a 0-length array
            // This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
            var length = objectInfluences === undefined ? 0 : objectInfluences.length;
            var influences = influencesList[geometry.id];
            if (influences === undefined || influences.length !== length) {
                // initialise list
                influences = [];
                for(var i2 = 0; i2 < length; i2++)influences[i2] = [
                    i2,
                    0
                ];
                influencesList[geometry.id] = influences;
            }
            // Collect influences
            for(var i3 = 0; i3 < length; i3++){
                var influence = influences[i3];
                influence[0] = i3;
                influence[1] = objectInfluences[i3];
            }
            influences.sort($b383cde4e0574ff6$var$absNumericalSort);
            for(var i4 = 0; i4 < 8; i4++)if (i4 < length && influences[i4][1]) {
                workInfluences[i4][0] = influences[i4][0];
                workInfluences[i4][1] = influences[i4][1];
            } else {
                workInfluences[i4][0] = Number.MAX_SAFE_INTEGER;
                workInfluences[i4][1] = 0;
            }
            workInfluences.sort($b383cde4e0574ff6$var$numericalSort);
            var morphTargets1 = geometry.morphAttributes.position;
            var morphNormals1 = geometry.morphAttributes.normal;
            var morphInfluencesSum1 = 0;
            for(var i5 = 0; i5 < 8; i5++){
                var influence1 = workInfluences[i5];
                var index = influence1[0];
                var value = influence1[1];
                if (index !== Number.MAX_SAFE_INTEGER && value) {
                    if (morphTargets1 && geometry.getAttribute("morphTarget" + i5) !== morphTargets1[index]) geometry.setAttribute("morphTarget" + i5, morphTargets1[index]);
                    if (morphNormals1 && geometry.getAttribute("morphNormal" + i5) !== morphNormals1[index]) geometry.setAttribute("morphNormal" + i5, morphNormals1[index]);
                    morphInfluences[i5] = value;
                    morphInfluencesSum1 += value;
                } else {
                    if (morphTargets1 && geometry.hasAttribute("morphTarget" + i5) === true) geometry.deleteAttribute("morphTarget" + i5);
                    if (morphNormals1 && geometry.hasAttribute("morphNormal" + i5) === true) geometry.deleteAttribute("morphNormal" + i5);
                    morphInfluences[i5] = 0;
                }
            }
            // GLSL shader uses formula baseinfluence * base + sum(target * influence)
            // This allows us to switch between absolute morphs and relative morphs without changing shader code
            // When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
            var morphBaseInfluence1 = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum1;
            program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence1);
            program.getUniforms().setValue(gl, "morphTargetInfluences", morphInfluences);
        }
    };
    var influencesList = {};
    var morphInfluences = new Float32Array(8);
    var morphTextures = new WeakMap();
    var morph = new $b383cde4e0574ff6$export$64b5c384219d3699();
    var workInfluences = [];
    for(var i = 0; i < 8; i++)workInfluences[i] = [
        i,
        0
    ];
    return {
        update: update
    };
}
function $b383cde4e0574ff6$var$WebGLObjects(gl, geometries, attributes, info) {
    var update = function update(object) {
        var frame = info.render.frame;
        var geometry = object.geometry;
        var buffergeometry = geometries.get(object, geometry);
        // Update once per frame
        if (updateMap.get(buffergeometry) !== frame) {
            geometries.update(buffergeometry);
            updateMap.set(buffergeometry, frame);
        }
        if (object.isInstancedMesh) {
            if (object.hasEventListener("dispose", onInstancedMeshDispose) === false) object.addEventListener("dispose", onInstancedMeshDispose);
            attributes.update(object.instanceMatrix, 34962);
            if (object.instanceColor !== null) attributes.update(object.instanceColor, 34962);
        }
        return buffergeometry;
    };
    var dispose = function dispose() {
        updateMap = new WeakMap();
    };
    var updateMap = new WeakMap();
    function onInstancedMeshDispose(event) {
        var instancedMesh = event.target;
        instancedMesh.removeEventListener("dispose", onInstancedMeshDispose);
        attributes.remove(instancedMesh.instanceMatrix);
        if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
    }
    return {
        update: update,
        dispose: dispose
    };
}
var $b383cde4e0574ff6$export$ef03cdc98340bab4 = /*#__PURE__*/ function(Texture) {
    "use strict";
    (0, $gQI4D.default)(DataTexture3D, Texture);
    var _super = (0, $a0Xbx.default)(DataTexture3D);
    function DataTexture3D() {
        var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, width = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, height = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, depth = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
        (0, $dnGTK.default)(this, DataTexture3D);
        var _this;
        _this = _super.call(this, null);
        _this.image = {
            data: data,
            width: width,
            height: height,
            depth: depth
        };
        _this.magFilter = $b383cde4e0574ff6$export$727aa5ec3fe39bf0;
        _this.minFilter = $b383cde4e0574ff6$export$727aa5ec3fe39bf0;
        _this.wrapR = $b383cde4e0574ff6$export$9d9334239a5a5e06;
        _this.generateMipmaps = false;
        _this.flipY = false;
        _this.unpackAlignment = 1;
        _this.needsUpdate = true;
        return _this;
    }
    return DataTexture3D;
}($b383cde4e0574ff6$export$5431306cf43de24a);
$b383cde4e0574ff6$export$ef03cdc98340bab4.prototype.isDataTexture3D = true;
/**
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [textures] )
 *
 * 		uploads a uniform value(s)
 *  	the 'textures' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (textures factorizations):
 *
 * .upload( gl, seq, values, textures )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (textures factorizations):
 *
 * .setValue( gl, name, value, textures )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */ var $b383cde4e0574ff6$var$emptyTexture = new $b383cde4e0574ff6$export$5431306cf43de24a();
var $b383cde4e0574ff6$var$emptyTexture2dArray = new $b383cde4e0574ff6$export$e38bf4541665bbbd();
var $b383cde4e0574ff6$var$emptyTexture3d = new $b383cde4e0574ff6$export$ef03cdc98340bab4();
var $b383cde4e0574ff6$var$emptyCubeTexture = new $b383cde4e0574ff6$export$ee2e5a18258a4049();
// --- Utilities ---
// Array Caches (provide typed arrays for temporary by size)
var $b383cde4e0574ff6$var$arrayCacheF32 = [];
var $b383cde4e0574ff6$var$arrayCacheI32 = [];
// Float32Array caches used for uploading Matrix uniforms
var $b383cde4e0574ff6$var$mat4array = new Float32Array(16);
var $b383cde4e0574ff6$var$mat3array = new Float32Array(9);
var $b383cde4e0574ff6$var$mat2array = new Float32Array(4);
// Flattening for arrays of vectors and matrices
function $b383cde4e0574ff6$var$flatten(array, nBlocks, blockSize) {
    var firstElem = array[0];
    if (firstElem <= 0 || firstElem > 0) return array;
    // unoptimized: ! isNaN( firstElem )
    // see http://jacksondunstan.com/articles/983
    var n = nBlocks * blockSize;
    var r = $b383cde4e0574ff6$var$arrayCacheF32[n];
    if (r === undefined) {
        r = new Float32Array(n);
        $b383cde4e0574ff6$var$arrayCacheF32[n] = r;
    }
    if (nBlocks !== 0) {
        firstElem.toArray(r, 0);
        for(var i = 1, offset = 0; i !== nBlocks; ++i){
            offset += blockSize;
            array[i].toArray(r, offset);
        }
    }
    return r;
}
function $b383cde4e0574ff6$var$arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    for(var i = 0, l = a.length; i < l; i++){
        if (a[i] !== b[i]) return false;
    }
    return true;
}
function $b383cde4e0574ff6$var$copyArray(a, b) {
    for(var i = 0, l = b.length; i < l; i++)a[i] = b[i];
}
// Texture unit allocation
function $b383cde4e0574ff6$var$allocTexUnits(textures, n) {
    var r = $b383cde4e0574ff6$var$arrayCacheI32[n];
    if (r === undefined) {
        r = new Int32Array(n);
        $b383cde4e0574ff6$var$arrayCacheI32[n] = r;
    }
    for(var i = 0; i !== n; ++i)r[i] = textures.allocateTextureUnit();
    return r;
}
// --- Setters ---
// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.
// Single scalar
function $b383cde4e0574ff6$var$setValueV1f(gl, v) {
    var cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1f(this.addr, v);
    cache[0] = v;
}
// Single float vector (from flat array or THREE.VectorN)
function $b383cde4e0574ff6$var$setValueV2f(gl, v) {
    var cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y) {
            gl.uniform2f(this.addr, v.x, v.y);
            cache[0] = v.x;
            cache[1] = v.y;
        }
    } else {
        if ($b383cde4e0574ff6$var$arraysEqual(cache, v)) return;
        gl.uniform2fv(this.addr, v);
        $b383cde4e0574ff6$var$copyArray(cache, v);
    }
}
function $b383cde4e0574ff6$var$setValueV3f(gl, v) {
    var cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
            gl.uniform3f(this.addr, v.x, v.y, v.z);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
        }
    } else if (v.r !== undefined) {
        if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
            gl.uniform3f(this.addr, v.r, v.g, v.b);
            cache[0] = v.r;
            cache[1] = v.g;
            cache[2] = v.b;
        }
    } else {
        if ($b383cde4e0574ff6$var$arraysEqual(cache, v)) return;
        gl.uniform3fv(this.addr, v);
        $b383cde4e0574ff6$var$copyArray(cache, v);
    }
}
function $b383cde4e0574ff6$var$setValueV4f(gl, v) {
    var cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
            gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
            cache[3] = v.w;
        }
    } else {
        if ($b383cde4e0574ff6$var$arraysEqual(cache, v)) return;
        gl.uniform4fv(this.addr, v);
        $b383cde4e0574ff6$var$copyArray(cache, v);
    }
}
// Single matrix (from flat array or THREE.MatrixN)
function $b383cde4e0574ff6$var$setValueM2(gl, v) {
    var cache = this.cache;
    var elements = v.elements;
    if (elements === undefined) {
        if ($b383cde4e0574ff6$var$arraysEqual(cache, v)) return;
        gl.uniformMatrix2fv(this.addr, false, v);
        $b383cde4e0574ff6$var$copyArray(cache, v);
    } else {
        if ($b383cde4e0574ff6$var$arraysEqual(cache, elements)) return;
        $b383cde4e0574ff6$var$mat2array.set(elements);
        gl.uniformMatrix2fv(this.addr, false, $b383cde4e0574ff6$var$mat2array);
        $b383cde4e0574ff6$var$copyArray(cache, elements);
    }
}
function $b383cde4e0574ff6$var$setValueM3(gl, v) {
    var cache = this.cache;
    var elements = v.elements;
    if (elements === undefined) {
        if ($b383cde4e0574ff6$var$arraysEqual(cache, v)) return;
        gl.uniformMatrix3fv(this.addr, false, v);
        $b383cde4e0574ff6$var$copyArray(cache, v);
    } else {
        if ($b383cde4e0574ff6$var$arraysEqual(cache, elements)) return;
        $b383cde4e0574ff6$var$mat3array.set(elements);
        gl.uniformMatrix3fv(this.addr, false, $b383cde4e0574ff6$var$mat3array);
        $b383cde4e0574ff6$var$copyArray(cache, elements);
    }
}
function $b383cde4e0574ff6$var$setValueM4(gl, v) {
    var cache = this.cache;
    var elements = v.elements;
    if (elements === undefined) {
        if ($b383cde4e0574ff6$var$arraysEqual(cache, v)) return;
        gl.uniformMatrix4fv(this.addr, false, v);
        $b383cde4e0574ff6$var$copyArray(cache, v);
    } else {
        if ($b383cde4e0574ff6$var$arraysEqual(cache, elements)) return;
        $b383cde4e0574ff6$var$mat4array.set(elements);
        gl.uniformMatrix4fv(this.addr, false, $b383cde4e0574ff6$var$mat4array);
        $b383cde4e0574ff6$var$copyArray(cache, elements);
    }
}
// Single integer / boolean
function $b383cde4e0574ff6$var$setValueV1i(gl, v) {
    var cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1i(this.addr, v);
    cache[0] = v;
}
// Single integer / boolean vector (from flat array)
function $b383cde4e0574ff6$var$setValueV2i(gl, v) {
    var cache = this.cache;
    if ($b383cde4e0574ff6$var$arraysEqual(cache, v)) return;
    gl.uniform2iv(this.addr, v);
    $b383cde4e0574ff6$var$copyArray(cache, v);
}
function $b383cde4e0574ff6$var$setValueV3i(gl, v) {
    var cache = this.cache;
    if ($b383cde4e0574ff6$var$arraysEqual(cache, v)) return;
    gl.uniform3iv(this.addr, v);
    $b383cde4e0574ff6$var$copyArray(cache, v);
}
function $b383cde4e0574ff6$var$setValueV4i(gl, v) {
    var cache = this.cache;
    if ($b383cde4e0574ff6$var$arraysEqual(cache, v)) return;
    gl.uniform4iv(this.addr, v);
    $b383cde4e0574ff6$var$copyArray(cache, v);
}
// Single unsigned integer
function $b383cde4e0574ff6$var$setValueV1ui(gl, v) {
    var cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1ui(this.addr, v);
    cache[0] = v;
}
// Single unsigned integer vector (from flat array)
function $b383cde4e0574ff6$var$setValueV2ui(gl, v) {
    var cache = this.cache;
    if ($b383cde4e0574ff6$var$arraysEqual(cache, v)) return;
    gl.uniform2uiv(this.addr, v);
    $b383cde4e0574ff6$var$copyArray(cache, v);
}
function $b383cde4e0574ff6$var$setValueV3ui(gl, v) {
    var cache = this.cache;
    if ($b383cde4e0574ff6$var$arraysEqual(cache, v)) return;
    gl.uniform3uiv(this.addr, v);
    $b383cde4e0574ff6$var$copyArray(cache, v);
}
function $b383cde4e0574ff6$var$setValueV4ui(gl, v) {
    var cache = this.cache;
    if ($b383cde4e0574ff6$var$arraysEqual(cache, v)) return;
    gl.uniform4uiv(this.addr, v);
    $b383cde4e0574ff6$var$copyArray(cache, v);
}
// Single texture (2D / Cube)
function $b383cde4e0574ff6$var$setValueT1(gl, v, textures) {
    var cache = this.cache;
    var unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.safeSetTexture2D(v || $b383cde4e0574ff6$var$emptyTexture, unit);
}
function $b383cde4e0574ff6$var$setValueT3D1(gl, v, textures) {
    var cache = this.cache;
    var unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTexture3D(v || $b383cde4e0574ff6$var$emptyTexture3d, unit);
}
function $b383cde4e0574ff6$var$setValueT6(gl, v, textures) {
    var cache = this.cache;
    var unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.safeSetTextureCube(v || $b383cde4e0574ff6$var$emptyCubeTexture, unit);
}
function $b383cde4e0574ff6$var$setValueT2DArray1(gl, v, textures) {
    var cache = this.cache;
    var unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTexture2DArray(v || $b383cde4e0574ff6$var$emptyTexture2dArray, unit);
}
// Helper to pick the right setter for the singular case
function $b383cde4e0574ff6$var$getSingularSetter(type) {
    switch(type){
        case 0x1406:
            return $b383cde4e0574ff6$var$setValueV1f; // FLOAT
        case 0x8b50:
            return $b383cde4e0574ff6$var$setValueV2f; // _VEC2
        case 0x8b51:
            return $b383cde4e0574ff6$var$setValueV3f; // _VEC3
        case 0x8b52:
            return $b383cde4e0574ff6$var$setValueV4f; // _VEC4
        case 0x8b5a:
            return $b383cde4e0574ff6$var$setValueM2; // _MAT2
        case 0x8b5b:
            return $b383cde4e0574ff6$var$setValueM3; // _MAT3
        case 0x8b5c:
            return $b383cde4e0574ff6$var$setValueM4; // _MAT4
        case 0x1404:
        case 0x8b56:
            return $b383cde4e0574ff6$var$setValueV1i; // INT, BOOL
        case 0x8b53:
        case 0x8b57:
            return $b383cde4e0574ff6$var$setValueV2i; // _VEC2
        case 0x8b54:
        case 0x8b58:
            return $b383cde4e0574ff6$var$setValueV3i; // _VEC3
        case 0x8b55:
        case 0x8b59:
            return $b383cde4e0574ff6$var$setValueV4i; // _VEC4
        case 0x1405:
            return $b383cde4e0574ff6$var$setValueV1ui; // UINT
        case 0x8dc6:
            return $b383cde4e0574ff6$var$setValueV2ui; // _VEC2
        case 0x8dc7:
            return $b383cde4e0574ff6$var$setValueV3ui; // _VEC3
        case 0x8dc8:
            return $b383cde4e0574ff6$var$setValueV4ui; // _VEC4
        case 0x8b5e:
        case 0x8d66:
        case 0x8dca:
        case 0x8dd2:
        case 0x8b62:
            return $b383cde4e0574ff6$var$setValueT1;
        case 0x8b5f:
        case 0x8dcb:
        case 0x8dd3:
            return $b383cde4e0574ff6$var$setValueT3D1;
        case 0x8b60:
        case 0x8dcc:
        case 0x8dd4:
        case 0x8dc5:
            return $b383cde4e0574ff6$var$setValueT6;
        case 0x8dc1:
        case 0x8dcf:
        case 0x8dd7:
        case 0x8dc4:
            return $b383cde4e0574ff6$var$setValueT2DArray1;
    }
}
// Array of scalars
function $b383cde4e0574ff6$var$setValueV1fArray(gl, v) {
    gl.uniform1fv(this.addr, v);
}
// Array of vectors (from flat array or array of THREE.VectorN)
function $b383cde4e0574ff6$var$setValueV2fArray(gl, v) {
    var data = $b383cde4e0574ff6$var$flatten(v, this.size, 2);
    gl.uniform2fv(this.addr, data);
}
function $b383cde4e0574ff6$var$setValueV3fArray(gl, v) {
    var data = $b383cde4e0574ff6$var$flatten(v, this.size, 3);
    gl.uniform3fv(this.addr, data);
}
function $b383cde4e0574ff6$var$setValueV4fArray(gl, v) {
    var data = $b383cde4e0574ff6$var$flatten(v, this.size, 4);
    gl.uniform4fv(this.addr, data);
}
// Array of matrices (from flat array or array of THREE.MatrixN)
function $b383cde4e0574ff6$var$setValueM2Array(gl, v) {
    var data = $b383cde4e0574ff6$var$flatten(v, this.size, 4);
    gl.uniformMatrix2fv(this.addr, false, data);
}
function $b383cde4e0574ff6$var$setValueM3Array(gl, v) {
    var data = $b383cde4e0574ff6$var$flatten(v, this.size, 9);
    gl.uniformMatrix3fv(this.addr, false, data);
}
function $b383cde4e0574ff6$var$setValueM4Array(gl, v) {
    var data = $b383cde4e0574ff6$var$flatten(v, this.size, 16);
    gl.uniformMatrix4fv(this.addr, false, data);
}
// Array of integer / boolean
function $b383cde4e0574ff6$var$setValueV1iArray(gl, v) {
    gl.uniform1iv(this.addr, v);
}
// Array of integer / boolean vectors (from flat array)
function $b383cde4e0574ff6$var$setValueV2iArray(gl, v) {
    gl.uniform2iv(this.addr, v);
}
function $b383cde4e0574ff6$var$setValueV3iArray(gl, v) {
    gl.uniform3iv(this.addr, v);
}
function $b383cde4e0574ff6$var$setValueV4iArray(gl, v) {
    gl.uniform4iv(this.addr, v);
}
// Array of unsigned integer
function $b383cde4e0574ff6$var$setValueV1uiArray(gl, v) {
    gl.uniform1uiv(this.addr, v);
}
// Array of unsigned integer vectors (from flat array)
function $b383cde4e0574ff6$var$setValueV2uiArray(gl, v) {
    gl.uniform2uiv(this.addr, v);
}
function $b383cde4e0574ff6$var$setValueV3uiArray(gl, v) {
    gl.uniform3uiv(this.addr, v);
}
function $b383cde4e0574ff6$var$setValueV4uiArray(gl, v) {
    gl.uniform4uiv(this.addr, v);
}
// Array of textures (2D / Cube)
function $b383cde4e0574ff6$var$setValueT1Array(gl, v, textures) {
    var n = v.length;
    var units = $b383cde4e0574ff6$var$allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for(var i = 0; i !== n; ++i)textures.safeSetTexture2D(v[i] || $b383cde4e0574ff6$var$emptyTexture, units[i]);
}
function $b383cde4e0574ff6$var$setValueT6Array(gl, v, textures) {
    var n = v.length;
    var units = $b383cde4e0574ff6$var$allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for(var i = 0; i !== n; ++i)textures.safeSetTextureCube(v[i] || $b383cde4e0574ff6$var$emptyCubeTexture, units[i]);
}
// Helper to pick the right setter for a pure (bottom-level) array
function $b383cde4e0574ff6$var$getPureArraySetter(type) {
    switch(type){
        case 0x1406:
            return $b383cde4e0574ff6$var$setValueV1fArray; // FLOAT
        case 0x8b50:
            return $b383cde4e0574ff6$var$setValueV2fArray; // _VEC2
        case 0x8b51:
            return $b383cde4e0574ff6$var$setValueV3fArray; // _VEC3
        case 0x8b52:
            return $b383cde4e0574ff6$var$setValueV4fArray; // _VEC4
        case 0x8b5a:
            return $b383cde4e0574ff6$var$setValueM2Array; // _MAT2
        case 0x8b5b:
            return $b383cde4e0574ff6$var$setValueM3Array; // _MAT3
        case 0x8b5c:
            return $b383cde4e0574ff6$var$setValueM4Array; // _MAT4
        case 0x1404:
        case 0x8b56:
            return $b383cde4e0574ff6$var$setValueV1iArray; // INT, BOOL
        case 0x8b53:
        case 0x8b57:
            return $b383cde4e0574ff6$var$setValueV2iArray; // _VEC2
        case 0x8b54:
        case 0x8b58:
            return $b383cde4e0574ff6$var$setValueV3iArray; // _VEC3
        case 0x8b55:
        case 0x8b59:
            return $b383cde4e0574ff6$var$setValueV4iArray; // _VEC4
        case 0x1405:
            return $b383cde4e0574ff6$var$setValueV1uiArray; // UINT
        case 0x8dc6:
            return $b383cde4e0574ff6$var$setValueV2uiArray; // _VEC2
        case 0x8dc7:
            return $b383cde4e0574ff6$var$setValueV3uiArray; // _VEC3
        case 0x8dc8:
            return $b383cde4e0574ff6$var$setValueV4uiArray; // _VEC4
        case 0x8b5e:
        case 0x8d66:
        case 0x8dca:
        case 0x8dd2:
        case 0x8b62:
            return $b383cde4e0574ff6$var$setValueT1Array;
        case 0x8b60:
        case 0x8dcc:
        case 0x8dd4:
        case 0x8dc5:
            return $b383cde4e0574ff6$var$setValueT6Array;
    }
}
// --- Uniform Classes ---
function $b383cde4e0574ff6$var$SingleUniform(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.setValue = $b383cde4e0574ff6$var$getSingularSetter(activeInfo.type);
// this.path = activeInfo.name; // DEBUG
}
function $b383cde4e0574ff6$var$PureArrayUniform(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.size = activeInfo.size;
    this.setValue = $b383cde4e0574ff6$var$getPureArraySetter(activeInfo.type);
// this.path = activeInfo.name; // DEBUG
}
$b383cde4e0574ff6$var$PureArrayUniform.prototype.updateCache = function(data) {
    var cache = this.cache;
    if (data instanceof Float32Array && cache.length !== data.length) this.cache = new Float32Array(data.length);
    $b383cde4e0574ff6$var$copyArray(cache, data);
};
function $b383cde4e0574ff6$var$StructuredUniform(id) {
    this.id = id;
    this.seq = [];
    this.map = {};
}
$b383cde4e0574ff6$var$StructuredUniform.prototype.setValue = function(gl, value, textures) {
    var seq = this.seq;
    for(var i = 0, n = seq.length; i !== n; ++i){
        var u = seq[i];
        u.setValue(gl, value[u.id], textures);
    }
};
// --- Top-level ---
// Parser - builds up the property tree from the path strings
var $b383cde4e0574ff6$var$RePathPart = /(\w+)(\])?(\[|\.)?/g;
// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.
function $b383cde4e0574ff6$var$addUniform(container, uniformObject) {
    container.seq.push(uniformObject);
    container.map[uniformObject.id] = uniformObject;
}
function $b383cde4e0574ff6$var$parseUniform(activeInfo, addr, container) {
    var path = activeInfo.name, pathLength = path.length;
    // reset RegExp object, because of the early exit of a previous run
    $b383cde4e0574ff6$var$RePathPart.lastIndex = 0;
    while(true){
        var match = $b383cde4e0574ff6$var$RePathPart.exec(path), matchEnd = $b383cde4e0574ff6$var$RePathPart.lastIndex;
        var id = match[1];
        var idIsIndex = match[2] === "]", subscript = match[3];
        if (idIsIndex) id = id | 0; // convert to integer
        if (subscript === undefined || subscript === "[" && matchEnd + 2 === pathLength) {
            // bare name or "pure" bottom-level array "[0]" suffix
            $b383cde4e0574ff6$var$addUniform(container, subscript === undefined ? new $b383cde4e0574ff6$var$SingleUniform(id, activeInfo, addr) : new $b383cde4e0574ff6$var$PureArrayUniform(id, activeInfo, addr));
            break;
        } else {
            // step into inner node / create it in case it doesn't exist
            var map = container.map;
            var next = map[id];
            if (next === undefined) {
                next = new $b383cde4e0574ff6$var$StructuredUniform(id);
                $b383cde4e0574ff6$var$addUniform(container, next);
            }
            container = next;
        }
    }
}
// Root Container
function $b383cde4e0574ff6$var$WebGLUniforms(gl, program) {
    this.seq = [];
    this.map = {};
    var n = gl.getProgramParameter(program, 35718);
    for(var i = 0; i < n; ++i){
        var info = gl.getActiveUniform(program, i), addr = gl.getUniformLocation(program, info.name);
        $b383cde4e0574ff6$var$parseUniform(info, addr, this);
    }
}
$b383cde4e0574ff6$var$WebGLUniforms.prototype.setValue = function(gl, name, value, textures) {
    var u = this.map[name];
    if (u !== undefined) u.setValue(gl, value, textures);
};
$b383cde4e0574ff6$var$WebGLUniforms.prototype.setOptional = function(gl, object, name) {
    var v = object[name];
    if (v !== undefined) this.setValue(gl, name, v);
};
// Static interface
$b383cde4e0574ff6$var$WebGLUniforms.upload = function(gl, seq, values, textures) {
    for(var i = 0, n = seq.length; i !== n; ++i){
        var u = seq[i], v = values[u.id];
        if (v.needsUpdate !== false) // note: always updating when .needsUpdate is undefined
        u.setValue(gl, v.value, textures);
    }
};
$b383cde4e0574ff6$var$WebGLUniforms.seqWithValue = function(seq, values) {
    var r = [];
    for(var i = 0, n = seq.length; i !== n; ++i){
        var u = seq[i];
        if (u.id in values) r.push(u);
    }
    return r;
};
function $b383cde4e0574ff6$var$WebGLShader(gl, type, string) {
    var shader = gl.createShader(type);
    gl.shaderSource(shader, string);
    gl.compileShader(shader);
    return shader;
}
var $b383cde4e0574ff6$var$programIdCount = 0;
function $b383cde4e0574ff6$var$addLineNumbers(string) {
    var lines = string.split("\n");
    for(var i = 0; i < lines.length; i++)lines[i] = i + 1 + ": " + lines[i];
    return lines.join("\n");
}
function $b383cde4e0574ff6$var$getEncodingComponents(encoding) {
    switch(encoding){
        case $b383cde4e0574ff6$export$7207336e4151a112:
            return [
                "Linear",
                "( value )"
            ];
        case $b383cde4e0574ff6$export$f32388edbb32674:
            return [
                "sRGB",
                "( value )"
            ];
        case $b383cde4e0574ff6$export$3be4c466a12b5dcf:
            return [
                "RGBE",
                "( value )"
            ];
        case $b383cde4e0574ff6$export$2c4bdfd76b188654:
            return [
                "RGBM",
                "( value, 7.0 )"
            ];
        case $b383cde4e0574ff6$export$48a0051d6a5a9b9:
            return [
                "RGBM",
                "( value, 16.0 )"
            ];
        case $b383cde4e0574ff6$export$ca2f89b13b49d951:
            return [
                "RGBD",
                "( value, 256.0 )"
            ];
        case $b383cde4e0574ff6$export$eaab32c1bcea1817:
            return [
                "Gamma",
                "( value, float( GAMMA_FACTOR ) )"
            ];
        case $b383cde4e0574ff6$export$8d4cbbeb1eea9f67:
            return [
                "LogLuv",
                "( value )"
            ];
        default:
            console.warn("THREE.WebGLProgram: Unsupported encoding:", encoding);
            return [
                "Linear",
                "( value )"
            ];
    }
}
function $b383cde4e0574ff6$var$getShaderErrors(gl, shader, type) {
    var status = gl.getShaderParameter(shader, 35713);
    var errors = gl.getShaderInfoLog(shader).trim();
    if (status && errors === "") return "";
    // --enable-privileged-webgl-extension
    // console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
    return type.toUpperCase() + "\n\n" + errors + "\n\n" + $b383cde4e0574ff6$var$addLineNumbers(gl.getShaderSource(shader));
}
function $b383cde4e0574ff6$var$getTexelDecodingFunction(functionName, encoding) {
    var components = $b383cde4e0574ff6$var$getEncodingComponents(encoding);
    return "vec4 " + functionName + "( vec4 value ) { return " + components[0] + "ToLinear" + components[1] + "; }";
}
function $b383cde4e0574ff6$var$getTexelEncodingFunction(functionName, encoding) {
    var components = $b383cde4e0574ff6$var$getEncodingComponents(encoding);
    return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[0] + components[1] + "; }";
}
function $b383cde4e0574ff6$var$getToneMappingFunction(functionName, toneMapping) {
    var toneMappingName;
    switch(toneMapping){
        case $b383cde4e0574ff6$export$98f52c2a46c598ca:
            toneMappingName = "Linear";
            break;
        case $b383cde4e0574ff6$export$74b25e54b3bcd548:
            toneMappingName = "Reinhard";
            break;
        case $b383cde4e0574ff6$export$932b3dd283d4a366:
            toneMappingName = "OptimizedCineon";
            break;
        case $b383cde4e0574ff6$export$a0d98fe6d7e4af64:
            toneMappingName = "ACESFilmic";
            break;
        case $b383cde4e0574ff6$export$2c7b09c1e9abfb5e:
            toneMappingName = "Custom";
            break;
        default:
            console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
            toneMappingName = "Linear";
    }
    return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
}
function $b383cde4e0574ff6$var$generateExtensions(parameters) {
    var chunks = [
        parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
        (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
        parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
        (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
    ];
    return chunks.filter($b383cde4e0574ff6$var$filterEmptyLine).join("\n");
}
function $b383cde4e0574ff6$var$generateDefines(defines) {
    var chunks = [];
    for(var name in defines){
        var value = defines[name];
        if (value === false) continue;
        chunks.push("#define " + name + " " + value);
    }
    return chunks.join("\n");
}
function $b383cde4e0574ff6$var$fetchAttributeLocations(gl, program) {
    var attributes = {};
    var n = gl.getProgramParameter(program, 35721);
    for(var i = 0; i < n; i++){
        var info = gl.getActiveAttrib(program, i);
        var name = info.name;
        var locationSize = 1;
        if (info.type === 35674) locationSize = 2;
        if (info.type === 35675) locationSize = 3;
        if (info.type === 35676) locationSize = 4;
        // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
        attributes[name] = {
            type: info.type,
            location: gl.getAttribLocation(program, name),
            locationSize: locationSize
        };
    }
    return attributes;
}
function $b383cde4e0574ff6$var$filterEmptyLine(string) {
    return string !== "";
}
function $b383cde4e0574ff6$var$replaceLightNums(string, parameters) {
    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
}
function $b383cde4e0574ff6$var$replaceClippingPlaneNums(string, parameters) {
    return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
}
// Resolve Includes
var $b383cde4e0574ff6$var$includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
function $b383cde4e0574ff6$var$resolveIncludes(string) {
    return string.replace($b383cde4e0574ff6$var$includePattern, $b383cde4e0574ff6$var$includeReplacer);
}
function $b383cde4e0574ff6$var$includeReplacer(match, include) {
    var string = $b383cde4e0574ff6$export$955f9f2e84c43c8b[include];
    if (string === undefined) throw new Error("Can not resolve #include <" + include + ">");
    return $b383cde4e0574ff6$var$resolveIncludes(string);
}
// Unroll Loops
var $b383cde4e0574ff6$var$deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
var $b383cde4e0574ff6$var$unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function $b383cde4e0574ff6$var$unrollLoops(string) {
    return string.replace($b383cde4e0574ff6$var$unrollLoopPattern, $b383cde4e0574ff6$var$loopReplacer).replace($b383cde4e0574ff6$var$deprecatedUnrollLoopPattern, $b383cde4e0574ff6$var$deprecatedLoopReplacer);
}
function $b383cde4e0574ff6$var$deprecatedLoopReplacer(match, start, end, snippet) {
    console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");
    return $b383cde4e0574ff6$var$loopReplacer(match, start, end, snippet);
}
function $b383cde4e0574ff6$var$loopReplacer(match, start, end, snippet) {
    var string = "";
    for(var i = parseInt(start); i < parseInt(end); i++)string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
    return string;
}
//
function $b383cde4e0574ff6$var$generatePrecision(parameters) {
    var precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";
    if (parameters.precision === "highp") precisionstring += "\n#define HIGH_PRECISION";
    else if (parameters.precision === "mediump") precisionstring += "\n#define MEDIUM_PRECISION";
    else if (parameters.precision === "lowp") precisionstring += "\n#define LOW_PRECISION";
    return precisionstring;
}
function $b383cde4e0574ff6$var$generateShadowMapTypeDefine(parameters) {
    var shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
    if (parameters.shadowMapType === $b383cde4e0574ff6$export$5813f879eee7cd88) shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
    else if (parameters.shadowMapType === $b383cde4e0574ff6$export$a47c4b43a1be34f0) shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
    else if (parameters.shadowMapType === $b383cde4e0574ff6$export$896ae1ade6c829c4) shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
    return shadowMapTypeDefine;
}
function $b383cde4e0574ff6$var$generateEnvMapTypeDefine(parameters) {
    var envMapTypeDefine = "ENVMAP_TYPE_CUBE";
    if (parameters.envMap) switch(parameters.envMapMode){
        case $b383cde4e0574ff6$export$8759762a6477f2c4:
        case $b383cde4e0574ff6$export$dc59f8aed047f61d:
            envMapTypeDefine = "ENVMAP_TYPE_CUBE";
            break;
        case $b383cde4e0574ff6$export$dbf3e70ff37af79:
        case $b383cde4e0574ff6$export$76a9f4355364345c:
            envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
            break;
    }
    return envMapTypeDefine;
}
function $b383cde4e0574ff6$var$generateEnvMapModeDefine(parameters) {
    var envMapModeDefine = "ENVMAP_MODE_REFLECTION";
    if (parameters.envMap) switch(parameters.envMapMode){
        case $b383cde4e0574ff6$export$dc59f8aed047f61d:
        case $b383cde4e0574ff6$export$76a9f4355364345c:
            envMapModeDefine = "ENVMAP_MODE_REFRACTION";
            break;
    }
    return envMapModeDefine;
}
function $b383cde4e0574ff6$var$generateEnvMapBlendingDefine(parameters) {
    var envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
    if (parameters.envMap) switch(parameters.combine){
        case $b383cde4e0574ff6$export$e50ac29801f1774d:
            envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
            break;
        case $b383cde4e0574ff6$export$9f9d94f963c85479:
            envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
            break;
        case $b383cde4e0574ff6$export$e641dc52bc3494aa:
            envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
            break;
    }
    return envMapBlendingDefine;
}
function $b383cde4e0574ff6$var$WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
    // TODO Send this event to Three.js DevTools
    // console.log( 'WebGLProgram', cacheKey );
    var gl = renderer.getContext();
    var defines = parameters.defines;
    var vertexShader = parameters.vertexShader;
    var fragmentShader = parameters.fragmentShader;
    var shadowMapTypeDefine = $b383cde4e0574ff6$var$generateShadowMapTypeDefine(parameters);
    var envMapTypeDefine = $b383cde4e0574ff6$var$generateEnvMapTypeDefine(parameters);
    var envMapModeDefine = $b383cde4e0574ff6$var$generateEnvMapModeDefine(parameters);
    var envMapBlendingDefine = $b383cde4e0574ff6$var$generateEnvMapBlendingDefine(parameters);
    var gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;
    var customExtensions = parameters.isWebGL2 ? "" : $b383cde4e0574ff6$var$generateExtensions(parameters);
    var customDefines = $b383cde4e0574ff6$var$generateDefines(defines);
    var program = gl.createProgram();
    var prefixVertex, prefixFragment;
    var versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
    if (parameters.isRawShaderMaterial) {
        prefixVertex = [
            customDefines
        ].filter($b383cde4e0574ff6$var$filterEmptyLine).join("\n");
        if (prefixVertex.length > 0) prefixVertex += "\n";
        prefixFragment = [
            customExtensions,
            customDefines
        ].filter($b383cde4e0574ff6$var$filterEmptyLine).join("\n");
        if (prefixFragment.length > 0) prefixFragment += "\n";
    } else {
        prefixVertex = [
            $b383cde4e0574ff6$var$generatePrecision(parameters),
            "#define SHADER_NAME " + parameters.shaderName,
            customDefines,
            parameters.instancing ? "#define USE_INSTANCING" : "",
            parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
            parameters.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
            "#define GAMMA_FACTOR " + gammaFactorDefine,
            "#define MAX_BONES " + parameters.maxBones,
            parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
            parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
            parameters.map ? "#define USE_MAP" : "",
            parameters.envMap ? "#define USE_ENVMAP" : "",
            parameters.envMap ? "#define " + envMapModeDefine : "",
            parameters.lightMap ? "#define USE_LIGHTMAP" : "",
            parameters.aoMap ? "#define USE_AOMAP" : "",
            parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
            parameters.bumpMap ? "#define USE_BUMPMAP" : "",
            parameters.normalMap ? "#define USE_NORMALMAP" : "",
            parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
            parameters.normalMap && parameters.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
            parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
            parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
            parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
            parameters.displacementMap && parameters.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "",
            parameters.specularMap ? "#define USE_SPECULARMAP" : "",
            parameters.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "",
            parameters.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "",
            parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
            parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
            parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
            parameters.transmission ? "#define USE_TRANSMISSION" : "",
            parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
            parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
            parameters.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "",
            parameters.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "",
            parameters.vertexTangents ? "#define USE_TANGENT" : "",
            parameters.vertexColors ? "#define USE_COLOR" : "",
            parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
            parameters.vertexUvs ? "#define USE_UV" : "",
            parameters.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
            parameters.flatShading ? "#define FLAT_SHADED" : "",
            parameters.skinning ? "#define USE_SKINNING" : "",
            parameters.useVertexTexture ? "#define BONE_TEXTURE" : "",
            parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
            parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
            parameters.morphTargets && parameters.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
            parameters.morphTargets && parameters.isWebGL2 ? "#define MORPHTARGETS_COUNT " + parameters.morphTargetsCount : "",
            parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
            parameters.flipSided ? "#define FLIP_SIDED" : "",
            parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
            parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
            parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
            parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
            parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
            "uniform mat4 modelMatrix;",
            "uniform mat4 modelViewMatrix;",
            "uniform mat4 projectionMatrix;",
            "uniform mat4 viewMatrix;",
            "uniform mat3 normalMatrix;",
            "uniform vec3 cameraPosition;",
            "uniform bool isOrthographic;",
            "#ifdef USE_INSTANCING",
            "	attribute mat4 instanceMatrix;",
            "#endif",
            "#ifdef USE_INSTANCING_COLOR",
            "	attribute vec3 instanceColor;",
            "#endif",
            "attribute vec3 position;",
            "attribute vec3 normal;",
            "attribute vec2 uv;",
            "#ifdef USE_TANGENT",
            "	attribute vec4 tangent;",
            "#endif",
            "#if defined( USE_COLOR_ALPHA )",
            "	attribute vec4 color;",
            "#elif defined( USE_COLOR )",
            "	attribute vec3 color;",
            "#endif",
            "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
            "	attribute vec3 morphTarget0;",
            "	attribute vec3 morphTarget1;",
            "	attribute vec3 morphTarget2;",
            "	attribute vec3 morphTarget3;",
            "	#ifdef USE_MORPHNORMALS",
            "		attribute vec3 morphNormal0;",
            "		attribute vec3 morphNormal1;",
            "		attribute vec3 morphNormal2;",
            "		attribute vec3 morphNormal3;",
            "	#else",
            "		attribute vec3 morphTarget4;",
            "		attribute vec3 morphTarget5;",
            "		attribute vec3 morphTarget6;",
            "		attribute vec3 morphTarget7;",
            "	#endif",
            "#endif",
            "#ifdef USE_SKINNING",
            "	attribute vec4 skinIndex;",
            "	attribute vec4 skinWeight;",
            "#endif",
            "\n"
        ].filter($b383cde4e0574ff6$var$filterEmptyLine).join("\n");
        prefixFragment = [
            customExtensions,
            $b383cde4e0574ff6$var$generatePrecision(parameters),
            "#define SHADER_NAME " + parameters.shaderName,
            customDefines,
            "#define GAMMA_FACTOR " + gammaFactorDefine,
            parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
            parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
            parameters.map ? "#define USE_MAP" : "",
            parameters.matcap ? "#define USE_MATCAP" : "",
            parameters.envMap ? "#define USE_ENVMAP" : "",
            parameters.envMap ? "#define " + envMapTypeDefine : "",
            parameters.envMap ? "#define " + envMapModeDefine : "",
            parameters.envMap ? "#define " + envMapBlendingDefine : "",
            parameters.lightMap ? "#define USE_LIGHTMAP" : "",
            parameters.aoMap ? "#define USE_AOMAP" : "",
            parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
            parameters.bumpMap ? "#define USE_BUMPMAP" : "",
            parameters.normalMap ? "#define USE_NORMALMAP" : "",
            parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
            parameters.normalMap && parameters.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
            parameters.clearcoat ? "#define USE_CLEARCOAT" : "",
            parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
            parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
            parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
            parameters.specularMap ? "#define USE_SPECULARMAP" : "",
            parameters.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "",
            parameters.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "",
            parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
            parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
            parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
            parameters.alphaTest ? "#define USE_ALPHATEST" : "",
            parameters.sheen ? "#define USE_SHEEN" : "",
            parameters.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "",
            parameters.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "",
            parameters.transmission ? "#define USE_TRANSMISSION" : "",
            parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
            parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
            parameters.vertexTangents ? "#define USE_TANGENT" : "",
            parameters.vertexColors || parameters.instancingColor ? "#define USE_COLOR" : "",
            parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
            parameters.vertexUvs ? "#define USE_UV" : "",
            parameters.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
            parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
            parameters.flatShading ? "#define FLAT_SHADED" : "",
            parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
            parameters.flipSided ? "#define FLIP_SIDED" : "",
            parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
            parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
            parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
            parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "",
            parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
            parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
            (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "",
            "uniform mat4 viewMatrix;",
            "uniform vec3 cameraPosition;",
            "uniform bool isOrthographic;",
            parameters.toneMapping !== $b383cde4e0574ff6$export$9fcb6b4294603b2 ? "#define TONE_MAPPING" : "",
            parameters.toneMapping !== $b383cde4e0574ff6$export$9fcb6b4294603b2 ? $b383cde4e0574ff6$export$955f9f2e84c43c8b["tonemapping_pars_fragment"] : "",
            parameters.toneMapping !== $b383cde4e0574ff6$export$9fcb6b4294603b2 ? $b383cde4e0574ff6$var$getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
            parameters.dithering ? "#define DITHERING" : "",
            parameters.format === $b383cde4e0574ff6$export$7c67423a5ee6f5eb ? "#define OPAQUE" : "",
            $b383cde4e0574ff6$export$955f9f2e84c43c8b["encodings_pars_fragment"],
            parameters.map ? $b383cde4e0574ff6$var$getTexelDecodingFunction("mapTexelToLinear", parameters.mapEncoding) : "",
            parameters.matcap ? $b383cde4e0574ff6$var$getTexelDecodingFunction("matcapTexelToLinear", parameters.matcapEncoding) : "",
            parameters.envMap ? $b383cde4e0574ff6$var$getTexelDecodingFunction("envMapTexelToLinear", parameters.envMapEncoding) : "",
            parameters.emissiveMap ? $b383cde4e0574ff6$var$getTexelDecodingFunction("emissiveMapTexelToLinear", parameters.emissiveMapEncoding) : "",
            parameters.specularColorMap ? $b383cde4e0574ff6$var$getTexelDecodingFunction("specularColorMapTexelToLinear", parameters.specularColorMapEncoding) : "",
            parameters.sheenColorMap ? $b383cde4e0574ff6$var$getTexelDecodingFunction("sheenColorMapTexelToLinear", parameters.sheenColorMapEncoding) : "",
            parameters.lightMap ? $b383cde4e0574ff6$var$getTexelDecodingFunction("lightMapTexelToLinear", parameters.lightMapEncoding) : "",
            $b383cde4e0574ff6$var$getTexelEncodingFunction("linearToOutputTexel", parameters.outputEncoding),
            parameters.depthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
            "\n"
        ].filter($b383cde4e0574ff6$var$filterEmptyLine).join("\n");
    }
    vertexShader = $b383cde4e0574ff6$var$resolveIncludes(vertexShader);
    vertexShader = $b383cde4e0574ff6$var$replaceLightNums(vertexShader, parameters);
    vertexShader = $b383cde4e0574ff6$var$replaceClippingPlaneNums(vertexShader, parameters);
    fragmentShader = $b383cde4e0574ff6$var$resolveIncludes(fragmentShader);
    fragmentShader = $b383cde4e0574ff6$var$replaceLightNums(fragmentShader, parameters);
    fragmentShader = $b383cde4e0574ff6$var$replaceClippingPlaneNums(fragmentShader, parameters);
    vertexShader = $b383cde4e0574ff6$var$unrollLoops(vertexShader);
    fragmentShader = $b383cde4e0574ff6$var$unrollLoops(fragmentShader);
    if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
        // GLSL 3.0 conversion for built-in materials and ShaderMaterial
        versionString = "#version 300 es\n";
        prefixVertex = [
            "precision mediump sampler2DArray;",
            "#define attribute in",
            "#define varying out",
            "#define texture2D texture"
        ].join("\n") + "\n" + prefixVertex;
        prefixFragment = [
            "#define varying in",
            parameters.glslVersion === $b383cde4e0574ff6$export$f63012db5506e7dd ? "" : "out highp vec4 pc_fragColor;",
            parameters.glslVersion === $b383cde4e0574ff6$export$f63012db5506e7dd ? "" : "#define gl_FragColor pc_fragColor",
            "#define gl_FragDepthEXT gl_FragDepth",
            "#define texture2D texture",
            "#define textureCube texture",
            "#define texture2DProj textureProj",
            "#define texture2DLodEXT textureLod",
            "#define texture2DProjLodEXT textureProjLod",
            "#define textureCubeLodEXT textureLod",
            "#define texture2DGradEXT textureGrad",
            "#define texture2DProjGradEXT textureProjGrad",
            "#define textureCubeGradEXT textureGrad"
        ].join("\n") + "\n" + prefixFragment;
    }
    var vertexGlsl = versionString + prefixVertex + vertexShader;
    var fragmentGlsl = versionString + prefixFragment + fragmentShader;
    // console.log( '*VERTEX*', vertexGlsl );
    // console.log( '*FRAGMENT*', fragmentGlsl );
    var glVertexShader = $b383cde4e0574ff6$var$WebGLShader(gl, 35633, vertexGlsl);
    var glFragmentShader = $b383cde4e0574ff6$var$WebGLShader(gl, 35632, fragmentGlsl);
    gl.attachShader(program, glVertexShader);
    gl.attachShader(program, glFragmentShader);
    // Force a particular attribute to index 0.
    if (parameters.index0AttributeName !== undefined) gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
    else if (parameters.morphTargets === true) // programs with morphTargets displace position out of attribute 0
    gl.bindAttribLocation(program, 0, "position");
    gl.linkProgram(program);
    // check for link errors
    if (renderer.debug.checkShaderErrors) {
        var programLog = gl.getProgramInfoLog(program).trim();
        var vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
        var fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
        var runnable = true;
        var haveDiagnostics = true;
        if (gl.getProgramParameter(program, 35714) === false) {
            runnable = false;
            var vertexErrors = $b383cde4e0574ff6$var$getShaderErrors(gl, glVertexShader, "vertex");
            var fragmentErrors = $b383cde4e0574ff6$var$getShaderErrors(gl, glFragmentShader, "fragment");
            console.error("THREE.WebGLProgram: Shader Error " + gl.getError() + " - " + "VALIDATE_STATUS " + gl.getProgramParameter(program, 35715) + "\n\n" + "Program Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors);
        } else if (programLog !== "") console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
        else if (vertexLog === "" || fragmentLog === "") haveDiagnostics = false;
        if (haveDiagnostics) this.diagnostics = {
            runnable: runnable,
            programLog: programLog,
            vertexShader: {
                log: vertexLog,
                prefix: prefixVertex
            },
            fragmentShader: {
                log: fragmentLog,
                prefix: prefixFragment
            }
        };
    }
    // Clean up
    // Crashes in iOS9 and iOS10. #18402
    // gl.detachShader( program, glVertexShader );
    // gl.detachShader( program, glFragmentShader );
    gl.deleteShader(glVertexShader);
    gl.deleteShader(glFragmentShader);
    // set up caching for uniform locations
    var cachedUniforms;
    this.getUniforms = function() {
        if (cachedUniforms === undefined) cachedUniforms = new $b383cde4e0574ff6$var$WebGLUniforms(gl, program);
        return cachedUniforms;
    };
    // set up caching for attribute locations
    var cachedAttributes;
    this.getAttributes = function() {
        if (cachedAttributes === undefined) cachedAttributes = $b383cde4e0574ff6$var$fetchAttributeLocations(gl, program);
        return cachedAttributes;
    };
    // free resource
    this.destroy = function() {
        bindingStates.releaseStatesOfProgram(this);
        gl.deleteProgram(program);
        this.program = undefined;
    };
    //
    this.name = parameters.shaderName;
    this.id = $b383cde4e0574ff6$var$programIdCount++;
    this.cacheKey = cacheKey;
    this.usedTimes = 1;
    this.program = program;
    this.vertexShader = glVertexShader;
    this.fragmentShader = glFragmentShader;
    return this;
}
function $b383cde4e0574ff6$var$WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
    var getMaxBones = function getMaxBones(object) {
        var skeleton = object.skeleton;
        var bones = skeleton.bones;
        if (floatVertexTextures) return 1024;
        else {
            // default for when object is not specified
            // ( for example when prebuilding shader to be used with multiple objects )
            //
            //  - leave some extra space for other uniforms
            //  - limit here is ANGLE's 254 max uniform vectors
            //    (up to 54 should be safe)
            var nVertexUniforms = maxVertexUniforms;
            var nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
            var maxBones = Math.min(nVertexMatrices, bones.length);
            if (maxBones < bones.length) {
                console.warn("THREE.WebGLRenderer: Skeleton has " + bones.length + " bones. This GPU supports " + maxBones + ".");
                return 0;
            }
            return maxBones;
        }
    };
    var getTextureEncodingFromMap = function getTextureEncodingFromMap(map) {
        var encoding;
        if (map && map.isTexture) encoding = map.encoding;
        else if (map && map.isWebGLRenderTarget) {
            console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.");
            encoding = map.texture.encoding;
        } else encoding = $b383cde4e0574ff6$export$7207336e4151a112;
        if (isWebGL2 && map && map.isTexture && map.format === $b383cde4e0574ff6$export$3f8bb04b555a363c && map.type === $b383cde4e0574ff6$export$2e8ce08d3f6f5e10 && map.encoding === $b383cde4e0574ff6$export$f32388edbb32674) encoding = $b383cde4e0574ff6$export$7207336e4151a112; // disable inline decode for sRGB textures in WebGL 2
        return encoding;
    };
    var getParameters = function getParameters(material, lights, shadows, scene, object) {
        var fog = scene.fog;
        var environment = material.isMeshStandardMaterial ? scene.environment : null;
        var envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
        var shaderID = shaderIDs[material.type];
        // heuristics to create shader parameters according to lights in the scene
        // (not to blow over maxLights budget)
        var maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;
        if (material.precision !== null) {
            precision = capabilities.getMaxPrecision(material.precision);
            if (precision !== material.precision) console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
        }
        var vertexShader, fragmentShader;
        if (shaderID) {
            var shader = $b383cde4e0574ff6$export$bee4a7d47f8f5014[shaderID];
            vertexShader = shader.vertexShader;
            fragmentShader = shader.fragmentShader;
        } else {
            vertexShader = material.vertexShader;
            fragmentShader = material.fragmentShader;
        }
        var currentRenderTarget = renderer.getRenderTarget();
        var useAlphaTest = material.alphaTest > 0;
        var useClearcoat = material.clearcoat > 0;
        var parameters = {
            isWebGL2: isWebGL2,
            shaderID: shaderID,
            shaderName: material.type,
            vertexShader: vertexShader,
            fragmentShader: fragmentShader,
            defines: material.defines,
            isRawShaderMaterial: material.isRawShaderMaterial === true,
            glslVersion: material.glslVersion,
            precision: precision,
            instancing: object.isInstancedMesh === true,
            instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,
            supportsVertexTextures: vertexTextures,
            outputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,
            map: !!material.map,
            mapEncoding: getTextureEncodingFromMap(material.map),
            matcap: !!material.matcap,
            matcapEncoding: getTextureEncodingFromMap(material.matcap),
            envMap: !!envMap,
            envMapMode: envMap && envMap.mapping,
            envMapEncoding: getTextureEncodingFromMap(envMap),
            envMapCubeUV: !!envMap && (envMap.mapping === $b383cde4e0574ff6$export$dbf3e70ff37af79 || envMap.mapping === $b383cde4e0574ff6$export$76a9f4355364345c),
            lightMap: !!material.lightMap,
            lightMapEncoding: getTextureEncodingFromMap(material.lightMap),
            aoMap: !!material.aoMap,
            emissiveMap: !!material.emissiveMap,
            emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),
            bumpMap: !!material.bumpMap,
            normalMap: !!material.normalMap,
            objectSpaceNormalMap: material.normalMapType === $b383cde4e0574ff6$export$9990ad26f9db5b2c,
            tangentSpaceNormalMap: material.normalMapType === $b383cde4e0574ff6$export$2852a58ebdac27b8,
            clearcoat: useClearcoat,
            clearcoatMap: useClearcoat && !!material.clearcoatMap,
            clearcoatRoughnessMap: useClearcoat && !!material.clearcoatRoughnessMap,
            clearcoatNormalMap: useClearcoat && !!material.clearcoatNormalMap,
            displacementMap: !!material.displacementMap,
            roughnessMap: !!material.roughnessMap,
            metalnessMap: !!material.metalnessMap,
            specularMap: !!material.specularMap,
            specularIntensityMap: !!material.specularIntensityMap,
            specularColorMap: !!material.specularColorMap,
            specularColorMapEncoding: getTextureEncodingFromMap(material.specularColorMap),
            alphaMap: !!material.alphaMap,
            alphaTest: useAlphaTest,
            gradientMap: !!material.gradientMap,
            sheen: material.sheen > 0,
            sheenColorMap: !!material.sheenColorMap,
            sheenColorMapEncoding: getTextureEncodingFromMap(material.sheenColorMap),
            sheenRoughnessMap: !!material.sheenRoughnessMap,
            transmission: material.transmission > 0,
            transmissionMap: !!material.transmissionMap,
            thicknessMap: !!material.thicknessMap,
            combine: material.combine,
            vertexTangents: !!material.normalMap && !!object.geometry && !!object.geometry.attributes.tangent,
            vertexColors: material.vertexColors,
            vertexAlphas: material.vertexColors === true && !!object.geometry && !!object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,
            vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || !!material.sheenColorMap || material.sheenRoughnessMap,
            uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || material.transmission > 0 || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || !!material.sheen > 0 || !!material.sheenColorMap || !!material.sheenRoughnessMap) && !!material.displacementMap,
            fog: !!fog,
            useFog: material.fog,
            fogExp2: fog && fog.isFogExp2,
            flatShading: !!material.flatShading,
            sizeAttenuation: material.sizeAttenuation,
            logarithmicDepthBuffer: logarithmicDepthBuffer,
            skinning: object.isSkinnedMesh === true && maxBones > 0,
            maxBones: maxBones,
            useVertexTexture: floatVertexTextures,
            morphTargets: !!object.geometry && !!object.geometry.morphAttributes.position,
            morphNormals: !!object.geometry && !!object.geometry.morphAttributes.normal,
            morphTargetsCount: !!object.geometry && !!object.geometry.morphAttributes.position ? object.geometry.morphAttributes.position.length : 0,
            numDirLights: lights.directional.length,
            numPointLights: lights.point.length,
            numSpotLights: lights.spot.length,
            numRectAreaLights: lights.rectArea.length,
            numHemiLights: lights.hemi.length,
            numDirLightShadows: lights.directionalShadowMap.length,
            numPointLightShadows: lights.pointShadowMap.length,
            numSpotLightShadows: lights.spotShadowMap.length,
            numClippingPlanes: clipping.numPlanes,
            numClipIntersection: clipping.numIntersection,
            format: material.format,
            dithering: material.dithering,
            shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
            shadowMapType: renderer.shadowMap.type,
            toneMapping: material.toneMapped ? renderer.toneMapping : $b383cde4e0574ff6$export$9fcb6b4294603b2,
            physicallyCorrectLights: renderer.physicallyCorrectLights,
            premultipliedAlpha: material.premultipliedAlpha,
            doubleSided: material.side === $b383cde4e0574ff6$export$3b296b6f144d5b03,
            flipSided: material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace,
            depthPacking: material.depthPacking !== undefined ? material.depthPacking : false,
            index0AttributeName: material.index0AttributeName,
            extensionDerivatives: material.extensions && material.extensions.derivatives,
            extensionFragDepth: material.extensions && material.extensions.fragDepth,
            extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
            extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
            rendererExtensionFragDepth: isWebGL2 || extensions.has("EXT_frag_depth"),
            rendererExtensionDrawBuffers: isWebGL2 || extensions.has("WEBGL_draw_buffers"),
            rendererExtensionShaderTextureLod: isWebGL2 || extensions.has("EXT_shader_texture_lod"),
            customProgramCacheKey: material.customProgramCacheKey()
        };
        return parameters;
    };
    var getProgramCacheKey = function getProgramCacheKey(parameters) {
        var array = [];
        if (parameters.shaderID) array.push(parameters.shaderID);
        else {
            array.push($b383cde4e0574ff6$var$hashString(parameters.fragmentShader));
            array.push($b383cde4e0574ff6$var$hashString(parameters.vertexShader));
        }
        if (parameters.defines !== undefined) for(var name in parameters.defines){
            array.push(name);
            array.push(parameters.defines[name]);
        }
        if (parameters.isRawShaderMaterial === false) {
            for(var i = 0; i < parameterNames.length; i++)array.push(parameters[parameterNames[i]]);
            array.push(renderer.outputEncoding);
            array.push(renderer.gammaFactor);
        }
        array.push(parameters.customProgramCacheKey);
        return array.join();
    };
    var getUniforms = function getUniforms(material) {
        var shaderID = shaderIDs[material.type];
        var uniforms;
        if (shaderID) {
            var shader = $b383cde4e0574ff6$export$bee4a7d47f8f5014[shaderID];
            uniforms = $b383cde4e0574ff6$export$d8ecdf8615bfea69.clone(shader.uniforms);
        } else uniforms = material.uniforms;
        return uniforms;
    };
    var acquireProgram = function acquireProgram(parameters, cacheKey) {
        var program;
        // Check if code has been already compiled
        for(var p = 0, pl = programs.length; p < pl; p++){
            var preexistingProgram = programs[p];
            if (preexistingProgram.cacheKey === cacheKey) {
                program = preexistingProgram;
                ++program.usedTimes;
                break;
            }
        }
        if (program === undefined) {
            program = new $b383cde4e0574ff6$var$WebGLProgram(renderer, cacheKey, parameters, bindingStates);
            programs.push(program);
        }
        return program;
    };
    var releaseProgram = function releaseProgram(program) {
        if (--program.usedTimes === 0) {
            // Remove from unordered set
            var i = programs.indexOf(program);
            programs[i] = programs[programs.length - 1];
            programs.pop();
            // Free WebGL resources
            program.destroy();
        }
    };
    var programs = [];
    var isWebGL2 = capabilities.isWebGL2;
    var logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    var floatVertexTextures = capabilities.floatVertexTextures;
    var maxVertexUniforms = capabilities.maxVertexUniforms;
    var vertexTextures = capabilities.vertexTextures;
    var precision = capabilities.precision;
    var shaderIDs = {
        MeshDepthMaterial: "depth",
        MeshDistanceMaterial: "distanceRGBA",
        MeshNormalMaterial: "normal",
        MeshBasicMaterial: "basic",
        MeshLambertMaterial: "lambert",
        MeshPhongMaterial: "phong",
        MeshToonMaterial: "toon",
        MeshStandardMaterial: "physical",
        MeshPhysicalMaterial: "physical",
        MeshMatcapMaterial: "matcap",
        LineBasicMaterial: "basic",
        LineDashedMaterial: "dashed",
        PointsMaterial: "points",
        ShadowMaterial: "shadow",
        SpriteMaterial: "sprite"
    };
    var parameterNames = [
        "precision",
        "isWebGL2",
        "supportsVertexTextures",
        "outputEncoding",
        "instancing",
        "instancingColor",
        "map",
        "mapEncoding",
        "matcap",
        "matcapEncoding",
        "envMap",
        "envMapMode",
        "envMapEncoding",
        "envMapCubeUV",
        "lightMap",
        "lightMapEncoding",
        "aoMap",
        "emissiveMap",
        "emissiveMapEncoding",
        "bumpMap",
        "normalMap",
        "objectSpaceNormalMap",
        "tangentSpaceNormalMap",
        "clearcoat",
        "clearcoatMap",
        "clearcoatRoughnessMap",
        "clearcoatNormalMap",
        "displacementMap",
        "specularMap",
        ,
        "roughnessMap",
        "metalnessMap",
        "gradientMap",
        "alphaMap",
        "alphaTest",
        "combine",
        "vertexColors",
        "vertexAlphas",
        "vertexTangents",
        "vertexUvs",
        "uvsVertexOnly",
        "fog",
        "useFog",
        "fogExp2",
        "flatShading",
        "sizeAttenuation",
        "logarithmicDepthBuffer",
        "skinning",
        "maxBones",
        "useVertexTexture",
        "morphTargets",
        "morphNormals",
        "morphTargetsCount",
        "premultipliedAlpha",
        "numDirLights",
        "numPointLights",
        "numSpotLights",
        "numHemiLights",
        "numRectAreaLights",
        "numDirLightShadows",
        "numPointLightShadows",
        "numSpotLightShadows",
        "shadowMapEnabled",
        "shadowMapType",
        "toneMapping",
        "physicallyCorrectLights",
        "doubleSided",
        "flipSided",
        "numClippingPlanes",
        "numClipIntersection",
        "depthPacking",
        "dithering",
        "format",
        "specularIntensityMap",
        "specularColorMap",
        "specularColorMapEncoding",
        "transmission",
        "transmissionMap",
        "thicknessMap",
        "sheen",
        "sheenColorMap",
        "sheenColorMapEncoding",
        "sheenRoughnessMap"
    ];
    return {
        getParameters: getParameters,
        getProgramCacheKey: getProgramCacheKey,
        getUniforms: getUniforms,
        acquireProgram: acquireProgram,
        releaseProgram: releaseProgram,
        // Exposed for resource monitoring & error feedback via renderer.info:
        programs: programs
    };
}
function $b383cde4e0574ff6$var$WebGLProperties() {
    var get = function get(object) {
        var map = properties.get(object);
        if (map === undefined) {
            map = {};
            properties.set(object, map);
        }
        return map;
    };
    var remove = function remove(object) {
        properties.delete(object);
    };
    var update = function update(object, key, value) {
        properties.get(object)[key] = value;
    };
    var dispose = function dispose() {
        properties = new WeakMap();
    };
    var properties = new WeakMap();
    return {
        get: get,
        remove: remove,
        update: update,
        dispose: dispose
    };
}
function $b383cde4e0574ff6$var$painterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) return a.groupOrder - b.groupOrder;
    else if (a.renderOrder !== b.renderOrder) return a.renderOrder - b.renderOrder;
    else if (a.program !== b.program) return a.program.id - b.program.id;
    else if (a.material.id !== b.material.id) return a.material.id - b.material.id;
    else if (a.z !== b.z) return a.z - b.z;
    else return a.id - b.id;
}
function $b383cde4e0574ff6$var$reversePainterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) return a.groupOrder - b.groupOrder;
    else if (a.renderOrder !== b.renderOrder) return a.renderOrder - b.renderOrder;
    else if (a.z !== b.z) return b.z - a.z;
    else return a.id - b.id;
}
function $b383cde4e0574ff6$var$WebGLRenderList(properties) {
    var init = function init() {
        renderItemsIndex = 0;
        opaque.length = 0;
        transmissive.length = 0;
        transparent.length = 0;
    };
    var getNextRenderItem = function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
        var renderItem = renderItems[renderItemsIndex];
        var materialProperties = properties.get(material);
        if (renderItem === undefined) {
            renderItem = {
                id: object.id,
                object: object,
                geometry: geometry,
                material: material,
                program: materialProperties.program || defaultProgram,
                groupOrder: groupOrder,
                renderOrder: object.renderOrder,
                z: z,
                group: group
            };
            renderItems[renderItemsIndex] = renderItem;
        } else {
            renderItem.id = object.id;
            renderItem.object = object;
            renderItem.geometry = geometry;
            renderItem.material = material;
            renderItem.program = materialProperties.program || defaultProgram;
            renderItem.groupOrder = groupOrder;
            renderItem.renderOrder = object.renderOrder;
            renderItem.z = z;
            renderItem.group = group;
        }
        renderItemsIndex++;
        return renderItem;
    };
    var push = function push(object, geometry, material, groupOrder, z, group) {
        var renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
        if (material.transmission > 0.0) transmissive.push(renderItem);
        else if (material.transparent === true) transparent.push(renderItem);
        else opaque.push(renderItem);
    };
    var unshift = function unshift(object, geometry, material, groupOrder, z, group) {
        var renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
        if (material.transmission > 0.0) transmissive.unshift(renderItem);
        else if (material.transparent === true) transparent.unshift(renderItem);
        else opaque.unshift(renderItem);
    };
    var sort = function sort(customOpaqueSort, customTransparentSort) {
        if (opaque.length > 1) opaque.sort(customOpaqueSort || $b383cde4e0574ff6$var$painterSortStable);
        if (transmissive.length > 1) transmissive.sort(customTransparentSort || $b383cde4e0574ff6$var$reversePainterSortStable);
        if (transparent.length > 1) transparent.sort(customTransparentSort || $b383cde4e0574ff6$var$reversePainterSortStable);
    };
    var finish = function finish() {
        // Clear references from inactive renderItems in the list
        for(var i = renderItemsIndex, il = renderItems.length; i < il; i++){
            var renderItem = renderItems[i];
            if (renderItem.id === null) break;
            renderItem.id = null;
            renderItem.object = null;
            renderItem.geometry = null;
            renderItem.material = null;
            renderItem.program = null;
            renderItem.group = null;
        }
    };
    var renderItems = [];
    var renderItemsIndex = 0;
    var opaque = [];
    var transmissive = [];
    var transparent = [];
    var defaultProgram = {
        id: -1
    };
    return {
        opaque: opaque,
        transmissive: transmissive,
        transparent: transparent,
        init: init,
        push: push,
        unshift: unshift,
        finish: finish,
        sort: sort
    };
}
function $b383cde4e0574ff6$var$WebGLRenderLists(properties) {
    var get = function get(scene, renderCallDepth) {
        var list;
        if (lists.has(scene) === false) {
            list = new $b383cde4e0574ff6$var$WebGLRenderList(properties);
            lists.set(scene, [
                list
            ]);
        } else if (renderCallDepth >= lists.get(scene).length) {
            list = new $b383cde4e0574ff6$var$WebGLRenderList(properties);
            lists.get(scene).push(list);
        } else list = lists.get(scene)[renderCallDepth];
        return list;
    };
    var dispose = function dispose() {
        lists = new WeakMap();
    };
    var lists = new WeakMap();
    return {
        get: get,
        dispose: dispose
    };
}
function $b383cde4e0574ff6$var$UniformsCache() {
    var lights = {};
    return {
        get: function get(light) {
            if (lights[light.id] !== undefined) return lights[light.id];
            var uniforms;
            switch(light.type){
                case "DirectionalLight":
                    uniforms = {
                        direction: new $b383cde4e0574ff6$export$64b5c384219d3699(),
                        color: new $b383cde4e0574ff6$export$892596cec99bc70e()
                    };
                    break;
                case "SpotLight":
                    uniforms = {
                        position: new $b383cde4e0574ff6$export$64b5c384219d3699(),
                        direction: new $b383cde4e0574ff6$export$64b5c384219d3699(),
                        color: new $b383cde4e0574ff6$export$892596cec99bc70e(),
                        distance: 0,
                        coneCos: 0,
                        penumbraCos: 0,
                        decay: 0
                    };
                    break;
                case "PointLight":
                    uniforms = {
                        position: new $b383cde4e0574ff6$export$64b5c384219d3699(),
                        color: new $b383cde4e0574ff6$export$892596cec99bc70e(),
                        distance: 0,
                        decay: 0
                    };
                    break;
                case "HemisphereLight":
                    uniforms = {
                        direction: new $b383cde4e0574ff6$export$64b5c384219d3699(),
                        skyColor: new $b383cde4e0574ff6$export$892596cec99bc70e(),
                        groundColor: new $b383cde4e0574ff6$export$892596cec99bc70e()
                    };
                    break;
                case "RectAreaLight":
                    uniforms = {
                        color: new $b383cde4e0574ff6$export$892596cec99bc70e(),
                        position: new $b383cde4e0574ff6$export$64b5c384219d3699(),
                        halfWidth: new $b383cde4e0574ff6$export$64b5c384219d3699(),
                        halfHeight: new $b383cde4e0574ff6$export$64b5c384219d3699()
                    };
                    break;
            }
            lights[light.id] = uniforms;
            return uniforms;
        }
    };
}
function $b383cde4e0574ff6$var$ShadowUniformsCache() {
    var lights = {};
    return {
        get: function get(light) {
            if (lights[light.id] !== undefined) return lights[light.id];
            var uniforms;
            switch(light.type){
                case "DirectionalLight":
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new $b383cde4e0574ff6$export$c977b3e384af9ae1()
                    };
                    break;
                case "SpotLight":
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new $b383cde4e0574ff6$export$c977b3e384af9ae1()
                    };
                    break;
                case "PointLight":
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new $b383cde4e0574ff6$export$c977b3e384af9ae1(),
                        shadowCameraNear: 1,
                        shadowCameraFar: 1000
                    };
                    break;
            }
            lights[light.id] = uniforms;
            return uniforms;
        }
    };
}
var $b383cde4e0574ff6$var$nextVersion = 0;
function $b383cde4e0574ff6$var$shadowCastingLightsFirst(lightA, lightB) {
    return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);
}
function $b383cde4e0574ff6$var$WebGLLights(extensions, capabilities) {
    var setup = function setup(lights, physicallyCorrectLights) {
        var r = 0, g = 0, b = 0;
        for(var i = 0; i < 9; i++)state.probe[i].set(0, 0, 0);
        var directionalLength = 0;
        var pointLength = 0;
        var spotLength = 0;
        var rectAreaLength = 0;
        var hemiLength = 0;
        var numDirectionalShadows = 0;
        var numPointShadows = 0;
        var numSpotShadows = 0;
        lights.sort($b383cde4e0574ff6$var$shadowCastingLightsFirst);
        // artist-friendly light intensity scaling factor
        var scaleFactor = physicallyCorrectLights !== true ? Math.PI : 1;
        for(var i1 = 0, l = lights.length; i1 < l; i1++){
            var light = lights[i1];
            var color = light.color;
            var intensity = light.intensity;
            var distance = light.distance;
            var shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
            if (light.isAmbientLight) {
                r += color.r * intensity * scaleFactor;
                g += color.g * intensity * scaleFactor;
                b += color.b * intensity * scaleFactor;
            } else if (light.isLightProbe) for(var j = 0; j < 9; j++)state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
            else if (light.isDirectionalLight) {
                var uniforms = cache.get(light);
                uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
                if (light.castShadow) {
                    var shadow = light.shadow;
                    var shadowUniforms = shadowCache.get(light);
                    shadowUniforms.shadowBias = shadow.bias;
                    shadowUniforms.shadowNormalBias = shadow.normalBias;
                    shadowUniforms.shadowRadius = shadow.radius;
                    shadowUniforms.shadowMapSize = shadow.mapSize;
                    state.directionalShadow[directionalLength] = shadowUniforms;
                    state.directionalShadowMap[directionalLength] = shadowMap;
                    state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
                    numDirectionalShadows++;
                }
                state.directional[directionalLength] = uniforms;
                directionalLength++;
            } else if (light.isSpotLight) {
                var uniforms1 = cache.get(light);
                uniforms1.position.setFromMatrixPosition(light.matrixWorld);
                uniforms1.color.copy(color).multiplyScalar(intensity * scaleFactor);
                uniforms1.distance = distance;
                uniforms1.coneCos = Math.cos(light.angle);
                uniforms1.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
                uniforms1.decay = light.decay;
                if (light.castShadow) {
                    var shadow1 = light.shadow;
                    var shadowUniforms1 = shadowCache.get(light);
                    shadowUniforms1.shadowBias = shadow1.bias;
                    shadowUniforms1.shadowNormalBias = shadow1.normalBias;
                    shadowUniforms1.shadowRadius = shadow1.radius;
                    shadowUniforms1.shadowMapSize = shadow1.mapSize;
                    state.spotShadow[spotLength] = shadowUniforms1;
                    state.spotShadowMap[spotLength] = shadowMap;
                    state.spotShadowMatrix[spotLength] = light.shadow.matrix;
                    numSpotShadows++;
                }
                state.spot[spotLength] = uniforms1;
                spotLength++;
            } else if (light.isRectAreaLight) {
                var uniforms2 = cache.get(light);
                // (a) intensity is the total visible light emitted
                //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
                // (b) intensity is the brightness of the light
                uniforms2.color.copy(color).multiplyScalar(intensity);
                uniforms2.halfWidth.set(light.width * 0.5, 0.0, 0.0);
                uniforms2.halfHeight.set(0.0, light.height * 0.5, 0.0);
                state.rectArea[rectAreaLength] = uniforms2;
                rectAreaLength++;
            } else if (light.isPointLight) {
                var uniforms3 = cache.get(light);
                uniforms3.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
                uniforms3.distance = light.distance;
                uniforms3.decay = light.decay;
                if (light.castShadow) {
                    var shadow2 = light.shadow;
                    var shadowUniforms2 = shadowCache.get(light);
                    shadowUniforms2.shadowBias = shadow2.bias;
                    shadowUniforms2.shadowNormalBias = shadow2.normalBias;
                    shadowUniforms2.shadowRadius = shadow2.radius;
                    shadowUniforms2.shadowMapSize = shadow2.mapSize;
                    shadowUniforms2.shadowCameraNear = shadow2.camera.near;
                    shadowUniforms2.shadowCameraFar = shadow2.camera.far;
                    state.pointShadow[pointLength] = shadowUniforms2;
                    state.pointShadowMap[pointLength] = shadowMap;
                    state.pointShadowMatrix[pointLength] = light.shadow.matrix;
                    numPointShadows++;
                }
                state.point[pointLength] = uniforms3;
                pointLength++;
            } else if (light.isHemisphereLight) {
                var uniforms4 = cache.get(light);
                uniforms4.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);
                uniforms4.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);
                state.hemi[hemiLength] = uniforms4;
                hemiLength++;
            }
        }
        if (rectAreaLength > 0) {
            if (capabilities.isWebGL2) {
                // WebGL 2
                state.rectAreaLTC1 = $b383cde4e0574ff6$export$6643083551874bf5.LTC_FLOAT_1;
                state.rectAreaLTC2 = $b383cde4e0574ff6$export$6643083551874bf5.LTC_FLOAT_2;
            } else {
                // WebGL 1
                if (extensions.has("OES_texture_float_linear") === true) {
                    state.rectAreaLTC1 = $b383cde4e0574ff6$export$6643083551874bf5.LTC_FLOAT_1;
                    state.rectAreaLTC2 = $b383cde4e0574ff6$export$6643083551874bf5.LTC_FLOAT_2;
                } else if (extensions.has("OES_texture_half_float_linear") === true) {
                    state.rectAreaLTC1 = $b383cde4e0574ff6$export$6643083551874bf5.LTC_HALF_1;
                    state.rectAreaLTC2 = $b383cde4e0574ff6$export$6643083551874bf5.LTC_HALF_2;
                } else console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");
            }
        }
        state.ambient[0] = r;
        state.ambient[1] = g;
        state.ambient[2] = b;
        var hash = state.hash;
        if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {
            state.directional.length = directionalLength;
            state.spot.length = spotLength;
            state.rectArea.length = rectAreaLength;
            state.point.length = pointLength;
            state.hemi.length = hemiLength;
            state.directionalShadow.length = numDirectionalShadows;
            state.directionalShadowMap.length = numDirectionalShadows;
            state.pointShadow.length = numPointShadows;
            state.pointShadowMap.length = numPointShadows;
            state.spotShadow.length = numSpotShadows;
            state.spotShadowMap.length = numSpotShadows;
            state.directionalShadowMatrix.length = numDirectionalShadows;
            state.pointShadowMatrix.length = numPointShadows;
            state.spotShadowMatrix.length = numSpotShadows;
            hash.directionalLength = directionalLength;
            hash.pointLength = pointLength;
            hash.spotLength = spotLength;
            hash.rectAreaLength = rectAreaLength;
            hash.hemiLength = hemiLength;
            hash.numDirectionalShadows = numDirectionalShadows;
            hash.numPointShadows = numPointShadows;
            hash.numSpotShadows = numSpotShadows;
            state.version = $b383cde4e0574ff6$var$nextVersion++;
        }
    };
    var setupView = function setupView(lights, camera) {
        var directionalLength = 0;
        var pointLength = 0;
        var spotLength = 0;
        var rectAreaLength = 0;
        var hemiLength = 0;
        var viewMatrix = camera.matrixWorldInverse;
        for(var i = 0, l = lights.length; i < l; i++){
            var light = lights[i];
            if (light.isDirectionalLight) {
                var uniforms = state.directional[directionalLength];
                uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                vector3.setFromMatrixPosition(light.target.matrixWorld);
                uniforms.direction.sub(vector3);
                uniforms.direction.transformDirection(viewMatrix);
                directionalLength++;
            } else if (light.isSpotLight) {
                var uniforms1 = state.spot[spotLength];
                uniforms1.position.setFromMatrixPosition(light.matrixWorld);
                uniforms1.position.applyMatrix4(viewMatrix);
                uniforms1.direction.setFromMatrixPosition(light.matrixWorld);
                vector3.setFromMatrixPosition(light.target.matrixWorld);
                uniforms1.direction.sub(vector3);
                uniforms1.direction.transformDirection(viewMatrix);
                spotLength++;
            } else if (light.isRectAreaLight) {
                var uniforms2 = state.rectArea[rectAreaLength];
                uniforms2.position.setFromMatrixPosition(light.matrixWorld);
                uniforms2.position.applyMatrix4(viewMatrix);
                // extract local rotation of light to derive width/height half vectors
                matrix42.identity();
                matrix4.copy(light.matrixWorld);
                matrix4.premultiply(viewMatrix);
                matrix42.extractRotation(matrix4);
                uniforms2.halfWidth.set(light.width * 0.5, 0.0, 0.0);
                uniforms2.halfHeight.set(0.0, light.height * 0.5, 0.0);
                uniforms2.halfWidth.applyMatrix4(matrix42);
                uniforms2.halfHeight.applyMatrix4(matrix42);
                rectAreaLength++;
            } else if (light.isPointLight) {
                var uniforms3 = state.point[pointLength];
                uniforms3.position.setFromMatrixPosition(light.matrixWorld);
                uniforms3.position.applyMatrix4(viewMatrix);
                pointLength++;
            } else if (light.isHemisphereLight) {
                var uniforms4 = state.hemi[hemiLength];
                uniforms4.direction.setFromMatrixPosition(light.matrixWorld);
                uniforms4.direction.transformDirection(viewMatrix);
                uniforms4.direction.normalize();
                hemiLength++;
            }
        }
    };
    var cache = new $b383cde4e0574ff6$var$UniformsCache();
    var shadowCache = $b383cde4e0574ff6$var$ShadowUniformsCache();
    var state = {
        version: 0,
        hash: {
            directionalLength: -1,
            pointLength: -1,
            spotLength: -1,
            rectAreaLength: -1,
            hemiLength: -1,
            numDirectionalShadows: -1,
            numPointShadows: -1,
            numSpotShadows: -1
        },
        ambient: [
            0,
            0,
            0
        ],
        probe: [],
        directional: [],
        directionalShadow: [],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: [],
        spotShadow: [],
        spotShadowMap: [],
        spotShadowMatrix: [],
        rectArea: [],
        rectAreaLTC1: null,
        rectAreaLTC2: null,
        point: [],
        pointShadow: [],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: []
    };
    for(var i = 0; i < 9; i++)state.probe.push(new $b383cde4e0574ff6$export$64b5c384219d3699());
    var vector3 = new $b383cde4e0574ff6$export$64b5c384219d3699();
    var matrix4 = new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
    var matrix42 = new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
    return {
        setup: setup,
        setupView: setupView,
        state: state
    };
}
function $b383cde4e0574ff6$var$WebGLRenderState(extensions, capabilities) {
    var init = function init() {
        lightsArray.length = 0;
        shadowsArray.length = 0;
    };
    var pushLight = function pushLight(light) {
        lightsArray.push(light);
    };
    var pushShadow = function pushShadow(shadowLight) {
        shadowsArray.push(shadowLight);
    };
    var setupLights = function setupLights(physicallyCorrectLights) {
        lights.setup(lightsArray, physicallyCorrectLights);
    };
    var setupLightsView = function setupLightsView(camera) {
        lights.setupView(lightsArray, camera);
    };
    var lights = new $b383cde4e0574ff6$var$WebGLLights(extensions, capabilities);
    var lightsArray = [];
    var shadowsArray = [];
    var state = {
        lightsArray: lightsArray,
        shadowsArray: shadowsArray,
        lights: lights
    };
    return {
        init: init,
        state: state,
        setupLights: setupLights,
        setupLightsView: setupLightsView,
        pushLight: pushLight,
        pushShadow: pushShadow
    };
}
function $b383cde4e0574ff6$var$WebGLRenderStates(extensions, capabilities) {
    var get = function get(scene) {
        var renderCallDepth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        var renderState;
        if (renderStates.has(scene) === false) {
            renderState = new $b383cde4e0574ff6$var$WebGLRenderState(extensions, capabilities);
            renderStates.set(scene, [
                renderState
            ]);
        } else if (renderCallDepth >= renderStates.get(scene).length) {
            renderState = new $b383cde4e0574ff6$var$WebGLRenderState(extensions, capabilities);
            renderStates.get(scene).push(renderState);
        } else renderState = renderStates.get(scene)[renderCallDepth];
        return renderState;
    };
    var dispose = function dispose() {
        renderStates = new WeakMap();
    };
    var renderStates = new WeakMap();
    return {
        get: get,
        dispose: dispose
    };
}
/**
 * parameters = {
 *
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */ var $b383cde4e0574ff6$export$2698c22ec13825db = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(MeshDepthMaterial, Material);
    var _super = (0, $a0Xbx.default)(MeshDepthMaterial);
    function MeshDepthMaterial(parameters) {
        (0, $dnGTK.default)(this, MeshDepthMaterial);
        var _this;
        _this = _super.call(this);
        _this.type = "MeshDepthMaterial";
        _this.depthPacking = $b383cde4e0574ff6$export$deeb383078690b50;
        _this.map = null;
        _this.alphaMap = null;
        _this.displacementMap = null;
        _this.displacementScale = 1;
        _this.displacementBias = 0;
        _this.wireframe = false;
        _this.wireframeLinewidth = 1;
        _this.fog = false;
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(MeshDepthMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(MeshDepthMaterial.prototype), "copy", this).call(this, source);
                this.depthPacking = source.depthPacking;
                this.map = source.map;
                this.alphaMap = source.alphaMap;
                this.displacementMap = source.displacementMap;
                this.displacementScale = source.displacementScale;
                this.displacementBias = source.displacementBias;
                this.wireframe = source.wireframe;
                this.wireframeLinewidth = source.wireframeLinewidth;
                return this;
            }
        }
    ]);
    return MeshDepthMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$2698c22ec13825db.prototype.isMeshDepthMaterial = true;
/**
 * parameters = {
 *
 *  referencePosition: <float>,
 *  nearDistance: <float>,
 *  farDistance: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>
 *
 * }
 */ var $b383cde4e0574ff6$export$33e187ed002f2a19 = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(MeshDistanceMaterial, Material);
    var _super = (0, $a0Xbx.default)(MeshDistanceMaterial);
    function MeshDistanceMaterial(parameters) {
        (0, $dnGTK.default)(this, MeshDistanceMaterial);
        var _this;
        _this = _super.call(this);
        _this.type = "MeshDistanceMaterial";
        _this.referencePosition = new $b383cde4e0574ff6$export$64b5c384219d3699();
        _this.nearDistance = 1;
        _this.farDistance = 1000;
        _this.map = null;
        _this.alphaMap = null;
        _this.displacementMap = null;
        _this.displacementScale = 1;
        _this.displacementBias = 0;
        _this.fog = false;
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(MeshDistanceMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(MeshDistanceMaterial.prototype), "copy", this).call(this, source);
                this.referencePosition.copy(source.referencePosition);
                this.nearDistance = source.nearDistance;
                this.farDistance = source.farDistance;
                this.map = source.map;
                this.alphaMap = source.alphaMap;
                this.displacementMap = source.displacementMap;
                this.displacementScale = source.displacementScale;
                this.displacementBias = source.displacementBias;
                return this;
            }
        }
    ]);
    return MeshDistanceMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$33e187ed002f2a19.prototype.isMeshDistanceMaterial = true;
var $b383cde4e0574ff6$var$vertex = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
var $b383cde4e0574ff6$var$fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
function $b383cde4e0574ff6$var$WebGLShadowMap(_renderer, _objects, _capabilities) {
    var VSMPass = function VSMPass(shadow, camera) {
        var geometry = _objects.update(fullScreenMesh);
        if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
            shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
            shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
            shadowMaterialVertical.needsUpdate = true;
            shadowMaterialHorizontal.needsUpdate = true;
        }
        // vertical pass
        shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
        shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
        shadowMaterialVertical.uniforms.radius.value = shadow.radius;
        _renderer.setRenderTarget(shadow.mapPass);
        _renderer.clear();
        _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
        // horizontal pass
        shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
        shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
        shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
        _renderer.setRenderTarget(shadow.map);
        _renderer.clear();
        _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
    };
    var getDepthMaterial = function getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {
        var result = null;
        var customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
        if (customMaterial !== undefined) result = customMaterial;
        else result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
        if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0) {
            // in this case we need a unique material instance reflecting the
            // appropriate state
            var keyA = result.uuid, keyB = material.uuid;
            var materialsForVariant = _materialCache[keyA];
            if (materialsForVariant === undefined) {
                materialsForVariant = {};
                _materialCache[keyA] = materialsForVariant;
            }
            var cachedMaterial = materialsForVariant[keyB];
            if (cachedMaterial === undefined) {
                cachedMaterial = result.clone();
                materialsForVariant[keyB] = cachedMaterial;
            }
            result = cachedMaterial;
        }
        result.visible = material.visible;
        result.wireframe = material.wireframe;
        if (type === $b383cde4e0574ff6$export$896ae1ade6c829c4) result.side = material.shadowSide !== null ? material.shadowSide : material.side;
        else result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
        result.alphaMap = material.alphaMap;
        result.alphaTest = material.alphaTest;
        result.clipShadows = material.clipShadows;
        result.clippingPlanes = material.clippingPlanes;
        result.clipIntersection = material.clipIntersection;
        result.displacementMap = material.displacementMap;
        result.displacementScale = material.displacementScale;
        result.displacementBias = material.displacementBias;
        result.wireframeLinewidth = material.wireframeLinewidth;
        result.linewidth = material.linewidth;
        if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
            result.referencePosition.setFromMatrixPosition(light.matrixWorld);
            result.nearDistance = shadowCameraNear;
            result.farDistance = shadowCameraFar;
        }
        return result;
    };
    var _frustum = new $b383cde4e0574ff6$export$35efe6f4c85463d2();
    var _shadowMapSize = new $b383cde4e0574ff6$export$c977b3e384af9ae1(), _viewportSize = new $b383cde4e0574ff6$export$c977b3e384af9ae1(), _viewport = new $b383cde4e0574ff6$export$fa7daccca11cdbe3(), _depthMaterial = new $b383cde4e0574ff6$export$2698c22ec13825db({
        depthPacking: $b383cde4e0574ff6$export$8f910f4c4f73df11
    }), _distanceMaterial = new $b383cde4e0574ff6$export$33e187ed002f2a19(), _materialCache = {}, _maxTextureSize = _capabilities.maxTextureSize;
    var shadowSide = {
        0: $b383cde4e0574ff6$export$d9f0486e75b5ace,
        1: $b383cde4e0574ff6$export$2ede184fc2998901,
        2: $b383cde4e0574ff6$export$3b296b6f144d5b03
    };
    var shadowMaterialVertical = new $b383cde4e0574ff6$export$83c7d75d550a8b0d({
        defines: {
            VSM_SAMPLES: 8
        },
        uniforms: {
            shadow_pass: {
                value: null
            },
            resolution: {
                value: new $b383cde4e0574ff6$export$c977b3e384af9ae1()
            },
            radius: {
                value: 4.0
            }
        },
        vertexShader: $b383cde4e0574ff6$var$vertex,
        fragmentShader: $b383cde4e0574ff6$var$fragment
    });
    var shadowMaterialHorizontal = shadowMaterialVertical.clone();
    shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
    var fullScreenTri = new $b383cde4e0574ff6$export$b7be63a67df8959();
    fullScreenTri.setAttribute("position", new $b383cde4e0574ff6$export$8dea267bd6bde117(new Float32Array([
        -1,
        -1,
        0.5,
        3,
        -1,
        0.5,
        -1,
        3,
        0.5
    ]), 3));
    var fullScreenMesh = new $b383cde4e0574ff6$export$e176487c05830cc5(fullScreenTri, shadowMaterialVertical);
    var scope = this;
    this.enabled = false;
    this.autoUpdate = true;
    this.needsUpdate = false;
    this.type = $b383cde4e0574ff6$export$5813f879eee7cd88;
    this.render = function(lights, scene, camera) {
        if (scope.enabled === false) return;
        if (scope.autoUpdate === false && scope.needsUpdate === false) return;
        if (lights.length === 0) return;
        var currentRenderTarget = _renderer.getRenderTarget();
        var activeCubeFace = _renderer.getActiveCubeFace();
        var activeMipmapLevel = _renderer.getActiveMipmapLevel();
        var _state = _renderer.state;
        // Set GL state for depth map.
        _state.setBlending($b383cde4e0574ff6$export$63b8d6b580fc65ba);
        _state.buffers.color.setClear(1, 1, 1, 1);
        _state.buffers.depth.setTest(true);
        _state.setScissorTest(false);
        // render depth map
        for(var i = 0, il = lights.length; i < il; i++){
            var light = lights[i];
            var shadow = light.shadow;
            if (shadow === undefined) {
                console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
                continue;
            }
            if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;
            _shadowMapSize.copy(shadow.mapSize);
            var shadowFrameExtents = shadow.getFrameExtents();
            _shadowMapSize.multiply(shadowFrameExtents);
            _viewportSize.copy(shadow.mapSize);
            if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
                if (_shadowMapSize.x > _maxTextureSize) {
                    _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
                    _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
                    shadow.mapSize.x = _viewportSize.x;
                }
                if (_shadowMapSize.y > _maxTextureSize) {
                    _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
                    _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
                    shadow.mapSize.y = _viewportSize.y;
                }
            }
            if (shadow.map === null && !shadow.isPointLightShadow && this.type === $b383cde4e0574ff6$export$896ae1ade6c829c4) {
                var pars = {
                    minFilter: $b383cde4e0574ff6$export$8a72f490b25c56c8,
                    magFilter: $b383cde4e0574ff6$export$8a72f490b25c56c8,
                    format: $b383cde4e0574ff6$export$3f8bb04b555a363c
                };
                shadow.map = new $b383cde4e0574ff6$export$3c052beb2e51e23f(_shadowMapSize.x, _shadowMapSize.y, pars);
                shadow.map.texture.name = light.name + ".shadowMap";
                shadow.mapPass = new $b383cde4e0574ff6$export$3c052beb2e51e23f(_shadowMapSize.x, _shadowMapSize.y, pars);
                shadow.camera.updateProjectionMatrix();
            }
            if (shadow.map === null) {
                var pars1 = {
                    minFilter: $b383cde4e0574ff6$export$727aa5ec3fe39bf0,
                    magFilter: $b383cde4e0574ff6$export$727aa5ec3fe39bf0,
                    format: $b383cde4e0574ff6$export$3f8bb04b555a363c
                };
                shadow.map = new $b383cde4e0574ff6$export$3c052beb2e51e23f(_shadowMapSize.x, _shadowMapSize.y, pars1);
                shadow.map.texture.name = light.name + ".shadowMap";
                shadow.camera.updateProjectionMatrix();
            }
            _renderer.setRenderTarget(shadow.map);
            _renderer.clear();
            var viewportCount = shadow.getViewportCount();
            for(var vp = 0; vp < viewportCount; vp++){
                var viewport = shadow.getViewport(vp);
                _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);
                _state.viewport(_viewport);
                shadow.updateMatrices(light, vp);
                _frustum = shadow.getFrustum();
                renderObject(scene, camera, shadow.camera, light, this.type);
            }
            // do blur pass for VSM
            if (!shadow.isPointLightShadow && this.type === $b383cde4e0574ff6$export$896ae1ade6c829c4) VSMPass(shadow, camera);
            shadow.needsUpdate = false;
        }
        scope.needsUpdate = false;
        _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
    };
    function renderObject(object, camera, shadowCamera, light, type) {
        if (object.visible === false) return;
        var visible = object.layers.test(camera.layers);
        if (visible && (object.isMesh || object.isLine || object.isPoints)) {
            if ((object.castShadow || object.receiveShadow && type === $b383cde4e0574ff6$export$896ae1ade6c829c4) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
                object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
                var geometry = _objects.update(object);
                var material = object.material;
                if (Array.isArray(material)) {
                    var groups = geometry.groups;
                    for(var k = 0, kl = groups.length; k < kl; k++){
                        var group = groups[k];
                        var groupMaterial = material[group.materialIndex];
                        if (groupMaterial && groupMaterial.visible) {
                            var depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);
                            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
                        }
                    }
                } else if (material.visible) {
                    var depthMaterial1 = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);
                    _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial1, object, null);
                }
            }
        }
        var children = object.children;
        for(var i = 0, l = children.length; i < l; i++)renderObject(children[i], camera, shadowCamera, light, type);
    }
}
function $b383cde4e0574ff6$var$WebGLState(gl, extensions, capabilities) {
    var ColorBuffer = function ColorBuffer() {
        var locked = false;
        var color = new $b383cde4e0574ff6$export$fa7daccca11cdbe3();
        var currentColorMask = null;
        var currentColorClear = new $b383cde4e0574ff6$export$fa7daccca11cdbe3(0, 0, 0, 0);
        return {
            setMask: function setMask(colorMask) {
                if (currentColorMask !== colorMask && !locked) {
                    gl.colorMask(colorMask, colorMask, colorMask, colorMask);
                    currentColorMask = colorMask;
                }
            },
            setLocked: function setLocked(lock) {
                locked = lock;
            },
            setClear: function setClear(r, g, b, a, premultipliedAlpha) {
                if (premultipliedAlpha === true) {
                    r *= a;
                    g *= a;
                    b *= a;
                }
                color.set(r, g, b, a);
                if (currentColorClear.equals(color) === false) {
                    gl.clearColor(r, g, b, a);
                    currentColorClear.copy(color);
                }
            },
            reset: function reset() {
                locked = false;
                currentColorMask = null;
                currentColorClear.set(-1, 0, 0, 0); // set to invalid state
            }
        };
    };
    var DepthBuffer = function DepthBuffer() {
        var locked = false;
        var currentDepthMask = null;
        var currentDepthFunc = null;
        var currentDepthClear = null;
        return {
            setTest: function setTest(depthTest) {
                if (depthTest) enable(2929);
                else disable(2929);
            },
            setMask: function setMask(depthMask) {
                if (currentDepthMask !== depthMask && !locked) {
                    gl.depthMask(depthMask);
                    currentDepthMask = depthMask;
                }
            },
            setFunc: function setFunc(depthFunc) {
                if (currentDepthFunc !== depthFunc) {
                    if (depthFunc) switch(depthFunc){
                        case $b383cde4e0574ff6$export$69025ce147cee220:
                            gl.depthFunc(512);
                            break;
                        case $b383cde4e0574ff6$export$7182eb52ea3b3f04:
                            gl.depthFunc(519);
                            break;
                        case $b383cde4e0574ff6$export$eedccec66ab7ebe:
                            gl.depthFunc(513);
                            break;
                        case $b383cde4e0574ff6$export$296f78a0b892f81a:
                            gl.depthFunc(515);
                            break;
                        case $b383cde4e0574ff6$export$a60d398fc7b7590e:
                            gl.depthFunc(514);
                            break;
                        case $b383cde4e0574ff6$export$7d7234c1240a1fc4:
                            gl.depthFunc(518);
                            break;
                        case $b383cde4e0574ff6$export$c5e2c52991f30937:
                            gl.depthFunc(516);
                            break;
                        case $b383cde4e0574ff6$export$2f843afa843d8916:
                            gl.depthFunc(517);
                            break;
                        default:
                            gl.depthFunc(515);
                    }
                    else gl.depthFunc(515);
                    currentDepthFunc = depthFunc;
                }
            },
            setLocked: function setLocked(lock) {
                locked = lock;
            },
            setClear: function setClear(depth) {
                if (currentDepthClear !== depth) {
                    gl.clearDepth(depth);
                    currentDepthClear = depth;
                }
            },
            reset: function reset() {
                locked = false;
                currentDepthMask = null;
                currentDepthFunc = null;
                currentDepthClear = null;
            }
        };
    };
    var StencilBuffer = function StencilBuffer() {
        var locked = false;
        var currentStencilMask = null;
        var currentStencilFunc = null;
        var currentStencilRef = null;
        var currentStencilFuncMask = null;
        var currentStencilFail = null;
        var currentStencilZFail = null;
        var currentStencilZPass = null;
        var currentStencilClear = null;
        return {
            setTest: function setTest(stencilTest) {
                if (!locked) {
                    if (stencilTest) enable(2960);
                    else disable(2960);
                }
            },
            setMask: function setMask(stencilMask) {
                if (currentStencilMask !== stencilMask && !locked) {
                    gl.stencilMask(stencilMask);
                    currentStencilMask = stencilMask;
                }
            },
            setFunc: function setFunc(stencilFunc, stencilRef, stencilMask) {
                if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
                    gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
                    currentStencilFunc = stencilFunc;
                    currentStencilRef = stencilRef;
                    currentStencilFuncMask = stencilMask;
                }
            },
            setOp: function setOp(stencilFail, stencilZFail, stencilZPass) {
                if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
                    gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
                    currentStencilFail = stencilFail;
                    currentStencilZFail = stencilZFail;
                    currentStencilZPass = stencilZPass;
                }
            },
            setLocked: function setLocked(lock) {
                locked = lock;
            },
            setClear: function setClear(stencil) {
                if (currentStencilClear !== stencil) {
                    gl.clearStencil(stencil);
                    currentStencilClear = stencil;
                }
            },
            reset: function reset() {
                locked = false;
                currentStencilMask = null;
                currentStencilFunc = null;
                currentStencilRef = null;
                currentStencilFuncMask = null;
                currentStencilFail = null;
                currentStencilZFail = null;
                currentStencilZPass = null;
                currentStencilClear = null;
            }
        };
    };
    var createTexture = function createTexture(type, target, count) {
        var data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.
        var texture = gl.createTexture();
        gl.bindTexture(type, texture);
        gl.texParameteri(type, 10241, 9728);
        gl.texParameteri(type, 10240, 9728);
        for(var i = 0; i < count; i++)gl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);
        return texture;
    };
    var enable = //
    function enable(id) {
        if (enabledCapabilities[id] !== true) {
            gl.enable(id);
            enabledCapabilities[id] = true;
        }
    };
    var disable = function disable(id) {
        if (enabledCapabilities[id] !== false) {
            gl.disable(id);
            enabledCapabilities[id] = false;
        }
    };
    var bindXRFramebuffer = function bindXRFramebuffer(framebuffer) {
        if (framebuffer !== xrFramebuffer) {
            gl.bindFramebuffer(36160, framebuffer);
            xrFramebuffer = framebuffer;
        }
    };
    var bindFramebuffer = function bindFramebuffer(target, framebuffer) {
        if (framebuffer === null && xrFramebuffer !== null) framebuffer = xrFramebuffer; // use active XR framebuffer if available
        if (currentBoundFramebuffers[target] !== framebuffer) {
            gl.bindFramebuffer(target, framebuffer);
            currentBoundFramebuffers[target] = framebuffer;
            if (isWebGL2) {
                // 36009 is equivalent to 36160
                if (target === 36009) currentBoundFramebuffers[36160] = framebuffer;
                if (target === 36160) currentBoundFramebuffers[36009] = framebuffer;
            }
            return true;
        }
        return false;
    };
    var useProgram = function useProgram(program) {
        if (currentProgram !== program) {
            gl.useProgram(program);
            currentProgram = program;
            return true;
        }
        return false;
    };
    var setBlending = function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
        if (blending === $b383cde4e0574ff6$export$63b8d6b580fc65ba) {
            if (currentBlendingEnabled === true) {
                disable(3042);
                currentBlendingEnabled = false;
            }
            return;
        }
        if (currentBlendingEnabled === false) {
            enable(3042);
            currentBlendingEnabled = true;
        }
        if (blending !== $b383cde4e0574ff6$export$eda4864c68df1fa2) {
            if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
                if (currentBlendEquation !== $b383cde4e0574ff6$export$20183a0484ce21a0 || currentBlendEquationAlpha !== $b383cde4e0574ff6$export$20183a0484ce21a0) {
                    gl.blendEquation(32774);
                    currentBlendEquation = $b383cde4e0574ff6$export$20183a0484ce21a0;
                    currentBlendEquationAlpha = $b383cde4e0574ff6$export$20183a0484ce21a0;
                }
                if (premultipliedAlpha) switch(blending){
                    case $b383cde4e0574ff6$export$5b29a26d96ee6af0:
                        gl.blendFuncSeparate(1, 771, 1, 771);
                        break;
                    case $b383cde4e0574ff6$export$777d8f9551c2216b:
                        gl.blendFunc(1, 1);
                        break;
                    case $b383cde4e0574ff6$export$cdfa06f868e2e467:
                        gl.blendFuncSeparate(0, 0, 769, 771);
                        break;
                    case $b383cde4e0574ff6$export$4138e1c684b46a20:
                        gl.blendFuncSeparate(0, 768, 0, 770);
                        break;
                    default:
                        console.error("THREE.WebGLState: Invalid blending: ", blending);
                        break;
                }
                else switch(blending){
                    case $b383cde4e0574ff6$export$5b29a26d96ee6af0:
                        gl.blendFuncSeparate(770, 771, 1, 771);
                        break;
                    case $b383cde4e0574ff6$export$777d8f9551c2216b:
                        gl.blendFunc(770, 1);
                        break;
                    case $b383cde4e0574ff6$export$cdfa06f868e2e467:
                        gl.blendFunc(0, 769);
                        break;
                    case $b383cde4e0574ff6$export$4138e1c684b46a20:
                        gl.blendFunc(0, 768);
                        break;
                    default:
                        console.error("THREE.WebGLState: Invalid blending: ", blending);
                        break;
                }
                currentBlendSrc = null;
                currentBlendDst = null;
                currentBlendSrcAlpha = null;
                currentBlendDstAlpha = null;
                currentBlending = blending;
                currentPremultipledAlpha = premultipliedAlpha;
            }
            return;
        }
        // custom blending
        blendEquationAlpha = blendEquationAlpha || blendEquation;
        blendSrcAlpha = blendSrcAlpha || blendSrc;
        blendDstAlpha = blendDstAlpha || blendDst;
        if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
            gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
            currentBlendEquation = blendEquation;
            currentBlendEquationAlpha = blendEquationAlpha;
        }
        if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
            gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
            currentBlendSrc = blendSrc;
            currentBlendDst = blendDst;
            currentBlendSrcAlpha = blendSrcAlpha;
            currentBlendDstAlpha = blendDstAlpha;
        }
        currentBlending = blending;
        currentPremultipledAlpha = null;
    };
    var setMaterial = function setMaterial(material, frontFaceCW) {
        material.side === $b383cde4e0574ff6$export$3b296b6f144d5b03 ? disable(2884) : enable(2884);
        var flipSided = material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace;
        if (frontFaceCW) flipSided = !flipSided;
        setFlipSided(flipSided);
        material.blending === $b383cde4e0574ff6$export$5b29a26d96ee6af0 && material.transparent === false ? setBlending($b383cde4e0574ff6$export$63b8d6b580fc65ba) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
        depthBuffer.setFunc(material.depthFunc);
        depthBuffer.setTest(material.depthTest);
        depthBuffer.setMask(material.depthWrite);
        colorBuffer.setMask(material.colorWrite);
        var stencilWrite = material.stencilWrite;
        stencilBuffer.setTest(stencilWrite);
        if (stencilWrite) {
            stencilBuffer.setMask(material.stencilWriteMask);
            stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
            stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
        }
        setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
        material.alphaToCoverage === true ? enable(32926) : disable(32926);
    };
    var setFlipSided = //
    function setFlipSided(flipSided) {
        if (currentFlipSided !== flipSided) {
            if (flipSided) gl.frontFace(2304);
            else gl.frontFace(2305);
            currentFlipSided = flipSided;
        }
    };
    var setCullFace = function setCullFace(cullFace) {
        if (cullFace !== $b383cde4e0574ff6$export$3237e1f2c1ea1f44) {
            enable(2884);
            if (cullFace !== currentCullFace) {
                if (cullFace === $b383cde4e0574ff6$export$b9a7b4fc5cb15f9b) gl.cullFace(1029);
                else if (cullFace === $b383cde4e0574ff6$export$b8058bcc7037d3f3) gl.cullFace(1028);
                else gl.cullFace(1032);
            }
        } else disable(2884);
        currentCullFace = cullFace;
    };
    var setLineWidth = function setLineWidth(width) {
        if (width !== currentLineWidth) {
            if (lineWidthAvailable) gl.lineWidth(width);
            currentLineWidth = width;
        }
    };
    var setPolygonOffset = function setPolygonOffset(polygonOffset, factor, units) {
        if (polygonOffset) {
            enable(32823);
            if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
                gl.polygonOffset(factor, units);
                currentPolygonOffsetFactor = factor;
                currentPolygonOffsetUnits = units;
            }
        } else disable(32823);
    };
    var setScissorTest = function setScissorTest(scissorTest) {
        if (scissorTest) enable(3089);
        else disable(3089);
    };
    var activeTexture = // texture
    function activeTexture(webglSlot) {
        if (webglSlot === undefined) webglSlot = 33984 + maxTextures - 1;
        if (currentTextureSlot !== webglSlot) {
            gl.activeTexture(webglSlot);
            currentTextureSlot = webglSlot;
        }
    };
    var bindTexture = function bindTexture(webglType, webglTexture) {
        if (currentTextureSlot === null) activeTexture();
        var boundTexture = currentBoundTextures[currentTextureSlot];
        if (boundTexture === undefined) {
            boundTexture = {
                type: undefined,
                texture: undefined
            };
            currentBoundTextures[currentTextureSlot] = boundTexture;
        }
        if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
            gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
            boundTexture.type = webglType;
            boundTexture.texture = webglTexture;
        }
    };
    var unbindTexture = function unbindTexture() {
        var boundTexture = currentBoundTextures[currentTextureSlot];
        if (boundTexture !== undefined && boundTexture.type !== undefined) {
            gl.bindTexture(boundTexture.type, null);
            boundTexture.type = undefined;
            boundTexture.texture = undefined;
        }
    };
    var compressedTexImage2D = function compressedTexImage2D() {
        try {
            gl.compressedTexImage2D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    };
    var texImage2D = function texImage2D() {
        try {
            gl.texImage2D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    };
    var texImage3D = function texImage3D() {
        try {
            gl.texImage3D.apply(gl, arguments);
        } catch (error) {
            console.error("THREE.WebGLState:", error);
        }
    };
    var scissor = //
    function scissor(_scissor) {
        if (currentScissor.equals(_scissor) === false) {
            gl.scissor(_scissor.x, _scissor.y, _scissor.z, _scissor.w);
            currentScissor.copy(_scissor);
        }
    };
    var viewport = function viewport(_viewport1) {
        if (currentViewport.equals(_viewport1) === false) {
            gl.viewport(_viewport1.x, _viewport1.y, _viewport1.z, _viewport1.w);
            currentViewport.copy(_viewport1);
        }
    };
    var reset = //
    function reset() {
        // reset state
        gl.disable(3042);
        gl.disable(2884);
        gl.disable(2929);
        gl.disable(32823);
        gl.disable(3089);
        gl.disable(2960);
        gl.disable(32926);
        gl.blendEquation(32774);
        gl.blendFunc(1, 0);
        gl.blendFuncSeparate(1, 0, 1, 0);
        gl.colorMask(true, true, true, true);
        gl.clearColor(0, 0, 0, 0);
        gl.depthMask(true);
        gl.depthFunc(513);
        gl.clearDepth(1);
        gl.stencilMask(0xffffffff);
        gl.stencilFunc(519, 0, 0xffffffff);
        gl.stencilOp(7680, 7680, 7680);
        gl.clearStencil(0);
        gl.cullFace(1029);
        gl.frontFace(2305);
        gl.polygonOffset(0, 0);
        gl.activeTexture(33984);
        gl.bindFramebuffer(36160, null);
        if (isWebGL2 === true) {
            gl.bindFramebuffer(36009, null);
            gl.bindFramebuffer(36008, null);
        }
        gl.useProgram(null);
        gl.lineWidth(1);
        gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        // reset internals
        enabledCapabilities = {};
        currentTextureSlot = null;
        currentBoundTextures = {};
        xrFramebuffer = null;
        currentBoundFramebuffers = {};
        currentProgram = null;
        currentBlendingEnabled = false;
        currentBlending = null;
        currentBlendEquation = null;
        currentBlendSrc = null;
        currentBlendDst = null;
        currentBlendEquationAlpha = null;
        currentBlendSrcAlpha = null;
        currentBlendDstAlpha = null;
        currentPremultipledAlpha = false;
        currentFlipSided = null;
        currentCullFace = null;
        currentLineWidth = null;
        currentPolygonOffsetFactor = null;
        currentPolygonOffsetUnits = null;
        currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
        currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
        colorBuffer.reset();
        depthBuffer.reset();
        stencilBuffer.reset();
    };
    var isWebGL2 = capabilities.isWebGL2;
    //
    var colorBuffer = new ColorBuffer();
    var depthBuffer = new DepthBuffer();
    var stencilBuffer = new StencilBuffer();
    var enabledCapabilities = {};
    var xrFramebuffer = null;
    var currentBoundFramebuffers = {};
    var currentProgram = null;
    var currentBlendingEnabled = false;
    var currentBlending = null;
    var currentBlendEquation = null;
    var currentBlendSrc = null;
    var currentBlendDst = null;
    var currentBlendEquationAlpha = null;
    var currentBlendSrcAlpha = null;
    var currentBlendDstAlpha = null;
    var currentPremultipledAlpha = false;
    var currentFlipSided = null;
    var currentCullFace = null;
    var currentLineWidth = null;
    var currentPolygonOffsetFactor = null;
    var currentPolygonOffsetUnits = null;
    var maxTextures = gl.getParameter(35661);
    var lineWidthAvailable = false;
    var version = 0;
    var glVersion = gl.getParameter(7938);
    if (glVersion.indexOf("WebGL") !== -1) {
        version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
        lineWidthAvailable = version >= 1.0;
    } else if (glVersion.indexOf("OpenGL ES") !== -1) {
        version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
        lineWidthAvailable = version >= 2.0;
    }
    var currentTextureSlot = null;
    var currentBoundTextures = {};
    var scissorParam = gl.getParameter(3088);
    var viewportParam = gl.getParameter(2978);
    var currentScissor = new $b383cde4e0574ff6$export$fa7daccca11cdbe3().fromArray(scissorParam);
    var currentViewport = new $b383cde4e0574ff6$export$fa7daccca11cdbe3().fromArray(viewportParam);
    var emptyTextures = {};
    emptyTextures[3553] = createTexture(3553, 3553, 1);
    emptyTextures[34067] = createTexture(34067, 34069, 6);
    // init
    colorBuffer.setClear(0, 0, 0, 1);
    depthBuffer.setClear(1);
    stencilBuffer.setClear(0);
    enable(2929);
    depthBuffer.setFunc($b383cde4e0574ff6$export$296f78a0b892f81a);
    setFlipSided(false);
    setCullFace($b383cde4e0574ff6$export$b9a7b4fc5cb15f9b);
    enable(2884);
    setBlending($b383cde4e0574ff6$export$63b8d6b580fc65ba);
    var _obj;
    var equationToGL = (_obj = {}, (0, $dK6Ta.default)(_obj, $b383cde4e0574ff6$export$20183a0484ce21a0, 32774), (0, $dK6Ta.default)(_obj, $b383cde4e0574ff6$export$73e0df5177988548, 32778), (0, $dK6Ta.default)(_obj, $b383cde4e0574ff6$export$28e582859cbec660, 32779), _obj);
    if (isWebGL2) {
        equationToGL[$b383cde4e0574ff6$export$c8c1508da8d0600c] = 32775;
        equationToGL[$b383cde4e0574ff6$export$99948c02fb51055f] = 32776;
    } else {
        var extension = extensions.get("EXT_blend_minmax");
        if (extension !== null) {
            equationToGL[$b383cde4e0574ff6$export$c8c1508da8d0600c] = extension.MIN_EXT;
            equationToGL[$b383cde4e0574ff6$export$99948c02fb51055f] = extension.MAX_EXT;
        }
    }
    var _obj1;
    var factorToGL = (_obj1 = {}, (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$2110f05edf778d3d, 0), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$8805bad65e24940e, 1), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$7fbe15b28d28cf52, 768), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$d5773124e86cf28c, 770), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$c05e2a1fc8609506, 776), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$ef5f2dd8ffac5574, 774), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$a78aed1ca2a87192, 772), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$947829af9f2c17f6, 769), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$11d468cc7f19e971, 771), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$56b85b2686ab16, 775), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$5d0fe17fd8773bac, 773), _obj1);
    return {
        buffers: {
            color: colorBuffer,
            depth: depthBuffer,
            stencil: stencilBuffer
        },
        enable: enable,
        disable: disable,
        bindFramebuffer: bindFramebuffer,
        bindXRFramebuffer: bindXRFramebuffer,
        useProgram: useProgram,
        setBlending: setBlending,
        setMaterial: setMaterial,
        setFlipSided: setFlipSided,
        setCullFace: setCullFace,
        setLineWidth: setLineWidth,
        setPolygonOffset: setPolygonOffset,
        setScissorTest: setScissorTest,
        activeTexture: activeTexture,
        bindTexture: bindTexture,
        unbindTexture: unbindTexture,
        compressedTexImage2D: compressedTexImage2D,
        texImage2D: texImage2D,
        texImage3D: texImage3D,
        scissor: scissor,
        viewport: viewport,
        reset: reset
    };
}
function $b383cde4e0574ff6$var$WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
    var createCanvas = function createCanvas(width, height) {
        // Use OffscreenCanvas when available. Specially needed in web workers
        return useOffscreenCanvas ? new OffscreenCanvas(width, height) : $b383cde4e0574ff6$var$createElementNS("canvas");
    };
    var resizeImage = function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
        var scale = 1;
        // handle case if texture exceeds max size
        if (image.width > maxSize || image.height > maxSize) scale = maxSize / Math.max(image.width, image.height);
        // only perform resize if necessary
        if (scale < 1 || needsPowerOfTwo === true) {
            // only perform resize for certain image types
            if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
                var floor = needsPowerOfTwo ? $b383cde4e0574ff6$var$floorPowerOfTwo : Math.floor;
                var width = floor(scale * image.width);
                var height = floor(scale * image.height);
                if (_canvas === undefined) _canvas = createCanvas(width, height);
                // cube textures can't reuse the same canvas
                var canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;
                canvas.width = width;
                canvas.height = height;
                var context = canvas.getContext("2d");
                context.drawImage(image, 0, 0, width, height);
                console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image.width + "x" + image.height + ") to (" + width + "x" + height + ").");
                return canvas;
            } else {
                if ("data" in image) console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image.width + "x" + image.height + ").");
                return image;
            }
        }
        return image;
    };
    var isPowerOfTwo$1 = function isPowerOfTwo$1(image) {
        return $b383cde4e0574ff6$var$isPowerOfTwo(image.width) && $b383cde4e0574ff6$var$isPowerOfTwo(image.height);
    };
    var textureNeedsPowerOfTwo = function textureNeedsPowerOfTwo(texture) {
        if (isWebGL2) return false;
        return texture.wrapS !== $b383cde4e0574ff6$export$9d9334239a5a5e06 || texture.wrapT !== $b383cde4e0574ff6$export$9d9334239a5a5e06 || texture.minFilter !== $b383cde4e0574ff6$export$727aa5ec3fe39bf0 && texture.minFilter !== $b383cde4e0574ff6$export$8a72f490b25c56c8;
    };
    var textureNeedsGenerateMipmaps = function textureNeedsGenerateMipmaps(texture, supportsMips) {
        return texture.generateMipmaps && supportsMips && texture.minFilter !== $b383cde4e0574ff6$export$727aa5ec3fe39bf0 && texture.minFilter !== $b383cde4e0574ff6$export$8a72f490b25c56c8;
    };
    var generateMipmap = function generateMipmap(target, texture, width, height) {
        var depth = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 1;
        _gl.generateMipmap(target);
        var textureProperties = properties.get(texture);
        textureProperties.__maxMipLevel = Math.log2(Math.max(width, height, depth));
    };
    var getInternalFormat = function getInternalFormat(internalFormatName, glFormat, glType, encoding) {
        if (isWebGL2 === false) return glFormat;
        if (internalFormatName !== null) {
            if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];
            console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
        }
        var internalFormat = glFormat;
        if (glFormat === 6403) {
            if (glType === 5126) internalFormat = 33326;
            if (glType === 5131) internalFormat = 33325;
            if (glType === 5121) internalFormat = 33321;
        }
        if (glFormat === 6407) {
            if (glType === 5126) internalFormat = 34837;
            if (glType === 5131) internalFormat = 34843;
            if (glType === 5121) internalFormat = 32849;
        }
        if (glFormat === 6408) {
            if (glType === 5126) internalFormat = 34836;
            if (glType === 5131) internalFormat = 34842;
            if (glType === 5121) internalFormat = encoding === $b383cde4e0574ff6$export$f32388edbb32674 ? 35907 : 32856;
        }
        if (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) extensions.get("EXT_color_buffer_float");
        return internalFormat;
    };
    var filterFallback = // Fallback filters for non-power-of-2 textures
    function filterFallback(f) {
        if (f === $b383cde4e0574ff6$export$727aa5ec3fe39bf0 || f === $b383cde4e0574ff6$export$d129e38cf6feaa8c || f === $b383cde4e0574ff6$export$d2327c1afe5bfdf2) return 9728;
        return 9729;
    };
    var deallocateTexture = //
    function deallocateTexture(texture) {
        var textureProperties = properties.get(texture);
        if (textureProperties.__webglInit === undefined) return;
        _gl.deleteTexture(textureProperties.__webglTexture);
        properties.remove(texture);
    };
    var deallocateRenderTarget = function deallocateRenderTarget(renderTarget) {
        var texture = renderTarget.texture;
        var renderTargetProperties = properties.get(renderTarget);
        var textureProperties = properties.get(texture);
        if (!renderTarget) return;
        if (textureProperties.__webglTexture !== undefined) {
            _gl.deleteTexture(textureProperties.__webglTexture);
            info.memory.textures--;
        }
        if (renderTarget.depthTexture) renderTarget.depthTexture.dispose();
        if (renderTarget.isWebGLCubeRenderTarget) for(var i = 0; i < 6; i++){
            _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);
            if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
        }
        else {
            _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
            if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
            if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
            if (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);
            if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
        }
        if (renderTarget.isWebGLMultipleRenderTargets) for(var i1 = 0, il = texture.length; i1 < il; i1++){
            var attachmentProperties = properties.get(texture[i1]);
            if (attachmentProperties.__webglTexture) {
                _gl.deleteTexture(attachmentProperties.__webglTexture);
                info.memory.textures--;
            }
            properties.remove(texture[i1]);
        }
        properties.remove(texture);
        properties.remove(renderTarget);
    };
    var resetTextureUnits = function resetTextureUnits() {
        textureUnits = 0;
    };
    var allocateTextureUnit = function allocateTextureUnit() {
        var textureUnit = textureUnits;
        if (textureUnit >= maxTextures) console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + maxTextures);
        textureUnits += 1;
        return textureUnit;
    };
    var setTexture2D = //
    function setTexture2D(texture, slot) {
        var textureProperties = properties.get(texture);
        if (texture.isVideoTexture) updateVideoTexture(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            var image = texture.image;
            if (image === undefined) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
            else if (image.complete === false) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
            else {
                uploadTexture(textureProperties, texture, slot);
                return;
            }
        }
        state.activeTexture(33984 + slot);
        state.bindTexture(3553, textureProperties.__webglTexture);
    };
    var setTexture2DArray = function setTexture2DArray(texture, slot) {
        var textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadTexture(textureProperties, texture, slot);
            return;
        }
        state.activeTexture(33984 + slot);
        state.bindTexture(35866, textureProperties.__webglTexture);
    };
    var setTexture3D = function setTexture3D(texture, slot) {
        var textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadTexture(textureProperties, texture, slot);
            return;
        }
        state.activeTexture(33984 + slot);
        state.bindTexture(32879, textureProperties.__webglTexture);
    };
    var setTextureCube = function setTextureCube(texture, slot) {
        var textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadCubeTexture(textureProperties, texture, slot);
            return;
        }
        state.activeTexture(33984 + slot);
        state.bindTexture(34067, textureProperties.__webglTexture);
    };
    var setTextureParameters = function setTextureParameters(textureType, texture, supportsMips) {
        if (supportsMips) {
            _gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);
            _gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);
            if (textureType === 32879 || textureType === 35866) _gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);
            _gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);
            _gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);
        } else {
            _gl.texParameteri(textureType, 10242, 33071);
            _gl.texParameteri(textureType, 10243, 33071);
            if (textureType === 32879 || textureType === 35866) _gl.texParameteri(textureType, 32882, 33071);
            if (texture.wrapS !== $b383cde4e0574ff6$export$9d9334239a5a5e06 || texture.wrapT !== $b383cde4e0574ff6$export$9d9334239a5a5e06) console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");
            _gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));
            _gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));
            if (texture.minFilter !== $b383cde4e0574ff6$export$727aa5ec3fe39bf0 && texture.minFilter !== $b383cde4e0574ff6$export$8a72f490b25c56c8) console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.");
        }
        if (extensions.has("EXT_texture_filter_anisotropic") === true) {
            var extension = extensions.get("EXT_texture_filter_anisotropic");
            if (texture.type === $b383cde4e0574ff6$export$f6d331659b644596 && extensions.has("OES_texture_float_linear") === false) return; // verify extension for WebGL 1 and WebGL 2
            if (isWebGL2 === false && texture.type === $b383cde4e0574ff6$export$2697304443f382bc && extensions.has("OES_texture_half_float_linear") === false) return; // verify extension for WebGL 1 only
            if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
                _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
                properties.get(texture).__currentAnisotropy = texture.anisotropy;
            }
        }
    };
    var initTexture = function initTexture(textureProperties, texture) {
        if (textureProperties.__webglInit === undefined) {
            textureProperties.__webglInit = true;
            texture.addEventListener("dispose", onTextureDispose);
            textureProperties.__webglTexture = _gl.createTexture();
            info.memory.textures++;
        }
    };
    var uploadTexture = function uploadTexture(textureProperties, texture, slot) {
        var textureType = 3553;
        if (texture.isDataTexture2DArray) textureType = 35866;
        if (texture.isDataTexture3D) textureType = 32879;
        initTexture(textureProperties, texture);
        state.activeTexture(33984 + slot);
        state.bindTexture(textureType, textureProperties.__webglTexture);
        _gl.pixelStorei(37440, texture.flipY);
        _gl.pixelStorei(37441, texture.premultiplyAlpha);
        _gl.pixelStorei(3317, texture.unpackAlignment);
        _gl.pixelStorei(37443, 0);
        var needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
        var image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
        var supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format);
        var glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
        setTextureParameters(textureType, texture, supportsMips);
        var mipmap;
        var mipmaps = texture.mipmaps;
        if (texture.isDepthTexture) {
            // populate depth texture with dummy data
            glInternalFormat = 6402;
            if (isWebGL2) {
                if (texture.type === $b383cde4e0574ff6$export$f6d331659b644596) glInternalFormat = 36012;
                else if (texture.type === $b383cde4e0574ff6$export$c3c7fc4518ebba96) glInternalFormat = 33190;
                else if (texture.type === $b383cde4e0574ff6$export$6c8ea339bfab1301) glInternalFormat = 35056;
                else glInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D
            } else if (texture.type === $b383cde4e0574ff6$export$f6d331659b644596) console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");
            // validation checks for WebGL 1
            if (texture.format === $b383cde4e0574ff6$export$c1b6b5136be58045 && glInternalFormat === 6402) // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
            // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
            // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
            {
                if (texture.type !== $b383cde4e0574ff6$export$c63dc51868b06a9d && texture.type !== $b383cde4e0574ff6$export$c3c7fc4518ebba96) {
                    console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
                    texture.type = $b383cde4e0574ff6$export$c63dc51868b06a9d;
                    glType = utils.convert(texture.type);
                }
            }
            if (texture.format === $b383cde4e0574ff6$export$1e113ac2d0905829 && glInternalFormat === 6402) {
                // Depth stencil textures need the DEPTH_STENCIL internal format
                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                glInternalFormat = 34041;
                // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
                // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                if (texture.type !== $b383cde4e0574ff6$export$6c8ea339bfab1301) {
                    console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
                    texture.type = $b383cde4e0574ff6$export$6c8ea339bfab1301;
                    glType = utils.convert(texture.type);
                }
            }
            //
            state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
        } else if (texture.isDataTexture) {
            // use manually created mipmaps if available
            // if there are no manual mipmaps
            // set 0 level mipmap and then use GL to generate other mipmap levels
            if (mipmaps.length > 0 && supportsMips) {
                for(var i = 0, il = mipmaps.length; i < il; i++){
                    mipmap = mipmaps[i];
                    state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
                texture.generateMipmaps = false;
                textureProperties.__maxMipLevel = mipmaps.length - 1;
            } else {
                state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
                textureProperties.__maxMipLevel = 0;
            }
        } else if (texture.isCompressedTexture) {
            for(var i1 = 0, il1 = mipmaps.length; i1 < il1; i1++){
                mipmap = mipmaps[i1];
                if (texture.format !== $b383cde4e0574ff6$export$3f8bb04b555a363c && texture.format !== $b383cde4e0574ff6$export$7c67423a5ee6f5eb) {
                    if (glFormat !== null) state.compressedTexImage2D(3553, i1, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                    else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
                } else state.texImage2D(3553, i1, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
            }
            textureProperties.__maxMipLevel = mipmaps.length - 1;
        } else if (texture.isDataTexture2DArray) {
            state.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
            textureProperties.__maxMipLevel = 0;
        } else if (texture.isDataTexture3D) {
            state.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
            textureProperties.__maxMipLevel = 0;
        } else // regular Texture (image, video, canvas)
        // use manually created mipmaps if available
        // if there are no manual mipmaps
        // set 0 level mipmap and then use GL to generate other mipmap levels
        if (mipmaps.length > 0 && supportsMips) {
            for(var i2 = 0, il2 = mipmaps.length; i2 < il2; i2++){
                mipmap = mipmaps[i2];
                state.texImage2D(3553, i2, glInternalFormat, glFormat, glType, mipmap);
            }
            texture.generateMipmaps = false;
            textureProperties.__maxMipLevel = mipmaps.length - 1;
        } else {
            state.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);
            textureProperties.__maxMipLevel = 0;
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(textureType, texture, image.width, image.height);
        textureProperties.__version = texture.version;
        if (texture.onUpdate) texture.onUpdate(texture);
    };
    var uploadCubeTexture = function uploadCubeTexture(textureProperties, texture, slot) {
        if (texture.image.length !== 6) return;
        initTexture(textureProperties, texture);
        state.activeTexture(33984 + slot);
        state.bindTexture(34067, textureProperties.__webglTexture);
        _gl.pixelStorei(37440, texture.flipY);
        _gl.pixelStorei(37441, texture.premultiplyAlpha);
        _gl.pixelStorei(3317, texture.unpackAlignment);
        _gl.pixelStorei(37443, 0);
        var isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);
        var isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
        var cubeImage = [];
        for(var i = 0; i < 6; i++)if (!isCompressed && !isDataTexture) cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);
        else cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
        var image = cubeImage[0], supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
        setTextureParameters(34067, texture, supportsMips);
        var mipmaps;
        if (isCompressed) {
            for(var i1 = 0; i1 < 6; i1++){
                mipmaps = cubeImage[i1].mipmaps;
                for(var j = 0; j < mipmaps.length; j++){
                    var mipmap = mipmaps[j];
                    if (texture.format !== $b383cde4e0574ff6$export$3f8bb04b555a363c && texture.format !== $b383cde4e0574ff6$export$7c67423a5ee6f5eb) {
                        if (glFormat !== null) state.compressedTexImage2D(34069 + i1, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                        else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
                    } else state.texImage2D(34069 + i1, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
            }
            textureProperties.__maxMipLevel = mipmaps.length - 1;
        } else {
            mipmaps = texture.mipmaps;
            for(var i2 = 0; i2 < 6; i2++)if (isDataTexture) {
                state.texImage2D(34069 + i2, 0, glInternalFormat, cubeImage[i2].width, cubeImage[i2].height, 0, glFormat, glType, cubeImage[i2].data);
                for(var j1 = 0; j1 < mipmaps.length; j1++){
                    var mipmap1 = mipmaps[j1];
                    var mipmapImage = mipmap1.image[i2].image;
                    state.texImage2D(34069 + i2, j1 + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
                }
            } else {
                state.texImage2D(34069 + i2, 0, glInternalFormat, glFormat, glType, cubeImage[i2]);
                for(var j2 = 0; j2 < mipmaps.length; j2++){
                    var mipmap2 = mipmaps[j2];
                    state.texImage2D(34069 + i2, j2 + 1, glInternalFormat, glFormat, glType, mipmap2.image[i2]);
                }
            }
            textureProperties.__maxMipLevel = mipmaps.length;
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) // We assume images for cube map have the same size.
        generateMipmap(34067, texture, image.width, image.height);
        textureProperties.__version = texture.version;
        if (texture.onUpdate) texture.onUpdate(texture);
    };
    var setupFrameBufferTexture = // Render targets
    // Setup storage for target texture and bind it to correct framebuffer
    function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {
        var glFormat = utils.convert(texture.format);
        var glType = utils.convert(texture.type);
        var glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
        if (textureTarget === 32879 || textureTarget === 35866) state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);
        else state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
        state.bindFramebuffer(36160, framebuffer);
        _gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(texture).__webglTexture, 0);
        state.bindFramebuffer(36160, null);
    };
    var setupRenderBufferStorage = // Setup storage for internal depth/stencil buffers and bind to correct framebuffer
    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
        _gl.bindRenderbuffer(36161, renderbuffer);
        if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
            var glInternalFormat = 33189;
            if (isMultisample) {
                var depthTexture = renderTarget.depthTexture;
                if (depthTexture && depthTexture.isDepthTexture) {
                    if (depthTexture.type === $b383cde4e0574ff6$export$f6d331659b644596) glInternalFormat = 36012;
                    else if (depthTexture.type === $b383cde4e0574ff6$export$c3c7fc4518ebba96) glInternalFormat = 33190;
                }
                var samples = getRenderTargetSamples(renderTarget);
                _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            } else _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);
        } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
            if (isMultisample) {
                var samples1 = getRenderTargetSamples(renderTarget);
                _gl.renderbufferStorageMultisample(36161, samples1, 35056, renderTarget.width, renderTarget.height);
            } else _gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);
        } else {
            // Use the first texture for MRT so far
            var texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;
            var glFormat = utils.convert(texture.format);
            var glType = utils.convert(texture.type);
            var glInternalFormat1 = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
            if (isMultisample) {
                var samples2 = getRenderTargetSamples(renderTarget);
                _gl.renderbufferStorageMultisample(36161, samples2, glInternalFormat1, renderTarget.width, renderTarget.height);
            } else _gl.renderbufferStorage(36161, glInternalFormat1, renderTarget.width, renderTarget.height);
        }
        _gl.bindRenderbuffer(36161, null);
    };
    var setupDepthTexture = // Setup resources for a Depth Texture for a FBO (needs an extension)
    function setupDepthTexture(framebuffer, renderTarget) {
        var isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
        if (isCube) throw new Error("Depth Texture with cube render targets is not supported");
        state.bindFramebuffer(36160, framebuffer);
        if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
        // upload an empty depth texture with framebuffer size
        if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
            renderTarget.depthTexture.image.width = renderTarget.width;
            renderTarget.depthTexture.image.height = renderTarget.height;
            renderTarget.depthTexture.needsUpdate = true;
        }
        setTexture2D(renderTarget.depthTexture, 0);
        var webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
        if (renderTarget.depthTexture.format === $b383cde4e0574ff6$export$c1b6b5136be58045) _gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);
        else if (renderTarget.depthTexture.format === $b383cde4e0574ff6$export$1e113ac2d0905829) _gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);
        else throw new Error("Unknown depthTexture format");
    };
    var setupDepthRenderbuffer = // Setup GL resources for a non-texture depth buffer
    function setupDepthRenderbuffer(renderTarget) {
        var renderTargetProperties = properties.get(renderTarget);
        var isCube = renderTarget.isWebGLCubeRenderTarget === true;
        if (renderTarget.depthTexture) {
            if (isCube) throw new Error("target.depthTexture not supported in Cube render targets");
            setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
        } else if (isCube) {
            renderTargetProperties.__webglDepthbuffer = [];
            for(var i = 0; i < 6; i++){
                state.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]);
                renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
                setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);
            }
        } else {
            state.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);
            renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
        }
        state.bindFramebuffer(36160, null);
    };
    var setupRenderTarget = // Set up GL resources for the render target
    function setupRenderTarget(renderTarget) {
        var texture = renderTarget.texture;
        var renderTargetProperties = properties.get(renderTarget);
        var textureProperties = properties.get(texture);
        renderTarget.addEventListener("dispose", onRenderTargetDispose);
        if (renderTarget.isWebGLMultipleRenderTargets !== true) {
            textureProperties.__webglTexture = _gl.createTexture();
            textureProperties.__version = texture.version;
            info.memory.textures++;
        }
        var isCube = renderTarget.isWebGLCubeRenderTarget === true;
        var isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
        var isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;
        var isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;
        var supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
        // Handles WebGL2 RGBFormat fallback - #18858
        if (isWebGL2 && texture.format === $b383cde4e0574ff6$export$7c67423a5ee6f5eb && (texture.type === $b383cde4e0574ff6$export$f6d331659b644596 || texture.type === $b383cde4e0574ff6$export$2697304443f382bc)) {
            texture.format = $b383cde4e0574ff6$export$3f8bb04b555a363c;
            console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.");
        }
        // Setup framebuffer
        if (isCube) {
            renderTargetProperties.__webglFramebuffer = [];
            for(var i = 0; i < 6; i++)renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
        } else {
            renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
            if (isMultipleRenderTargets) {
                if (capabilities.drawBuffers) {
                    var textures = renderTarget.texture;
                    for(var i1 = 0, il = textures.length; i1 < il; i1++){
                        var attachmentProperties = properties.get(textures[i1]);
                        if (attachmentProperties.__webglTexture === undefined) {
                            attachmentProperties.__webglTexture = _gl.createTexture();
                            info.memory.textures++;
                        }
                    }
                } else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
            } else if (isMultisample) {
                if (isWebGL2) {
                    renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
                    renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();
                    _gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);
                    var glFormat = utils.convert(texture.format);
                    var glType = utils.convert(texture.type);
                    var glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
                    var samples = getRenderTargetSamples(renderTarget);
                    _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                    state.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
                    _gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);
                    _gl.bindRenderbuffer(36161, null);
                    if (renderTarget.depthBuffer) {
                        renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
                        setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
                    }
                    state.bindFramebuffer(36160, null);
                } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
            }
        }
        // Setup color buffer
        if (isCube) {
            state.bindTexture(34067, textureProperties.__webglTexture);
            setTextureParameters(34067, texture, supportsMips);
            for(var i2 = 0; i2 < 6; i2++)setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i2], renderTarget, texture, 36064, 34069 + i2);
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(34067, texture, renderTarget.width, renderTarget.height);
            state.unbindTexture();
        } else if (isMultipleRenderTargets) {
            var textures1 = renderTarget.texture;
            for(var i3 = 0, il1 = textures1.length; i3 < il1; i3++){
                var attachment = textures1[i3];
                var attachmentProperties1 = properties.get(attachment);
                state.bindTexture(3553, attachmentProperties1.__webglTexture);
                setTextureParameters(3553, attachment, supportsMips);
                setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i3, 3553);
                if (textureNeedsGenerateMipmaps(attachment, supportsMips)) generateMipmap(3553, attachment, renderTarget.width, renderTarget.height);
            }
            state.unbindTexture();
        } else {
            var glTextureType = 3553;
            if (isRenderTarget3D) {
                // Render targets containing layers, i.e: Texture 3D and 2d arrays
                if (isWebGL2) {
                    var isTexture3D = texture.isDataTexture3D;
                    glTextureType = isTexture3D ? 32879 : 35866;
                } else console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.");
            }
            state.bindTexture(glTextureType, textureProperties.__webglTexture);
            setTextureParameters(glTextureType, texture, supportsMips);
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType);
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(glTextureType, texture, renderTarget.width, renderTarget.height, renderTarget.depth);
            state.unbindTexture();
        }
        // Setup depth and stencil buffers
        if (renderTarget.depthBuffer) setupDepthRenderbuffer(renderTarget);
    };
    var updateRenderTargetMipmap = function updateRenderTargetMipmap(renderTarget) {
        var supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
        var textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [
            renderTarget.texture
        ];
        for(var i = 0, il = textures.length; i < il; i++){
            var texture = textures[i];
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
                var target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
                var webglTexture = properties.get(texture).__webglTexture;
                state.bindTexture(target, webglTexture);
                generateMipmap(target, texture, renderTarget.width, renderTarget.height);
                state.unbindTexture();
            }
        }
    };
    var updateMultisampleRenderTarget = function updateMultisampleRenderTarget(renderTarget) {
        if (renderTarget.isWebGLMultisampleRenderTarget) {
            if (isWebGL2) {
                var width = renderTarget.width;
                var height = renderTarget.height;
                var mask = 16384;
                if (renderTarget.depthBuffer) mask |= 256;
                if (renderTarget.stencilBuffer) mask |= 1024;
                var renderTargetProperties = properties.get(renderTarget);
                state.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);
                state.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);
                _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);
                state.bindFramebuffer(36008, null);
                state.bindFramebuffer(36009, renderTargetProperties.__webglMultisampledFramebuffer);
            } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
        }
    };
    var getRenderTargetSamples = function getRenderTargetSamples(renderTarget) {
        return isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;
    };
    var updateVideoTexture = function updateVideoTexture(texture) {
        var frame = info.render.frame;
        // Check the last frame we updated the VideoTexture
        if (_videoTextures.get(texture) !== frame) {
            _videoTextures.set(texture, frame);
            texture.update();
        }
    };
    var safeSetTexture2D = function safeSetTexture2D(texture, slot) {
        if (texture && texture.isWebGLRenderTarget) {
            if (warnedTexture2D === false) {
                console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.");
                warnedTexture2D = true;
            }
            texture = texture.texture;
        }
        setTexture2D(texture, slot);
    };
    var safeSetTextureCube = function safeSetTextureCube(texture, slot) {
        if (texture && texture.isWebGLCubeRenderTarget) {
            if (warnedTextureCube === false) {
                console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.");
                warnedTextureCube = true;
            }
            texture = texture.texture;
        }
        setTextureCube(texture, slot);
    };
    var isWebGL2 = capabilities.isWebGL2;
    var maxTextures = capabilities.maxTextures;
    var maxCubemapSize = capabilities.maxCubemapSize;
    var maxTextureSize = capabilities.maxTextureSize;
    var maxSamples = capabilities.maxSamples;
    var _videoTextures = new WeakMap();
    var _canvas;
    // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
    // also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
    // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
    var useOffscreenCanvas = false;
    try {
        useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
    } catch (err) {
    // Ignore any errors
    }
    //
    function onTextureDispose(event) {
        var texture = event.target;
        texture.removeEventListener("dispose", onTextureDispose);
        deallocateTexture(texture);
        if (texture.isVideoTexture) _videoTextures.delete(texture);
        info.memory.textures--;
    }
    function onRenderTargetDispose(event) {
        var renderTarget = event.target;
        renderTarget.removeEventListener("dispose", onRenderTargetDispose);
        deallocateRenderTarget(renderTarget);
    }
    //
    var textureUnits = 0;
    var _obj;
    var wrappingToGL = (_obj = {}, (0, $dK6Ta.default)(_obj, $b383cde4e0574ff6$export$533346c8e8dac0f5, 10497), (0, $dK6Ta.default)(_obj, $b383cde4e0574ff6$export$9d9334239a5a5e06, 33071), (0, $dK6Ta.default)(_obj, $b383cde4e0574ff6$export$c7e7c00b14f51a4f, 33648), _obj);
    var _obj1;
    var filterToGL = (_obj1 = {}, (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$727aa5ec3fe39bf0, 9728), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$d129e38cf6feaa8c, 9984), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$d2327c1afe5bfdf2, 9986), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$8a72f490b25c56c8, 9729), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$19a719f377145a13, 9985), (0, $dK6Ta.default)(_obj1, $b383cde4e0574ff6$export$5d8599b6a933fb1b, 9987), _obj1);
    // backwards compatibility
    var warnedTexture2D = false;
    var warnedTextureCube = false;
    //
    this.allocateTextureUnit = allocateTextureUnit;
    this.resetTextureUnits = resetTextureUnits;
    this.setTexture2D = setTexture2D;
    this.setTexture2DArray = setTexture2DArray;
    this.setTexture3D = setTexture3D;
    this.setTextureCube = setTextureCube;
    this.setupRenderTarget = setupRenderTarget;
    this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    this.safeSetTexture2D = safeSetTexture2D;
    this.safeSetTextureCube = safeSetTextureCube;
}
function $b383cde4e0574ff6$export$ddaebcad857649a8(gl, extensions, capabilities) {
    var convert = function convert(p) {
        var extension;
        if (p === $b383cde4e0574ff6$export$2e8ce08d3f6f5e10) return 5121;
        if (p === $b383cde4e0574ff6$export$b3969b01faf587f2) return 32819;
        if (p === $b383cde4e0574ff6$export$18886f8ae33e90de) return 32820;
        if (p === $b383cde4e0574ff6$export$cb1fa50553eb14c4) return 33635;
        if (p === $b383cde4e0574ff6$export$545fce0311a9796a) return 5120;
        if (p === $b383cde4e0574ff6$export$88572337f312435f) return 5122;
        if (p === $b383cde4e0574ff6$export$c63dc51868b06a9d) return 5123;
        if (p === $b383cde4e0574ff6$export$5c612977753abe2) return 5124;
        if (p === $b383cde4e0574ff6$export$c3c7fc4518ebba96) return 5125;
        if (p === $b383cde4e0574ff6$export$f6d331659b644596) return 5126;
        if (p === $b383cde4e0574ff6$export$2697304443f382bc) {
            if (isWebGL2) return 5131;
            extension = extensions.get("OES_texture_half_float");
            if (extension !== null) return extension.HALF_FLOAT_OES;
            else return null;
        }
        if (p === $b383cde4e0574ff6$export$988473390501ed4b) return 6406;
        if (p === $b383cde4e0574ff6$export$7c67423a5ee6f5eb) return 6407;
        if (p === $b383cde4e0574ff6$export$3f8bb04b555a363c) return 6408;
        if (p === $b383cde4e0574ff6$export$cc09ccbf6d1ed449) return 6409;
        if (p === $b383cde4e0574ff6$export$9053a81c4a69c289) return 6410;
        if (p === $b383cde4e0574ff6$export$c1b6b5136be58045) return 6402;
        if (p === $b383cde4e0574ff6$export$1e113ac2d0905829) return 34041;
        if (p === $b383cde4e0574ff6$export$4e041a7967d15c4b) return 6403;
        // WebGL2 formats.
        if (p === $b383cde4e0574ff6$export$aa92e870a709d190) return 36244;
        if (p === $b383cde4e0574ff6$export$6cdf0b461c7ce8a0) return 33319;
        if (p === $b383cde4e0574ff6$export$1ba1c45f9f77d4d7) return 33320;
        if (p === $b383cde4e0574ff6$export$d1fd40c11bfa798e) return 36248;
        if (p === $b383cde4e0574ff6$export$c200e7d26f592f21) return 36249;
        if (p === $b383cde4e0574ff6$export$21d1799c6d552fc0 || p === $b383cde4e0574ff6$export$afa304c3e981b668 || p === $b383cde4e0574ff6$export$d2a1a68024a3e56c || p === $b383cde4e0574ff6$export$9a79c424327dacf9) {
            extension = extensions.get("WEBGL_compressed_texture_s3tc");
            if (extension !== null) {
                if (p === $b383cde4e0574ff6$export$21d1799c6d552fc0) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                if (p === $b383cde4e0574ff6$export$afa304c3e981b668) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                if (p === $b383cde4e0574ff6$export$d2a1a68024a3e56c) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                if (p === $b383cde4e0574ff6$export$9a79c424327dacf9) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
            } else return null;
        }
        if (p === $b383cde4e0574ff6$export$19ada9bbb1af3573 || p === $b383cde4e0574ff6$export$d0f0355bb3d948e4 || p === $b383cde4e0574ff6$export$b82296714358084c || p === $b383cde4e0574ff6$export$b71692456c47b6c3) {
            extension = extensions.get("WEBGL_compressed_texture_pvrtc");
            if (extension !== null) {
                if (p === $b383cde4e0574ff6$export$19ada9bbb1af3573) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                if (p === $b383cde4e0574ff6$export$d0f0355bb3d948e4) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                if (p === $b383cde4e0574ff6$export$b82296714358084c) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                if (p === $b383cde4e0574ff6$export$b71692456c47b6c3) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
            } else return null;
        }
        if (p === $b383cde4e0574ff6$export$6ab91af2d757aee7) {
            extension = extensions.get("WEBGL_compressed_texture_etc1");
            if (extension !== null) return extension.COMPRESSED_RGB_ETC1_WEBGL;
            else return null;
        }
        if (p === $b383cde4e0574ff6$export$7800993ef8106a6a || p === $b383cde4e0574ff6$export$23ed8300a860e7d8) {
            extension = extensions.get("WEBGL_compressed_texture_etc");
            if (extension !== null) {
                if (p === $b383cde4e0574ff6$export$7800993ef8106a6a) return extension.COMPRESSED_RGB8_ETC2;
                if (p === $b383cde4e0574ff6$export$23ed8300a860e7d8) return extension.COMPRESSED_RGBA8_ETC2_EAC;
            }
        }
        if (p === $b383cde4e0574ff6$export$dc5570b4a2b92d48 || p === $b383cde4e0574ff6$export$68880cd325f8b2fb || p === $b383cde4e0574ff6$export$7d2c0be323373d95 || p === $b383cde4e0574ff6$export$22b52da301fc3a3e || p === $b383cde4e0574ff6$export$c009e2cb4a66485e || p === $b383cde4e0574ff6$export$118fff5afa255b63 || p === $b383cde4e0574ff6$export$120713c829ae0667 || p === $b383cde4e0574ff6$export$c79eeabbf53313e9 || p === $b383cde4e0574ff6$export$443cf6567cdd6424 || p === $b383cde4e0574ff6$export$6573984fc9840780 || p === $b383cde4e0574ff6$export$e7aee563f30091de || p === $b383cde4e0574ff6$export$2eb8634622ddeab7 || p === $b383cde4e0574ff6$export$202b1ce7b5d25742 || p === $b383cde4e0574ff6$export$18ab77abd087e467 || p === $b383cde4e0574ff6$export$4487000d1baf578b || p === $b383cde4e0574ff6$export$4a1746c7512b1ea1 || p === $b383cde4e0574ff6$export$4208debc782f5653 || p === $b383cde4e0574ff6$export$82c5f9d3037aaea3 || p === $b383cde4e0574ff6$export$64e357a152723eb9 || p === $b383cde4e0574ff6$export$1b7711037f5e380e || p === $b383cde4e0574ff6$export$eb234716dfb52c31 || p === $b383cde4e0574ff6$export$8041d2df79c555f || p === $b383cde4e0574ff6$export$27d2c8c0fcc7b83a || p === $b383cde4e0574ff6$export$27b9de07b84a1334 || p === $b383cde4e0574ff6$export$5c2b31a31ccc15c8 || p === $b383cde4e0574ff6$export$5c4d4b335786f8f3 || p === $b383cde4e0574ff6$export$e0c50c800e38be11 || p === $b383cde4e0574ff6$export$9b0442bae422b2db) {
            extension = extensions.get("WEBGL_compressed_texture_astc");
            if (extension !== null) // TODO Complete?
            return p;
            else return null;
        }
        if (p === $b383cde4e0574ff6$export$ce40b115e188bc81) {
            extension = extensions.get("EXT_texture_compression_bptc");
            if (extension !== null) // TODO Complete?
            return p;
            else return null;
        }
        if (p === $b383cde4e0574ff6$export$6c8ea339bfab1301) {
            if (isWebGL2) return 34042;
            extension = extensions.get("WEBGL_depth_texture");
            if (extension !== null) return extension.UNSIGNED_INT_24_8_WEBGL;
            else return null;
        }
    };
    var isWebGL2 = capabilities.isWebGL2;
    return {
        convert: convert
    };
}
var $b383cde4e0574ff6$export$56b937d9e5581166 = /*#__PURE__*/ function(PerspectiveCamera) {
    "use strict";
    (0, $gQI4D.default)(ArrayCamera, PerspectiveCamera);
    var _super = (0, $a0Xbx.default)(ArrayCamera);
    function ArrayCamera() {
        var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        (0, $dnGTK.default)(this, ArrayCamera);
        var _this;
        _this = _super.call(this);
        _this.cameras = array;
        return _this;
    }
    return ArrayCamera;
}($b383cde4e0574ff6$export$74e4ae24825f68d7);
$b383cde4e0574ff6$export$56b937d9e5581166.prototype.isArrayCamera = true;
var $b383cde4e0574ff6$export$eb2fcfdbd7ba97d4 = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(Group, Object3D);
    var _super = (0, $a0Xbx.default)(Group);
    function Group() {
        (0, $dnGTK.default)(this, Group);
        var _this;
        _this = _super.call(this);
        _this.type = "Group";
        return _this;
    }
    return Group;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
$b383cde4e0574ff6$export$eb2fcfdbd7ba97d4.prototype.isGroup = true;
var $b383cde4e0574ff6$var$_moveEvent = {
    type: "move"
};
var $b383cde4e0574ff6$var$WebXRController = /*#__PURE__*/ function() {
    "use strict";
    function WebXRController() {
        (0, $dnGTK.default)(this, WebXRController);
        this._targetRay = null;
        this._grip = null;
        this._hand = null;
    }
    (0, $9SLyD.default)(WebXRController, [
        {
            key: "getHandSpace",
            value: function getHandSpace() {
                if (this._hand === null) {
                    this._hand = new $b383cde4e0574ff6$export$eb2fcfdbd7ba97d4();
                    this._hand.matrixAutoUpdate = false;
                    this._hand.visible = false;
                    this._hand.joints = {};
                    this._hand.inputState = {
                        pinching: false
                    };
                }
                return this._hand;
            }
        },
        {
            key: "getTargetRaySpace",
            value: function getTargetRaySpace() {
                if (this._targetRay === null) {
                    this._targetRay = new $b383cde4e0574ff6$export$eb2fcfdbd7ba97d4();
                    this._targetRay.matrixAutoUpdate = false;
                    this._targetRay.visible = false;
                    this._targetRay.hasLinearVelocity = false;
                    this._targetRay.linearVelocity = new $b383cde4e0574ff6$export$64b5c384219d3699();
                    this._targetRay.hasAngularVelocity = false;
                    this._targetRay.angularVelocity = new $b383cde4e0574ff6$export$64b5c384219d3699();
                }
                return this._targetRay;
            }
        },
        {
            key: "getGripSpace",
            value: function getGripSpace() {
                if (this._grip === null) {
                    this._grip = new $b383cde4e0574ff6$export$eb2fcfdbd7ba97d4();
                    this._grip.matrixAutoUpdate = false;
                    this._grip.visible = false;
                    this._grip.hasLinearVelocity = false;
                    this._grip.linearVelocity = new $b383cde4e0574ff6$export$64b5c384219d3699();
                    this._grip.hasAngularVelocity = false;
                    this._grip.angularVelocity = new $b383cde4e0574ff6$export$64b5c384219d3699();
                }
                return this._grip;
            }
        },
        {
            key: "dispatchEvent",
            value: function dispatchEvent(event) {
                if (this._targetRay !== null) this._targetRay.dispatchEvent(event);
                if (this._grip !== null) this._grip.dispatchEvent(event);
                if (this._hand !== null) this._hand.dispatchEvent(event);
                return this;
            }
        },
        {
            key: "disconnect",
            value: function disconnect(inputSource) {
                this.dispatchEvent({
                    type: "disconnected",
                    data: inputSource
                });
                if (this._targetRay !== null) this._targetRay.visible = false;
                if (this._grip !== null) this._grip.visible = false;
                if (this._hand !== null) this._hand.visible = false;
                return this;
            }
        },
        {
            key: "update",
            value: function update(inputSource, frame, referenceSpace) {
                var inputPose = null;
                var gripPose = null;
                var handPose = null;
                var targetRay = this._targetRay;
                var grip = this._grip;
                var hand = this._hand;
                if (inputSource && frame.session.visibilityState !== "visible-blurred") {
                    if (targetRay !== null) {
                        inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
                        if (inputPose !== null) {
                            targetRay.matrix.fromArray(inputPose.transform.matrix);
                            targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
                            if (inputPose.linearVelocity) {
                                targetRay.hasLinearVelocity = true;
                                targetRay.linearVelocity.copy(inputPose.linearVelocity);
                            } else targetRay.hasLinearVelocity = false;
                            if (inputPose.angularVelocity) {
                                targetRay.hasAngularVelocity = true;
                                targetRay.angularVelocity.copy(inputPose.angularVelocity);
                            } else targetRay.hasAngularVelocity = false;
                            this.dispatchEvent($b383cde4e0574ff6$var$_moveEvent);
                        }
                    }
                    if (hand && inputSource.hand) {
                        handPose = true;
                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                        try {
                            for(var _iterator = inputSource.hand.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                var inputjoint = _step.value;
                                // Update the joints groups with the XRJoint poses
                                var jointPose = frame.getJointPose(inputjoint, referenceSpace);
                                if (hand.joints[inputjoint.jointName] === undefined) {
                                    // The transform of this joint will be updated with the joint pose on each frame
                                    var joint = new $b383cde4e0574ff6$export$eb2fcfdbd7ba97d4();
                                    joint.matrixAutoUpdate = false;
                                    joint.visible = false;
                                    hand.joints[inputjoint.jointName] = joint;
                                    // ??
                                    hand.add(joint);
                                }
                                var joint1 = hand.joints[inputjoint.jointName];
                                if (jointPose !== null) {
                                    joint1.matrix.fromArray(jointPose.transform.matrix);
                                    joint1.matrix.decompose(joint1.position, joint1.rotation, joint1.scale);
                                    joint1.jointRadius = jointPose.radius;
                                }
                                joint1.visible = jointPose !== null;
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally{
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }
                        // Custom events
                        // Check pinchz
                        var indexTip = hand.joints["index-finger-tip"];
                        var thumbTip = hand.joints["thumb-tip"];
                        var distance = indexTip.position.distanceTo(thumbTip.position);
                        var distanceToPinch = 0.02;
                        var threshold = 0.005;
                        if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
                            hand.inputState.pinching = false;
                            this.dispatchEvent({
                                type: "pinchend",
                                handedness: inputSource.handedness,
                                target: this
                            });
                        } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
                            hand.inputState.pinching = true;
                            this.dispatchEvent({
                                type: "pinchstart",
                                handedness: inputSource.handedness,
                                target: this
                            });
                        }
                    } else if (grip !== null && inputSource.gripSpace) {
                        gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
                        if (gripPose !== null) {
                            grip.matrix.fromArray(gripPose.transform.matrix);
                            grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
                            if (gripPose.linearVelocity) {
                                grip.hasLinearVelocity = true;
                                grip.linearVelocity.copy(gripPose.linearVelocity);
                            } else grip.hasLinearVelocity = false;
                            if (gripPose.angularVelocity) {
                                grip.hasAngularVelocity = true;
                                grip.angularVelocity.copy(gripPose.angularVelocity);
                            } else grip.hasAngularVelocity = false;
                        }
                    }
                }
                if (targetRay !== null) targetRay.visible = inputPose !== null;
                if (grip !== null) grip.visible = gripPose !== null;
                if (hand !== null) hand.visible = handPose !== null;
                return this;
            }
        }
    ]);
    return WebXRController;
}();
var $b383cde4e0574ff6$var$WebXRManager = /*#__PURE__*/ function(EventDispatcher) {
    "use strict";
    (0, $gQI4D.default)(WebXRManager, EventDispatcher);
    var _super = (0, $a0Xbx.default)(WebXRManager);
    function WebXRManager(renderer, gl) {
        (0, $dnGTK.default)(this, WebXRManager);
        var _this;
        var onSessionEvent = //
        function onSessionEvent(event) {
            var controller = inputSourcesMap.get(event.inputSource);
            if (controller) controller.dispatchEvent({
                type: event.type,
                data: event.inputSource
            });
        };
        var onSessionEnd = function onSessionEnd() {
            inputSourcesMap.forEach(function(controller, inputSource) {
                controller.disconnect(inputSource);
            });
            inputSourcesMap.clear();
            _currentDepthNear = null;
            _currentDepthFar = null;
            // restore framebuffer/rendering state
            state.bindXRFramebuffer(null);
            renderer.setRenderTarget(renderer.getRenderTarget());
            if (glFramebuffer) gl.deleteFramebuffer(glFramebuffer);
            if (glMultisampledFramebuffer) gl.deleteFramebuffer(glMultisampledFramebuffer);
            if (glColorRenderbuffer) gl.deleteRenderbuffer(glColorRenderbuffer);
            if (glDepthRenderbuffer) gl.deleteRenderbuffer(glDepthRenderbuffer);
            glFramebuffer = null;
            glMultisampledFramebuffer = null;
            glColorRenderbuffer = null;
            glDepthRenderbuffer = null;
            glBaseLayer = null;
            glProjLayer = null;
            glBinding = null;
            session = null;
            //
            animation.stop();
            scope.isPresenting = false;
            scope.dispatchEvent({
                type: "sessionend"
            });
        };
        var onInputSourcesChange = function onInputSourcesChange(event) {
            var inputSources = session.inputSources;
            // Assign inputSources to available controllers
            for(var i = 0; i < controllers.length; i++)inputSourcesMap.set(inputSources[i], controllers[i]);
            // Notify disconnected
            for(var i1 = 0; i1 < event.removed.length; i1++){
                var inputSource = event.removed[i1];
                var controller = inputSourcesMap.get(inputSource);
                if (controller) {
                    controller.dispatchEvent({
                        type: "disconnected",
                        data: inputSource
                    });
                    inputSourcesMap.delete(inputSource);
                }
            }
            // Notify connected
            for(var i2 = 0; i2 < event.added.length; i2++){
                var inputSource1 = event.added[i2];
                var controller1 = inputSourcesMap.get(inputSource1);
                if (controller1) controller1.dispatchEvent({
                    type: "connected",
                    data: inputSource1
                });
            }
        };
        var setProjectionFromUnion = /**
		 * Assumes 2 cameras that are parallel and share an X-axis, and that
		 * the cameras' projection and world matrices have already been set.
		 * And that near and far planes are identical for both cameras.
		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
		 */ function setProjectionFromUnion(camera, cameraL, cameraR) {
            cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
            cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
            var ipd = cameraLPos.distanceTo(cameraRPos);
            var projL = cameraL.projectionMatrix.elements;
            var projR = cameraR.projectionMatrix.elements;
            // VR systems will have identical far and near planes, and
            // most likely identical top and bottom frustum extents.
            // Use the left camera for these values.
            var near = projL[14] / (projL[10] - 1);
            var far = projL[14] / (projL[10] + 1);
            var topFov = (projL[9] + 1) / projL[5];
            var bottomFov = (projL[9] - 1) / projL[5];
            var leftFov = (projL[8] - 1) / projL[0];
            var rightFov = (projR[8] + 1) / projR[0];
            var left = near * leftFov;
            var right = near * rightFov;
            // Calculate the new camera's position offset from the
            // left camera. xOffset should be roughly half `ipd`.
            var zOffset = ipd / (-leftFov + rightFov);
            var xOffset = zOffset * -leftFov;
            // TODO: Better way to apply this offset?
            cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
            camera.translateX(xOffset);
            camera.translateZ(zOffset);
            camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
            camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
            // Find the union of the frustum values of the cameras and scale
            // the values so that the near plane's position does not change in world space,
            // although must now be relative to the new union camera.
            var near2 = near + zOffset;
            var far2 = far + zOffset;
            var left2 = left - xOffset;
            var right2 = right + (ipd - xOffset);
            var top2 = topFov * far / far2 * near2;
            var bottom2 = bottomFov * far / far2 * near2;
            camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
        };
        var updateCamera = function updateCamera(camera, parent) {
            if (parent === null) camera.matrixWorld.copy(camera.matrix);
            else camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
            camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
        };
        var onAnimationFrame = function onAnimationFrame(time, frame) {
            pose = frame.getViewerPose(referenceSpace);
            xrFrame = frame;
            if (pose !== null) {
                var views = pose.views;
                if (glBaseLayer !== null) state.bindXRFramebuffer(glBaseLayer.framebuffer);
                var cameraVRNeedsUpdate = false;
                // check if it's necessary to rebuild cameraVR's camera list
                if (views.length !== cameraVR.cameras.length) {
                    cameraVR.cameras.length = 0;
                    cameraVRNeedsUpdate = true;
                }
                for(var i = 0; i < views.length; i++){
                    var view = views[i];
                    var viewport = null;
                    if (glBaseLayer !== null) viewport = glBaseLayer.getViewport(view);
                    else {
                        var glSubImage = glBinding.getViewSubImage(glProjLayer, view);
                        state.bindXRFramebuffer(glFramebuffer);
                        if (glSubImage.depthStencilTexture !== undefined) gl.framebufferTexture2D(36160, depthStyle, 3553, glSubImage.depthStencilTexture, 0);
                        gl.framebufferTexture2D(36160, 36064, 3553, glSubImage.colorTexture, 0);
                        viewport = glSubImage.viewport;
                    }
                    var camera = cameras[i];
                    camera.matrix.fromArray(view.transform.matrix);
                    camera.projectionMatrix.fromArray(view.projectionMatrix);
                    camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
                    if (i === 0) cameraVR.matrix.copy(camera.matrix);
                    if (cameraVRNeedsUpdate === true) cameraVR.cameras.push(camera);
                }
                if (isMultisample) {
                    state.bindXRFramebuffer(glMultisampledFramebuffer);
                    if (clearStyle !== null) gl.clear(clearStyle);
                }
            }
            //
            var inputSources = session.inputSources;
            for(var i1 = 0; i1 < controllers.length; i1++){
                var controller = controllers[i1];
                var inputSource = inputSources[i1];
                controller.update(inputSource, frame, referenceSpace);
            }
            if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);
            if (isMultisample) {
                var width = glProjLayer.textureWidth;
                var height = glProjLayer.textureHeight;
                state.bindFramebuffer(36008, glMultisampledFramebuffer);
                state.bindFramebuffer(36009, glFramebuffer);
                // Invalidate the depth here to avoid flush of the depth data to main memory.
                gl.invalidateFramebuffer(36008, [
                    depthStyle
                ]);
                gl.invalidateFramebuffer(36009, [
                    depthStyle
                ]);
                gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, 16384, 9728);
                // Invalidate the MSAA buffer because it's not needed anymore.
                gl.invalidateFramebuffer(36008, [
                    36064
                ]);
                state.bindFramebuffer(36008, null);
                state.bindFramebuffer(36009, null);
                state.bindFramebuffer(36160, glMultisampledFramebuffer);
            }
            xrFrame = null;
        };
        _this = _super.call(this);
        var scope = (0, $4enQD.default)(_this);
        var state = renderer.state;
        var session = null;
        var framebufferScaleFactor = 1.0;
        var referenceSpace = null;
        var referenceSpaceType = "local-floor";
        var pose = null;
        var glBinding = null;
        var glFramebuffer = null;
        var glProjLayer = null;
        var glBaseLayer = null;
        var isMultisample = false;
        var glMultisampledFramebuffer = null;
        var glColorRenderbuffer = null;
        var glDepthRenderbuffer = null;
        var xrFrame = null;
        var depthStyle = null;
        var clearStyle = null;
        var controllers = [];
        var inputSourcesMap = new Map();
        //
        var cameraL = new $b383cde4e0574ff6$export$74e4ae24825f68d7();
        cameraL.layers.enable(1);
        cameraL.viewport = new $b383cde4e0574ff6$export$fa7daccca11cdbe3();
        var cameraR = new $b383cde4e0574ff6$export$74e4ae24825f68d7();
        cameraR.layers.enable(2);
        cameraR.viewport = new $b383cde4e0574ff6$export$fa7daccca11cdbe3();
        var cameras = [
            cameraL,
            cameraR
        ];
        var cameraVR = new $b383cde4e0574ff6$export$56b937d9e5581166();
        cameraVR.layers.enable(1);
        cameraVR.layers.enable(2);
        var _currentDepthNear = null;
        var _currentDepthFar = null;
        //
        _this.cameraAutoUpdate = true;
        _this.enabled = false;
        _this.isPresenting = false;
        _this.getController = function(index) {
            var controller = controllers[index];
            if (controller === undefined) {
                controller = new $b383cde4e0574ff6$var$WebXRController();
                controllers[index] = controller;
            }
            return controller.getTargetRaySpace();
        };
        _this.getControllerGrip = function(index) {
            var controller = controllers[index];
            if (controller === undefined) {
                controller = new $b383cde4e0574ff6$var$WebXRController();
                controllers[index] = controller;
            }
            return controller.getGripSpace();
        };
        _this.getHand = function(index) {
            var controller = controllers[index];
            if (controller === undefined) {
                controller = new $b383cde4e0574ff6$var$WebXRController();
                controllers[index] = controller;
            }
            return controller.getHandSpace();
        };
        _this.setFramebufferScaleFactor = function(value) {
            framebufferScaleFactor = value;
            if (scope.isPresenting === true) console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
        };
        _this.setReferenceSpaceType = function(value) {
            referenceSpaceType = value;
            if (scope.isPresenting === true) console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
        };
        _this.getReferenceSpace = function() {
            return referenceSpace;
        };
        _this.getBaseLayer = function() {
            return glProjLayer !== null ? glProjLayer : glBaseLayer;
        };
        _this.getBinding = function() {
            return glBinding;
        };
        _this.getFrame = function() {
            return xrFrame;
        };
        _this.getSession = function() {
            return session;
        };
        _this.setSession = function() {
            var _ref = (0, $kyywQ.default)(function(value) {
                var attributes, layerInit, layerInit1, depthFormat, projectionlayerInit;
                return (0, $672mD.__generator)(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            session = value;
                            if (!(session !== null)) return [
                                3,
                                4
                            ];
                            session.addEventListener("select", onSessionEvent);
                            session.addEventListener("selectstart", onSessionEvent);
                            session.addEventListener("selectend", onSessionEvent);
                            session.addEventListener("squeeze", onSessionEvent);
                            session.addEventListener("squeezestart", onSessionEvent);
                            session.addEventListener("squeezeend", onSessionEvent);
                            session.addEventListener("end", onSessionEnd);
                            session.addEventListener("inputsourceschange", onInputSourcesChange);
                            attributes = gl.getContextAttributes();
                            if (!(attributes.xrCompatible !== true)) return [
                                3,
                                2
                            ];
                            return [
                                4,
                                gl.makeXRCompatible()
                            ];
                        case 1:
                            _state.sent();
                            _state.label = 2;
                        case 2:
                            if (session.renderState.layers === undefined) {
                                layerInit = {
                                    antialias: attributes.antialias,
                                    alpha: attributes.alpha,
                                    depth: attributes.depth,
                                    stencil: attributes.stencil,
                                    framebufferScaleFactor: framebufferScaleFactor
                                };
                                glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
                                session.updateRenderState({
                                    baseLayer: glBaseLayer
                                });
                            } else if (gl instanceof WebGLRenderingContext) {
                                layerInit1 = {
                                    antialias: true,
                                    alpha: attributes.alpha,
                                    depth: attributes.depth,
                                    stencil: attributes.stencil,
                                    framebufferScaleFactor: framebufferScaleFactor
                                };
                                glBaseLayer = new XRWebGLLayer(session, gl, layerInit1);
                                session.updateRenderState({
                                    layers: [
                                        glBaseLayer
                                    ]
                                });
                            } else {
                                isMultisample = attributes.antialias;
                                depthFormat = null;
                                if (attributes.depth) {
                                    clearStyle = 256;
                                    if (attributes.stencil) clearStyle |= 1024;
                                    depthStyle = attributes.stencil ? 33306 : 36096;
                                    depthFormat = attributes.stencil ? 35056 : 33190;
                                }
                                projectionlayerInit = {
                                    colorFormat: attributes.alpha ? 32856 : 32849,
                                    depthFormat: depthFormat,
                                    scaleFactor: framebufferScaleFactor
                                };
                                glBinding = new XRWebGLBinding(session, gl);
                                glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
                                glFramebuffer = gl.createFramebuffer();
                                session.updateRenderState({
                                    layers: [
                                        glProjLayer
                                    ]
                                });
                                if (isMultisample) {
                                    glMultisampledFramebuffer = gl.createFramebuffer();
                                    glColorRenderbuffer = gl.createRenderbuffer();
                                    gl.bindRenderbuffer(36161, glColorRenderbuffer);
                                    gl.renderbufferStorageMultisample(36161, 4, 32856, glProjLayer.textureWidth, glProjLayer.textureHeight);
                                    state.bindFramebuffer(36160, glMultisampledFramebuffer);
                                    gl.framebufferRenderbuffer(36160, 36064, 36161, glColorRenderbuffer);
                                    gl.bindRenderbuffer(36161, null);
                                    if (depthFormat !== null) {
                                        glDepthRenderbuffer = gl.createRenderbuffer();
                                        gl.bindRenderbuffer(36161, glDepthRenderbuffer);
                                        gl.renderbufferStorageMultisample(36161, 4, depthFormat, glProjLayer.textureWidth, glProjLayer.textureHeight);
                                        gl.framebufferRenderbuffer(36160, depthStyle, 36161, glDepthRenderbuffer);
                                        gl.bindRenderbuffer(36161, null);
                                    }
                                    state.bindFramebuffer(36160, null);
                                }
                            }
                            return [
                                4,
                                session.requestReferenceSpace(referenceSpaceType)
                            ];
                        case 3:
                            referenceSpace = _state.sent();
                            animation.setContext(session);
                            animation.start();
                            scope.isPresenting = true;
                            scope.dispatchEvent({
                                type: "sessionstart"
                            });
                            _state.label = 4;
                        case 4:
                            return [
                                2
                            ];
                    }
                });
            });
            return function(value) {
                return _ref.apply(this, arguments);
            };
        }();
        //
        var cameraLPos = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var cameraRPos = new $b383cde4e0574ff6$export$64b5c384219d3699();
        _this.updateCamera = function(camera) {
            if (session === null) return;
            cameraVR.near = cameraR.near = cameraL.near = camera.near;
            cameraVR.far = cameraR.far = cameraL.far = camera.far;
            if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
                // Note that the new renderState won't apply until the next frame. See #18320
                session.updateRenderState({
                    depthNear: cameraVR.near,
                    depthFar: cameraVR.far
                });
                _currentDepthNear = cameraVR.near;
                _currentDepthFar = cameraVR.far;
            }
            var parent = camera.parent;
            var cameras = cameraVR.cameras;
            updateCamera(cameraVR, parent);
            for(var i = 0; i < cameras.length; i++)updateCamera(cameras[i], parent);
            cameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale);
            // update user camera and its children
            camera.position.copy(cameraVR.position);
            camera.quaternion.copy(cameraVR.quaternion);
            camera.scale.copy(cameraVR.scale);
            camera.matrix.copy(cameraVR.matrix);
            camera.matrixWorld.copy(cameraVR.matrixWorld);
            var children = camera.children;
            for(var i1 = 0, l = children.length; i1 < l; i1++)children[i1].updateMatrixWorld(true);
            // update projection matrix for proper view frustum culling
            if (cameras.length === 2) setProjectionFromUnion(cameraVR, cameraL, cameraR);
            else // assume single camera setup (AR)
            cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);
        };
        _this.getCamera = function() {
            return cameraVR;
        };
        _this.getFoveation = function() {
            if (glProjLayer !== null) return glProjLayer.fixedFoveation;
            if (glBaseLayer !== null) return glBaseLayer.fixedFoveation;
            return undefined;
        };
        _this.setFoveation = function(foveation) {
            // 0 = no foveation = full resolution
            // 1 = maximum foveation = the edges render at lower resolution
            if (glProjLayer !== null) glProjLayer.fixedFoveation = foveation;
            if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) glBaseLayer.fixedFoveation = foveation;
        };
        // Animation Loop
        var onAnimationFrameCallback = null;
        var animation = new $b383cde4e0574ff6$var$WebGLAnimation();
        animation.setAnimationLoop(onAnimationFrame);
        _this.setAnimationLoop = function(callback) {
            onAnimationFrameCallback = callback;
        };
        _this.dispose = function() {};
        return _this;
    }
    return WebXRManager;
}($b383cde4e0574ff6$export$ec8b666c5fe2c75a);
function $b383cde4e0574ff6$var$WebGLMaterials(properties) {
    var refreshFogUniforms = function refreshFogUniforms(uniforms, fog) {
        uniforms.fogColor.value.copy(fog.color);
        if (fog.isFog) {
            uniforms.fogNear.value = fog.near;
            uniforms.fogFar.value = fog.far;
        } else if (fog.isFogExp2) uniforms.fogDensity.value = fog.density;
    };
    var refreshMaterialUniforms = function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
        if (material.isMeshBasicMaterial) refreshUniformsCommon(uniforms, material);
        else if (material.isMeshLambertMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsLambert(uniforms, material);
        } else if (material.isMeshToonMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsToon(uniforms, material);
        } else if (material.isMeshPhongMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsPhong(uniforms, material);
        } else if (material.isMeshStandardMaterial) {
            refreshUniformsCommon(uniforms, material);
            if (material.isMeshPhysicalMaterial) refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
            else refreshUniformsStandard(uniforms, material);
        } else if (material.isMeshMatcapMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsMatcap(uniforms, material);
        } else if (material.isMeshDepthMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsDepth(uniforms, material);
        } else if (material.isMeshDistanceMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsDistance(uniforms, material);
        } else if (material.isMeshNormalMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsNormal(uniforms, material);
        } else if (material.isLineBasicMaterial) {
            refreshUniformsLine(uniforms, material);
            if (material.isLineDashedMaterial) refreshUniformsDash(uniforms, material);
        } else if (material.isPointsMaterial) refreshUniformsPoints(uniforms, material, pixelRatio, height);
        else if (material.isSpriteMaterial) refreshUniformsSprites(uniforms, material);
        else if (material.isShadowMaterial) {
            uniforms.color.value.copy(material.color);
            uniforms.opacity.value = material.opacity;
        } else if (material.isShaderMaterial) material.uniformsNeedUpdate = false; // #15581
    };
    var refreshUniformsCommon = function refreshUniformsCommon(uniforms, material) {
        uniforms.opacity.value = material.opacity;
        if (material.color) uniforms.diffuse.value.copy(material.color);
        if (material.emissive) uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
        if (material.map) uniforms.map.value = material.map;
        if (material.alphaMap) uniforms.alphaMap.value = material.alphaMap;
        if (material.specularMap) uniforms.specularMap.value = material.specularMap;
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
        var envMap = properties.get(material).envMap;
        if (envMap) {
            uniforms.envMap.value = envMap;
            uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
            uniforms.reflectivity.value = material.reflectivity;
            uniforms.ior.value = material.ior;
            uniforms.refractionRatio.value = material.refractionRatio;
            var maxMipLevel = properties.get(envMap).__maxMipLevel;
            if (maxMipLevel !== undefined) uniforms.maxMipLevel.value = maxMipLevel;
        }
        if (material.lightMap) {
            uniforms.lightMap.value = material.lightMap;
            uniforms.lightMapIntensity.value = material.lightMapIntensity;
        }
        if (material.aoMap) {
            uniforms.aoMap.value = material.aoMap;
            uniforms.aoMapIntensity.value = material.aoMapIntensity;
        }
        // uv repeat and offset setting priorities
        // 1. color map
        // 2. specular map
        // 3. displacementMap map
        // 4. normal map
        // 5. bump map
        // 6. roughnessMap map
        // 7. metalnessMap map
        // 8. alphaMap map
        // 9. emissiveMap map
        // 10. clearcoat map
        // 11. clearcoat normal map
        // 12. clearcoat roughnessMap map
        // 13. specular intensity map
        // 14. specular tint map
        // 15. transmission map
        // 16. thickness map
        var uvScaleMap;
        if (material.map) uvScaleMap = material.map;
        else if (material.specularMap) uvScaleMap = material.specularMap;
        else if (material.displacementMap) uvScaleMap = material.displacementMap;
        else if (material.normalMap) uvScaleMap = material.normalMap;
        else if (material.bumpMap) uvScaleMap = material.bumpMap;
        else if (material.roughnessMap) uvScaleMap = material.roughnessMap;
        else if (material.metalnessMap) uvScaleMap = material.metalnessMap;
        else if (material.alphaMap) uvScaleMap = material.alphaMap;
        else if (material.emissiveMap) uvScaleMap = material.emissiveMap;
        else if (material.clearcoatMap) uvScaleMap = material.clearcoatMap;
        else if (material.clearcoatNormalMap) uvScaleMap = material.clearcoatNormalMap;
        else if (material.clearcoatRoughnessMap) uvScaleMap = material.clearcoatRoughnessMap;
        else if (material.specularIntensityMap) uvScaleMap = material.specularIntensityMap;
        else if (material.specularColorMap) uvScaleMap = material.specularColorMap;
        else if (material.transmissionMap) uvScaleMap = material.transmissionMap;
        else if (material.thicknessMap) uvScaleMap = material.thicknessMap;
        else if (material.sheenColorMap) uvScaleMap = material.sheenColorMap;
        else if (material.sheenRoughnessMap) uvScaleMap = material.sheenRoughnessMap;
        if (uvScaleMap !== undefined) {
            // backwards compatibility
            if (uvScaleMap.isWebGLRenderTarget) uvScaleMap = uvScaleMap.texture;
            if (uvScaleMap.matrixAutoUpdate === true) uvScaleMap.updateMatrix();
            uniforms.uvTransform.value.copy(uvScaleMap.matrix);
        }
        // uv repeat and offset setting priorities for uv2
        // 1. ao map
        // 2. light map
        var uv2ScaleMap;
        if (material.aoMap) uv2ScaleMap = material.aoMap;
        else if (material.lightMap) uv2ScaleMap = material.lightMap;
        if (uv2ScaleMap !== undefined) {
            // backwards compatibility
            if (uv2ScaleMap.isWebGLRenderTarget) uv2ScaleMap = uv2ScaleMap.texture;
            if (uv2ScaleMap.matrixAutoUpdate === true) uv2ScaleMap.updateMatrix();
            uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);
        }
    };
    var refreshUniformsLine = function refreshUniformsLine(uniforms, material) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
    };
    var refreshUniformsDash = function refreshUniformsDash(uniforms, material) {
        uniforms.dashSize.value = material.dashSize;
        uniforms.totalSize.value = material.dashSize + material.gapSize;
        uniforms.scale.value = material.scale;
    };
    var refreshUniformsPoints = function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        uniforms.size.value = material.size * pixelRatio;
        uniforms.scale.value = height * 0.5;
        if (material.map) uniforms.map.value = material.map;
        if (material.alphaMap) uniforms.alphaMap.value = material.alphaMap;
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
        // uv repeat and offset setting priorities
        // 1. color map
        // 2. alpha map
        var uvScaleMap;
        if (material.map) uvScaleMap = material.map;
        else if (material.alphaMap) uvScaleMap = material.alphaMap;
        if (uvScaleMap !== undefined) {
            if (uvScaleMap.matrixAutoUpdate === true) uvScaleMap.updateMatrix();
            uniforms.uvTransform.value.copy(uvScaleMap.matrix);
        }
    };
    var refreshUniformsSprites = function refreshUniformsSprites(uniforms, material) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        uniforms.rotation.value = material.rotation;
        if (material.map) uniforms.map.value = material.map;
        if (material.alphaMap) uniforms.alphaMap.value = material.alphaMap;
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
        // uv repeat and offset setting priorities
        // 1. color map
        // 2. alpha map
        var uvScaleMap;
        if (material.map) uvScaleMap = material.map;
        else if (material.alphaMap) uvScaleMap = material.alphaMap;
        if (uvScaleMap !== undefined) {
            if (uvScaleMap.matrixAutoUpdate === true) uvScaleMap.updateMatrix();
            uniforms.uvTransform.value.copy(uvScaleMap.matrix);
        }
    };
    var refreshUniformsLambert = function refreshUniformsLambert(uniforms, material) {
        if (material.emissiveMap) uniforms.emissiveMap.value = material.emissiveMap;
    };
    var refreshUniformsPhong = function refreshUniformsPhong(uniforms, material) {
        uniforms.specular.value.copy(material.specular);
        uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )
        if (material.emissiveMap) uniforms.emissiveMap.value = material.emissiveMap;
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    };
    var refreshUniformsToon = function refreshUniformsToon(uniforms, material) {
        if (material.gradientMap) uniforms.gradientMap.value = material.gradientMap;
        if (material.emissiveMap) uniforms.emissiveMap.value = material.emissiveMap;
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    };
    var refreshUniformsStandard = function refreshUniformsStandard(uniforms, material) {
        uniforms.roughness.value = material.roughness;
        uniforms.metalness.value = material.metalness;
        if (material.roughnessMap) uniforms.roughnessMap.value = material.roughnessMap;
        if (material.metalnessMap) uniforms.metalnessMap.value = material.metalnessMap;
        if (material.emissiveMap) uniforms.emissiveMap.value = material.emissiveMap;
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
        var envMap = properties.get(material).envMap;
        if (envMap) //uniforms.envMap.value = material.envMap; // part of uniforms common
        uniforms.envMapIntensity.value = material.envMapIntensity;
    };
    var refreshUniformsPhysical = function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
        refreshUniformsStandard(uniforms, material);
        uniforms.ior.value = material.ior; // also part of uniforms common
        if (material.sheen > 0) {
            uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
            uniforms.sheenRoughness.value = material.sheenRoughness;
            if (material.sheenColorMap) uniforms.sheenColorMap.value = material.sheenColorMap;
            if (material.sheenRoughnessMap) uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
        }
        if (material.clearcoat > 0) {
            uniforms.clearcoat.value = material.clearcoat;
            uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
            if (material.clearcoatMap) uniforms.clearcoatMap.value = material.clearcoatMap;
            if (material.clearcoatRoughnessMap) uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
            if (material.clearcoatNormalMap) {
                uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
                uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
                if (material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace) uniforms.clearcoatNormalScale.value.negate();
            }
        }
        if (material.transmission > 0) {
            uniforms.transmission.value = material.transmission;
            uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
            uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
            if (material.transmissionMap) uniforms.transmissionMap.value = material.transmissionMap;
            uniforms.thickness.value = material.thickness;
            if (material.thicknessMap) uniforms.thicknessMap.value = material.thicknessMap;
            uniforms.attenuationDistance.value = material.attenuationDistance;
            uniforms.attenuationColor.value.copy(material.attenuationColor);
        }
        uniforms.specularIntensity.value = material.specularIntensity;
        uniforms.specularColor.value.copy(material.specularColor);
        if (material.specularIntensityMap) uniforms.specularIntensityMap.value = material.specularIntensityMap;
        if (material.specularColorMap) uniforms.specularColorMap.value = material.specularColorMap;
    };
    var refreshUniformsMatcap = function refreshUniformsMatcap(uniforms, material) {
        if (material.matcap) uniforms.matcap.value = material.matcap;
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    };
    var refreshUniformsDepth = function refreshUniformsDepth(uniforms, material) {
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    };
    var refreshUniformsDistance = function refreshUniformsDistance(uniforms, material) {
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
        uniforms.referencePosition.value.copy(material.referencePosition);
        uniforms.nearDistance.value = material.nearDistance;
        uniforms.farDistance.value = material.farDistance;
    };
    var refreshUniformsNormal = function refreshUniformsNormal(uniforms, material) {
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === $b383cde4e0574ff6$export$d9f0486e75b5ace) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    };
    return {
        refreshFogUniforms: refreshFogUniforms,
        refreshMaterialUniforms: refreshMaterialUniforms
    };
}
function $b383cde4e0574ff6$var$createCanvasElement() {
    var canvas = $b383cde4e0574ff6$var$createElementNS("canvas");
    canvas.style.display = "block";
    return canvas;
}
function $b383cde4e0574ff6$export$f6cc00ef28d7cf97() {
    var parameters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var getTargetPixelRatio = function getTargetPixelRatio() {
        return _currentRenderTarget === null ? _pixelRatio : 1;
    };
    var getContext = function getContext(contextNames, contextAttributes) {
        for(var i = 0; i < contextNames.length; i++){
            var contextName = contextNames[i];
            var context = _canvas.getContext(contextName, contextAttributes);
            if (context !== null) return context;
        }
        return null;
    };
    var initGLContext = function initGLContext() {
        extensions = new $b383cde4e0574ff6$var$WebGLExtensions(_gl);
        capabilities = new $b383cde4e0574ff6$var$WebGLCapabilities(_gl, extensions, parameters);
        extensions.init(capabilities);
        utils = new $b383cde4e0574ff6$export$ddaebcad857649a8(_gl, extensions, capabilities);
        state = new $b383cde4e0574ff6$var$WebGLState(_gl, extensions, capabilities);
        _currentDrawBuffers[0] = 1029;
        info = new $b383cde4e0574ff6$var$WebGLInfo(_gl);
        properties = new $b383cde4e0574ff6$var$WebGLProperties();
        textures = new $b383cde4e0574ff6$var$WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
        cubemaps = new $b383cde4e0574ff6$var$WebGLCubeMaps(_this);
        cubeuvmaps = new $b383cde4e0574ff6$var$WebGLCubeUVMaps(_this);
        attributes = new $b383cde4e0574ff6$var$WebGLAttributes(_gl, capabilities);
        bindingStates = new $b383cde4e0574ff6$var$WebGLBindingStates(_gl, extensions, attributes, capabilities);
        geometries = new $b383cde4e0574ff6$var$WebGLGeometries(_gl, attributes, info, bindingStates);
        objects = new $b383cde4e0574ff6$var$WebGLObjects(_gl, geometries, attributes, info);
        morphtargets = new $b383cde4e0574ff6$var$WebGLMorphtargets(_gl, capabilities, textures);
        clipping = new $b383cde4e0574ff6$var$WebGLClipping(properties);
        programCache = new $b383cde4e0574ff6$var$WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
        materials = new $b383cde4e0574ff6$var$WebGLMaterials(properties);
        renderLists = new $b383cde4e0574ff6$var$WebGLRenderLists(properties);
        renderStates = new $b383cde4e0574ff6$var$WebGLRenderStates(extensions, capabilities);
        background = new $b383cde4e0574ff6$var$WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);
        shadowMap = new $b383cde4e0574ff6$var$WebGLShadowMap(_this, objects, capabilities);
        bufferRenderer = new $b383cde4e0574ff6$var$WebGLBufferRenderer(_gl, extensions, info, capabilities);
        indexedBufferRenderer = new $b383cde4e0574ff6$var$WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
        info.programs = programCache.programs;
        _this.capabilities = capabilities;
        _this.extensions = extensions;
        _this.properties = properties;
        _this.renderLists = renderLists;
        _this.shadowMap = shadowMap;
        _this.state = state;
        _this.info = info;
    };
    var onContextLost = // Events
    function onContextLost(event) {
        event.preventDefault();
        console.log("THREE.WebGLRenderer: Context Lost.");
        _isContextLost = true;
    };
    var onContextRestore = function onContextRestore() {
        console.log("THREE.WebGLRenderer: Context Restored.");
        _isContextLost = false;
        var infoAutoReset = info.autoReset;
        var shadowMapEnabled = shadowMap.enabled;
        var shadowMapAutoUpdate = shadowMap.autoUpdate;
        var shadowMapNeedsUpdate = shadowMap.needsUpdate;
        var shadowMapType = shadowMap.type;
        initGLContext();
        info.autoReset = infoAutoReset;
        shadowMap.enabled = shadowMapEnabled;
        shadowMap.autoUpdate = shadowMapAutoUpdate;
        shadowMap.needsUpdate = shadowMapNeedsUpdate;
        shadowMap.type = shadowMapType;
    };
    var deallocateMaterial = // Buffer deallocation
    function deallocateMaterial(material) {
        releaseMaterialProgramReferences(material);
        properties.remove(material);
    };
    var releaseMaterialProgramReferences = function releaseMaterialProgramReferences(material) {
        var programs = properties.get(material).programs;
        if (programs !== undefined) programs.forEach(function(program) {
            programCache.releaseProgram(program);
        });
    };
    var onAnimationFrame = function onAnimationFrame(time) {
        if (onAnimationFrameCallback) onAnimationFrameCallback(time);
    };
    var onXRSessionStart = function onXRSessionStart() {
        animation.stop();
    };
    var onXRSessionEnd = function onXRSessionEnd() {
        animation.start();
    };
    var renderScene = function renderScene(currentRenderList, scene, camera, viewport) {
        var opaqueObjects = currentRenderList.opaque;
        var transmissiveObjects = currentRenderList.transmissive;
        var transparentObjects = currentRenderList.transparent;
        currentRenderState.setupLightsView(camera);
        if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, scene, camera);
        if (viewport) state.viewport(_currentViewport.copy(viewport));
        if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);
        if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);
        if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);
    };
    var renderTransmissionPass = function renderTransmissionPass(opaqueObjects, scene, camera) {
        if (_transmissionRenderTarget === null) {
            var needsAntialias = _antialias === true && capabilities.isWebGL2 === true;
            var renderTargetType = needsAntialias ? $b383cde4e0574ff6$export$cb2022643d3c928d : $b383cde4e0574ff6$export$3c052beb2e51e23f;
            _transmissionRenderTarget = new renderTargetType(1024, 1024, {
                generateMipmaps: true,
                type: utils.convert($b383cde4e0574ff6$export$2697304443f382bc) !== null ? $b383cde4e0574ff6$export$2697304443f382bc : $b383cde4e0574ff6$export$2e8ce08d3f6f5e10,
                minFilter: $b383cde4e0574ff6$export$5d8599b6a933fb1b,
                magFilter: $b383cde4e0574ff6$export$727aa5ec3fe39bf0,
                wrapS: $b383cde4e0574ff6$export$9d9334239a5a5e06,
                wrapT: $b383cde4e0574ff6$export$9d9334239a5a5e06
            });
        }
        var currentRenderTarget = _this.getRenderTarget();
        _this.setRenderTarget(_transmissionRenderTarget);
        _this.clear();
        // Turn off the features which can affect the frag color for opaque objects pass.
        // Otherwise they are applied twice in opaque objects pass and transmission objects pass.
        var currentToneMapping = _this.toneMapping;
        _this.toneMapping = $b383cde4e0574ff6$export$9fcb6b4294603b2;
        renderObjects(opaqueObjects, scene, camera);
        _this.toneMapping = currentToneMapping;
        textures.updateMultisampleRenderTarget(_transmissionRenderTarget);
        textures.updateRenderTargetMipmap(_transmissionRenderTarget);
        _this.setRenderTarget(currentRenderTarget);
    };
    var renderObjects = function renderObjects(renderList, scene, camera) {
        var overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
        for(var i = 0, l = renderList.length; i < l; i++){
            var renderItem = renderList[i];
            var object = renderItem.object;
            var geometry = renderItem.geometry;
            var material = overrideMaterial === null ? renderItem.material : overrideMaterial;
            var group = renderItem.group;
            if (object.layers.test(camera.layers)) renderObject(object, scene, camera, geometry, material, group);
        }
    };
    var renderObject = function renderObject(object, scene, camera, geometry, material, group) {
        object.onBeforeRender(_this, scene, camera, geometry, material, group);
        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
        object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
        material.onBeforeRender(_this, scene, camera, geometry, object, group);
        if (material.transparent === true && material.side === $b383cde4e0574ff6$export$3b296b6f144d5b03) {
            material.side = $b383cde4e0574ff6$export$d9f0486e75b5ace;
            material.needsUpdate = true;
            _this.renderBufferDirect(camera, scene, geometry, material, object, group);
            material.side = $b383cde4e0574ff6$export$2ede184fc2998901;
            material.needsUpdate = true;
            _this.renderBufferDirect(camera, scene, geometry, material, object, group);
            material.side = $b383cde4e0574ff6$export$3b296b6f144d5b03;
        } else _this.renderBufferDirect(camera, scene, geometry, material, object, group);
        object.onAfterRender(_this, scene, camera, geometry, material, group);
    };
    var getProgram = function getProgram(material, scene, object) {
        if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
        var materialProperties = properties.get(material);
        var lights = currentRenderState.state.lights;
        var shadowsArray = currentRenderState.state.shadowsArray;
        var lightsStateVersion = lights.state.version;
        var parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
        var programCacheKey = programCache.getProgramCacheKey(parameters);
        var programs = materialProperties.programs;
        // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
        materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
        materialProperties.fog = scene.fog;
        materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
        if (programs === undefined) {
            // new material
            material.addEventListener("dispose", onMaterialDispose);
            programs = new Map();
            materialProperties.programs = programs;
        }
        var program = programs.get(programCacheKey);
        if (program !== undefined) // early out if program and light state is identical
        {
            if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
                updateCommonMaterialProperties(material, parameters);
                return program;
            }
        } else {
            parameters.uniforms = programCache.getUniforms(material);
            material.onBuild(object, parameters, _this);
            material.onBeforeCompile(parameters, _this);
            program = programCache.acquireProgram(parameters, programCacheKey);
            programs.set(programCacheKey, program);
            materialProperties.uniforms = parameters.uniforms;
        }
        var uniforms = materialProperties.uniforms;
        if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) uniforms.clippingPlanes = clipping.uniform;
        updateCommonMaterialProperties(material, parameters);
        // store the light setup it was created for
        materialProperties.needsLights = materialNeedsLights(material);
        materialProperties.lightsStateVersion = lightsStateVersion;
        if (materialProperties.needsLights) {
            // wire up the material to this renderer's lighting state
            uniforms.ambientLightColor.value = lights.state.ambient;
            uniforms.lightProbe.value = lights.state.probe;
            uniforms.directionalLights.value = lights.state.directional;
            uniforms.directionalLightShadows.value = lights.state.directionalShadow;
            uniforms.spotLights.value = lights.state.spot;
            uniforms.spotLightShadows.value = lights.state.spotShadow;
            uniforms.rectAreaLights.value = lights.state.rectArea;
            uniforms.ltc_1.value = lights.state.rectAreaLTC1;
            uniforms.ltc_2.value = lights.state.rectAreaLTC2;
            uniforms.pointLights.value = lights.state.point;
            uniforms.pointLightShadows.value = lights.state.pointShadow;
            uniforms.hemisphereLights.value = lights.state.hemi;
            uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
            uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
            uniforms.spotShadowMap.value = lights.state.spotShadowMap;
            uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
            uniforms.pointShadowMap.value = lights.state.pointShadowMap;
            uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
        // TODO (abelnation): add area lights shadow info to uniforms
        }
        var progUniforms = program.getUniforms();
        var uniformsList = $b383cde4e0574ff6$var$WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
        materialProperties.currentProgram = program;
        materialProperties.uniformsList = uniformsList;
        return program;
    };
    var updateCommonMaterialProperties = function updateCommonMaterialProperties(material, parameters) {
        var materialProperties = properties.get(material);
        materialProperties.outputEncoding = parameters.outputEncoding;
        materialProperties.instancing = parameters.instancing;
        materialProperties.skinning = parameters.skinning;
        materialProperties.morphTargets = parameters.morphTargets;
        materialProperties.morphNormals = parameters.morphNormals;
        materialProperties.morphTargetsCount = parameters.morphTargetsCount;
        materialProperties.numClippingPlanes = parameters.numClippingPlanes;
        materialProperties.numIntersection = parameters.numClipIntersection;
        materialProperties.vertexAlphas = parameters.vertexAlphas;
        materialProperties.vertexTangents = parameters.vertexTangents;
    };
    var setProgram = function setProgram(camera, scene, geometry, material, object) {
        if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
        textures.resetTextureUnits();
        var fog = scene.fog;
        var environment = material.isMeshStandardMaterial ? scene.environment : null;
        var encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;
        var envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
        var vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
        var vertexTangents = !!material.normalMap && !!geometry.attributes.tangent;
        var morphTargets = !!geometry.morphAttributes.position;
        var morphNormals = !!geometry.morphAttributes.normal;
        var morphTargetsCount = !!geometry.morphAttributes.position ? geometry.morphAttributes.position.length : 0;
        var materialProperties = properties.get(material);
        var lights = currentRenderState.state.lights;
        if (_clippingEnabled === true) {
            if (_localClippingEnabled === true || camera !== _currentCamera) {
                var useCache = camera === _currentCamera && material.id === _currentMaterialId;
                // we might want to call this function with some ClippingGroup
                // object instead of the material, once it becomes feasible
                // (#8465, #8379)
                clipping.setState(material, camera, useCache);
            }
        }
        //
        var needsProgramChange = false;
        if (material.version === materialProperties.__version) {
            if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) needsProgramChange = true;
            else if (materialProperties.outputEncoding !== encoding) needsProgramChange = true;
            else if (object.isInstancedMesh && materialProperties.instancing === false) needsProgramChange = true;
            else if (!object.isInstancedMesh && materialProperties.instancing === true) needsProgramChange = true;
            else if (object.isSkinnedMesh && materialProperties.skinning === false) needsProgramChange = true;
            else if (!object.isSkinnedMesh && materialProperties.skinning === true) needsProgramChange = true;
            else if (materialProperties.envMap !== envMap) needsProgramChange = true;
            else if (material.fog && materialProperties.fog !== fog) needsProgramChange = true;
            else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) needsProgramChange = true;
            else if (materialProperties.vertexAlphas !== vertexAlphas) needsProgramChange = true;
            else if (materialProperties.vertexTangents !== vertexTangents) needsProgramChange = true;
            else if (materialProperties.morphTargets !== morphTargets) needsProgramChange = true;
            else if (materialProperties.morphNormals !== morphNormals) needsProgramChange = true;
            else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) needsProgramChange = true;
        } else {
            needsProgramChange = true;
            materialProperties.__version = material.version;
        }
        //
        var program = materialProperties.currentProgram;
        if (needsProgramChange === true) program = getProgram(material, scene, object);
        var refreshProgram = false;
        var refreshMaterial = false;
        var refreshLights = false;
        var p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
        if (state.useProgram(program.program)) {
            refreshProgram = true;
            refreshMaterial = true;
            refreshLights = true;
        }
        if (material.id !== _currentMaterialId) {
            _currentMaterialId = material.id;
            refreshMaterial = true;
        }
        if (refreshProgram || _currentCamera !== camera) {
            p_uniforms.setValue(_gl, "projectionMatrix", camera.projectionMatrix);
            if (capabilities.logarithmicDepthBuffer) p_uniforms.setValue(_gl, "logDepthBufFC", 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));
            if (_currentCamera !== camera) {
                _currentCamera = camera;
                // lighting uniforms depend on the camera so enforce an update
                // now, in case this material supports lights - or later, when
                // the next material that does gets activated:
                refreshMaterial = true; // set to true on material change
                refreshLights = true; // remains set until update done
            }
            // load material specific uniforms
            // (shader material also gets them for the sake of genericity)
            if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
                var uCamPos = p_uniforms.map.cameraPosition;
                if (uCamPos !== undefined) uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
            }
            if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) p_uniforms.setValue(_gl, "isOrthographic", camera.isOrthographicCamera === true);
            if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) p_uniforms.setValue(_gl, "viewMatrix", camera.matrixWorldInverse);
        }
        // skinning and morph target uniforms must be set even if material didn't change
        // auto-setting of texture unit for bone and morph texture must go before other textures
        // otherwise textures used for skinning and morphing can take over texture units reserved for other material textures
        if (object.isSkinnedMesh) {
            p_uniforms.setOptional(_gl, object, "bindMatrix");
            p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
            var skeleton = object.skeleton;
            if (skeleton) {
                if (capabilities.floatVertexTextures) {
                    if (skeleton.boneTexture === null) skeleton.computeBoneTexture();
                    p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
                    p_uniforms.setValue(_gl, "boneTextureSize", skeleton.boneTextureSize);
                } else p_uniforms.setOptional(_gl, skeleton, "boneMatrices");
            }
        }
        if (!!geometry && (geometry.morphAttributes.position !== undefined || geometry.morphAttributes.normal !== undefined)) morphtargets.update(object, geometry, material, program);
        if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
            materialProperties.receiveShadow = object.receiveShadow;
            p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
        }
        if (refreshMaterial) {
            p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
            if (materialProperties.needsLights) // the current material requires lighting info
            // note: all lighting uniforms are always set correctly
            // they simply reference the renderer's state for their
            // values
            //
            // use the current material's .needsUpdate flags to set
            // the GL state when required
            markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
            // refresh uniforms common to several materials
            if (fog && material.fog) materials.refreshFogUniforms(m_uniforms, fog);
            materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);
            $b383cde4e0574ff6$var$WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
        }
        if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
            $b383cde4e0574ff6$var$WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
            material.uniformsNeedUpdate = false;
        }
        if (material.isSpriteMaterial) p_uniforms.setValue(_gl, "center", object.center);
        // common matrices
        p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
        p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
        p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
        return program;
    };
    var markUniformsLightsNeedsUpdate = // If uniforms are marked as clean, they don't need to be loaded to the GPU.
    function markUniformsLightsNeedsUpdate(uniforms, value) {
        uniforms.ambientLightColor.needsUpdate = value;
        uniforms.lightProbe.needsUpdate = value;
        uniforms.directionalLights.needsUpdate = value;
        uniforms.directionalLightShadows.needsUpdate = value;
        uniforms.pointLights.needsUpdate = value;
        uniforms.pointLightShadows.needsUpdate = value;
        uniforms.spotLights.needsUpdate = value;
        uniforms.spotLightShadows.needsUpdate = value;
        uniforms.rectAreaLights.needsUpdate = value;
        uniforms.hemisphereLights.needsUpdate = value;
    };
    var materialNeedsLights = function materialNeedsLights(material) {
        return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
    };
    var _canvas = parameters.canvas !== undefined ? parameters.canvas : $b383cde4e0574ff6$var$createCanvasElement(), _context = parameters.context !== undefined ? parameters.context : null, _alpha = parameters.alpha !== undefined ? parameters.alpha : false, _depth = parameters.depth !== undefined ? parameters.depth : true, _stencil = parameters.stencil !== undefined ? parameters.stencil : true, _antialias = parameters.antialias !== undefined ? parameters.antialias : false, _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true, _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false, _powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : "default", _failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;
    var currentRenderList = null;
    var currentRenderState = null;
    // render() can be called from within a callback triggered by another render.
    // We track this so that the nested render call gets its list and state isolated from the parent render call.
    var renderListStack = [];
    var renderStateStack = [];
    // public properties
    this.domElement = _canvas;
    // Debug configuration container
    this.debug = {
        /**
		 * Enables error checking and reporting when shader programs are being compiled
		 * @type {boolean}
		 */ checkShaderErrors: true
    };
    // clearing
    this.autoClear = true;
    this.autoClearColor = true;
    this.autoClearDepth = true;
    this.autoClearStencil = true;
    // scene graph
    this.sortObjects = true;
    // user-defined clipping
    this.clippingPlanes = [];
    this.localClippingEnabled = false;
    // physically based shading
    this.gammaFactor = 2.0; // for backwards compatibility
    this.outputEncoding = $b383cde4e0574ff6$export$7207336e4151a112;
    // physical lights
    this.physicallyCorrectLights = false;
    // tone mapping
    this.toneMapping = $b383cde4e0574ff6$export$9fcb6b4294603b2;
    this.toneMappingExposure = 1.0;
    // internal properties
    var _this = this;
    var _isContextLost = false;
    // internal state cache
    var _currentActiveCubeFace = 0;
    var _currentActiveMipmapLevel = 0;
    var _currentRenderTarget = null;
    var _currentMaterialId = -1;
    var _currentCamera = null;
    var _currentViewport = new $b383cde4e0574ff6$export$fa7daccca11cdbe3();
    var _currentScissor = new $b383cde4e0574ff6$export$fa7daccca11cdbe3();
    var _currentScissorTest = null;
    //
    var _width = _canvas.width;
    var _height = _canvas.height;
    var _pixelRatio = 1;
    var _opaqueSort = null;
    var _transparentSort = null;
    var _viewport = new $b383cde4e0574ff6$export$fa7daccca11cdbe3(0, 0, _width, _height);
    var _scissor = new $b383cde4e0574ff6$export$fa7daccca11cdbe3(0, 0, _width, _height);
    var _scissorTest = false;
    //
    var _currentDrawBuffers = [];
    // frustum
    var _frustum = new $b383cde4e0574ff6$export$35efe6f4c85463d2();
    // clipping
    var _clippingEnabled = false;
    var _localClippingEnabled = false;
    // transmission
    var _transmissionRenderTarget = null;
    // camera matrices cache
    var _projScreenMatrix = new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
    var _vector3 = new $b383cde4e0574ff6$export$64b5c384219d3699();
    var _emptyScene = {
        background: null,
        fog: null,
        environment: null,
        overrideMaterial: null,
        isScene: true
    };
    // initialize
    var _gl = _context;
    try {
        var contextAttributes = {
            alpha: _alpha,
            depth: _depth,
            stencil: _stencil,
            antialias: _antialias,
            premultipliedAlpha: _premultipliedAlpha,
            preserveDrawingBuffer: _preserveDrawingBuffer,
            powerPreference: _powerPreference,
            failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
        };
        // event listeners must be registered before WebGL context is created, see #12753
        _canvas.addEventListener("webglcontextlost", onContextLost, false);
        _canvas.addEventListener("webglcontextrestored", onContextRestore, false);
        if (_gl === null) {
            var contextNames = [
                "webgl2",
                "webgl",
                "experimental-webgl"
            ];
            if (_this.isWebGL1Renderer === true) contextNames.shift();
            _gl = getContext(contextNames, contextAttributes);
            if (_gl === null) {
                if (getContext(contextNames)) throw new Error("Error creating WebGL context with your selected attributes.");
                else throw new Error("Error creating WebGL context.");
            }
        }
        // Some experimental-webgl implementations do not have getShaderPrecisionFormat
        if (_gl.getShaderPrecisionFormat === undefined) _gl.getShaderPrecisionFormat = function() {
            return {
                "rangeMin": 1,
                "rangeMax": 1,
                "precision": 1
            };
        };
    } catch (error) {
        console.error("THREE.WebGLRenderer: " + error.message);
        throw error;
    }
    var extensions, capabilities, state, info;
    var properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
    var programCache, materials, renderLists, renderStates, clipping, shadowMap;
    var background, morphtargets, bufferRenderer, indexedBufferRenderer;
    var utils, bindingStates;
    initGLContext();
    // xr
    var xr = new $b383cde4e0574ff6$var$WebXRManager(_this, _gl);
    this.xr = xr;
    // API
    this.getContext = function() {
        return _gl;
    };
    this.getContextAttributes = function() {
        return _gl.getContextAttributes();
    };
    this.forceContextLoss = function() {
        var extension = extensions.get("WEBGL_lose_context");
        if (extension) extension.loseContext();
    };
    this.forceContextRestore = function() {
        var extension = extensions.get("WEBGL_lose_context");
        if (extension) extension.restoreContext();
    };
    this.getPixelRatio = function() {
        return _pixelRatio;
    };
    this.setPixelRatio = function(value) {
        if (value === undefined) return;
        _pixelRatio = value;
        this.setSize(_width, _height, false);
    };
    this.getSize = function(target) {
        return target.set(_width, _height);
    };
    this.setSize = function(width, height, updateStyle) {
        if (xr.isPresenting) {
            console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
            return;
        }
        _width = width;
        _height = height;
        _canvas.width = Math.floor(width * _pixelRatio);
        _canvas.height = Math.floor(height * _pixelRatio);
        if (updateStyle !== false) {
            _canvas.style.width = width + "px";
            _canvas.style.height = height + "px";
        }
        this.setViewport(0, 0, width, height);
    };
    this.getDrawingBufferSize = function(target) {
        return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
    };
    this.setDrawingBufferSize = function(width, height, pixelRatio) {
        _width = width;
        _height = height;
        _pixelRatio = pixelRatio;
        _canvas.width = Math.floor(width * pixelRatio);
        _canvas.height = Math.floor(height * pixelRatio);
        this.setViewport(0, 0, width, height);
    };
    this.getCurrentViewport = function(target) {
        return target.copy(_currentViewport);
    };
    this.getViewport = function(target) {
        return target.copy(_viewport);
    };
    this.setViewport = function(x, y, width, height) {
        if (x.isVector4) _viewport.set(x.x, x.y, x.z, x.w);
        else _viewport.set(x, y, width, height);
        state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
    };
    this.getScissor = function(target) {
        return target.copy(_scissor);
    };
    this.setScissor = function(x, y, width, height) {
        if (x.isVector4) _scissor.set(x.x, x.y, x.z, x.w);
        else _scissor.set(x, y, width, height);
        state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
    };
    this.getScissorTest = function() {
        return _scissorTest;
    };
    this.setScissorTest = function(boolean) {
        state.setScissorTest(_scissorTest = boolean);
    };
    this.setOpaqueSort = function(method) {
        _opaqueSort = method;
    };
    this.setTransparentSort = function(method) {
        _transparentSort = method;
    };
    // Clearing
    this.getClearColor = function(target) {
        return target.copy(background.getClearColor());
    };
    this.setClearColor = function() {
        background.setClearColor.apply(background, arguments);
    };
    this.getClearAlpha = function() {
        return background.getClearAlpha();
    };
    this.setClearAlpha = function() {
        background.setClearAlpha.apply(background, arguments);
    };
    this.clear = function(color, depth, stencil) {
        var bits = 0;
        if (color === undefined || color) bits |= 16384;
        if (depth === undefined || depth) bits |= 256;
        if (stencil === undefined || stencil) bits |= 1024;
        _gl.clear(bits);
    };
    this.clearColor = function() {
        this.clear(true, false, false);
    };
    this.clearDepth = function() {
        this.clear(false, true, false);
    };
    this.clearStencil = function() {
        this.clear(false, false, true);
    };
    //
    this.dispose = function() {
        _canvas.removeEventListener("webglcontextlost", onContextLost, false);
        _canvas.removeEventListener("webglcontextrestored", onContextRestore, false);
        renderLists.dispose();
        renderStates.dispose();
        properties.dispose();
        cubemaps.dispose();
        cubeuvmaps.dispose();
        objects.dispose();
        bindingStates.dispose();
        xr.dispose();
        xr.removeEventListener("sessionstart", onXRSessionStart);
        xr.removeEventListener("sessionend", onXRSessionEnd);
        if (_transmissionRenderTarget) {
            _transmissionRenderTarget.dispose();
            _transmissionRenderTarget = null;
        }
        animation.stop();
    };
    function onMaterialDispose(event) {
        var material = event.target;
        material.removeEventListener("dispose", onMaterialDispose);
        deallocateMaterial(material);
    }
    // Buffer rendering
    this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
        if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)
        var frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
        var program = setProgram(camera, scene, geometry, material, object);
        state.setMaterial(material, frontFaceCW);
        //
        var index = geometry.index;
        var position = geometry.attributes.position;
        //
        if (index === null) {
            if (position === undefined || position.count === 0) return;
        } else if (index.count === 0) return;
        //
        var rangeFactor = 1;
        if (material.wireframe === true) {
            index = geometries.getWireframeAttribute(geometry);
            rangeFactor = 2;
        }
        bindingStates.setup(object, material, program, geometry, index);
        var attribute;
        var renderer = bufferRenderer;
        if (index !== null) {
            attribute = attributes.get(index);
            renderer = indexedBufferRenderer;
            renderer.setIndex(attribute);
        }
        //
        var dataCount = index !== null ? index.count : position.count;
        var rangeStart = geometry.drawRange.start * rangeFactor;
        var rangeCount = geometry.drawRange.count * rangeFactor;
        var groupStart = group !== null ? group.start * rangeFactor : 0;
        var groupCount = group !== null ? group.count * rangeFactor : Infinity;
        var drawStart = Math.max(rangeStart, groupStart);
        var drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;
        var drawCount = Math.max(0, drawEnd - drawStart + 1);
        if (drawCount === 0) return;
        //
        if (object.isMesh) {
            if (material.wireframe === true) {
                state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
                renderer.setMode(1);
            } else renderer.setMode(4);
        } else if (object.isLine) {
            var lineWidth = material.linewidth;
            if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material
            state.setLineWidth(lineWidth * getTargetPixelRatio());
            if (object.isLineSegments) renderer.setMode(1);
            else if (object.isLineLoop) renderer.setMode(2);
            else renderer.setMode(3);
        } else if (object.isPoints) renderer.setMode(0);
        else if (object.isSprite) renderer.setMode(4);
        if (object.isInstancedMesh) renderer.renderInstances(drawStart, drawCount, object.count);
        else if (geometry.isInstancedBufferGeometry) {
            var instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);
            renderer.renderInstances(drawStart, drawCount, instanceCount);
        } else renderer.render(drawStart, drawCount);
    };
    // Compile
    this.compile = function(scene, camera) {
        currentRenderState = renderStates.get(scene);
        currentRenderState.init();
        renderStateStack.push(currentRenderState);
        scene.traverseVisible(function(object) {
            if (object.isLight && object.layers.test(camera.layers)) {
                currentRenderState.pushLight(object);
                if (object.castShadow) currentRenderState.pushShadow(object);
            }
        });
        currentRenderState.setupLights(_this.physicallyCorrectLights);
        scene.traverse(function(object) {
            var material = object.material;
            if (material) {
                if (Array.isArray(material)) for(var i = 0; i < material.length; i++){
                    var material2 = material[i];
                    getProgram(material2, scene, object);
                }
                else getProgram(material, scene, object);
            }
        });
        renderStateStack.pop();
        currentRenderState = null;
    };
    // Animation Loop
    var onAnimationFrameCallback = null;
    var animation = new $b383cde4e0574ff6$var$WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    if (typeof window !== "undefined") animation.setContext(window);
    this.setAnimationLoop = function(callback) {
        onAnimationFrameCallback = callback;
        xr.setAnimationLoop(callback);
        callback === null ? animation.stop() : animation.start();
    };
    xr.addEventListener("sessionstart", onXRSessionStart);
    xr.addEventListener("sessionend", onXRSessionEnd);
    // Rendering
    this.render = function(scene, camera) {
        if (camera !== undefined && camera.isCamera !== true) {
            console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
            return;
        }
        if (_isContextLost === true) return;
        // update scene graph
        if (scene.autoUpdate === true) scene.updateMatrixWorld();
        // update camera matrices and frustum
        if (camera.parent === null) camera.updateMatrixWorld();
        if (xr.enabled === true && xr.isPresenting === true) {
            if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);
            camera = xr.getCamera(); // use XR camera for rendering
        }
        //
        if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
        currentRenderState = renderStates.get(scene, renderStateStack.length);
        currentRenderState.init();
        renderStateStack.push(currentRenderState);
        _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
        _frustum.setFromProjectionMatrix(_projScreenMatrix);
        _localClippingEnabled = this.localClippingEnabled;
        _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);
        currentRenderList = renderLists.get(scene, renderListStack.length);
        currentRenderList.init();
        renderListStack.push(currentRenderList);
        projectObject(scene, camera, 0, _this.sortObjects);
        currentRenderList.finish();
        if (_this.sortObjects === true) currentRenderList.sort(_opaqueSort, _transparentSort);
        //
        if (_clippingEnabled === true) clipping.beginShadows();
        var shadowsArray = currentRenderState.state.shadowsArray;
        shadowMap.render(shadowsArray, scene, camera);
        if (_clippingEnabled === true) clipping.endShadows();
        //
        if (this.info.autoReset === true) this.info.reset();
        //
        background.render(currentRenderList, scene);
        // render scene
        currentRenderState.setupLights(_this.physicallyCorrectLights);
        if (camera.isArrayCamera) {
            var cameras = camera.cameras;
            for(var i = 0, l = cameras.length; i < l; i++){
                var camera2 = cameras[i];
                renderScene(currentRenderList, scene, camera2, camera2.viewport);
            }
        } else renderScene(currentRenderList, scene, camera);
        //
        if (_currentRenderTarget !== null) {
            // resolve multisample renderbuffers to a single-sample texture if necessary
            textures.updateMultisampleRenderTarget(_currentRenderTarget);
            // Generate mipmap if we're using any kind of mipmap filtering
            textures.updateRenderTargetMipmap(_currentRenderTarget);
        }
        //
        if (scene.isScene === true) scene.onAfterRender(_this, scene, camera);
        // Ensure depth buffer writing is enabled so it can be cleared on next render
        state.buffers.depth.setTest(true);
        state.buffers.depth.setMask(true);
        state.buffers.color.setMask(true);
        state.setPolygonOffset(false);
        // _gl.finish();
        bindingStates.resetDefaultState();
        _currentMaterialId = -1;
        _currentCamera = null;
        renderStateStack.pop();
        if (renderStateStack.length > 0) currentRenderState = renderStateStack[renderStateStack.length - 1];
        else currentRenderState = null;
        renderListStack.pop();
        if (renderListStack.length > 0) currentRenderList = renderListStack[renderListStack.length - 1];
        else currentRenderList = null;
    };
    function projectObject(object, camera, groupOrder, sortObjects) {
        if (object.visible === false) return;
        var visible = object.layers.test(camera.layers);
        if (visible) {
            if (object.isGroup) groupOrder = object.renderOrder;
            else if (object.isLOD) {
                if (object.autoUpdate === true) object.update(camera);
            } else if (object.isLight) {
                currentRenderState.pushLight(object);
                if (object.castShadow) currentRenderState.pushShadow(object);
            } else if (object.isSprite) {
                if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
                    if (sortObjects) _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
                    var geometry = objects.update(object);
                    var material = object.material;
                    if (material.visible) currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
                }
            } else if (object.isMesh || object.isLine || object.isPoints) {
                if (object.isSkinnedMesh) // update skeleton only once in a frame
                {
                    if (object.skeleton.frame !== info.render.frame) {
                        object.skeleton.update();
                        object.skeleton.frame = info.render.frame;
                    }
                }
                if (!object.frustumCulled || _frustum.intersectsObject(object)) {
                    if (sortObjects) _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
                    var geometry1 = objects.update(object);
                    var material1 = object.material;
                    if (Array.isArray(material1)) {
                        var groups = geometry1.groups;
                        for(var i = 0, l = groups.length; i < l; i++){
                            var group = groups[i];
                            var groupMaterial = material1[group.materialIndex];
                            if (groupMaterial && groupMaterial.visible) currentRenderList.push(object, geometry1, groupMaterial, groupOrder, _vector3.z, group);
                        }
                    } else if (material1.visible) currentRenderList.push(object, geometry1, material1, groupOrder, _vector3.z, null);
                }
            }
        }
        var children = object.children;
        for(var i1 = 0, l1 = children.length; i1 < l1; i1++)projectObject(children[i1], camera, groupOrder, sortObjects);
    }
    this.getActiveCubeFace = function() {
        return _currentActiveCubeFace;
    };
    this.getActiveMipmapLevel = function() {
        return _currentActiveMipmapLevel;
    };
    this.getRenderTarget = function() {
        return _currentRenderTarget;
    };
    this.setRenderTarget = function(renderTarget) {
        var activeCubeFace = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, activeMipmapLevel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
        _currentRenderTarget = renderTarget;
        _currentActiveCubeFace = activeCubeFace;
        _currentActiveMipmapLevel = activeMipmapLevel;
        if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) textures.setupRenderTarget(renderTarget);
        var framebuffer = null;
        var isCube = false;
        var isRenderTarget3D = false;
        if (renderTarget) {
            var texture = renderTarget.texture;
            if (texture.isDataTexture3D || texture.isDataTexture2DArray) isRenderTarget3D = true;
            var __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
            if (renderTarget.isWebGLCubeRenderTarget) {
                framebuffer = __webglFramebuffer[activeCubeFace];
                isCube = true;
            } else if (renderTarget.isWebGLMultisampleRenderTarget) framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
            else framebuffer = __webglFramebuffer;
            _currentViewport.copy(renderTarget.viewport);
            _currentScissor.copy(renderTarget.scissor);
            _currentScissorTest = renderTarget.scissorTest;
        } else {
            _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
            _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
            _currentScissorTest = _scissorTest;
        }
        var framebufferBound = state.bindFramebuffer(36160, framebuffer);
        if (framebufferBound && capabilities.drawBuffers) {
            var needsUpdate = false;
            if (renderTarget) {
                if (renderTarget.isWebGLMultipleRenderTargets) {
                    var textures1 = renderTarget.texture;
                    if (_currentDrawBuffers.length !== textures1.length || _currentDrawBuffers[0] !== 36064) {
                        for(var i = 0, il = textures1.length; i < il; i++)_currentDrawBuffers[i] = 36064 + i;
                        _currentDrawBuffers.length = textures1.length;
                        needsUpdate = true;
                    }
                } else if (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== 36064) {
                    _currentDrawBuffers[0] = 36064;
                    _currentDrawBuffers.length = 1;
                    needsUpdate = true;
                }
            } else if (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== 1029) {
                _currentDrawBuffers[0] = 1029;
                _currentDrawBuffers.length = 1;
                needsUpdate = true;
            }
            if (needsUpdate) {
                if (capabilities.isWebGL2) _gl.drawBuffers(_currentDrawBuffers);
                else extensions.get("WEBGL_draw_buffers").drawBuffersWEBGL(_currentDrawBuffers);
            }
        }
        state.viewport(_currentViewport);
        state.scissor(_currentScissor);
        state.setScissorTest(_currentScissorTest);
        if (isCube) {
            var textureProperties = properties.get(renderTarget.texture);
            _gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
        } else if (isRenderTarget3D) {
            var textureProperties1 = properties.get(renderTarget.texture);
            var layer = activeCubeFace || 0;
            _gl.framebufferTextureLayer(36160, 36064, textureProperties1.__webglTexture, activeMipmapLevel || 0, layer);
        }
        _currentMaterialId = -1; // reset current material to ensure correct uniform bindings
    };
    this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
        if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
            return;
        }
        var framebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) framebuffer = framebuffer[activeCubeFaceIndex];
        if (framebuffer) {
            state.bindFramebuffer(36160, framebuffer);
            try {
                var texture = renderTarget.texture;
                var textureFormat = texture.format;
                var textureType = texture.type;
                if (textureFormat !== $b383cde4e0574ff6$export$3f8bb04b555a363c && utils.convert(textureFormat) !== _gl.getParameter(35739)) {
                    console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                    return;
                }
                var halfFloatSupportedByExt = textureType === $b383cde4e0574ff6$export$2697304443f382bc && (extensions.has("EXT_color_buffer_half_float") || capabilities.isWebGL2 && extensions.has("EXT_color_buffer_float"));
                if (textureType !== $b383cde4e0574ff6$export$2e8ce08d3f6f5e10 && utils.convert(textureType) !== _gl.getParameter(35738) && // Edge and Chrome Mac < 52 (#9513)
                !(textureType === $b383cde4e0574ff6$export$f6d331659b644596 && (capabilities.isWebGL2 || extensions.has("OES_texture_float") || extensions.has("WEBGL_color_buffer_float"))) && // Chrome Mac >= 52 and Firefox
                !halfFloatSupportedByExt) {
                    console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                    return;
                }
                if (_gl.checkFramebufferStatus(36160) === 36053) // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
                {
                    if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
                } else console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
            } finally{
                // restore framebuffer of current render target if necessary
                var framebuffer1 = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
                state.bindFramebuffer(36160, framebuffer1);
            }
        }
    };
    this.copyFramebufferToTexture = function(position, texture) {
        var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
        var levelScale = Math.pow(2, -level);
        var width = Math.floor(texture.image.width * levelScale);
        var height = Math.floor(texture.image.height * levelScale);
        var glFormat = utils.convert(texture.format);
        if (capabilities.isWebGL2) {
            // Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100
            // Not needed in Chrome 93+
            if (glFormat === 6407) glFormat = 32849;
            if (glFormat === 6408) glFormat = 32856;
        }
        textures.setTexture2D(texture, 0);
        _gl.copyTexImage2D(3553, level, glFormat, position.x, position.y, width, height, 0);
        state.unbindTexture();
    };
    this.copyTextureToTexture = function(position, srcTexture, dstTexture) {
        var level = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
        var width = srcTexture.image.width;
        var height = srcTexture.image.height;
        var glFormat = utils.convert(dstTexture.format);
        var glType = utils.convert(dstTexture.type);
        textures.setTexture2D(dstTexture, 0);
        // As another texture upload may have changed pixelStorei
        // parameters, make sure they are correct for the dstTexture
        _gl.pixelStorei(37440, dstTexture.flipY);
        _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
        _gl.pixelStorei(3317, dstTexture.unpackAlignment);
        if (srcTexture.isDataTexture) _gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
        else if (srcTexture.isCompressedTexture) _gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
        else _gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);
        // Generate mipmaps only when copying level 0
        if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(3553);
        state.unbindTexture();
    };
    this.copyTextureToTexture3D = function(sourceBox, position, srcTexture, dstTexture) {
        var level = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
        if (_this.isWebGL1Renderer) {
            console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
            return;
        }
        var width = sourceBox.max.x - sourceBox.min.x + 1;
        var height = sourceBox.max.y - sourceBox.min.y + 1;
        var depth = sourceBox.max.z - sourceBox.min.z + 1;
        var glFormat = utils.convert(dstTexture.format);
        var glType = utils.convert(dstTexture.type);
        var glTarget;
        if (dstTexture.isDataTexture3D) {
            textures.setTexture3D(dstTexture, 0);
            glTarget = 32879;
        } else if (dstTexture.isDataTexture2DArray) {
            textures.setTexture2DArray(dstTexture, 0);
            glTarget = 35866;
        } else {
            console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
            return;
        }
        _gl.pixelStorei(37440, dstTexture.flipY);
        _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
        _gl.pixelStorei(3317, dstTexture.unpackAlignment);
        var unpackRowLen = _gl.getParameter(3314);
        var unpackImageHeight = _gl.getParameter(32878);
        var unpackSkipPixels = _gl.getParameter(3316);
        var unpackSkipRows = _gl.getParameter(3315);
        var unpackSkipImages = _gl.getParameter(32877);
        var image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;
        _gl.pixelStorei(3314, image.width);
        _gl.pixelStorei(32878, image.height);
        _gl.pixelStorei(3316, sourceBox.min.x);
        _gl.pixelStorei(3315, sourceBox.min.y);
        _gl.pixelStorei(32877, sourceBox.min.z);
        if (srcTexture.isDataTexture || srcTexture.isDataTexture3D) _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data);
        else if (srcTexture.isCompressedTexture) {
            console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.");
            _gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data);
        } else _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image);
        _gl.pixelStorei(3314, unpackRowLen);
        _gl.pixelStorei(32878, unpackImageHeight);
        _gl.pixelStorei(3316, unpackSkipPixels);
        _gl.pixelStorei(3315, unpackSkipRows);
        _gl.pixelStorei(32877, unpackSkipImages);
        // Generate mipmaps only when copying level 0
        if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);
        state.unbindTexture();
    };
    this.initTexture = function(texture) {
        textures.setTexture2D(texture, 0);
        state.unbindTexture();
    };
    this.resetState = function() {
        _currentActiveCubeFace = 0;
        _currentActiveMipmapLevel = 0;
        _currentRenderTarget = null;
        state.reset();
        bindingStates.reset();
    };
    if (typeof __THREE_DEVTOOLS__ !== "undefined") __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
        detail: this
    })); // eslint-disable-line no-undef
}
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.isWebGLRenderer = true;
var $b383cde4e0574ff6$export$a2f65229194348f9 = /*#__PURE__*/ function(WebGLRenderer) {
    "use strict";
    (0, $gQI4D.default)(WebGL1Renderer, WebGLRenderer);
    var _super = (0, $a0Xbx.default)(WebGL1Renderer);
    function WebGL1Renderer() {
        (0, $dnGTK.default)(this, WebGL1Renderer);
        return _super.apply(this, arguments);
    }
    return WebGL1Renderer;
}($b383cde4e0574ff6$export$f6cc00ef28d7cf97);
$b383cde4e0574ff6$export$a2f65229194348f9.prototype.isWebGL1Renderer = true;
var $b383cde4e0574ff6$export$6f1519f023b8d0f6 = /*#__PURE__*/ function() {
    "use strict";
    function FogExp2(color) {
        var density = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.00025;
        (0, $dnGTK.default)(this, FogExp2);
        this.name = "";
        this.color = new $b383cde4e0574ff6$export$892596cec99bc70e(color);
        this.density = density;
    }
    (0, $9SLyD.default)(FogExp2, [
        {
            key: "clone",
            value: function clone() {
                return new FogExp2(this.color, this.density);
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return {
                    type: "FogExp2",
                    color: this.color.getHex(),
                    density: this.density
                };
            }
        }
    ]);
    return FogExp2;
}();
$b383cde4e0574ff6$export$6f1519f023b8d0f6.prototype.isFogExp2 = true;
var $b383cde4e0574ff6$export$3c890837b09508d4 = /*#__PURE__*/ function() {
    "use strict";
    function Fog(color) {
        var near = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, far = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1000;
        (0, $dnGTK.default)(this, Fog);
        this.name = "";
        this.color = new $b383cde4e0574ff6$export$892596cec99bc70e(color);
        this.near = near;
        this.far = far;
    }
    (0, $9SLyD.default)(Fog, [
        {
            key: "clone",
            value: function clone() {
                return new Fog(this.color, this.near, this.far);
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return {
                    type: "Fog",
                    color: this.color.getHex(),
                    near: this.near,
                    far: this.far
                };
            }
        }
    ]);
    return Fog;
}();
$b383cde4e0574ff6$export$3c890837b09508d4.prototype.isFog = true;
var $b383cde4e0574ff6$export$38af1803e3442a7f = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(Scene, Object3D);
    var _super = (0, $a0Xbx.default)(Scene);
    function Scene() {
        (0, $dnGTK.default)(this, Scene);
        var _this;
        _this = _super.call(this);
        _this.type = "Scene";
        _this.background = null;
        _this.environment = null;
        _this.fog = null;
        _this.overrideMaterial = null;
        _this.autoUpdate = true; // checked by the renderer
        if (typeof __THREE_DEVTOOLS__ !== "undefined") __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", {
            detail: (0, $4enQD.default)(_this)
        })); // eslint-disable-line no-undef
        return _this;
    }
    (0, $9SLyD.default)(Scene, [
        {
            key: "copy",
            value: function copy(source, recursive) {
                (0, $bWs11.default)((0, $6gb2n.default)(Scene.prototype), "copy", this).call(this, source, recursive);
                if (source.background !== null) this.background = source.background.clone();
                if (source.environment !== null) this.environment = source.environment.clone();
                if (source.fog !== null) this.fog = source.fog.clone();
                if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
                this.autoUpdate = source.autoUpdate;
                this.matrixAutoUpdate = source.matrixAutoUpdate;
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON(meta) {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(Scene.prototype), "toJSON", this).call(this, meta);
                if (this.fog !== null) data.object.fog = this.fog.toJSON();
                return data;
            }
        }
    ]);
    return Scene;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
$b383cde4e0574ff6$export$38af1803e3442a7f.prototype.isScene = true;
var $b383cde4e0574ff6$export$3d5cd879f108f53f = /*#__PURE__*/ function() {
    "use strict";
    function InterleavedBuffer(array, stride) {
        (0, $dnGTK.default)(this, InterleavedBuffer);
        this.array = array;
        this.stride = stride;
        this.count = array !== undefined ? array.length / stride : 0;
        this.usage = $b383cde4e0574ff6$export$763e8360f4d7f77d;
        this.updateRange = {
            offset: 0,
            count: -1
        };
        this.version = 0;
        this.uuid = $b383cde4e0574ff6$var$generateUUID();
    }
    (0, $9SLyD.default)(InterleavedBuffer, [
        {
            key: "onUploadCallback",
            value: function onUploadCallback() {}
        },
        {
            key: "needsUpdate",
            set: function set(value) {
                if (value === true) this.version++;
            }
        },
        {
            key: "setUsage",
            value: function setUsage(value) {
                this.usage = value;
                return this;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                this.array = new source.array.constructor(source.array);
                this.count = source.count;
                this.stride = source.stride;
                this.usage = source.usage;
                return this;
            }
        },
        {
            key: "copyAt",
            value: function copyAt(index1, attribute, index2) {
                index1 *= this.stride;
                index2 *= attribute.stride;
                for(var i = 0, l = this.stride; i < l; i++)this.array[index1 + i] = attribute.array[index2 + i];
                return this;
            }
        },
        {
            key: "set",
            value: function set(value) {
                var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                this.array.set(value, offset);
                return this;
            }
        },
        {
            key: "clone",
            value: function clone(data) {
                if (data.arrayBuffers === undefined) data.arrayBuffers = {};
                if (this.array.buffer._uuid === undefined) this.array.buffer._uuid = $b383cde4e0574ff6$var$generateUUID();
                if (data.arrayBuffers[this.array.buffer._uuid] === undefined) data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
                var array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
                var ib = new this.constructor(array, this.stride);
                ib.setUsage(this.usage);
                return ib;
            }
        },
        {
            key: "onUpload",
            value: function onUpload(callback) {
                this.onUploadCallback = callback;
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON(data) {
                if (data.arrayBuffers === undefined) data.arrayBuffers = {};
                // generate UUID for array buffer if necessary
                if (this.array.buffer._uuid === undefined) this.array.buffer._uuid = $b383cde4e0574ff6$var$generateUUID();
                if (data.arrayBuffers[this.array.buffer._uuid] === undefined) data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));
                //
                return {
                    uuid: this.uuid,
                    buffer: this.array.buffer._uuid,
                    type: this.array.constructor.name,
                    stride: this.stride
                };
            }
        }
    ]);
    return InterleavedBuffer;
}();
$b383cde4e0574ff6$export$3d5cd879f108f53f.prototype.isInterleavedBuffer = true;
var $b383cde4e0574ff6$var$_vector$6 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$920b6d07334599c7 = /*#__PURE__*/ function() {
    "use strict";
    function InterleavedBufferAttribute(interleavedBuffer, itemSize, offset) {
        var normalized = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
        (0, $dnGTK.default)(this, InterleavedBufferAttribute);
        this.name = "";
        this.data = interleavedBuffer;
        this.itemSize = itemSize;
        this.offset = offset;
        this.normalized = normalized === true;
    }
    (0, $9SLyD.default)(InterleavedBufferAttribute, [
        {
            key: "count",
            get: function get() {
                return this.data.count;
            }
        },
        {
            key: "array",
            get: function get() {
                return this.data.array;
            }
        },
        {
            key: "needsUpdate",
            set: function set(value) {
                this.data.needsUpdate = value;
            }
        },
        {
            key: "applyMatrix4",
            value: function applyMatrix4(m) {
                for(var i = 0, l = this.data.count; i < l; i++){
                    $b383cde4e0574ff6$var$_vector$6.x = this.getX(i);
                    $b383cde4e0574ff6$var$_vector$6.y = this.getY(i);
                    $b383cde4e0574ff6$var$_vector$6.z = this.getZ(i);
                    $b383cde4e0574ff6$var$_vector$6.applyMatrix4(m);
                    this.setXYZ(i, $b383cde4e0574ff6$var$_vector$6.x, $b383cde4e0574ff6$var$_vector$6.y, $b383cde4e0574ff6$var$_vector$6.z);
                }
                return this;
            }
        },
        {
            key: "applyNormalMatrix",
            value: function applyNormalMatrix(m) {
                for(var i = 0, l = this.count; i < l; i++){
                    $b383cde4e0574ff6$var$_vector$6.x = this.getX(i);
                    $b383cde4e0574ff6$var$_vector$6.y = this.getY(i);
                    $b383cde4e0574ff6$var$_vector$6.z = this.getZ(i);
                    $b383cde4e0574ff6$var$_vector$6.applyNormalMatrix(m);
                    this.setXYZ(i, $b383cde4e0574ff6$var$_vector$6.x, $b383cde4e0574ff6$var$_vector$6.y, $b383cde4e0574ff6$var$_vector$6.z);
                }
                return this;
            }
        },
        {
            key: "transformDirection",
            value: function transformDirection(m) {
                for(var i = 0, l = this.count; i < l; i++){
                    $b383cde4e0574ff6$var$_vector$6.x = this.getX(i);
                    $b383cde4e0574ff6$var$_vector$6.y = this.getY(i);
                    $b383cde4e0574ff6$var$_vector$6.z = this.getZ(i);
                    $b383cde4e0574ff6$var$_vector$6.transformDirection(m);
                    this.setXYZ(i, $b383cde4e0574ff6$var$_vector$6.x, $b383cde4e0574ff6$var$_vector$6.y, $b383cde4e0574ff6$var$_vector$6.z);
                }
                return this;
            }
        },
        {
            key: "setX",
            value: function setX(index, x) {
                this.data.array[index * this.data.stride + this.offset] = x;
                return this;
            }
        },
        {
            key: "setY",
            value: function setY(index, y) {
                this.data.array[index * this.data.stride + this.offset + 1] = y;
                return this;
            }
        },
        {
            key: "setZ",
            value: function setZ(index, z) {
                this.data.array[index * this.data.stride + this.offset + 2] = z;
                return this;
            }
        },
        {
            key: "setW",
            value: function setW(index, w) {
                this.data.array[index * this.data.stride + this.offset + 3] = w;
                return this;
            }
        },
        {
            key: "getX",
            value: function getX(index) {
                return this.data.array[index * this.data.stride + this.offset];
            }
        },
        {
            key: "getY",
            value: function getY(index) {
                return this.data.array[index * this.data.stride + this.offset + 1];
            }
        },
        {
            key: "getZ",
            value: function getZ(index) {
                return this.data.array[index * this.data.stride + this.offset + 2];
            }
        },
        {
            key: "getW",
            value: function getW(index) {
                return this.data.array[index * this.data.stride + this.offset + 3];
            }
        },
        {
            key: "setXY",
            value: function setXY(index, x, y) {
                index = index * this.data.stride + this.offset;
                this.data.array[index + 0] = x;
                this.data.array[index + 1] = y;
                return this;
            }
        },
        {
            key: "setXYZ",
            value: function setXYZ(index, x, y, z) {
                index = index * this.data.stride + this.offset;
                this.data.array[index + 0] = x;
                this.data.array[index + 1] = y;
                this.data.array[index + 2] = z;
                return this;
            }
        },
        {
            key: "setXYZW",
            value: function setXYZW(index, x, y, z, w) {
                index = index * this.data.stride + this.offset;
                this.data.array[index + 0] = x;
                this.data.array[index + 1] = y;
                this.data.array[index + 2] = z;
                this.data.array[index + 3] = w;
                return this;
            }
        },
        {
            key: "clone",
            value: function clone(data) {
                if (data === undefined) {
                    console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");
                    var array = [];
                    for(var i = 0; i < this.count; i++){
                        var index = i * this.data.stride + this.offset;
                        for(var j = 0; j < this.itemSize; j++)array.push(this.data.array[index + j]);
                    }
                    return new $b383cde4e0574ff6$export$8dea267bd6bde117(new this.array.constructor(array), this.itemSize, this.normalized);
                } else {
                    if (data.interleavedBuffers === undefined) data.interleavedBuffers = {};
                    if (data.interleavedBuffers[this.data.uuid] === undefined) data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
                    return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
                }
            }
        },
        {
            key: "toJSON",
            value: function toJSON(data) {
                if (data === undefined) {
                    console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");
                    var array = [];
                    for(var i = 0; i < this.count; i++){
                        var index = i * this.data.stride + this.offset;
                        for(var j = 0; j < this.itemSize; j++)array.push(this.data.array[index + j]);
                    }
                    // deinterleave data and save it as an ordinary buffer attribute for now
                    return {
                        itemSize: this.itemSize,
                        type: this.array.constructor.name,
                        array: array,
                        normalized: this.normalized
                    };
                } else {
                    // save as true interlaved attribtue
                    if (data.interleavedBuffers === undefined) data.interleavedBuffers = {};
                    if (data.interleavedBuffers[this.data.uuid] === undefined) data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
                    return {
                        isInterleavedBufferAttribute: true,
                        itemSize: this.itemSize,
                        data: this.data.uuid,
                        offset: this.offset,
                        normalized: this.normalized
                    };
                }
            }
        }
    ]);
    return InterleavedBufferAttribute;
}();
$b383cde4e0574ff6$export$920b6d07334599c7.prototype.isInterleavedBufferAttribute = true;
/**
 * parameters = {
 *  color: <hex>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *  rotation: <float>,
 *  sizeAttenuation: <bool>
 * }
 */ var $b383cde4e0574ff6$export$5ec7dd1c6994bf8e = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(SpriteMaterial, Material);
    var _super = (0, $a0Xbx.default)(SpriteMaterial);
    function SpriteMaterial(parameters) {
        (0, $dnGTK.default)(this, SpriteMaterial);
        var _this;
        _this = _super.call(this);
        _this.type = "SpriteMaterial";
        _this.color = new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff);
        _this.map = null;
        _this.alphaMap = null;
        _this.rotation = 0;
        _this.sizeAttenuation = true;
        _this.transparent = true;
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(SpriteMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(SpriteMaterial.prototype), "copy", this).call(this, source);
                this.color.copy(source.color);
                this.map = source.map;
                this.alphaMap = source.alphaMap;
                this.rotation = source.rotation;
                this.sizeAttenuation = source.sizeAttenuation;
                return this;
            }
        }
    ]);
    return SpriteMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$5ec7dd1c6994bf8e.prototype.isSpriteMaterial = true;
var $b383cde4e0574ff6$var$_geometry;
var $b383cde4e0574ff6$var$_intersectPoint = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_worldScale = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_mvPosition = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_alignedPosition = /*@__PURE__*/ new $b383cde4e0574ff6$export$c977b3e384af9ae1();
var $b383cde4e0574ff6$var$_rotatedPosition = /*@__PURE__*/ new $b383cde4e0574ff6$export$c977b3e384af9ae1();
var $b383cde4e0574ff6$var$_viewWorldMatrix = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_vA = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_vB = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_vC = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_uvA = /*@__PURE__*/ new $b383cde4e0574ff6$export$c977b3e384af9ae1();
var $b383cde4e0574ff6$var$_uvB = /*@__PURE__*/ new $b383cde4e0574ff6$export$c977b3e384af9ae1();
var $b383cde4e0574ff6$var$_uvC = /*@__PURE__*/ new $b383cde4e0574ff6$export$c977b3e384af9ae1();
var $b383cde4e0574ff6$export$3075603db8e6204c = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(Sprite, Object3D);
    var _super = (0, $a0Xbx.default)(Sprite);
    function Sprite(material) {
        (0, $dnGTK.default)(this, Sprite);
        var _this;
        _this = _super.call(this);
        _this.type = "Sprite";
        if ($b383cde4e0574ff6$var$_geometry === undefined) {
            $b383cde4e0574ff6$var$_geometry = new $b383cde4e0574ff6$export$b7be63a67df8959();
            var float32Array = new Float32Array([
                -0.5,
                -0.5,
                0,
                0,
                0,
                0.5,
                -0.5,
                0,
                1,
                0,
                0.5,
                0.5,
                0,
                1,
                1,
                -0.5,
                0.5,
                0,
                0,
                1
            ]);
            var interleavedBuffer = new $b383cde4e0574ff6$export$3d5cd879f108f53f(float32Array, 5);
            $b383cde4e0574ff6$var$_geometry.setIndex([
                0,
                1,
                2,
                0,
                2,
                3
            ]);
            $b383cde4e0574ff6$var$_geometry.setAttribute("position", new $b383cde4e0574ff6$export$920b6d07334599c7(interleavedBuffer, 3, 0, false));
            $b383cde4e0574ff6$var$_geometry.setAttribute("uv", new $b383cde4e0574ff6$export$920b6d07334599c7(interleavedBuffer, 2, 3, false));
        }
        _this.geometry = $b383cde4e0574ff6$var$_geometry;
        _this.material = material !== undefined ? material : new $b383cde4e0574ff6$export$5ec7dd1c6994bf8e();
        _this.center = new $b383cde4e0574ff6$export$c977b3e384af9ae1(0.5, 0.5);
        return _this;
    }
    (0, $9SLyD.default)(Sprite, [
        {
            key: "raycast",
            value: function raycast(raycaster, intersects) {
                if (raycaster.camera === null) console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
                $b383cde4e0574ff6$var$_worldScale.setFromMatrixScale(this.matrixWorld);
                $b383cde4e0574ff6$var$_viewWorldMatrix.copy(raycaster.camera.matrixWorld);
                this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);
                $b383cde4e0574ff6$var$_mvPosition.setFromMatrixPosition(this.modelViewMatrix);
                if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) $b383cde4e0574ff6$var$_worldScale.multiplyScalar(-$b383cde4e0574ff6$var$_mvPosition.z);
                var rotation = this.material.rotation;
                var sin, cos;
                if (rotation !== 0) {
                    cos = Math.cos(rotation);
                    sin = Math.sin(rotation);
                }
                var center = this.center;
                $b383cde4e0574ff6$var$transformVertex($b383cde4e0574ff6$var$_vA.set(-0.5, -0.5, 0), $b383cde4e0574ff6$var$_mvPosition, center, $b383cde4e0574ff6$var$_worldScale, sin, cos);
                $b383cde4e0574ff6$var$transformVertex($b383cde4e0574ff6$var$_vB.set(0.5, -0.5, 0), $b383cde4e0574ff6$var$_mvPosition, center, $b383cde4e0574ff6$var$_worldScale, sin, cos);
                $b383cde4e0574ff6$var$transformVertex($b383cde4e0574ff6$var$_vC.set(0.5, 0.5, 0), $b383cde4e0574ff6$var$_mvPosition, center, $b383cde4e0574ff6$var$_worldScale, sin, cos);
                $b383cde4e0574ff6$var$_uvA.set(0, 0);
                $b383cde4e0574ff6$var$_uvB.set(1, 0);
                $b383cde4e0574ff6$var$_uvC.set(1, 1);
                // check first triangle
                var intersect = raycaster.ray.intersectTriangle($b383cde4e0574ff6$var$_vA, $b383cde4e0574ff6$var$_vB, $b383cde4e0574ff6$var$_vC, false, $b383cde4e0574ff6$var$_intersectPoint);
                if (intersect === null) {
                    // check second triangle
                    $b383cde4e0574ff6$var$transformVertex($b383cde4e0574ff6$var$_vB.set(-0.5, 0.5, 0), $b383cde4e0574ff6$var$_mvPosition, center, $b383cde4e0574ff6$var$_worldScale, sin, cos);
                    $b383cde4e0574ff6$var$_uvB.set(0, 1);
                    intersect = raycaster.ray.intersectTriangle($b383cde4e0574ff6$var$_vA, $b383cde4e0574ff6$var$_vC, $b383cde4e0574ff6$var$_vB, false, $b383cde4e0574ff6$var$_intersectPoint);
                    if (intersect === null) return;
                }
                var distance = raycaster.ray.origin.distanceTo($b383cde4e0574ff6$var$_intersectPoint);
                if (distance < raycaster.near || distance > raycaster.far) return;
                intersects.push({
                    distance: distance,
                    point: $b383cde4e0574ff6$var$_intersectPoint.clone(),
                    uv: $b383cde4e0574ff6$export$5a465592bfe74b48.getUV($b383cde4e0574ff6$var$_intersectPoint, $b383cde4e0574ff6$var$_vA, $b383cde4e0574ff6$var$_vB, $b383cde4e0574ff6$var$_vC, $b383cde4e0574ff6$var$_uvA, $b383cde4e0574ff6$var$_uvB, $b383cde4e0574ff6$var$_uvC, new $b383cde4e0574ff6$export$c977b3e384af9ae1()),
                    face: null,
                    object: this
                });
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(Sprite.prototype), "copy", this).call(this, source);
                if (source.center !== undefined) this.center.copy(source.center);
                this.material = source.material;
                return this;
            }
        }
    ]);
    return Sprite;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
$b383cde4e0574ff6$export$3075603db8e6204c.prototype.isSprite = true;
function $b383cde4e0574ff6$var$transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
    // compute position in camera space
    $b383cde4e0574ff6$var$_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);
    // to check if rotation is not zero
    if (sin !== undefined) {
        $b383cde4e0574ff6$var$_rotatedPosition.x = cos * $b383cde4e0574ff6$var$_alignedPosition.x - sin * $b383cde4e0574ff6$var$_alignedPosition.y;
        $b383cde4e0574ff6$var$_rotatedPosition.y = sin * $b383cde4e0574ff6$var$_alignedPosition.x + cos * $b383cde4e0574ff6$var$_alignedPosition.y;
    } else $b383cde4e0574ff6$var$_rotatedPosition.copy($b383cde4e0574ff6$var$_alignedPosition);
    vertexPosition.copy(mvPosition);
    vertexPosition.x += $b383cde4e0574ff6$var$_rotatedPosition.x;
    vertexPosition.y += $b383cde4e0574ff6$var$_rotatedPosition.y;
    // transform to world space
    vertexPosition.applyMatrix4($b383cde4e0574ff6$var$_viewWorldMatrix);
}
var $b383cde4e0574ff6$var$_v1$2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_v2$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$112e7237be0c5f30 = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(LOD, Object3D);
    var _super = (0, $a0Xbx.default)(LOD);
    function LOD() {
        (0, $dnGTK.default)(this, LOD);
        var _this;
        _this = _super.call(this);
        _this._currentLevel = 0;
        _this.type = "LOD";
        Object.defineProperties((0, $4enQD.default)(_this), {
            levels: {
                enumerable: true,
                value: []
            },
            isLOD: {
                value: true
            }
        });
        _this.autoUpdate = true;
        return _this;
    }
    (0, $9SLyD.default)(LOD, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(LOD.prototype), "copy", this).call(this, source, false);
                var levels = source.levels;
                for(var i = 0, l = levels.length; i < l; i++){
                    var level = levels[i];
                    this.addLevel(level.object.clone(), level.distance);
                }
                this.autoUpdate = source.autoUpdate;
                return this;
            }
        },
        {
            key: "addLevel",
            value: function addLevel(object) {
                var distance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                distance = Math.abs(distance);
                var levels = this.levels;
                var l;
                for(l = 0; l < levels.length; l++){
                    if (distance < levels[l].distance) break;
                }
                levels.splice(l, 0, {
                    distance: distance,
                    object: object
                });
                this.add(object);
                return this;
            }
        },
        {
            key: "getCurrentLevel",
            value: function getCurrentLevel() {
                return this._currentLevel;
            }
        },
        {
            key: "getObjectForDistance",
            value: function getObjectForDistance(distance) {
                var levels = this.levels;
                if (levels.length > 0) {
                    var i, l;
                    for(i = 1, l = levels.length; i < l; i++){
                        if (distance < levels[i].distance) break;
                    }
                    return levels[i - 1].object;
                }
                return null;
            }
        },
        {
            key: "raycast",
            value: function raycast(raycaster, intersects) {
                var levels = this.levels;
                if (levels.length > 0) {
                    $b383cde4e0574ff6$var$_v1$2.setFromMatrixPosition(this.matrixWorld);
                    var distance = raycaster.ray.origin.distanceTo($b383cde4e0574ff6$var$_v1$2);
                    this.getObjectForDistance(distance).raycast(raycaster, intersects);
                }
            }
        },
        {
            key: "update",
            value: function update(camera) {
                var levels = this.levels;
                if (levels.length > 1) {
                    $b383cde4e0574ff6$var$_v1$2.setFromMatrixPosition(camera.matrixWorld);
                    $b383cde4e0574ff6$var$_v2$1.setFromMatrixPosition(this.matrixWorld);
                    var distance = $b383cde4e0574ff6$var$_v1$2.distanceTo($b383cde4e0574ff6$var$_v2$1) / camera.zoom;
                    levels[0].object.visible = true;
                    var i, l;
                    for(i = 1, l = levels.length; i < l; i++){
                        if (distance >= levels[i].distance) {
                            levels[i - 1].object.visible = false;
                            levels[i].object.visible = true;
                        } else break;
                    }
                    this._currentLevel = i - 1;
                    for(; i < l; i++)levels[i].object.visible = false;
                }
            }
        },
        {
            key: "toJSON",
            value: function toJSON(meta) {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(LOD.prototype), "toJSON", this).call(this, meta);
                if (this.autoUpdate === false) data.object.autoUpdate = false;
                data.object.levels = [];
                var levels = this.levels;
                for(var i = 0, l = levels.length; i < l; i++){
                    var level = levels[i];
                    data.object.levels.push({
                        object: level.object.uuid,
                        distance: level.distance
                    });
                }
                return data;
            }
        }
    ]);
    return LOD;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
var $b383cde4e0574ff6$var$_basePosition = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_skinIndex = /*@__PURE__*/ new $b383cde4e0574ff6$export$fa7daccca11cdbe3();
var $b383cde4e0574ff6$var$_skinWeight = /*@__PURE__*/ new $b383cde4e0574ff6$export$fa7daccca11cdbe3();
var $b383cde4e0574ff6$var$_vector$5 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_matrix = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$export$b303577035157ecf = /*#__PURE__*/ function(Mesh) {
    "use strict";
    (0, $gQI4D.default)(SkinnedMesh, Mesh);
    var _super = (0, $a0Xbx.default)(SkinnedMesh);
    function SkinnedMesh(geometry, material) {
        (0, $dnGTK.default)(this, SkinnedMesh);
        var _this;
        _this = _super.call(this, geometry, material);
        _this.type = "SkinnedMesh";
        _this.bindMode = "attached";
        _this.bindMatrix = new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
        _this.bindMatrixInverse = new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
        return _this;
    }
    (0, $9SLyD.default)(SkinnedMesh, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(SkinnedMesh.prototype), "copy", this).call(this, source);
                this.bindMode = source.bindMode;
                this.bindMatrix.copy(source.bindMatrix);
                this.bindMatrixInverse.copy(source.bindMatrixInverse);
                this.skeleton = source.skeleton;
                return this;
            }
        },
        {
            key: "bind",
            value: function bind(skeleton, bindMatrix) {
                this.skeleton = skeleton;
                if (bindMatrix === undefined) {
                    this.updateMatrixWorld(true);
                    this.skeleton.calculateInverses();
                    bindMatrix = this.matrixWorld;
                }
                this.bindMatrix.copy(bindMatrix);
                this.bindMatrixInverse.copy(bindMatrix).invert();
            }
        },
        {
            key: "pose",
            value: function pose() {
                this.skeleton.pose();
            }
        },
        {
            key: "normalizeSkinWeights",
            value: function normalizeSkinWeights() {
                var vector = new $b383cde4e0574ff6$export$fa7daccca11cdbe3();
                var skinWeight = this.geometry.attributes.skinWeight;
                for(var i = 0, l = skinWeight.count; i < l; i++){
                    vector.x = skinWeight.getX(i);
                    vector.y = skinWeight.getY(i);
                    vector.z = skinWeight.getZ(i);
                    vector.w = skinWeight.getW(i);
                    var scale = 1.0 / vector.manhattanLength();
                    if (scale !== Infinity) vector.multiplyScalar(scale);
                    else vector.set(1, 0, 0, 0); // do something reasonable
                    skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
                }
            }
        },
        {
            key: "updateMatrixWorld",
            value: function updateMatrixWorld(force) {
                (0, $bWs11.default)((0, $6gb2n.default)(SkinnedMesh.prototype), "updateMatrixWorld", this).call(this, force);
                if (this.bindMode === "attached") this.bindMatrixInverse.copy(this.matrixWorld).invert();
                else if (this.bindMode === "detached") this.bindMatrixInverse.copy(this.bindMatrix).invert();
                else console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
            }
        },
        {
            key: "boneTransform",
            value: function boneTransform(index, target) {
                var skeleton = this.skeleton;
                var geometry = this.geometry;
                $b383cde4e0574ff6$var$_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
                $b383cde4e0574ff6$var$_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
                $b383cde4e0574ff6$var$_basePosition.copy(target).applyMatrix4(this.bindMatrix);
                target.set(0, 0, 0);
                for(var i = 0; i < 4; i++){
                    var weight = $b383cde4e0574ff6$var$_skinWeight.getComponent(i);
                    if (weight !== 0) {
                        var boneIndex = $b383cde4e0574ff6$var$_skinIndex.getComponent(i);
                        $b383cde4e0574ff6$var$_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
                        target.addScaledVector($b383cde4e0574ff6$var$_vector$5.copy($b383cde4e0574ff6$var$_basePosition).applyMatrix4($b383cde4e0574ff6$var$_matrix), weight);
                    }
                }
                return target.applyMatrix4(this.bindMatrixInverse);
            }
        }
    ]);
    return SkinnedMesh;
}($b383cde4e0574ff6$export$e176487c05830cc5);
$b383cde4e0574ff6$export$b303577035157ecf.prototype.isSkinnedMesh = true;
var $b383cde4e0574ff6$export$b127726e56765aa4 = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(Bone, Object3D);
    var _super = (0, $a0Xbx.default)(Bone);
    function Bone() {
        (0, $dnGTK.default)(this, Bone);
        var _this;
        _this = _super.call(this);
        _this.type = "Bone";
        return _this;
    }
    return Bone;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
$b383cde4e0574ff6$export$b127726e56765aa4.prototype.isBone = true;
var $b383cde4e0574ff6$export$b691f601014eabe1 = /*#__PURE__*/ function(Texture) {
    "use strict";
    (0, $gQI4D.default)(DataTexture, Texture);
    var _super = (0, $a0Xbx.default)(DataTexture);
    function DataTexture() {
        var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, width = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, height = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, format = arguments.length > 3 ? arguments[3] : void 0, type = arguments.length > 4 ? arguments[4] : void 0, mapping = arguments.length > 5 ? arguments[5] : void 0, wrapS = arguments.length > 6 ? arguments[6] : void 0, wrapT = arguments.length > 7 ? arguments[7] : void 0, magFilter = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : $b383cde4e0574ff6$export$727aa5ec3fe39bf0, minFilter = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : $b383cde4e0574ff6$export$727aa5ec3fe39bf0, anisotropy = arguments.length > 10 ? arguments[10] : void 0, encoding = arguments.length > 11 ? arguments[11] : void 0;
        (0, $dnGTK.default)(this, DataTexture);
        var _this;
        _this = _super.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
        _this.image = {
            data: data,
            width: width,
            height: height
        };
        _this.magFilter = magFilter;
        _this.minFilter = minFilter;
        _this.generateMipmaps = false;
        _this.flipY = false;
        _this.unpackAlignment = 1;
        _this.needsUpdate = true;
        return _this;
    }
    return DataTexture;
}($b383cde4e0574ff6$export$5431306cf43de24a);
$b383cde4e0574ff6$export$b691f601014eabe1.prototype.isDataTexture = true;
var $b383cde4e0574ff6$var$_offsetMatrix = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_identityMatrix = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$export$8f31e4c4a37b8e9c = /*#__PURE__*/ function() {
    "use strict";
    function Skeleton() {
        var bones = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], boneInverses = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        (0, $dnGTK.default)(this, Skeleton);
        this.uuid = $b383cde4e0574ff6$var$generateUUID();
        this.bones = bones.slice(0);
        this.boneInverses = boneInverses;
        this.boneMatrices = null;
        this.boneTexture = null;
        this.boneTextureSize = 0;
        this.frame = -1;
        this.init();
    }
    (0, $9SLyD.default)(Skeleton, [
        {
            key: "init",
            value: function init() {
                var bones = this.bones;
                var boneInverses = this.boneInverses;
                this.boneMatrices = new Float32Array(bones.length * 16);
                // calculate inverse bone matrices if necessary
                if (boneInverses.length === 0) this.calculateInverses();
                else // handle special case
                if (bones.length !== boneInverses.length) {
                    console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");
                    this.boneInverses = [];
                    for(var i = 0, il = this.bones.length; i < il; i++)this.boneInverses.push(new $b383cde4e0574ff6$export$2ae72fc923e5eb5());
                }
            }
        },
        {
            key: "calculateInverses",
            value: function calculateInverses() {
                this.boneInverses.length = 0;
                for(var i = 0, il = this.bones.length; i < il; i++){
                    var inverse = new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
                    if (this.bones[i]) inverse.copy(this.bones[i].matrixWorld).invert();
                    this.boneInverses.push(inverse);
                }
            }
        },
        {
            key: "pose",
            value: function pose() {
                // recover the bind-time world matrices
                for(var i = 0, il = this.bones.length; i < il; i++){
                    var bone = this.bones[i];
                    if (bone) bone.matrixWorld.copy(this.boneInverses[i]).invert();
                }
                // compute the local matrices, positions, rotations and scales
                for(var i1 = 0, il1 = this.bones.length; i1 < il1; i1++){
                    var bone1 = this.bones[i1];
                    if (bone1) {
                        if (bone1.parent && bone1.parent.isBone) {
                            bone1.matrix.copy(bone1.parent.matrixWorld).invert();
                            bone1.matrix.multiply(bone1.matrixWorld);
                        } else bone1.matrix.copy(bone1.matrixWorld);
                        bone1.matrix.decompose(bone1.position, bone1.quaternion, bone1.scale);
                    }
                }
            }
        },
        {
            key: "update",
            value: function update() {
                var bones = this.bones;
                var boneInverses = this.boneInverses;
                var boneMatrices = this.boneMatrices;
                var boneTexture = this.boneTexture;
                // flatten bone matrices to array
                for(var i = 0, il = bones.length; i < il; i++){
                    // compute the offset between the current and the original transform
                    var matrix = bones[i] ? bones[i].matrixWorld : $b383cde4e0574ff6$var$_identityMatrix;
                    $b383cde4e0574ff6$var$_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
                    $b383cde4e0574ff6$var$_offsetMatrix.toArray(boneMatrices, i * 16);
                }
                if (boneTexture !== null) boneTexture.needsUpdate = true;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new Skeleton(this.bones, this.boneInverses);
            }
        },
        {
            key: "computeBoneTexture",
            value: function computeBoneTexture() {
                // layout (1 matrix = 4 pixels)
                //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
                //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
                //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
                //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
                //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
                var size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix
                size = $b383cde4e0574ff6$var$ceilPowerOfTwo(size);
                size = Math.max(size, 4);
                var boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel
                boneMatrices.set(this.boneMatrices); // copy current values
                var boneTexture = new $b383cde4e0574ff6$export$b691f601014eabe1(boneMatrices, size, size, $b383cde4e0574ff6$export$3f8bb04b555a363c, $b383cde4e0574ff6$export$f6d331659b644596);
                this.boneMatrices = boneMatrices;
                this.boneTexture = boneTexture;
                this.boneTextureSize = size;
                return this;
            }
        },
        {
            key: "getBoneByName",
            value: function getBoneByName(name) {
                for(var i = 0, il = this.bones.length; i < il; i++){
                    var bone = this.bones[i];
                    if (bone.name === name) return bone;
                }
                return undefined;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                if (this.boneTexture !== null) {
                    this.boneTexture.dispose();
                    this.boneTexture = null;
                }
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json, bones) {
                this.uuid = json.uuid;
                for(var i = 0, l = json.bones.length; i < l; i++){
                    var uuid = json.bones[i];
                    var bone = bones[uuid];
                    if (bone === undefined) {
                        console.warn("THREE.Skeleton: No bone found with UUID:", uuid);
                        bone = new $b383cde4e0574ff6$export$b127726e56765aa4();
                    }
                    this.bones.push(bone);
                    this.boneInverses.push(new $b383cde4e0574ff6$export$2ae72fc923e5eb5().fromArray(json.boneInverses[i]));
                }
                this.init();
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = {
                    metadata: {
                        version: 4.5,
                        type: "Skeleton",
                        generator: "Skeleton.toJSON"
                    },
                    bones: [],
                    boneInverses: []
                };
                data.uuid = this.uuid;
                var bones = this.bones;
                var boneInverses = this.boneInverses;
                for(var i = 0, l = bones.length; i < l; i++){
                    var bone = bones[i];
                    data.bones.push(bone.uuid);
                    var boneInverse = boneInverses[i];
                    data.boneInverses.push(boneInverse.toArray());
                }
                return data;
            }
        }
    ]);
    return Skeleton;
}();
var $b383cde4e0574ff6$export$32ea87a8b54d744a = /*#__PURE__*/ function(BufferAttribute) {
    "use strict";
    (0, $gQI4D.default)(InstancedBufferAttribute, BufferAttribute);
    var _super = (0, $a0Xbx.default)(InstancedBufferAttribute);
    function InstancedBufferAttribute(array, itemSize, normalized) {
        var meshPerAttribute = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
        (0, $dnGTK.default)(this, InstancedBufferAttribute);
        var _this;
        if (typeof normalized === "number") {
            meshPerAttribute = normalized;
            normalized = false;
            console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.");
        }
        _this = _super.call(this, array, itemSize, normalized);
        _this.meshPerAttribute = meshPerAttribute;
        return _this;
    }
    (0, $9SLyD.default)(InstancedBufferAttribute, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(InstancedBufferAttribute.prototype), "copy", this).call(this, source);
                this.meshPerAttribute = source.meshPerAttribute;
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(InstancedBufferAttribute.prototype), "toJSON", this).call(this);
                data.meshPerAttribute = this.meshPerAttribute;
                data.isInstancedBufferAttribute = true;
                return data;
            }
        }
    ]);
    return InstancedBufferAttribute;
}($b383cde4e0574ff6$export$8dea267bd6bde117);
$b383cde4e0574ff6$export$32ea87a8b54d744a.prototype.isInstancedBufferAttribute = true;
var $b383cde4e0574ff6$var$_instanceLocalMatrix = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_instanceWorldMatrix = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_instanceIntersects = [];
var $b383cde4e0574ff6$var$_mesh = /*@__PURE__*/ new $b383cde4e0574ff6$export$e176487c05830cc5();
var $b383cde4e0574ff6$export$f3c979c331175ad7 = /*#__PURE__*/ function(Mesh) {
    "use strict";
    (0, $gQI4D.default)(InstancedMesh, Mesh);
    var _super = (0, $a0Xbx.default)(InstancedMesh);
    function InstancedMesh(geometry, material, count) {
        (0, $dnGTK.default)(this, InstancedMesh);
        var _this;
        _this = _super.call(this, geometry, material);
        _this.instanceMatrix = new $b383cde4e0574ff6$export$32ea87a8b54d744a(new Float32Array(count * 16), 16);
        _this.instanceColor = null;
        _this.count = count;
        _this.frustumCulled = false;
        return _this;
    }
    (0, $9SLyD.default)(InstancedMesh, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(InstancedMesh.prototype), "copy", this).call(this, source);
                this.instanceMatrix.copy(source.instanceMatrix);
                if (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();
                this.count = source.count;
                return this;
            }
        },
        {
            key: "getColorAt",
            value: function getColorAt(index, color) {
                color.fromArray(this.instanceColor.array, index * 3);
            }
        },
        {
            key: "getMatrixAt",
            value: function getMatrixAt(index, matrix) {
                matrix.fromArray(this.instanceMatrix.array, index * 16);
            }
        },
        {
            key: "raycast",
            value: function raycast(raycaster, intersects) {
                var matrixWorld = this.matrixWorld;
                var raycastTimes = this.count;
                $b383cde4e0574ff6$var$_mesh.geometry = this.geometry;
                $b383cde4e0574ff6$var$_mesh.material = this.material;
                if ($b383cde4e0574ff6$var$_mesh.material === undefined) return;
                for(var instanceId = 0; instanceId < raycastTimes; instanceId++){
                    // calculate the world matrix for each instance
                    this.getMatrixAt(instanceId, $b383cde4e0574ff6$var$_instanceLocalMatrix);
                    $b383cde4e0574ff6$var$_instanceWorldMatrix.multiplyMatrices(matrixWorld, $b383cde4e0574ff6$var$_instanceLocalMatrix);
                    // the mesh represents this single instance
                    $b383cde4e0574ff6$var$_mesh.matrixWorld = $b383cde4e0574ff6$var$_instanceWorldMatrix;
                    $b383cde4e0574ff6$var$_mesh.raycast(raycaster, $b383cde4e0574ff6$var$_instanceIntersects);
                    // process the result of raycast
                    for(var i = 0, l = $b383cde4e0574ff6$var$_instanceIntersects.length; i < l; i++){
                        var intersect = $b383cde4e0574ff6$var$_instanceIntersects[i];
                        intersect.instanceId = instanceId;
                        intersect.object = this;
                        intersects.push(intersect);
                    }
                    $b383cde4e0574ff6$var$_instanceIntersects.length = 0;
                }
            }
        },
        {
            key: "setColorAt",
            value: function setColorAt(index, color) {
                if (this.instanceColor === null) this.instanceColor = new $b383cde4e0574ff6$export$32ea87a8b54d744a(new Float32Array(this.instanceMatrix.count * 3), 3);
                color.toArray(this.instanceColor.array, index * 3);
            }
        },
        {
            key: "setMatrixAt",
            value: function setMatrixAt(index, matrix) {
                matrix.toArray(this.instanceMatrix.array, index * 16);
            }
        },
        {
            key: "updateMorphTargets",
            value: function updateMorphTargets() {}
        },
        {
            key: "dispose",
            value: function dispose() {
                this.dispatchEvent({
                    type: "dispose"
                });
            }
        }
    ]);
    return InstancedMesh;
}($b383cde4e0574ff6$export$e176487c05830cc5);
$b383cde4e0574ff6$export$f3c979c331175ad7.prototype.isInstancedMesh = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round"
 * }
 */ var $b383cde4e0574ff6$export$fbaaa33907730a0c = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(LineBasicMaterial, Material);
    var _super = (0, $a0Xbx.default)(LineBasicMaterial);
    function LineBasicMaterial(parameters) {
        (0, $dnGTK.default)(this, LineBasicMaterial);
        var _this;
        _this = _super.call(this);
        _this.type = "LineBasicMaterial";
        _this.color = new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff);
        _this.linewidth = 1;
        _this.linecap = "round";
        _this.linejoin = "round";
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(LineBasicMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(LineBasicMaterial.prototype), "copy", this).call(this, source);
                this.color.copy(source.color);
                this.linewidth = source.linewidth;
                this.linecap = source.linecap;
                this.linejoin = source.linejoin;
                return this;
            }
        }
    ]);
    return LineBasicMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$fbaaa33907730a0c.prototype.isLineBasicMaterial = true;
var $b383cde4e0574ff6$var$_start$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_end$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_inverseMatrix$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_ray$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$a186db52eed6d40e();
var $b383cde4e0574ff6$var$_sphere$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$805e8b72413ccaba();
var $b383cde4e0574ff6$export$17d680238e50603e = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(Line, Object3D);
    var _super = (0, $a0Xbx.default)(Line);
    function Line() {
        var geometry = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$b7be63a67df8959(), material = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$fbaaa33907730a0c();
        (0, $dnGTK.default)(this, Line);
        var _this;
        _this = _super.call(this);
        _this.type = "Line";
        _this.geometry = geometry;
        _this.material = material;
        _this.updateMorphTargets();
        return _this;
    }
    (0, $9SLyD.default)(Line, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(Line.prototype), "copy", this).call(this, source);
                this.material = source.material;
                this.geometry = source.geometry;
                return this;
            }
        },
        {
            key: "computeLineDistances",
            value: function computeLineDistances() {
                var geometry = this.geometry;
                if (geometry.isBufferGeometry) {
                    // we assume non-indexed geometry
                    if (geometry.index === null) {
                        var positionAttribute = geometry.attributes.position;
                        var lineDistances = [
                            0
                        ];
                        for(var i = 1, l = positionAttribute.count; i < l; i++){
                            $b383cde4e0574ff6$var$_start$1.fromBufferAttribute(positionAttribute, i - 1);
                            $b383cde4e0574ff6$var$_end$1.fromBufferAttribute(positionAttribute, i);
                            lineDistances[i] = lineDistances[i - 1];
                            lineDistances[i] += $b383cde4e0574ff6$var$_start$1.distanceTo($b383cde4e0574ff6$var$_end$1);
                        }
                        geometry.setAttribute("lineDistance", new $b383cde4e0574ff6$export$cbe7a62641830ebd(lineDistances, 1));
                    } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                } else if (geometry.isGeometry) console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
                return this;
            }
        },
        {
            key: "raycast",
            value: function raycast(raycaster, intersects) {
                var geometry = this.geometry;
                var matrixWorld = this.matrixWorld;
                var threshold = raycaster.params.Line.threshold;
                var drawRange = geometry.drawRange;
                // Checking boundingSphere distance to ray
                if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
                $b383cde4e0574ff6$var$_sphere$1.copy(geometry.boundingSphere);
                $b383cde4e0574ff6$var$_sphere$1.applyMatrix4(matrixWorld);
                $b383cde4e0574ff6$var$_sphere$1.radius += threshold;
                if (raycaster.ray.intersectsSphere($b383cde4e0574ff6$var$_sphere$1) === false) return;
                //
                $b383cde4e0574ff6$var$_inverseMatrix$1.copy(matrixWorld).invert();
                $b383cde4e0574ff6$var$_ray$1.copy(raycaster.ray).applyMatrix4($b383cde4e0574ff6$var$_inverseMatrix$1);
                var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
                var localThresholdSq = localThreshold * localThreshold;
                var vStart = new $b383cde4e0574ff6$export$64b5c384219d3699();
                var vEnd = new $b383cde4e0574ff6$export$64b5c384219d3699();
                var interSegment = new $b383cde4e0574ff6$export$64b5c384219d3699();
                var interRay = new $b383cde4e0574ff6$export$64b5c384219d3699();
                var step = this.isLineSegments ? 2 : 1;
                if (geometry.isBufferGeometry) {
                    var index = geometry.index;
                    var attributes = geometry.attributes;
                    var positionAttribute = attributes.position;
                    if (index !== null) {
                        var start = Math.max(0, drawRange.start);
                        var end = Math.min(index.count, drawRange.start + drawRange.count);
                        for(var i = start, l = end - 1; i < l; i += step){
                            var a = index.getX(i);
                            var b = index.getX(i + 1);
                            vStart.fromBufferAttribute(positionAttribute, a);
                            vEnd.fromBufferAttribute(positionAttribute, b);
                            var distSq = $b383cde4e0574ff6$var$_ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
                            if (distSq > localThresholdSq) continue;
                            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
                            var distance = raycaster.ray.origin.distanceTo(interRay);
                            if (distance < raycaster.near || distance > raycaster.far) continue;
                            intersects.push({
                                distance: distance,
                                // What do we want? intersection point on the ray or on the segment??
                                // point: raycaster.ray.at( distance ),
                                point: interSegment.clone().applyMatrix4(this.matrixWorld),
                                index: i,
                                face: null,
                                faceIndex: null,
                                object: this
                            });
                        }
                    } else {
                        var start1 = Math.max(0, drawRange.start);
                        var end1 = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
                        for(var i1 = start1, l1 = end1 - 1; i1 < l1; i1 += step){
                            vStart.fromBufferAttribute(positionAttribute, i1);
                            vEnd.fromBufferAttribute(positionAttribute, i1 + 1);
                            var distSq1 = $b383cde4e0574ff6$var$_ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
                            if (distSq1 > localThresholdSq) continue;
                            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
                            var distance1 = raycaster.ray.origin.distanceTo(interRay);
                            if (distance1 < raycaster.near || distance1 > raycaster.far) continue;
                            intersects.push({
                                distance: distance1,
                                // What do we want? intersection point on the ray or on the segment??
                                // point: raycaster.ray.at( distance ),
                                point: interSegment.clone().applyMatrix4(this.matrixWorld),
                                index: i1,
                                face: null,
                                faceIndex: null,
                                object: this
                            });
                        }
                    }
                } else if (geometry.isGeometry) console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
            }
        },
        {
            key: "updateMorphTargets",
            value: function updateMorphTargets() {
                var geometry = this.geometry;
                if (geometry.isBufferGeometry) {
                    var morphAttributes = geometry.morphAttributes;
                    var keys = Object.keys(morphAttributes);
                    if (keys.length > 0) {
                        var morphAttribute = morphAttributes[keys[0]];
                        if (morphAttribute !== undefined) {
                            this.morphTargetInfluences = [];
                            this.morphTargetDictionary = {};
                            for(var m = 0, ml = morphAttribute.length; m < ml; m++){
                                var name = morphAttribute[m].name || String(m);
                                this.morphTargetInfluences.push(0);
                                this.morphTargetDictionary[name] = m;
                            }
                        }
                    }
                } else {
                    var morphTargets = geometry.morphTargets;
                    if (morphTargets !== undefined && morphTargets.length > 0) console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
                }
            }
        }
    ]);
    return Line;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
$b383cde4e0574ff6$export$17d680238e50603e.prototype.isLine = true;
var $b383cde4e0574ff6$var$_start = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_end = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$ff1ed10fedfdd604 = /*#__PURE__*/ function(Line) {
    "use strict";
    (0, $gQI4D.default)(LineSegments, Line);
    var _super = (0, $a0Xbx.default)(LineSegments);
    function LineSegments(geometry, material) {
        (0, $dnGTK.default)(this, LineSegments);
        var _this;
        _this = _super.call(this, geometry, material);
        _this.type = "LineSegments";
        return _this;
    }
    (0, $9SLyD.default)(LineSegments, [
        {
            key: "computeLineDistances",
            value: function computeLineDistances() {
                var geometry = this.geometry;
                if (geometry.isBufferGeometry) {
                    // we assume non-indexed geometry
                    if (geometry.index === null) {
                        var positionAttribute = geometry.attributes.position;
                        var lineDistances = [];
                        for(var i = 0, l = positionAttribute.count; i < l; i += 2){
                            $b383cde4e0574ff6$var$_start.fromBufferAttribute(positionAttribute, i);
                            $b383cde4e0574ff6$var$_end.fromBufferAttribute(positionAttribute, i + 1);
                            lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
                            lineDistances[i + 1] = lineDistances[i] + $b383cde4e0574ff6$var$_start.distanceTo($b383cde4e0574ff6$var$_end);
                        }
                        geometry.setAttribute("lineDistance", new $b383cde4e0574ff6$export$cbe7a62641830ebd(lineDistances, 1));
                    } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                } else if (geometry.isGeometry) console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
                return this;
            }
        }
    ]);
    return LineSegments;
}($b383cde4e0574ff6$export$17d680238e50603e);
$b383cde4e0574ff6$export$ff1ed10fedfdd604.prototype.isLineSegments = true;
var $b383cde4e0574ff6$export$f85a24d745e4f17d = /*#__PURE__*/ function(Line) {
    "use strict";
    (0, $gQI4D.default)(LineLoop, Line);
    var _super = (0, $a0Xbx.default)(LineLoop);
    function LineLoop(geometry, material) {
        (0, $dnGTK.default)(this, LineLoop);
        var _this;
        _this = _super.call(this, geometry, material);
        _this.type = "LineLoop";
        return _this;
    }
    return LineLoop;
}($b383cde4e0574ff6$export$17d680238e50603e);
$b383cde4e0574ff6$export$f85a24d745e4f17d.prototype.isLineLoop = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *  sizeAttenuation: <bool>
 *
 * }
 */ var $b383cde4e0574ff6$export$a178c45366ce5d6b = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(PointsMaterial, Material);
    var _super = (0, $a0Xbx.default)(PointsMaterial);
    function PointsMaterial(parameters) {
        (0, $dnGTK.default)(this, PointsMaterial);
        var _this;
        _this = _super.call(this);
        _this.type = "PointsMaterial";
        _this.color = new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff);
        _this.map = null;
        _this.alphaMap = null;
        _this.size = 1;
        _this.sizeAttenuation = true;
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(PointsMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(PointsMaterial.prototype), "copy", this).call(this, source);
                this.color.copy(source.color);
                this.map = source.map;
                this.alphaMap = source.alphaMap;
                this.size = source.size;
                this.sizeAttenuation = source.sizeAttenuation;
                return this;
            }
        }
    ]);
    return PointsMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$a178c45366ce5d6b.prototype.isPointsMaterial = true;
var $b383cde4e0574ff6$var$_inverseMatrix = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_ray = /*@__PURE__*/ new $b383cde4e0574ff6$export$a186db52eed6d40e();
var $b383cde4e0574ff6$var$_sphere = /*@__PURE__*/ new $b383cde4e0574ff6$export$805e8b72413ccaba();
var $b383cde4e0574ff6$var$_position$2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$1c787534cb11aa3e = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(Points, Object3D);
    var _super = (0, $a0Xbx.default)(Points);
    function Points() {
        var geometry = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$b7be63a67df8959(), material = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$a178c45366ce5d6b();
        (0, $dnGTK.default)(this, Points);
        var _this;
        _this = _super.call(this);
        _this.type = "Points";
        _this.geometry = geometry;
        _this.material = material;
        _this.updateMorphTargets();
        return _this;
    }
    (0, $9SLyD.default)(Points, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(Points.prototype), "copy", this).call(this, source);
                this.material = source.material;
                this.geometry = source.geometry;
                return this;
            }
        },
        {
            key: "raycast",
            value: function raycast(raycaster, intersects) {
                var geometry = this.geometry;
                var matrixWorld = this.matrixWorld;
                var threshold = raycaster.params.Points.threshold;
                var drawRange = geometry.drawRange;
                // Checking boundingSphere distance to ray
                if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
                $b383cde4e0574ff6$var$_sphere.copy(geometry.boundingSphere);
                $b383cde4e0574ff6$var$_sphere.applyMatrix4(matrixWorld);
                $b383cde4e0574ff6$var$_sphere.radius += threshold;
                if (raycaster.ray.intersectsSphere($b383cde4e0574ff6$var$_sphere) === false) return;
                //
                $b383cde4e0574ff6$var$_inverseMatrix.copy(matrixWorld).invert();
                $b383cde4e0574ff6$var$_ray.copy(raycaster.ray).applyMatrix4($b383cde4e0574ff6$var$_inverseMatrix);
                var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
                var localThresholdSq = localThreshold * localThreshold;
                if (geometry.isBufferGeometry) {
                    var index = geometry.index;
                    var attributes = geometry.attributes;
                    var positionAttribute = attributes.position;
                    if (index !== null) {
                        var start = Math.max(0, drawRange.start);
                        var end = Math.min(index.count, drawRange.start + drawRange.count);
                        for(var i = start, il = end; i < il; i++){
                            var a = index.getX(i);
                            $b383cde4e0574ff6$var$_position$2.fromBufferAttribute(positionAttribute, a);
                            $b383cde4e0574ff6$var$testPoint($b383cde4e0574ff6$var$_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);
                        }
                    } else {
                        var start1 = Math.max(0, drawRange.start);
                        var end1 = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
                        for(var i1 = start1, l = end1; i1 < l; i1++){
                            $b383cde4e0574ff6$var$_position$2.fromBufferAttribute(positionAttribute, i1);
                            $b383cde4e0574ff6$var$testPoint($b383cde4e0574ff6$var$_position$2, i1, localThresholdSq, matrixWorld, raycaster, intersects, this);
                        }
                    }
                } else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
            }
        },
        {
            key: "updateMorphTargets",
            value: function updateMorphTargets() {
                var geometry = this.geometry;
                if (geometry.isBufferGeometry) {
                    var morphAttributes = geometry.morphAttributes;
                    var keys = Object.keys(morphAttributes);
                    if (keys.length > 0) {
                        var morphAttribute = morphAttributes[keys[0]];
                        if (morphAttribute !== undefined) {
                            this.morphTargetInfluences = [];
                            this.morphTargetDictionary = {};
                            for(var m = 0, ml = morphAttribute.length; m < ml; m++){
                                var name = morphAttribute[m].name || String(m);
                                this.morphTargetInfluences.push(0);
                                this.morphTargetDictionary[name] = m;
                            }
                        }
                    }
                } else {
                    var morphTargets = geometry.morphTargets;
                    if (morphTargets !== undefined && morphTargets.length > 0) console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
                }
            }
        }
    ]);
    return Points;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
$b383cde4e0574ff6$export$1c787534cb11aa3e.prototype.isPoints = true;
function $b383cde4e0574ff6$var$testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {
    var rayPointDistanceSq = $b383cde4e0574ff6$var$_ray.distanceSqToPoint(point);
    if (rayPointDistanceSq < localThresholdSq) {
        var intersectPoint = new $b383cde4e0574ff6$export$64b5c384219d3699();
        $b383cde4e0574ff6$var$_ray.closestPointToPoint(point, intersectPoint);
        intersectPoint.applyMatrix4(matrixWorld);
        var distance = raycaster.ray.origin.distanceTo(intersectPoint);
        if (distance < raycaster.near || distance > raycaster.far) return;
        intersects.push({
            distance: distance,
            distanceToRay: Math.sqrt(rayPointDistanceSq),
            point: intersectPoint,
            index: index,
            face: null,
            object: object
        });
    }
}
var $b383cde4e0574ff6$export$6e09d1edf8d5a25c = /*#__PURE__*/ function(Texture) {
    "use strict";
    (0, $gQI4D.default)(VideoTexture, Texture);
    var _super = (0, $a0Xbx.default)(VideoTexture);
    function VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
        (0, $dnGTK.default)(this, VideoTexture);
        var _this;
        _this = _super.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        _this.format = format !== undefined ? format : $b383cde4e0574ff6$export$7c67423a5ee6f5eb;
        _this.minFilter = minFilter !== undefined ? minFilter : $b383cde4e0574ff6$export$8a72f490b25c56c8;
        _this.magFilter = magFilter !== undefined ? magFilter : $b383cde4e0574ff6$export$8a72f490b25c56c8;
        _this.generateMipmaps = false;
        var scope = (0, $4enQD.default)(_this);
        function updateVideo() {
            scope.needsUpdate = true;
            video.requestVideoFrameCallback(updateVideo);
        }
        if ("requestVideoFrameCallback" in video) video.requestVideoFrameCallback(updateVideo);
        return _this;
    }
    (0, $9SLyD.default)(VideoTexture, [
        {
            key: "clone",
            value: function clone() {
                return new this.constructor(this.image).copy(this);
            }
        },
        {
            key: "update",
            value: function update() {
                var video = this.image;
                var hasVideoFrameCallback = "requestVideoFrameCallback" in video;
                if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) this.needsUpdate = true;
            }
        }
    ]);
    return VideoTexture;
}($b383cde4e0574ff6$export$5431306cf43de24a);
$b383cde4e0574ff6$export$6e09d1edf8d5a25c.prototype.isVideoTexture = true;
var $b383cde4e0574ff6$export$3466bac9141a5cc4 = /*#__PURE__*/ function(Texture) {
    "use strict";
    (0, $gQI4D.default)(CompressedTexture, Texture);
    var _super = (0, $a0Xbx.default)(CompressedTexture);
    function CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
        (0, $dnGTK.default)(this, CompressedTexture);
        var _this;
        _this = _super.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
        _this.image = {
            width: width,
            height: height
        };
        _this.mipmaps = mipmaps;
        // no flipping for cube textures
        // (also flipping doesn't work for compressed textures )
        _this.flipY = false;
        // can't generate mipmaps for compressed textures
        // mips must be embedded in DDS files
        _this.generateMipmaps = false;
        return _this;
    }
    return CompressedTexture;
}($b383cde4e0574ff6$export$5431306cf43de24a);
$b383cde4e0574ff6$export$3466bac9141a5cc4.prototype.isCompressedTexture = true;
var $b383cde4e0574ff6$export$f7189e49152d1c13 = /*#__PURE__*/ function(Texture) {
    "use strict";
    (0, $gQI4D.default)(CanvasTexture, Texture);
    var _super = (0, $a0Xbx.default)(CanvasTexture);
    function CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
        (0, $dnGTK.default)(this, CanvasTexture);
        var _this;
        _this = _super.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        _this.needsUpdate = true;
        return _this;
    }
    return CanvasTexture;
}($b383cde4e0574ff6$export$5431306cf43de24a);
$b383cde4e0574ff6$export$f7189e49152d1c13.prototype.isCanvasTexture = true;
var $b383cde4e0574ff6$export$fc830aa069cc8c2f = /*#__PURE__*/ function(Texture) {
    "use strict";
    (0, $gQI4D.default)(DepthTexture, Texture);
    var _super = (0, $a0Xbx.default)(DepthTexture);
    function DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
        (0, $dnGTK.default)(this, DepthTexture);
        var _this;
        format = format !== undefined ? format : $b383cde4e0574ff6$export$c1b6b5136be58045;
        if (format !== $b383cde4e0574ff6$export$c1b6b5136be58045 && format !== $b383cde4e0574ff6$export$1e113ac2d0905829) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        if (type === undefined && format === $b383cde4e0574ff6$export$c1b6b5136be58045) type = $b383cde4e0574ff6$export$c63dc51868b06a9d;
        if (type === undefined && format === $b383cde4e0574ff6$export$1e113ac2d0905829) type = $b383cde4e0574ff6$export$6c8ea339bfab1301;
        _this = _super.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        _this.image = {
            width: width,
            height: height
        };
        _this.magFilter = magFilter !== undefined ? magFilter : $b383cde4e0574ff6$export$727aa5ec3fe39bf0;
        _this.minFilter = minFilter !== undefined ? minFilter : $b383cde4e0574ff6$export$727aa5ec3fe39bf0;
        _this.flipY = false;
        _this.generateMipmaps = false;
        return _this;
    }
    return DepthTexture;
}($b383cde4e0574ff6$export$5431306cf43de24a);
$b383cde4e0574ff6$export$fc830aa069cc8c2f.prototype.isDepthTexture = true;
var $b383cde4e0574ff6$export$3f74fe60decf7462 = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(CircleGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(CircleGeometry);
    function CircleGeometry() {
        var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, segments = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 8, thetaStart = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, thetaLength = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Math.PI * 2;
        (0, $dnGTK.default)(this, CircleGeometry);
        var _this;
        _this = _super.call(this);
        _this.type = "CircleGeometry";
        _this.parameters = {
            radius: radius,
            segments: segments,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        segments = Math.max(3, segments);
        // buffers
        var indices = [];
        var vertices = [];
        var normals = [];
        var uvs = [];
        // helper variables
        var vertex = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var uv = new $b383cde4e0574ff6$export$c977b3e384af9ae1();
        // center point
        vertices.push(0, 0, 0);
        normals.push(0, 0, 1);
        uvs.push(0.5, 0.5);
        for(var s = 0, i = 3; s <= segments; s++, i += 3){
            var segment = thetaStart + s / segments * thetaLength;
            // vertex
            vertex.x = radius * Math.cos(segment);
            vertex.y = radius * Math.sin(segment);
            vertices.push(vertex.x, vertex.y, vertex.z);
            // normal
            normals.push(0, 0, 1);
            // uvs
            uv.x = (vertices[i] / radius + 1) / 2;
            uv.y = (vertices[i + 1] / radius + 1) / 2;
            uvs.push(uv.x, uv.y);
        }
        // indices
        for(var i1 = 1; i1 <= segments; i1++)indices.push(i1, i1 + 1, 0);
        // build geometry
        _this.setIndex(indices);
        _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        _this.setAttribute("normal", new $b383cde4e0574ff6$export$cbe7a62641830ebd(normals, 3));
        _this.setAttribute("uv", new $b383cde4e0574ff6$export$cbe7a62641830ebd(uvs, 2));
        return _this;
    }
    (0, $9SLyD.default)(CircleGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);
            }
        }
    ]);
    return CircleGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
var $b383cde4e0574ff6$export$d4345c83207d7c68 = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(CylinderGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(CylinderGeometry);
    function CylinderGeometry() {
        var radiusTop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, radiusBottom = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, height = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, radialSegments = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 8, heightSegments = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 1, openEnded = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false, thetaStart = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : 0, thetaLength = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : Math.PI * 2;
        (0, $dnGTK.default)(this, CylinderGeometry);
        var _this;
        var generateTorso = function generateTorso() {
            var normal = new $b383cde4e0574ff6$export$64b5c384219d3699();
            var vertex = new $b383cde4e0574ff6$export$64b5c384219d3699();
            var groupCount = 0;
            // this will be used to calculate the normal
            var slope = (radiusBottom - radiusTop) / height;
            // generate vertices, normals and uvs
            for(var y = 0; y <= heightSegments; y++){
                var indexRow = [];
                var v = y / heightSegments;
                // calculate the radius of the current row
                var radius = v * (radiusBottom - radiusTop) + radiusTop;
                for(var x = 0; x <= radialSegments; x++){
                    var u = x / radialSegments;
                    var theta = u * thetaLength + thetaStart;
                    var sinTheta = Math.sin(theta);
                    var cosTheta = Math.cos(theta);
                    // vertex
                    vertex.x = radius * sinTheta;
                    vertex.y = -v * height + halfHeight;
                    vertex.z = radius * cosTheta;
                    vertices.push(vertex.x, vertex.y, vertex.z);
                    // normal
                    normal.set(sinTheta, slope, cosTheta).normalize();
                    normals.push(normal.x, normal.y, normal.z);
                    // uv
                    uvs.push(u, 1 - v);
                    // save index of vertex in respective row
                    indexRow.push(index++);
                }
                // now save vertices of the row in our index array
                indexArray.push(indexRow);
            }
            // generate indices
            for(var x1 = 0; x1 < radialSegments; x1++)for(var y1 = 0; y1 < heightSegments; y1++){
                // we use the index array to access the correct indices
                var a = indexArray[y1][x1];
                var b = indexArray[y1 + 1][x1];
                var c = indexArray[y1 + 1][x1 + 1];
                var d = indexArray[y1][x1 + 1];
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
                // update group counter
                groupCount += 6;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, 0);
            // calculate new start value for groups
            groupStart += groupCount;
        };
        var generateCap = function generateCap(top) {
            // save the index of the first center vertex
            var centerIndexStart = index;
            var uv = new $b383cde4e0574ff6$export$c977b3e384af9ae1();
            var vertex = new $b383cde4e0574ff6$export$64b5c384219d3699();
            var groupCount = 0;
            var radius = top === true ? radiusTop : radiusBottom;
            var sign = top === true ? 1 : -1;
            // first we generate the center vertex data of the cap.
            // because the geometry needs one set of uvs per face,
            // we must generate a center vertex per face/segment
            for(var x = 1; x <= radialSegments; x++){
                // vertex
                vertices.push(0, halfHeight * sign, 0);
                // normal
                normals.push(0, sign, 0);
                // uv
                uvs.push(0.5, 0.5);
                // increase index
                index++;
            }
            // save the index of the last center vertex
            var centerIndexEnd = index;
            // now we generate the surrounding vertices, normals and uvs
            for(var x1 = 0; x1 <= radialSegments; x1++){
                var u = x1 / radialSegments;
                var theta = u * thetaLength + thetaStart;
                var cosTheta = Math.cos(theta);
                var sinTheta = Math.sin(theta);
                // vertex
                vertex.x = radius * sinTheta;
                vertex.y = halfHeight * sign;
                vertex.z = radius * cosTheta;
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normals.push(0, sign, 0);
                // uv
                uv.x = cosTheta * 0.5 + 0.5;
                uv.y = sinTheta * 0.5 * sign + 0.5;
                uvs.push(uv.x, uv.y);
                // increase index
                index++;
            }
            // generate indices
            for(var x2 = 0; x2 < radialSegments; x2++){
                var c = centerIndexStart + x2;
                var i = centerIndexEnd + x2;
                if (top === true) // face top
                indices.push(i, i + 1, c);
                else // face bottom
                indices.push(i + 1, i, c);
                groupCount += 3;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
            // calculate new start value for groups
            groupStart += groupCount;
        };
        _this = _super.call(this);
        _this.type = "CylinderGeometry";
        _this.parameters = {
            radiusTop: radiusTop,
            radiusBottom: radiusBottom,
            height: height,
            radialSegments: radialSegments,
            heightSegments: heightSegments,
            openEnded: openEnded,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        var scope = (0, $4enQD.default)(_this);
        radialSegments = Math.floor(radialSegments);
        heightSegments = Math.floor(heightSegments);
        // buffers
        var indices = [];
        var vertices = [];
        var normals = [];
        var uvs = [];
        // helper variables
        var index = 0;
        var indexArray = [];
        var halfHeight = height / 2;
        var groupStart = 0;
        // generate geometry
        generateTorso();
        if (openEnded === false) {
            if (radiusTop > 0) generateCap(true);
            if (radiusBottom > 0) generateCap(false);
        }
        // build geometry
        _this.setIndex(indices);
        _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        _this.setAttribute("normal", new $b383cde4e0574ff6$export$cbe7a62641830ebd(normals, 3));
        _this.setAttribute("uv", new $b383cde4e0574ff6$export$cbe7a62641830ebd(uvs, 2));
        return _this;
    }
    (0, $9SLyD.default)(CylinderGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
            }
        }
    ]);
    return CylinderGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
var $b383cde4e0574ff6$export$59d971120dc8b6e7 = /*#__PURE__*/ function(CylinderGeometry) {
    "use strict";
    (0, $gQI4D.default)(ConeGeometry, CylinderGeometry);
    var _super = (0, $a0Xbx.default)(ConeGeometry);
    function ConeGeometry() {
        var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, height = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, radialSegments = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 8, heightSegments = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1, openEnded = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false, thetaStart = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0, thetaLength = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : Math.PI * 2;
        (0, $dnGTK.default)(this, ConeGeometry);
        var _this;
        _this = _super.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
        _this.type = "ConeGeometry";
        _this.parameters = {
            radius: radius,
            height: height,
            radialSegments: radialSegments,
            heightSegments: heightSegments,
            openEnded: openEnded,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        return _this;
    }
    (0, $9SLyD.default)(ConeGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
            }
        }
    ]);
    return ConeGeometry;
}($b383cde4e0574ff6$export$d4345c83207d7c68);
var $b383cde4e0574ff6$export$38789b531813345c = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(PolyhedronGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(PolyhedronGeometry);
    function PolyhedronGeometry() {
        var vertices = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], indices = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], radius = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, detail = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
        (0, $dnGTK.default)(this, PolyhedronGeometry);
        var _this;
        var subdivide = // helper functions
        function subdivide(detail) {
            var a = new $b383cde4e0574ff6$export$64b5c384219d3699();
            var b = new $b383cde4e0574ff6$export$64b5c384219d3699();
            var c = new $b383cde4e0574ff6$export$64b5c384219d3699();
            // iterate over all faces and apply a subdivison with the given detail value
            for(var i = 0; i < indices.length; i += 3){
                // get the vertices of the face
                getVertexByIndex(indices[i + 0], a);
                getVertexByIndex(indices[i + 1], b);
                getVertexByIndex(indices[i + 2], c);
                // perform subdivision
                subdivideFace(a, b, c, detail);
            }
        };
        var subdivideFace = function subdivideFace(a, b, c, detail) {
            var cols = detail + 1;
            // we use this multidimensional array as a data structure for creating the subdivision
            var v = [];
            // construct all of the vertices for this subdivision
            for(var i = 0; i <= cols; i++){
                v[i] = [];
                var aj = a.clone().lerp(c, i / cols);
                var bj = b.clone().lerp(c, i / cols);
                var rows = cols - i;
                for(var j = 0; j <= rows; j++)if (j === 0 && i === cols) v[i][j] = aj;
                else v[i][j] = aj.clone().lerp(bj, j / rows);
            }
            // construct all of the faces
            for(var i1 = 0; i1 < cols; i1++)for(var j1 = 0; j1 < 2 * (cols - i1) - 1; j1++){
                var k = Math.floor(j1 / 2);
                if (j1 % 2 === 0) {
                    pushVertex(v[i1][k + 1]);
                    pushVertex(v[i1 + 1][k]);
                    pushVertex(v[i1][k]);
                } else {
                    pushVertex(v[i1][k + 1]);
                    pushVertex(v[i1 + 1][k + 1]);
                    pushVertex(v[i1 + 1][k]);
                }
            }
        };
        var applyRadius = function applyRadius(radius) {
            var vertex = new $b383cde4e0574ff6$export$64b5c384219d3699();
            // iterate over the entire buffer and apply the radius to each vertex
            for(var i = 0; i < vertexBuffer.length; i += 3){
                vertex.x = vertexBuffer[i + 0];
                vertex.y = vertexBuffer[i + 1];
                vertex.z = vertexBuffer[i + 2];
                vertex.normalize().multiplyScalar(radius);
                vertexBuffer[i + 0] = vertex.x;
                vertexBuffer[i + 1] = vertex.y;
                vertexBuffer[i + 2] = vertex.z;
            }
        };
        var generateUVs = function generateUVs() {
            var vertex = new $b383cde4e0574ff6$export$64b5c384219d3699();
            for(var i = 0; i < vertexBuffer.length; i += 3){
                vertex.x = vertexBuffer[i + 0];
                vertex.y = vertexBuffer[i + 1];
                vertex.z = vertexBuffer[i + 2];
                var u = azimuth(vertex) / 2 / Math.PI + 0.5;
                var v = inclination(vertex) / Math.PI + 0.5;
                uvBuffer.push(u, 1 - v);
            }
            correctUVs();
            correctSeam();
        };
        var correctSeam = function correctSeam() {
            // handle case when face straddles the seam, see #3269
            for(var i = 0; i < uvBuffer.length; i += 6){
                // uv data of a single face
                var x0 = uvBuffer[i + 0];
                var x1 = uvBuffer[i + 2];
                var x2 = uvBuffer[i + 4];
                var max = Math.max(x0, x1, x2);
                var min = Math.min(x0, x1, x2);
                // 0.9 is somewhat arbitrary
                if (max > 0.9 && min < 0.1) {
                    if (x0 < 0.2) uvBuffer[i + 0] += 1;
                    if (x1 < 0.2) uvBuffer[i + 2] += 1;
                    if (x2 < 0.2) uvBuffer[i + 4] += 1;
                }
            }
        };
        var pushVertex = function pushVertex(vertex) {
            vertexBuffer.push(vertex.x, vertex.y, vertex.z);
        };
        var getVertexByIndex = function getVertexByIndex(index, vertex) {
            var stride = index * 3;
            vertex.x = vertices[stride + 0];
            vertex.y = vertices[stride + 1];
            vertex.z = vertices[stride + 2];
        };
        var correctUVs = function correctUVs() {
            var a = new $b383cde4e0574ff6$export$64b5c384219d3699();
            var b = new $b383cde4e0574ff6$export$64b5c384219d3699();
            var c = new $b383cde4e0574ff6$export$64b5c384219d3699();
            var centroid = new $b383cde4e0574ff6$export$64b5c384219d3699();
            var uvA = new $b383cde4e0574ff6$export$c977b3e384af9ae1();
            var uvB = new $b383cde4e0574ff6$export$c977b3e384af9ae1();
            var uvC = new $b383cde4e0574ff6$export$c977b3e384af9ae1();
            for(var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6){
                a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
                b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
                c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);
                uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
                uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
                uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
                centroid.copy(a).add(b).add(c).divideScalar(3);
                var azi = azimuth(centroid);
                correctUV(uvA, j + 0, a, azi);
                correctUV(uvB, j + 2, b, azi);
                correctUV(uvC, j + 4, c, azi);
            }
        };
        var correctUV = function correctUV(uv, stride, vector, azimuth) {
            if (azimuth < 0 && uv.x === 1) uvBuffer[stride] = uv.x - 1;
            if (vector.x === 0 && vector.z === 0) uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;
        };
        var azimuth = // Angle around the Y axis, counter-clockwise when looking from above.
        function azimuth(vector) {
            return Math.atan2(vector.z, -vector.x);
        };
        var inclination = // Angle above the XZ plane.
        function inclination(vector) {
            return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
        };
        _this = _super.call(this);
        _this.type = "PolyhedronGeometry";
        _this.parameters = {
            vertices: vertices,
            indices: indices,
            radius: radius,
            detail: detail
        };
        // default buffer data
        var vertexBuffer = [];
        var uvBuffer = [];
        // the subdivision creates the vertex buffer data
        subdivide(detail);
        // all vertices should lie on a conceptual sphere with a given radius
        applyRadius(radius);
        // finally, create the uv data
        generateUVs();
        // build non-indexed geometry
        _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertexBuffer, 3));
        _this.setAttribute("normal", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertexBuffer.slice(), 3));
        _this.setAttribute("uv", new $b383cde4e0574ff6$export$cbe7a62641830ebd(uvBuffer, 2));
        if (detail === 0) _this.computeVertexNormals(); // flat normals
        else _this.normalizeNormals(); // smooth normals
        return _this;
    }
    (0, $9SLyD.default)(PolyhedronGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);
            }
        }
    ]);
    return PolyhedronGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
var $b383cde4e0574ff6$export$37cd4e52cce48c4c = /*#__PURE__*/ function(PolyhedronGeometry) {
    "use strict";
    (0, $gQI4D.default)(DodecahedronGeometry, PolyhedronGeometry);
    var _super = (0, $a0Xbx.default)(DodecahedronGeometry);
    function DodecahedronGeometry() {
        var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, detail = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        (0, $dnGTK.default)(this, DodecahedronGeometry);
        var _this;
        var t = (1 + Math.sqrt(5)) / 2;
        var r = 1 / t;
        var vertices = [
            // (±1, ±1, ±1)
            -1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            1,
            1,
            1,
            // (0, ±1/φ, ±φ)
            0,
            -r,
            -t,
            0,
            -r,
            t,
            0,
            r,
            -t,
            0,
            r,
            t,
            // (±1/φ, ±φ, 0)
            -r,
            -t,
            0,
            -r,
            t,
            0,
            r,
            -t,
            0,
            r,
            t,
            0,
            // (±φ, 0, ±1/φ)
            -t,
            0,
            -r,
            t,
            0,
            -r,
            -t,
            0,
            r,
            t,
            0,
            r
        ];
        var indices = [
            3,
            11,
            7,
            3,
            7,
            15,
            3,
            15,
            13,
            7,
            19,
            17,
            7,
            17,
            6,
            7,
            6,
            15,
            17,
            4,
            8,
            17,
            8,
            10,
            17,
            10,
            6,
            8,
            0,
            16,
            8,
            16,
            2,
            8,
            2,
            10,
            0,
            12,
            1,
            0,
            1,
            18,
            0,
            18,
            16,
            6,
            10,
            2,
            6,
            2,
            13,
            6,
            13,
            15,
            2,
            16,
            18,
            2,
            18,
            3,
            2,
            3,
            13,
            18,
            1,
            9,
            18,
            9,
            11,
            18,
            11,
            3,
            4,
            14,
            12,
            4,
            12,
            0,
            4,
            0,
            8,
            11,
            9,
            5,
            11,
            5,
            19,
            11,
            19,
            7,
            19,
            5,
            14,
            19,
            14,
            4,
            19,
            4,
            17,
            1,
            12,
            14,
            1,
            14,
            5,
            1,
            5,
            9
        ];
        _this = _super.call(this, vertices, indices, radius, detail);
        _this.type = "DodecahedronGeometry";
        _this.parameters = {
            radius: radius,
            detail: detail
        };
        return _this;
    }
    (0, $9SLyD.default)(DodecahedronGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new DodecahedronGeometry(data.radius, data.detail);
            }
        }
    ]);
    return DodecahedronGeometry;
}($b383cde4e0574ff6$export$38789b531813345c);
var $b383cde4e0574ff6$var$_v0 = new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_v1$1 = new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_normal = new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_triangle = new $b383cde4e0574ff6$export$5a465592bfe74b48();
var $b383cde4e0574ff6$export$4730b1542707547f = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(EdgesGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(EdgesGeometry);
    function EdgesGeometry() {
        var geometry = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, thresholdAngle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        (0, $dnGTK.default)(this, EdgesGeometry);
        var _this;
        _this = _super.call(this);
        _this.type = "EdgesGeometry";
        _this.parameters = {
            geometry: geometry,
            thresholdAngle: thresholdAngle
        };
        if (geometry !== null) {
            var precisionPoints = 4;
            var precision = Math.pow(10, precisionPoints);
            var thresholdDot = Math.cos($b383cde4e0574ff6$var$DEG2RAD * thresholdAngle);
            var indexAttr = geometry.getIndex();
            var positionAttr = geometry.getAttribute("position");
            var indexCount = indexAttr ? indexAttr.count : positionAttr.count;
            var indexArr = [
                0,
                0,
                0
            ];
            var vertKeys = [
                "a",
                "b",
                "c"
            ];
            var hashes = new Array(3);
            var edgeData = {};
            var vertices = [];
            for(var i = 0; i < indexCount; i += 3){
                if (indexAttr) {
                    indexArr[0] = indexAttr.getX(i);
                    indexArr[1] = indexAttr.getX(i + 1);
                    indexArr[2] = indexAttr.getX(i + 2);
                } else {
                    indexArr[0] = i;
                    indexArr[1] = i + 1;
                    indexArr[2] = i + 2;
                }
                var a = $b383cde4e0574ff6$var$_triangle.a, b = $b383cde4e0574ff6$var$_triangle.b, c = $b383cde4e0574ff6$var$_triangle.c;
                a.fromBufferAttribute(positionAttr, indexArr[0]);
                b.fromBufferAttribute(positionAttr, indexArr[1]);
                c.fromBufferAttribute(positionAttr, indexArr[2]);
                $b383cde4e0574ff6$var$_triangle.getNormal($b383cde4e0574ff6$var$_normal);
                // create hashes for the edge from the vertices
                hashes[0] = "".concat(Math.round(a.x * precision), ",").concat(Math.round(a.y * precision), ",").concat(Math.round(a.z * precision));
                hashes[1] = "".concat(Math.round(b.x * precision), ",").concat(Math.round(b.y * precision), ",").concat(Math.round(b.z * precision));
                hashes[2] = "".concat(Math.round(c.x * precision), ",").concat(Math.round(c.y * precision), ",").concat(Math.round(c.z * precision));
                // skip degenerate triangles
                if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) continue;
                // iterate over every edge
                for(var j = 0; j < 3; j++){
                    // get the first and next vertex making up the edge
                    var jNext = (j + 1) % 3;
                    var vecHash0 = hashes[j];
                    var vecHash1 = hashes[jNext];
                    var v0 = $b383cde4e0574ff6$var$_triangle[vertKeys[j]];
                    var v1 = $b383cde4e0574ff6$var$_triangle[vertKeys[jNext]];
                    var hash = "".concat(vecHash0, "_").concat(vecHash1);
                    var reverseHash = "".concat(vecHash1, "_").concat(vecHash0);
                    if (reverseHash in edgeData && edgeData[reverseHash]) {
                        // if we found a sibling edge add it into the vertex array if
                        // it meets the angle threshold and delete the edge from the map.
                        if ($b383cde4e0574ff6$var$_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {
                            vertices.push(v0.x, v0.y, v0.z);
                            vertices.push(v1.x, v1.y, v1.z);
                        }
                        edgeData[reverseHash] = null;
                    } else if (!(hash in edgeData)) // if we've already got an edge here then skip adding a new one
                    edgeData[hash] = {
                        index0: indexArr[j],
                        index1: indexArr[jNext],
                        normal: $b383cde4e0574ff6$var$_normal.clone()
                    };
                }
            }
            // iterate over all remaining, unmatched edges and add them to the vertex array
            for(var key in edgeData)if (edgeData[key]) {
                var _key = edgeData[key], index0 = _key.index0, index1 = _key.index1;
                $b383cde4e0574ff6$var$_v0.fromBufferAttribute(positionAttr, index0);
                $b383cde4e0574ff6$var$_v1$1.fromBufferAttribute(positionAttr, index1);
                vertices.push($b383cde4e0574ff6$var$_v0.x, $b383cde4e0574ff6$var$_v0.y, $b383cde4e0574ff6$var$_v0.z);
                vertices.push($b383cde4e0574ff6$var$_v1$1.x, $b383cde4e0574ff6$var$_v1$1.y, $b383cde4e0574ff6$var$_v1$1.z);
            }
            _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        }
        return _this;
    }
    return EdgesGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/ var $b383cde4e0574ff6$export$b0e83c3ef8d2db1 = /*#__PURE__*/ function() {
    "use strict";
    function Curve() {
        (0, $dnGTK.default)(this, Curve);
        this.type = "Curve";
        this.arcLengthDivisions = 200;
    }
    (0, $9SLyD.default)(Curve, [
        {
            // Virtual base class method to overwrite and implement in subclasses
            //	- t [0 .. 1]
            key: "getPoint",
            value: function getPoint() {
                console.warn("THREE.Curve: .getPoint() not implemented.");
                return null;
            }
        },
        {
            // Get point at relative position in curve according to arc length
            // - u [0 .. 1]
            key: "getPointAt",
            value: function getPointAt(u, optionalTarget) {
                var t = this.getUtoTmapping(u);
                return this.getPoint(t, optionalTarget);
            }
        },
        {
            // Get sequence of points using getPoint( t )
            key: "getPoints",
            value: function getPoints() {
                var divisions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 5;
                var points = [];
                for(var d = 0; d <= divisions; d++)points.push(this.getPoint(d / divisions));
                return points;
            }
        },
        {
            // Get sequence of points using getPointAt( u )
            key: "getSpacedPoints",
            value: function getSpacedPoints() {
                var divisions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 5;
                var points = [];
                for(var d = 0; d <= divisions; d++)points.push(this.getPointAt(d / divisions));
                return points;
            }
        },
        {
            // Get total curve arc length
            key: "getLength",
            value: function getLength() {
                var lengths = this.getLengths();
                return lengths[lengths.length - 1];
            }
        },
        {
            // Get list of cumulative segment lengths
            key: "getLengths",
            value: function getLengths() {
                var divisions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.arcLengthDivisions;
                if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) return this.cacheArcLengths;
                this.needsUpdate = false;
                var cache = [];
                var current, last = this.getPoint(0);
                var sum = 0;
                cache.push(0);
                for(var p = 1; p <= divisions; p++){
                    current = this.getPoint(p / divisions);
                    sum += current.distanceTo(last);
                    cache.push(sum);
                    last = current;
                }
                this.cacheArcLengths = cache;
                return cache; // { sums: cache, sum: sum }; Sum is in the last element.
            }
        },
        {
            key: "updateArcLengths",
            value: function updateArcLengths() {
                this.needsUpdate = true;
                this.getLengths();
            }
        },
        {
            // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
            key: "getUtoTmapping",
            value: function getUtoTmapping(u, distance) {
                var arcLengths = this.getLengths();
                var i = 0;
                var il = arcLengths.length;
                var targetArcLength; // The targeted u distance value to get
                if (distance) targetArcLength = distance;
                else targetArcLength = u * arcLengths[il - 1];
                // binary search for the index with largest value smaller than target u distance
                var low = 0, high = il - 1, comparison;
                while(low <= high){
                    i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
                    comparison = arcLengths[i] - targetArcLength;
                    if (comparison < 0) low = i + 1;
                    else if (comparison > 0) high = i - 1;
                    else {
                        high = i;
                        break;
                    // DONE
                    }
                }
                i = high;
                if (arcLengths[i] === targetArcLength) return i / (il - 1);
                // we could get finer grain at lengths, or use simple interpolation between two points
                var lengthBefore = arcLengths[i];
                var lengthAfter = arcLengths[i + 1];
                var segmentLength = lengthAfter - lengthBefore;
                // determine where we are between the 'before' and 'after' points
                var segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
                // add that fractional amount to t
                var t = (i + segmentFraction) / (il - 1);
                return t;
            }
        },
        {
            // Returns a unit vector tangent at t
            // In case any sub curve does not implement its tangent derivation,
            // 2 points a small delta apart will be used to find its gradient
            // which seems to give a reasonable approximation
            key: "getTangent",
            value: function getTangent(t, optionalTarget) {
                var delta = 0.0001;
                var t1 = t - delta;
                var t2 = t + delta;
                // Capping in case of danger
                if (t1 < 0) t1 = 0;
                if (t2 > 1) t2 = 1;
                var pt1 = this.getPoint(t1);
                var pt2 = this.getPoint(t2);
                var tangent = optionalTarget || (pt1.isVector2 ? new $b383cde4e0574ff6$export$c977b3e384af9ae1() : new $b383cde4e0574ff6$export$64b5c384219d3699());
                tangent.copy(pt2).sub(pt1).normalize();
                return tangent;
            }
        },
        {
            key: "getTangentAt",
            value: function getTangentAt(u, optionalTarget) {
                var t = this.getUtoTmapping(u);
                return this.getTangent(t, optionalTarget);
            }
        },
        {
            key: "computeFrenetFrames",
            value: function computeFrenetFrames(segments, closed) {
                // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
                var normal = new $b383cde4e0574ff6$export$64b5c384219d3699();
                var tangents = [];
                var normals = [];
                var binormals = [];
                var vec = new $b383cde4e0574ff6$export$64b5c384219d3699();
                var mat = new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
                // compute the tangent vectors for each segment on the curve
                for(var i = 0; i <= segments; i++){
                    var u = i / segments;
                    tangents[i] = this.getTangentAt(u, new $b383cde4e0574ff6$export$64b5c384219d3699());
                }
                // select an initial normal vector perpendicular to the first tangent vector,
                // and in the direction of the minimum tangent xyz component
                normals[0] = new $b383cde4e0574ff6$export$64b5c384219d3699();
                binormals[0] = new $b383cde4e0574ff6$export$64b5c384219d3699();
                var min = Number.MAX_VALUE;
                var tx = Math.abs(tangents[0].x);
                var ty = Math.abs(tangents[0].y);
                var tz = Math.abs(tangents[0].z);
                if (tx <= min) {
                    min = tx;
                    normal.set(1, 0, 0);
                }
                if (ty <= min) {
                    min = ty;
                    normal.set(0, 1, 0);
                }
                if (tz <= min) normal.set(0, 0, 1);
                vec.crossVectors(tangents[0], normal).normalize();
                normals[0].crossVectors(tangents[0], vec);
                binormals[0].crossVectors(tangents[0], normals[0]);
                // compute the slowly-varying normal and binormal vectors for each segment on the curve
                for(var i1 = 1; i1 <= segments; i1++){
                    normals[i1] = normals[i1 - 1].clone();
                    binormals[i1] = binormals[i1 - 1].clone();
                    vec.crossVectors(tangents[i1 - 1], tangents[i1]);
                    if (vec.length() > Number.EPSILON) {
                        vec.normalize();
                        var theta = Math.acos($b383cde4e0574ff6$var$clamp(tangents[i1 - 1].dot(tangents[i1]), -1, 1)); // clamp for floating pt errors
                        normals[i1].applyMatrix4(mat.makeRotationAxis(vec, theta));
                    }
                    binormals[i1].crossVectors(tangents[i1], normals[i1]);
                }
                // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
                if (closed === true) {
                    var theta1 = Math.acos($b383cde4e0574ff6$var$clamp(normals[0].dot(normals[segments]), -1, 1));
                    theta1 /= segments;
                    if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) theta1 = -theta1;
                    for(var i2 = 1; i2 <= segments; i2++){
                        // twist a little...
                        normals[i2].applyMatrix4(mat.makeRotationAxis(tangents[i2], theta1 * i2));
                        binormals[i2].crossVectors(tangents[i2], normals[i2]);
                    }
                }
                return {
                    tangents: tangents,
                    normals: normals,
                    binormals: binormals
                };
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                this.arcLengthDivisions = source.arcLengthDivisions;
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = {
                    metadata: {
                        version: 4.5,
                        type: "Curve",
                        generator: "Curve.toJSON"
                    }
                };
                data.arcLengthDivisions = this.arcLengthDivisions;
                data.type = this.type;
                return data;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                this.arcLengthDivisions = json.arcLengthDivisions;
                return this;
            }
        }
    ]);
    return Curve;
}();
var $b383cde4e0574ff6$export$3f87a931616cde04 = /*#__PURE__*/ function(Curve) {
    "use strict";
    (0, $gQI4D.default)(EllipseCurve, Curve);
    var _super = (0, $a0Xbx.default)(EllipseCurve);
    function EllipseCurve() {
        var aX = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, aY = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, xRadius = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, yRadius = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1, aStartAngle = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0, aEndAngle = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : Math.PI * 2, aClockwise = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : false, aRotation = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : 0;
        (0, $dnGTK.default)(this, EllipseCurve);
        var _this;
        _this = _super.call(this);
        _this.type = "EllipseCurve";
        _this.aX = aX;
        _this.aY = aY;
        _this.xRadius = xRadius;
        _this.yRadius = yRadius;
        _this.aStartAngle = aStartAngle;
        _this.aEndAngle = aEndAngle;
        _this.aClockwise = aClockwise;
        _this.aRotation = aRotation;
        return _this;
    }
    (0, $9SLyD.default)(EllipseCurve, [
        {
            key: "getPoint",
            value: function getPoint(t, optionalTarget) {
                var point = optionalTarget || new $b383cde4e0574ff6$export$c977b3e384af9ae1();
                var twoPi = Math.PI * 2;
                var deltaAngle = this.aEndAngle - this.aStartAngle;
                var samePoints = Math.abs(deltaAngle) < Number.EPSILON;
                // ensures that deltaAngle is 0 .. 2 PI
                while(deltaAngle < 0)deltaAngle += twoPi;
                while(deltaAngle > twoPi)deltaAngle -= twoPi;
                if (deltaAngle < Number.EPSILON) {
                    if (samePoints) deltaAngle = 0;
                    else deltaAngle = twoPi;
                }
                if (this.aClockwise === true && !samePoints) {
                    if (deltaAngle === twoPi) deltaAngle = -twoPi;
                    else deltaAngle = deltaAngle - twoPi;
                }
                var angle = this.aStartAngle + t * deltaAngle;
                var x = this.aX + this.xRadius * Math.cos(angle);
                var y = this.aY + this.yRadius * Math.sin(angle);
                if (this.aRotation !== 0) {
                    var cos = Math.cos(this.aRotation);
                    var sin = Math.sin(this.aRotation);
                    var tx = x - this.aX;
                    var ty = y - this.aY;
                    // Rotate the point about the center of the ellipse.
                    x = tx * cos - ty * sin + this.aX;
                    y = tx * sin + ty * cos + this.aY;
                }
                return point.set(x, y);
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(EllipseCurve.prototype), "copy", this).call(this, source);
                this.aX = source.aX;
                this.aY = source.aY;
                this.xRadius = source.xRadius;
                this.yRadius = source.yRadius;
                this.aStartAngle = source.aStartAngle;
                this.aEndAngle = source.aEndAngle;
                this.aClockwise = source.aClockwise;
                this.aRotation = source.aRotation;
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(EllipseCurve.prototype), "toJSON", this).call(this);
                data.aX = this.aX;
                data.aY = this.aY;
                data.xRadius = this.xRadius;
                data.yRadius = this.yRadius;
                data.aStartAngle = this.aStartAngle;
                data.aEndAngle = this.aEndAngle;
                data.aClockwise = this.aClockwise;
                data.aRotation = this.aRotation;
                return data;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                (0, $bWs11.default)((0, $6gb2n.default)(EllipseCurve.prototype), "fromJSON", this).call(this, json);
                this.aX = json.aX;
                this.aY = json.aY;
                this.xRadius = json.xRadius;
                this.yRadius = json.yRadius;
                this.aStartAngle = json.aStartAngle;
                this.aEndAngle = json.aEndAngle;
                this.aClockwise = json.aClockwise;
                this.aRotation = json.aRotation;
                return this;
            }
        }
    ]);
    return EllipseCurve;
}($b383cde4e0574ff6$export$b0e83c3ef8d2db1);
$b383cde4e0574ff6$export$3f87a931616cde04.prototype.isEllipseCurve = true;
var $b383cde4e0574ff6$export$b1eedc9aab6300e8 = /*#__PURE__*/ function(EllipseCurve) {
    "use strict";
    (0, $gQI4D.default)(ArcCurve, EllipseCurve);
    var _super = (0, $a0Xbx.default)(ArcCurve);
    function ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        (0, $dnGTK.default)(this, ArcCurve);
        var _this;
        _this = _super.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
        _this.type = "ArcCurve";
        return _this;
    }
    return ArcCurve;
}($b383cde4e0574ff6$export$3f87a931616cde04);
$b383cde4e0574ff6$export$b1eedc9aab6300e8.prototype.isArcCurve = true;
/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */ /*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/ function $b383cde4e0574ff6$var$CubicPoly() {
    var init = /*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */ function init(x0, x1, t0, t1) {
        c0 = x0;
        c1 = t0;
        c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
        c3 = 2 * x0 - 2 * x1 + t0 + t1;
    };
    var c0 = 0, c1 = 0, c2 = 0, c3 = 0;
    return {
        initCatmullRom: function initCatmullRom(x0, x1, x2, x3, tension) {
            init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
        },
        initNonuniformCatmullRom: function initNonuniformCatmullRom(x0, x1, x2, x3, dt0, dt1, dt2) {
            // compute tangents when parameterized in [t1,t2]
            var t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
            var t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
            // rescale tangents for parametrization in [0,1]
            t1 *= dt1;
            t2 *= dt1;
            init(x1, x2, t1, t2);
        },
        calc: function calc(t) {
            var t2 = t * t;
            var t3 = t2 * t;
            return c0 + c1 * t + c2 * t2 + c3 * t3;
        }
    };
}
//
var $b383cde4e0574ff6$var$tmp = new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$px = new $b383cde4e0574ff6$var$CubicPoly(), $b383cde4e0574ff6$var$py = new $b383cde4e0574ff6$var$CubicPoly(), $b383cde4e0574ff6$var$pz = new $b383cde4e0574ff6$var$CubicPoly();
var $b383cde4e0574ff6$export$b9146b27c24b744c = /*#__PURE__*/ function(Curve) {
    "use strict";
    (0, $gQI4D.default)(CatmullRomCurve3, Curve);
    var _super = (0, $a0Xbx.default)(CatmullRomCurve3);
    function CatmullRomCurve3() {
        var points = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], closed = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, curveType = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "centripetal", tension = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0.5;
        (0, $dnGTK.default)(this, CatmullRomCurve3);
        var _this;
        _this = _super.call(this);
        _this.type = "CatmullRomCurve3";
        _this.points = points;
        _this.closed = closed;
        _this.curveType = curveType;
        _this.tension = tension;
        return _this;
    }
    (0, $9SLyD.default)(CatmullRomCurve3, [
        {
            key: "getPoint",
            value: function getPoint(t) {
                var optionalTarget = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$64b5c384219d3699();
                var point = optionalTarget;
                var points = this.points;
                var l = points.length;
                var p = (l - (this.closed ? 0 : 1)) * t;
                var intPoint = Math.floor(p);
                var weight = p - intPoint;
                if (this.closed) intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
                else if (weight === 0 && intPoint === l - 1) {
                    intPoint = l - 2;
                    weight = 1;
                }
                var p0, p3; // 4 points (p1 & p2 defined below)
                if (this.closed || intPoint > 0) p0 = points[(intPoint - 1) % l];
                else {
                    // extrapolate first point
                    $b383cde4e0574ff6$var$tmp.subVectors(points[0], points[1]).add(points[0]);
                    p0 = $b383cde4e0574ff6$var$tmp;
                }
                var p1 = points[intPoint % l];
                var p2 = points[(intPoint + 1) % l];
                if (this.closed || intPoint + 2 < l) p3 = points[(intPoint + 2) % l];
                else {
                    // extrapolate last point
                    $b383cde4e0574ff6$var$tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
                    p3 = $b383cde4e0574ff6$var$tmp;
                }
                if (this.curveType === "centripetal" || this.curveType === "chordal") {
                    // init Centripetal / Chordal Catmull-Rom
                    var pow = this.curveType === "chordal" ? 0.5 : 0.25;
                    var dt0 = Math.pow(p0.distanceToSquared(p1), pow);
                    var dt1 = Math.pow(p1.distanceToSquared(p2), pow);
                    var dt2 = Math.pow(p2.distanceToSquared(p3), pow);
                    // safety check for repeated points
                    if (dt1 < 1e-4) dt1 = 1.0;
                    if (dt0 < 1e-4) dt0 = dt1;
                    if (dt2 < 1e-4) dt2 = dt1;
                    $b383cde4e0574ff6$var$px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
                    $b383cde4e0574ff6$var$py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
                    $b383cde4e0574ff6$var$pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
                } else if (this.curveType === "catmullrom") {
                    $b383cde4e0574ff6$var$px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
                    $b383cde4e0574ff6$var$py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
                    $b383cde4e0574ff6$var$pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
                }
                point.set($b383cde4e0574ff6$var$px.calc(weight), $b383cde4e0574ff6$var$py.calc(weight), $b383cde4e0574ff6$var$pz.calc(weight));
                return point;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(CatmullRomCurve3.prototype), "copy", this).call(this, source);
                this.points = [];
                for(var i = 0, l = source.points.length; i < l; i++){
                    var point = source.points[i];
                    this.points.push(point.clone());
                }
                this.closed = source.closed;
                this.curveType = source.curveType;
                this.tension = source.tension;
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(CatmullRomCurve3.prototype), "toJSON", this).call(this);
                data.points = [];
                for(var i = 0, l = this.points.length; i < l; i++){
                    var point = this.points[i];
                    data.points.push(point.toArray());
                }
                data.closed = this.closed;
                data.curveType = this.curveType;
                data.tension = this.tension;
                return data;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                (0, $bWs11.default)((0, $6gb2n.default)(CatmullRomCurve3.prototype), "fromJSON", this).call(this, json);
                this.points = [];
                for(var i = 0, l = json.points.length; i < l; i++){
                    var point = json.points[i];
                    this.points.push(new $b383cde4e0574ff6$export$64b5c384219d3699().fromArray(point));
                }
                this.closed = json.closed;
                this.curveType = json.curveType;
                this.tension = json.tension;
                return this;
            }
        }
    ]);
    return CatmullRomCurve3;
}($b383cde4e0574ff6$export$b0e83c3ef8d2db1);
$b383cde4e0574ff6$export$b9146b27c24b744c.prototype.isCatmullRomCurve3 = true;
/**
 * Bezier Curves formulas obtained from
 * http://en.wikipedia.org/wiki/Bézier_curve
 */ function $b383cde4e0574ff6$var$CatmullRom(t, p0, p1, p2, p3) {
    var v0 = (p2 - p0) * 0.5;
    var v1 = (p3 - p1) * 0.5;
    var t2 = t * t;
    var t3 = t * t2;
    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
}
//
function $b383cde4e0574ff6$var$QuadraticBezierP0(t, p) {
    var k = 1 - t;
    return k * k * p;
}
function $b383cde4e0574ff6$var$QuadraticBezierP1(t, p) {
    return 2 * (1 - t) * t * p;
}
function $b383cde4e0574ff6$var$QuadraticBezierP2(t, p) {
    return t * t * p;
}
function $b383cde4e0574ff6$var$QuadraticBezier(t, p0, p1, p2) {
    return $b383cde4e0574ff6$var$QuadraticBezierP0(t, p0) + $b383cde4e0574ff6$var$QuadraticBezierP1(t, p1) + $b383cde4e0574ff6$var$QuadraticBezierP2(t, p2);
}
//
function $b383cde4e0574ff6$var$CubicBezierP0(t, p) {
    var k = 1 - t;
    return k * k * k * p;
}
function $b383cde4e0574ff6$var$CubicBezierP1(t, p) {
    var k = 1 - t;
    return 3 * k * k * t * p;
}
function $b383cde4e0574ff6$var$CubicBezierP2(t, p) {
    return 3 * (1 - t) * t * t * p;
}
function $b383cde4e0574ff6$var$CubicBezierP3(t, p) {
    return t * t * t * p;
}
function $b383cde4e0574ff6$var$CubicBezier(t, p0, p1, p2, p3) {
    return $b383cde4e0574ff6$var$CubicBezierP0(t, p0) + $b383cde4e0574ff6$var$CubicBezierP1(t, p1) + $b383cde4e0574ff6$var$CubicBezierP2(t, p2) + $b383cde4e0574ff6$var$CubicBezierP3(t, p3);
}
var $b383cde4e0574ff6$export$e36650d36468bb39 = /*#__PURE__*/ function(Curve) {
    "use strict";
    (0, $gQI4D.default)(CubicBezierCurve, Curve);
    var _super = (0, $a0Xbx.default)(CubicBezierCurve);
    function CubicBezierCurve() {
        var v0 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$c977b3e384af9ae1(), v1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$c977b3e384af9ae1(), v2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new $b383cde4e0574ff6$export$c977b3e384af9ae1(), v3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : new $b383cde4e0574ff6$export$c977b3e384af9ae1();
        (0, $dnGTK.default)(this, CubicBezierCurve);
        var _this;
        _this = _super.call(this);
        _this.type = "CubicBezierCurve";
        _this.v0 = v0;
        _this.v1 = v1;
        _this.v2 = v2;
        _this.v3 = v3;
        return _this;
    }
    (0, $9SLyD.default)(CubicBezierCurve, [
        {
            key: "getPoint",
            value: function getPoint(t) {
                var optionalTarget = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$c977b3e384af9ae1();
                var point = optionalTarget;
                var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
                point.set($b383cde4e0574ff6$var$CubicBezier(t, v0.x, v1.x, v2.x, v3.x), $b383cde4e0574ff6$var$CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
                return point;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(CubicBezierCurve.prototype), "copy", this).call(this, source);
                this.v0.copy(source.v0);
                this.v1.copy(source.v1);
                this.v2.copy(source.v2);
                this.v3.copy(source.v3);
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(CubicBezierCurve.prototype), "toJSON", this).call(this);
                data.v0 = this.v0.toArray();
                data.v1 = this.v1.toArray();
                data.v2 = this.v2.toArray();
                data.v3 = this.v3.toArray();
                return data;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                (0, $bWs11.default)((0, $6gb2n.default)(CubicBezierCurve.prototype), "fromJSON", this).call(this, json);
                this.v0.fromArray(json.v0);
                this.v1.fromArray(json.v1);
                this.v2.fromArray(json.v2);
                this.v3.fromArray(json.v3);
                return this;
            }
        }
    ]);
    return CubicBezierCurve;
}($b383cde4e0574ff6$export$b0e83c3ef8d2db1);
$b383cde4e0574ff6$export$e36650d36468bb39.prototype.isCubicBezierCurve = true;
var $b383cde4e0574ff6$export$13d5f1c9525f246c = /*#__PURE__*/ function(Curve) {
    "use strict";
    (0, $gQI4D.default)(CubicBezierCurve3, Curve);
    var _super = (0, $a0Xbx.default)(CubicBezierCurve3);
    function CubicBezierCurve3() {
        var v0 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$64b5c384219d3699(), v1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$64b5c384219d3699(), v2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new $b383cde4e0574ff6$export$64b5c384219d3699(), v3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : new $b383cde4e0574ff6$export$64b5c384219d3699();
        (0, $dnGTK.default)(this, CubicBezierCurve3);
        var _this;
        _this = _super.call(this);
        _this.type = "CubicBezierCurve3";
        _this.v0 = v0;
        _this.v1 = v1;
        _this.v2 = v2;
        _this.v3 = v3;
        return _this;
    }
    (0, $9SLyD.default)(CubicBezierCurve3, [
        {
            key: "getPoint",
            value: function getPoint(t) {
                var optionalTarget = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$64b5c384219d3699();
                var point = optionalTarget;
                var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
                point.set($b383cde4e0574ff6$var$CubicBezier(t, v0.x, v1.x, v2.x, v3.x), $b383cde4e0574ff6$var$CubicBezier(t, v0.y, v1.y, v2.y, v3.y), $b383cde4e0574ff6$var$CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
                return point;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(CubicBezierCurve3.prototype), "copy", this).call(this, source);
                this.v0.copy(source.v0);
                this.v1.copy(source.v1);
                this.v2.copy(source.v2);
                this.v3.copy(source.v3);
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(CubicBezierCurve3.prototype), "toJSON", this).call(this);
                data.v0 = this.v0.toArray();
                data.v1 = this.v1.toArray();
                data.v2 = this.v2.toArray();
                data.v3 = this.v3.toArray();
                return data;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                (0, $bWs11.default)((0, $6gb2n.default)(CubicBezierCurve3.prototype), "fromJSON", this).call(this, json);
                this.v0.fromArray(json.v0);
                this.v1.fromArray(json.v1);
                this.v2.fromArray(json.v2);
                this.v3.fromArray(json.v3);
                return this;
            }
        }
    ]);
    return CubicBezierCurve3;
}($b383cde4e0574ff6$export$b0e83c3ef8d2db1);
$b383cde4e0574ff6$export$13d5f1c9525f246c.prototype.isCubicBezierCurve3 = true;
var $b383cde4e0574ff6$export$ab2e07e76531a47e = /*#__PURE__*/ function(Curve) {
    "use strict";
    (0, $gQI4D.default)(LineCurve, Curve);
    var _super = (0, $a0Xbx.default)(LineCurve);
    function LineCurve() {
        var v1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$c977b3e384af9ae1(), v2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$c977b3e384af9ae1();
        (0, $dnGTK.default)(this, LineCurve);
        var _this;
        _this = _super.call(this);
        _this.type = "LineCurve";
        _this.v1 = v1;
        _this.v2 = v2;
        return _this;
    }
    (0, $9SLyD.default)(LineCurve, [
        {
            key: "getPoint",
            value: function getPoint(t) {
                var optionalTarget = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$c977b3e384af9ae1();
                var point = optionalTarget;
                if (t === 1) point.copy(this.v2);
                else {
                    point.copy(this.v2).sub(this.v1);
                    point.multiplyScalar(t).add(this.v1);
                }
                return point;
            }
        },
        {
            // Line curve is linear, so we can overwrite default getPointAt
            key: "getPointAt",
            value: function getPointAt(u, optionalTarget) {
                return this.getPoint(u, optionalTarget);
            }
        },
        {
            key: "getTangent",
            value: function getTangent(t, optionalTarget) {
                var tangent = optionalTarget || new $b383cde4e0574ff6$export$c977b3e384af9ae1();
                tangent.copy(this.v2).sub(this.v1).normalize();
                return tangent;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(LineCurve.prototype), "copy", this).call(this, source);
                this.v1.copy(source.v1);
                this.v2.copy(source.v2);
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(LineCurve.prototype), "toJSON", this).call(this);
                data.v1 = this.v1.toArray();
                data.v2 = this.v2.toArray();
                return data;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                (0, $bWs11.default)((0, $6gb2n.default)(LineCurve.prototype), "fromJSON", this).call(this, json);
                this.v1.fromArray(json.v1);
                this.v2.fromArray(json.v2);
                return this;
            }
        }
    ]);
    return LineCurve;
}($b383cde4e0574ff6$export$b0e83c3ef8d2db1);
$b383cde4e0574ff6$export$ab2e07e76531a47e.prototype.isLineCurve = true;
var $b383cde4e0574ff6$export$1fdfd9d9cf487600 = /*#__PURE__*/ function(Curve) {
    "use strict";
    (0, $gQI4D.default)(LineCurve3, Curve);
    var _super = (0, $a0Xbx.default)(LineCurve3);
    function LineCurve3() {
        var v1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$64b5c384219d3699(), v2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$64b5c384219d3699();
        (0, $dnGTK.default)(this, LineCurve3);
        var _this;
        _this = _super.call(this);
        _this.type = "LineCurve3";
        _this.isLineCurve3 = true;
        _this.v1 = v1;
        _this.v2 = v2;
        return _this;
    }
    (0, $9SLyD.default)(LineCurve3, [
        {
            key: "getPoint",
            value: function getPoint(t) {
                var optionalTarget = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$64b5c384219d3699();
                var point = optionalTarget;
                if (t === 1) point.copy(this.v2);
                else {
                    point.copy(this.v2).sub(this.v1);
                    point.multiplyScalar(t).add(this.v1);
                }
                return point;
            }
        },
        {
            // Line curve is linear, so we can overwrite default getPointAt
            key: "getPointAt",
            value: function getPointAt(u, optionalTarget) {
                return this.getPoint(u, optionalTarget);
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(LineCurve3.prototype), "copy", this).call(this, source);
                this.v1.copy(source.v1);
                this.v2.copy(source.v2);
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(LineCurve3.prototype), "toJSON", this).call(this);
                data.v1 = this.v1.toArray();
                data.v2 = this.v2.toArray();
                return data;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                (0, $bWs11.default)((0, $6gb2n.default)(LineCurve3.prototype), "fromJSON", this).call(this, json);
                this.v1.fromArray(json.v1);
                this.v2.fromArray(json.v2);
                return this;
            }
        }
    ]);
    return LineCurve3;
}($b383cde4e0574ff6$export$b0e83c3ef8d2db1);
var $b383cde4e0574ff6$export$5938c4ee491a43ad = /*#__PURE__*/ function(Curve) {
    "use strict";
    (0, $gQI4D.default)(QuadraticBezierCurve, Curve);
    var _super = (0, $a0Xbx.default)(QuadraticBezierCurve);
    function QuadraticBezierCurve() {
        var v0 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$c977b3e384af9ae1(), v1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$c977b3e384af9ae1(), v2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new $b383cde4e0574ff6$export$c977b3e384af9ae1();
        (0, $dnGTK.default)(this, QuadraticBezierCurve);
        var _this;
        _this = _super.call(this);
        _this.type = "QuadraticBezierCurve";
        _this.v0 = v0;
        _this.v1 = v1;
        _this.v2 = v2;
        return _this;
    }
    (0, $9SLyD.default)(QuadraticBezierCurve, [
        {
            key: "getPoint",
            value: function getPoint(t) {
                var optionalTarget = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$c977b3e384af9ae1();
                var point = optionalTarget;
                var v0 = this.v0, v1 = this.v1, v2 = this.v2;
                point.set($b383cde4e0574ff6$var$QuadraticBezier(t, v0.x, v1.x, v2.x), $b383cde4e0574ff6$var$QuadraticBezier(t, v0.y, v1.y, v2.y));
                return point;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(QuadraticBezierCurve.prototype), "copy", this).call(this, source);
                this.v0.copy(source.v0);
                this.v1.copy(source.v1);
                this.v2.copy(source.v2);
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(QuadraticBezierCurve.prototype), "toJSON", this).call(this);
                data.v0 = this.v0.toArray();
                data.v1 = this.v1.toArray();
                data.v2 = this.v2.toArray();
                return data;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                (0, $bWs11.default)((0, $6gb2n.default)(QuadraticBezierCurve.prototype), "fromJSON", this).call(this, json);
                this.v0.fromArray(json.v0);
                this.v1.fromArray(json.v1);
                this.v2.fromArray(json.v2);
                return this;
            }
        }
    ]);
    return QuadraticBezierCurve;
}($b383cde4e0574ff6$export$b0e83c3ef8d2db1);
$b383cde4e0574ff6$export$5938c4ee491a43ad.prototype.isQuadraticBezierCurve = true;
var $b383cde4e0574ff6$export$bf3f4c7e459f90fc = /*#__PURE__*/ function(Curve) {
    "use strict";
    (0, $gQI4D.default)(QuadraticBezierCurve3, Curve);
    var _super = (0, $a0Xbx.default)(QuadraticBezierCurve3);
    function QuadraticBezierCurve3() {
        var v0 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$64b5c384219d3699(), v1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$64b5c384219d3699(), v2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new $b383cde4e0574ff6$export$64b5c384219d3699();
        (0, $dnGTK.default)(this, QuadraticBezierCurve3);
        var _this;
        _this = _super.call(this);
        _this.type = "QuadraticBezierCurve3";
        _this.v0 = v0;
        _this.v1 = v1;
        _this.v2 = v2;
        return _this;
    }
    (0, $9SLyD.default)(QuadraticBezierCurve3, [
        {
            key: "getPoint",
            value: function getPoint(t) {
                var optionalTarget = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$64b5c384219d3699();
                var point = optionalTarget;
                var v0 = this.v0, v1 = this.v1, v2 = this.v2;
                point.set($b383cde4e0574ff6$var$QuadraticBezier(t, v0.x, v1.x, v2.x), $b383cde4e0574ff6$var$QuadraticBezier(t, v0.y, v1.y, v2.y), $b383cde4e0574ff6$var$QuadraticBezier(t, v0.z, v1.z, v2.z));
                return point;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(QuadraticBezierCurve3.prototype), "copy", this).call(this, source);
                this.v0.copy(source.v0);
                this.v1.copy(source.v1);
                this.v2.copy(source.v2);
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(QuadraticBezierCurve3.prototype), "toJSON", this).call(this);
                data.v0 = this.v0.toArray();
                data.v1 = this.v1.toArray();
                data.v2 = this.v2.toArray();
                return data;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                (0, $bWs11.default)((0, $6gb2n.default)(QuadraticBezierCurve3.prototype), "fromJSON", this).call(this, json);
                this.v0.fromArray(json.v0);
                this.v1.fromArray(json.v1);
                this.v2.fromArray(json.v2);
                return this;
            }
        }
    ]);
    return QuadraticBezierCurve3;
}($b383cde4e0574ff6$export$b0e83c3ef8d2db1);
$b383cde4e0574ff6$export$bf3f4c7e459f90fc.prototype.isQuadraticBezierCurve3 = true;
var $b383cde4e0574ff6$export$d3bdd77da77afc1b = /*#__PURE__*/ function(Curve) {
    "use strict";
    (0, $gQI4D.default)(SplineCurve, Curve);
    var _super = (0, $a0Xbx.default)(SplineCurve);
    function SplineCurve() {
        var points = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        (0, $dnGTK.default)(this, SplineCurve);
        var _this;
        _this = _super.call(this);
        _this.type = "SplineCurve";
        _this.points = points;
        return _this;
    }
    (0, $9SLyD.default)(SplineCurve, [
        {
            key: "getPoint",
            value: function getPoint(t) {
                var optionalTarget = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$c977b3e384af9ae1();
                var point = optionalTarget;
                var points = this.points;
                var p = (points.length - 1) * t;
                var intPoint = Math.floor(p);
                var weight = p - intPoint;
                var p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
                var p1 = points[intPoint];
                var p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
                var p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
                point.set($b383cde4e0574ff6$var$CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), $b383cde4e0574ff6$var$CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
                return point;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(SplineCurve.prototype), "copy", this).call(this, source);
                this.points = [];
                for(var i = 0, l = source.points.length; i < l; i++){
                    var point = source.points[i];
                    this.points.push(point.clone());
                }
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(SplineCurve.prototype), "toJSON", this).call(this);
                data.points = [];
                for(var i = 0, l = this.points.length; i < l; i++){
                    var point = this.points[i];
                    data.points.push(point.toArray());
                }
                return data;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                (0, $bWs11.default)((0, $6gb2n.default)(SplineCurve.prototype), "fromJSON", this).call(this, json);
                this.points = [];
                for(var i = 0, l = json.points.length; i < l; i++){
                    var point = json.points[i];
                    this.points.push(new $b383cde4e0574ff6$export$c977b3e384af9ae1().fromArray(point));
                }
                return this;
            }
        }
    ]);
    return SplineCurve;
}($b383cde4e0574ff6$export$b0e83c3ef8d2db1);
$b383cde4e0574ff6$export$d3bdd77da77afc1b.prototype.isSplineCurve = true;
var $b383cde4e0574ff6$var$Curves = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ArcCurve: $b383cde4e0574ff6$export$b1eedc9aab6300e8,
    CatmullRomCurve3: $b383cde4e0574ff6$export$b9146b27c24b744c,
    CubicBezierCurve: $b383cde4e0574ff6$export$e36650d36468bb39,
    CubicBezierCurve3: $b383cde4e0574ff6$export$13d5f1c9525f246c,
    EllipseCurve: $b383cde4e0574ff6$export$3f87a931616cde04,
    LineCurve: $b383cde4e0574ff6$export$ab2e07e76531a47e,
    LineCurve3: $b383cde4e0574ff6$export$1fdfd9d9cf487600,
    QuadraticBezierCurve: $b383cde4e0574ff6$export$5938c4ee491a43ad,
    QuadraticBezierCurve3: $b383cde4e0574ff6$export$bf3f4c7e459f90fc,
    SplineCurve: $b383cde4e0574ff6$export$d3bdd77da77afc1b
});
/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/ var $b383cde4e0574ff6$export$4aaf9b66af1bbf2c = /*#__PURE__*/ function(Curve) {
    "use strict";
    (0, $gQI4D.default)(CurvePath, Curve);
    var _super = (0, $a0Xbx.default)(CurvePath);
    function CurvePath() {
        (0, $dnGTK.default)(this, CurvePath);
        var _this;
        _this = _super.call(this);
        _this.type = "CurvePath";
        _this.curves = [];
        _this.autoClose = false; // Automatically closes the path
        return _this;
    }
    (0, $9SLyD.default)(CurvePath, [
        {
            key: "add",
            value: function add(curve) {
                this.curves.push(curve);
            }
        },
        {
            key: "closePath",
            value: function closePath() {
                // Add a line curve if start and end of lines are not connected
                var startPoint = this.curves[0].getPoint(0);
                var endPoint = this.curves[this.curves.length - 1].getPoint(1);
                if (!startPoint.equals(endPoint)) this.curves.push(new $b383cde4e0574ff6$export$ab2e07e76531a47e(endPoint, startPoint));
            }
        },
        {
            // To get accurate point with reference to
            // entire path distance at time t,
            // following has to be done:
            // 1. Length of each sub path have to be known
            // 2. Locate and identify type of curve
            // 3. Get t for the curve
            // 4. Return curve.getPointAt(t')
            key: "getPoint",
            value: function getPoint(t, optionalTarget) {
                var d = t * this.getLength();
                var curveLengths = this.getCurveLengths();
                var i = 0;
                // To think about boundaries points.
                while(i < curveLengths.length){
                    if (curveLengths[i] >= d) {
                        var diff = curveLengths[i] - d;
                        var curve = this.curves[i];
                        var segmentLength = curve.getLength();
                        var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
                        return curve.getPointAt(u, optionalTarget);
                    }
                    i++;
                }
                return null;
            // loop where sum != 0, sum > d , sum+1 <d
            }
        },
        {
            // We cannot use the default THREE.Curve getPoint() with getLength() because in
            // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
            // getPoint() depends on getLength
            key: "getLength",
            value: function getLength() {
                var lens = this.getCurveLengths();
                return lens[lens.length - 1];
            }
        },
        {
            // cacheLengths must be recalculated.
            key: "updateArcLengths",
            value: function updateArcLengths() {
                this.needsUpdate = true;
                this.cacheLengths = null;
                this.getCurveLengths();
            }
        },
        {
            // Compute lengths and cache them
            // We cannot overwrite getLengths() because UtoT mapping uses it.
            key: "getCurveLengths",
            value: function getCurveLengths() {
                // We use cache values if curves and cache array are same length
                if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
                // Get length of sub-curve
                // Push sums into cached array
                var lengths = [];
                var sums = 0;
                for(var i = 0, l = this.curves.length; i < l; i++){
                    sums += this.curves[i].getLength();
                    lengths.push(sums);
                }
                this.cacheLengths = lengths;
                return lengths;
            }
        },
        {
            key: "getSpacedPoints",
            value: function getSpacedPoints() {
                var divisions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 40;
                var points = [];
                for(var i = 0; i <= divisions; i++)points.push(this.getPoint(i / divisions));
                if (this.autoClose) points.push(points[0]);
                return points;
            }
        },
        {
            key: "getPoints",
            value: function getPoints() {
                var divisions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 12;
                var points = [];
                var last;
                for(var i = 0, curves = this.curves; i < curves.length; i++){
                    var curve = curves[i];
                    var resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;
                    var pts = curve.getPoints(resolution);
                    for(var j = 0; j < pts.length; j++){
                        var point = pts[j];
                        if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates
                        points.push(point);
                        last = point;
                    }
                }
                if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) points.push(points[0]);
                return points;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(CurvePath.prototype), "copy", this).call(this, source);
                this.curves = [];
                for(var i = 0, l = source.curves.length; i < l; i++){
                    var curve = source.curves[i];
                    this.curves.push(curve.clone());
                }
                this.autoClose = source.autoClose;
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(CurvePath.prototype), "toJSON", this).call(this);
                data.autoClose = this.autoClose;
                data.curves = [];
                for(var i = 0, l = this.curves.length; i < l; i++){
                    var curve = this.curves[i];
                    data.curves.push(curve.toJSON());
                }
                return data;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                (0, $bWs11.default)((0, $6gb2n.default)(CurvePath.prototype), "fromJSON", this).call(this, json);
                this.autoClose = json.autoClose;
                this.curves = [];
                for(var i = 0, l = json.curves.length; i < l; i++){
                    var curve = json.curves[i];
                    this.curves.push(new $b383cde4e0574ff6$var$Curves[curve.type]().fromJSON(curve));
                }
                return this;
            }
        }
    ]);
    return CurvePath;
}($b383cde4e0574ff6$export$b0e83c3ef8d2db1);
var $b383cde4e0574ff6$export$4b2950bdac9b6ee9 = /*#__PURE__*/ function(CurvePath) {
    "use strict";
    (0, $gQI4D.default)(Path, CurvePath);
    var _super = (0, $a0Xbx.default)(Path);
    function Path(points) {
        (0, $dnGTK.default)(this, Path);
        var _this;
        _this = _super.call(this);
        _this.type = "Path";
        _this.currentPoint = new $b383cde4e0574ff6$export$c977b3e384af9ae1();
        if (points) _this.setFromPoints(points);
        return _this;
    }
    (0, $9SLyD.default)(Path, [
        {
            key: "setFromPoints",
            value: function setFromPoints(points) {
                this.moveTo(points[0].x, points[0].y);
                for(var i = 1, l = points.length; i < l; i++)this.lineTo(points[i].x, points[i].y);
                return this;
            }
        },
        {
            key: "moveTo",
            value: function moveTo(x, y) {
                this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?
                return this;
            }
        },
        {
            key: "lineTo",
            value: function lineTo(x, y) {
                var curve = new $b383cde4e0574ff6$export$ab2e07e76531a47e(this.currentPoint.clone(), new $b383cde4e0574ff6$export$c977b3e384af9ae1(x, y));
                this.curves.push(curve);
                this.currentPoint.set(x, y);
                return this;
            }
        },
        {
            key: "quadraticCurveTo",
            value: function quadraticCurveTo(aCPx, aCPy, aX, aY) {
                var curve = new $b383cde4e0574ff6$export$5938c4ee491a43ad(this.currentPoint.clone(), new $b383cde4e0574ff6$export$c977b3e384af9ae1(aCPx, aCPy), new $b383cde4e0574ff6$export$c977b3e384af9ae1(aX, aY));
                this.curves.push(curve);
                this.currentPoint.set(aX, aY);
                return this;
            }
        },
        {
            key: "bezierCurveTo",
            value: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
                var curve = new $b383cde4e0574ff6$export$e36650d36468bb39(this.currentPoint.clone(), new $b383cde4e0574ff6$export$c977b3e384af9ae1(aCP1x, aCP1y), new $b383cde4e0574ff6$export$c977b3e384af9ae1(aCP2x, aCP2y), new $b383cde4e0574ff6$export$c977b3e384af9ae1(aX, aY));
                this.curves.push(curve);
                this.currentPoint.set(aX, aY);
                return this;
            }
        },
        {
            key: "splineThru",
            value: function splineThru(pts /*Array of Vector*/ ) {
                var npts = [
                    this.currentPoint.clone()
                ].concat(pts);
                var curve = new $b383cde4e0574ff6$export$d3bdd77da77afc1b(npts);
                this.curves.push(curve);
                this.currentPoint.copy(pts[pts.length - 1]);
                return this;
            }
        },
        {
            key: "arc",
            value: function arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
                var x0 = this.currentPoint.x;
                var y0 = this.currentPoint.y;
                this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
                return this;
            }
        },
        {
            key: "absarc",
            value: function absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
                this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
                return this;
            }
        },
        {
            key: "ellipse",
            value: function ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
                var x0 = this.currentPoint.x;
                var y0 = this.currentPoint.y;
                this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
                return this;
            }
        },
        {
            key: "absellipse",
            value: function absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
                var curve = new $b383cde4e0574ff6$export$3f87a931616cde04(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
                if (this.curves.length > 0) {
                    // if a previous curve is present, attempt to join
                    var firstPoint = curve.getPoint(0);
                    if (!firstPoint.equals(this.currentPoint)) this.lineTo(firstPoint.x, firstPoint.y);
                }
                this.curves.push(curve);
                var lastPoint = curve.getPoint(1);
                this.currentPoint.copy(lastPoint);
                return this;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(Path.prototype), "copy", this).call(this, source);
                this.currentPoint.copy(source.currentPoint);
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(Path.prototype), "toJSON", this).call(this);
                data.currentPoint = this.currentPoint.toArray();
                return data;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                (0, $bWs11.default)((0, $6gb2n.default)(Path.prototype), "fromJSON", this).call(this, json);
                this.currentPoint.fromArray(json.currentPoint);
                return this;
            }
        }
    ]);
    return Path;
}($b383cde4e0574ff6$export$4aaf9b66af1bbf2c);
var $b383cde4e0574ff6$export$6428a7f2611ef1fa = /*#__PURE__*/ function(Path1) {
    "use strict";
    (0, $gQI4D.default)(Shape, Path1);
    var _super = (0, $a0Xbx.default)(Shape);
    function Shape(points) {
        (0, $dnGTK.default)(this, Shape);
        var _this;
        _this = _super.call(this, points);
        _this.uuid = $b383cde4e0574ff6$var$generateUUID();
        _this.type = "Shape";
        _this.holes = [];
        return _this;
    }
    (0, $9SLyD.default)(Shape, [
        {
            key: "getPointsHoles",
            value: function getPointsHoles(divisions) {
                var holesPts = [];
                for(var i = 0, l = this.holes.length; i < l; i++)holesPts[i] = this.holes[i].getPoints(divisions);
                return holesPts;
            }
        },
        {
            // get points of shape and holes (keypoints based on segments parameter)
            key: "extractPoints",
            value: function extractPoints(divisions) {
                return {
                    shape: this.getPoints(divisions),
                    holes: this.getPointsHoles(divisions)
                };
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(Shape.prototype), "copy", this).call(this, source);
                this.holes = [];
                for(var i = 0, l = source.holes.length; i < l; i++){
                    var hole = source.holes[i];
                    this.holes.push(hole.clone());
                }
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(Shape.prototype), "toJSON", this).call(this);
                data.uuid = this.uuid;
                data.holes = [];
                for(var i = 0, l = this.holes.length; i < l; i++){
                    var hole = this.holes[i];
                    data.holes.push(hole.toJSON());
                }
                return data;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                (0, $bWs11.default)((0, $6gb2n.default)(Shape.prototype), "fromJSON", this).call(this, json);
                this.uuid = json.uuid;
                this.holes = [];
                for(var i = 0, l = json.holes.length; i < l; i++){
                    var hole = json.holes[i];
                    this.holes.push(new $b383cde4e0574ff6$export$4b2950bdac9b6ee9().fromJSON(hole));
                }
                return this;
            }
        }
    ]);
    return Shape;
}($b383cde4e0574ff6$export$4b2950bdac9b6ee9);
/**
 * Port from https://github.com/mapbox/earcut (v2.2.2)
 */ var $b383cde4e0574ff6$var$Earcut = {
    triangulate: function triangulate(data, holeIndices) {
        var dim = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2;
        var hasHoles = holeIndices && holeIndices.length;
        var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
        var outerNode = $b383cde4e0574ff6$var$linkedList(data, 0, outerLen, dim, true);
        var triangles = [];
        if (!outerNode || outerNode.next === outerNode.prev) return triangles;
        var minX, minY, maxX, maxY, x, y, invSize;
        if (hasHoles) outerNode = $b383cde4e0574ff6$var$eliminateHoles(data, holeIndices, outerNode, dim);
        // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
        if (data.length > 80 * dim) {
            minX = maxX = data[0];
            minY = maxY = data[1];
            for(var i = dim; i < outerLen; i += dim){
                x = data[i];
                y = data[i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
            }
            // minX, minY and invSize are later used to transform coords into integers for z-order calculation
            invSize = Math.max(maxX - minX, maxY - minY);
            invSize = invSize !== 0 ? 1 / invSize : 0;
        }
        $b383cde4e0574ff6$var$earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
        return triangles;
    }
};
// create a circular doubly linked list from polygon points in the specified winding order
function $b383cde4e0574ff6$var$linkedList(data, start, end, dim, clockwise) {
    var i, last;
    if (clockwise === $b383cde4e0574ff6$var$signedArea(data, start, end, dim) > 0) for(i = start; i < end; i += dim)last = $b383cde4e0574ff6$var$insertNode(i, data[i], data[i + 1], last);
    else for(i = end - dim; i >= start; i -= dim)last = $b383cde4e0574ff6$var$insertNode(i, data[i], data[i + 1], last);
    if (last && $b383cde4e0574ff6$var$equals(last, last.next)) {
        $b383cde4e0574ff6$var$removeNode(last);
        last = last.next;
    }
    return last;
}
// eliminate colinear or duplicate points
function $b383cde4e0574ff6$var$filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;
    var p = start, again;
    do {
        again = false;
        if (!p.steiner && ($b383cde4e0574ff6$var$equals(p, p.next) || $b383cde4e0574ff6$var$area(p.prev, p, p.next) === 0)) {
            $b383cde4e0574ff6$var$removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;
        } else p = p.next;
    }while (again || p !== end);
    return end;
}
// main ear slicing loop which triangulates a polygon (given as a linked list)
function $b383cde4e0574ff6$var$earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;
    // interlink polygon nodes in z-order
    if (!pass && invSize) $b383cde4e0574ff6$var$indexCurve(ear, minX, minY, invSize);
    var stop = ear, prev, next;
    // iterate through ears, slicing them one by one
    while(ear.prev !== ear.next){
        prev = ear.prev;
        next = ear.next;
        if (invSize ? $b383cde4e0574ff6$var$isEarHashed(ear, minX, minY, invSize) : $b383cde4e0574ff6$var$isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);
            $b383cde4e0574ff6$var$removeNode(ear);
            // skipping the next vertex leads to less sliver triangles
            ear = next.next;
            stop = next.next;
            continue;
        }
        ear = next;
        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) $b383cde4e0574ff6$var$earcutLinked($b383cde4e0574ff6$var$filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
            else if (pass === 1) {
                ear = $b383cde4e0574ff6$var$cureLocalIntersections($b383cde4e0574ff6$var$filterPoints(ear), triangles, dim);
                $b383cde4e0574ff6$var$earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) $b383cde4e0574ff6$var$splitEarcut(ear, triangles, dim, minX, minY, invSize);
            break;
        }
    }
}
// check whether a polygon node forms a valid ear with adjacent nodes
function $b383cde4e0574ff6$var$isEar(ear) {
    var a = ear.prev, b = ear, c = ear.next;
    if ($b383cde4e0574ff6$var$area(a, b, c) >= 0) return false; // reflex, can't be an ear
    // now make sure we don't have other points inside the potential ear
    var p = ear.next.next;
    while(p !== ear.prev){
        if ($b383cde4e0574ff6$var$pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && $b383cde4e0574ff6$var$area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }
    return true;
}
function $b383cde4e0574ff6$var$isEarHashed(ear, minX, minY, invSize) {
    var a = ear.prev, b = ear, c = ear.next;
    if ($b383cde4e0574ff6$var$area(a, b, c) >= 0) return false; // reflex, can't be an ear
    // triangle bbox; min & max are calculated like this for speed
    var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x, minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y, maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x, maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
    // z-order range for the current triangle bbox;
    var minZ = $b383cde4e0574ff6$var$zOrder(minTX, minTY, minX, minY, invSize), maxZ = $b383cde4e0574ff6$var$zOrder(maxTX, maxTY, minX, minY, invSize);
    var p = ear.prevZ, n = ear.nextZ;
    // look for points inside the triangle in both directions
    while(p && p.z >= minZ && n && n.z <= maxZ){
        if (p !== ear.prev && p !== ear.next && $b383cde4e0574ff6$var$pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && $b383cde4e0574ff6$var$area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
        if (n !== ear.prev && n !== ear.next && $b383cde4e0574ff6$var$pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && $b383cde4e0574ff6$var$area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    // look for remaining points in decreasing z-order
    while(p && p.z >= minZ){
        if (p !== ear.prev && p !== ear.next && $b383cde4e0574ff6$var$pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && $b383cde4e0574ff6$var$area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }
    // look for remaining points in increasing z-order
    while(n && n.z <= maxZ){
        if (n !== ear.prev && n !== ear.next && $b383cde4e0574ff6$var$pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && $b383cde4e0574ff6$var$area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    return true;
}
// go through all polygon nodes and cure small local self-intersections
function $b383cde4e0574ff6$var$cureLocalIntersections(start, triangles, dim) {
    var p = start;
    do {
        var a = p.prev, b = p.next.next;
        if (!$b383cde4e0574ff6$var$equals(a, b) && $b383cde4e0574ff6$var$intersects(a, p, p.next, b) && $b383cde4e0574ff6$var$locallyInside(a, b) && $b383cde4e0574ff6$var$locallyInside(b, a)) {
            triangles.push(a.i / dim);
            triangles.push(p.i / dim);
            triangles.push(b.i / dim);
            // remove two nodes involved
            $b383cde4e0574ff6$var$removeNode(p);
            $b383cde4e0574ff6$var$removeNode(p.next);
            p = start = b;
        }
        p = p.next;
    }while (p !== start);
    return $b383cde4e0574ff6$var$filterPoints(p);
}
// try splitting polygon into two and triangulate them independently
function $b383cde4e0574ff6$var$splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;
    do {
        var b = a.next.next;
        while(b !== a.prev){
            if (a.i !== b.i && $b383cde4e0574ff6$var$isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                var c = $b383cde4e0574ff6$var$splitPolygon(a, b);
                // filter colinear points around the cuts
                a = $b383cde4e0574ff6$var$filterPoints(a, a.next);
                c = $b383cde4e0574ff6$var$filterPoints(c, c.next);
                // run earcut on each half
                $b383cde4e0574ff6$var$earcutLinked(a, triangles, dim, minX, minY, invSize);
                $b383cde4e0574ff6$var$earcutLinked(c, triangles, dim, minX, minY, invSize);
                return;
            }
            b = b.next;
        }
        a = a.next;
    }while (a !== start);
}
// link every hole into the outer loop, producing a single-ring polygon without holes
function $b383cde4e0574ff6$var$eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [];
    var i, len, start, end, list;
    for(i = 0, len = holeIndices.length; i < len; i++){
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = $b383cde4e0574ff6$var$linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push($b383cde4e0574ff6$var$getLeftmost(list));
    }
    queue.sort($b383cde4e0574ff6$var$compareX);
    // process holes from left to right
    for(i = 0; i < queue.length; i++){
        $b383cde4e0574ff6$var$eliminateHole(queue[i], outerNode);
        outerNode = $b383cde4e0574ff6$var$filterPoints(outerNode, outerNode.next);
    }
    return outerNode;
}
function $b383cde4e0574ff6$var$compareX(a, b) {
    return a.x - b.x;
}
// find a bridge between vertices that connects hole with an outer ring and and link it
function $b383cde4e0574ff6$var$eliminateHole(hole, outerNode) {
    outerNode = $b383cde4e0574ff6$var$findHoleBridge(hole, outerNode);
    if (outerNode) {
        var b = $b383cde4e0574ff6$var$splitPolygon(outerNode, hole);
        // filter collinear points around the cuts
        $b383cde4e0574ff6$var$filterPoints(outerNode, outerNode.next);
        $b383cde4e0574ff6$var$filterPoints(b, b.next);
    }
}
// David Eberly's algorithm for finding a bridge between hole and outer polygon
function $b383cde4e0574ff6$var$findHoleBridge(hole, outerNode) {
    var p = outerNode;
    var hx = hole.x;
    var hy = hole.y;
    var qx = -Infinity, m;
    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                if (x === hx) {
                    if (hy === p.y) return p;
                    if (hy === p.next.y) return p.next;
                }
                m = p.x < p.next.x ? p : p.next;
            }
        }
        p = p.next;
    }while (p !== outerNode);
    if (!m) return null;
    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint
    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point
    var stop = m, mx = m.x, my = m.y;
    var tanMin = Infinity, tan;
    p = m;
    do {
        if (hx >= p.x && p.x >= mx && hx !== p.x && $b383cde4e0574ff6$var$pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential
            if ($b383cde4e0574ff6$var$locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && $b383cde4e0574ff6$var$sectorContainsSector(m, p)))) {
                m = p;
                tanMin = tan;
            }
        }
        p = p.next;
    }while (p !== stop);
    return m;
}
// whether sector in vertex m contains sector in vertex p in the same coordinates
function $b383cde4e0574ff6$var$sectorContainsSector(m, p) {
    return $b383cde4e0574ff6$var$area(m.prev, m, p.prev) < 0 && $b383cde4e0574ff6$var$area(p.next, m, m.next) < 0;
}
// interlink polygon nodes in z-order
function $b383cde4e0574ff6$var$indexCurve(start, minX, minY, invSize) {
    var p = start;
    do {
        if (p.z === null) p.z = $b383cde4e0574ff6$var$zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    }while (p !== start);
    p.prevZ.nextZ = null;
    p.prevZ = null;
    $b383cde4e0574ff6$var$sortLinked(p);
}
// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function $b383cde4e0574ff6$var$sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;
        while(p){
            numMerges++;
            q = p;
            pSize = 0;
            for(i = 0; i < inSize; i++){
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;
            while(pSize > 0 || qSize > 0 && q){
                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }
                if (tail) tail.nextZ = e;
                else list = e;
                e.prevZ = tail;
                tail = e;
            }
            p = q;
        }
        tail.nextZ = null;
        inSize *= 2;
    }while (numMerges > 1);
    return list;
}
// z-order of a point given coords and inverse of the longer side of data bbox
function $b383cde4e0574ff6$var$zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = 32767 * (x - minX) * invSize;
    y = 32767 * (y - minY) * invSize;
    x = (x | x << 8) & 0x00FF00FF;
    x = (x | x << 4) & 0x0F0F0F0F;
    x = (x | x << 2) & 0x33333333;
    x = (x | x << 1) & 0x55555555;
    y = (y | y << 8) & 0x00FF00FF;
    y = (y | y << 4) & 0x0F0F0F0F;
    y = (y | y << 2) & 0x33333333;
    y = (y | y << 1) & 0x55555555;
    return x | y << 1;
}
// find the leftmost node of a polygon ring
function $b383cde4e0574ff6$var$getLeftmost(start) {
    var p = start, leftmost = start;
    do {
        if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
        p = p.next;
    }while (p !== start);
    return leftmost;
}
// check if a point lies within a convex triangle
function $b383cde4e0574ff6$var$pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
}
// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function $b383cde4e0574ff6$var$isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !$b383cde4e0574ff6$var$intersectsPolygon(a, b) && // dones't intersect other edges
    ($b383cde4e0574ff6$var$locallyInside(a, b) && $b383cde4e0574ff6$var$locallyInside(b, a) && $b383cde4e0574ff6$var$middleInside(a, b) && // locally visible
    ($b383cde4e0574ff6$var$area(a.prev, a, b.prev) || $b383cde4e0574ff6$var$area(a, b.prev, b)) || // does not create opposite-facing sectors
    $b383cde4e0574ff6$var$equals(a, b) && $b383cde4e0574ff6$var$area(a.prev, a, a.next) > 0 && $b383cde4e0574ff6$var$area(b.prev, b, b.next) > 0); // special zero-length case
}
// signed area of a triangle
function $b383cde4e0574ff6$var$area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}
// check if two points are equal
function $b383cde4e0574ff6$var$equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}
// check if two segments intersect
function $b383cde4e0574ff6$var$intersects(p1, q1, p2, q2) {
    var o1 = $b383cde4e0574ff6$var$sign($b383cde4e0574ff6$var$area(p1, q1, p2));
    var o2 = $b383cde4e0574ff6$var$sign($b383cde4e0574ff6$var$area(p1, q1, q2));
    var o3 = $b383cde4e0574ff6$var$sign($b383cde4e0574ff6$var$area(p2, q2, p1));
    var o4 = $b383cde4e0574ff6$var$sign($b383cde4e0574ff6$var$area(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4) return true; // general case
    if (o1 === 0 && $b383cde4e0574ff6$var$onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
    if (o2 === 0 && $b383cde4e0574ff6$var$onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
    if (o3 === 0 && $b383cde4e0574ff6$var$onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
    if (o4 === 0 && $b383cde4e0574ff6$var$onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2
    return false;
}
// for collinear points p, q, r, check if point q lies on segment pr
function $b383cde4e0574ff6$var$onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}
function $b383cde4e0574ff6$var$sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
}
// check if a polygon diagonal intersects any polygon segments
function $b383cde4e0574ff6$var$intersectsPolygon(a, b) {
    var p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && $b383cde4e0574ff6$var$intersects(p, p.next, a, b)) return true;
        p = p.next;
    }while (p !== a);
    return false;
}
// check if a polygon diagonal is locally inside the polygon
function $b383cde4e0574ff6$var$locallyInside(a, b) {
    return $b383cde4e0574ff6$var$area(a.prev, a, a.next) < 0 ? $b383cde4e0574ff6$var$area(a, b, a.next) >= 0 && $b383cde4e0574ff6$var$area(a, a.prev, b) >= 0 : $b383cde4e0574ff6$var$area(a, b, a.prev) < 0 || $b383cde4e0574ff6$var$area(a, a.next, b) < 0;
}
// check if the middle point of a polygon diagonal is inside the polygon
function $b383cde4e0574ff6$var$middleInside(a, b) {
    var p = a, inside = false;
    var px = (a.x + b.x) / 2, py = (a.y + b.y) / 2;
    do {
        if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
        p = p.next;
    }while (p !== a);
    return inside;
}
// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function $b383cde4e0574ff6$var$splitPolygon(a, b) {
    var a2 = new $b383cde4e0574ff6$var$Node(a.i, a.x, a.y), b2 = new $b383cde4e0574ff6$var$Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
}
// create a node and optionally link it with previous one (in a circular doubly linked list)
function $b383cde4e0574ff6$var$insertNode(i, x, y, last) {
    var p = new $b383cde4e0574ff6$var$Node(i, x, y);
    if (!last) {
        p.prev = p;
        p.next = p;
    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}
function $b383cde4e0574ff6$var$removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}
function $b383cde4e0574ff6$var$Node(i, x, y) {
    // vertex index in coordinates array
    this.i = i;
    // vertex coordinates
    this.x = x;
    this.y = y;
    // previous and next vertex nodes in a polygon ring
    this.prev = null;
    this.next = null;
    // z-order curve value
    this.z = null;
    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;
    // indicates whether this is a steiner point
    this.steiner = false;
}
function $b383cde4e0574ff6$var$signedArea(data, start, end, dim) {
    var sum = 0;
    for(var i = start, j = end - dim; i < end; i += dim){
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}
var $b383cde4e0574ff6$export$96bdf6d9c66d7ba8 = /*#__PURE__*/ function() {
    "use strict";
    function ShapeUtils() {
        (0, $dnGTK.default)(this, ShapeUtils);
    }
    (0, $9SLyD.default)(ShapeUtils, null, [
        {
            key: "area",
            value: // calculate area of the contour polygon
            function area(contour) {
                var n = contour.length;
                var a = 0.0;
                for(var p = n - 1, q = 0; q < n; p = q++)a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
                return a * 0.5;
            }
        },
        {
            key: "isClockWise",
            value: function isClockWise(pts) {
                return ShapeUtils.area(pts) < 0;
            }
        },
        {
            key: "triangulateShape",
            value: function triangulateShape(contour, holes) {
                var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
                var holeIndices = []; // array of hole indices
                var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
                $b383cde4e0574ff6$var$removeDupEndPts(contour);
                $b383cde4e0574ff6$var$addContour(vertices, contour);
                //
                var holeIndex = contour.length;
                holes.forEach($b383cde4e0574ff6$var$removeDupEndPts);
                for(var i = 0; i < holes.length; i++){
                    holeIndices.push(holeIndex);
                    holeIndex += holes[i].length;
                    $b383cde4e0574ff6$var$addContour(vertices, holes[i]);
                }
                //
                var triangles = $b383cde4e0574ff6$var$Earcut.triangulate(vertices, holeIndices);
                //
                for(var i1 = 0; i1 < triangles.length; i1 += 3)faces.push(triangles.slice(i1, i1 + 3));
                return faces;
            }
        }
    ]);
    return ShapeUtils;
}();
function $b383cde4e0574ff6$var$removeDupEndPts(points) {
    var l = points.length;
    if (l > 2 && points[l - 1].equals(points[0])) points.pop();
}
function $b383cde4e0574ff6$var$addContour(vertices, contour) {
    for(var i = 0; i < contour.length; i++){
        vertices.push(contour[i].x);
        vertices.push(contour[i].y);
    }
}
/**
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  depth: <float>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
 *  bevelOffset: <float>, // how far from shape outline does bevel start
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */ var $b383cde4e0574ff6$export$91836d01b9f75a58 = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(ExtrudeGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(ExtrudeGeometry);
    function ExtrudeGeometry() {
        var shapes = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$6428a7f2611ef1fa([
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(0.5, 0.5),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(-0.5, 0.5),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(-0.5, -0.5),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(0.5, -0.5)
        ]), options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        (0, $dnGTK.default)(this, ExtrudeGeometry);
        var _this;
        var addShape = // functions
        function addShape(shape) {
            var placeholder = [];
            // options
            var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
            var steps = options.steps !== undefined ? options.steps : 1;
            var depth = options.depth !== undefined ? options.depth : 1;
            var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
            var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;
            var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;
            var bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
            var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
            var extrudePath = options.extrudePath;
            var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : $b383cde4e0574ff6$var$WorldUVGenerator;
            // deprecated options
            if (options.amount !== undefined) {
                console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth.");
                depth = options.amount;
            }
            //
            var extrudePts, extrudeByPath = false;
            var splineTube, binormal, normal, position2;
            if (extrudePath) {
                extrudePts = extrudePath.getSpacedPoints(steps);
                extrudeByPath = true;
                bevelEnabled = false; // bevels not supported for path extrusion
                // SETUP TNB variables
                // TODO1 - have a .isClosed in spline?
                splineTube = extrudePath.computeFrenetFrames(steps, false);
                // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
                binormal = new $b383cde4e0574ff6$export$64b5c384219d3699();
                normal = new $b383cde4e0574ff6$export$64b5c384219d3699();
                position2 = new $b383cde4e0574ff6$export$64b5c384219d3699();
            }
            // Safeguards if bevels are not enabled
            if (!bevelEnabled) {
                bevelSegments = 0;
                bevelThickness = 0;
                bevelSize = 0;
                bevelOffset = 0;
            }
            // Variables initialization
            var shapePoints = shape.extractPoints(curveSegments);
            var vertices = shapePoints.shape;
            var holes = shapePoints.holes;
            var reverse = !$b383cde4e0574ff6$export$96bdf6d9c66d7ba8.isClockWise(vertices);
            if (reverse) {
                vertices = vertices.reverse();
                // Maybe we should also check if holes are in the opposite direction, just to be safe ...
                for(var h = 0, hl = holes.length; h < hl; h++){
                    var ahole = holes[h];
                    if ($b383cde4e0574ff6$export$96bdf6d9c66d7ba8.isClockWise(ahole)) holes[h] = ahole.reverse();
                }
            }
            var faces = $b383cde4e0574ff6$export$96bdf6d9c66d7ba8.triangulateShape(vertices, holes);
            /* Vertices */ var contour = vertices; // vertices has all points but contour has only points of circumference
            for(var h1 = 0, hl1 = holes.length; h1 < hl1; h1++){
                var ahole1 = holes[h1];
                vertices = vertices.concat(ahole1);
            }
            function scalePt2(pt, vec, size) {
                if (!vec) console.error("THREE.ExtrudeGeometry: vec does not exist");
                return vec.clone().multiplyScalar(size).add(pt);
            }
            var vlen = vertices.length, flen = faces.length;
            // Find directions for point movement
            function getBevelVec(inPt, inPrev, inNext) {
                // computes for inPt the corresponding point inPt' on a new contour
                //   shifted by 1 unit (length of normalized vector) to the left
                // if we walk along contour clockwise, this new contour is outside the old one
                //
                // inPt' is the intersection of the two lines parallel to the two
                //  adjacent edges of inPt at a distance of 1 unit on the left side.
                var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
                // good reading for geometry algorithms (here: line-line intersection)
                // http://geomalgorithms.com/a05-_intersect-1.html
                var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
                var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
                var v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
                // check for collinear edges
                var collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
                if (Math.abs(collinear0) > Number.EPSILON) {
                    // not collinear
                    // length of vectors for normalizing
                    var v_prev_len = Math.sqrt(v_prev_lensq);
                    var v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
                    // shift adjacent points by unit vectors to the left
                    var ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
                    var ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
                    var ptNextShift_x = inNext.x - v_next_y / v_next_len;
                    var ptNextShift_y = inNext.y + v_next_x / v_next_len;
                    // scaling factor for v_prev to intersection point
                    var sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
                    // vector from inPt to intersection point
                    v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
                    v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
                    // Don't normalize!, otherwise sharp corners become ugly
                    //  but prevent crazy spikes
                    var v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
                    if (v_trans_lensq <= 2) return new $b383cde4e0574ff6$export$c977b3e384af9ae1(v_trans_x, v_trans_y);
                    else shrink_by = Math.sqrt(v_trans_lensq / 2);
                } else {
                    // handle special case of collinear edges
                    var direction_eq = false; // assumes: opposite
                    if (v_prev_x > Number.EPSILON) {
                        if (v_next_x > Number.EPSILON) direction_eq = true;
                    } else {
                        if (v_prev_x < -Number.EPSILON) {
                            if (v_next_x < -Number.EPSILON) direction_eq = true;
                        } else if (Math.sign(v_prev_y) === Math.sign(v_next_y)) direction_eq = true;
                    }
                    if (direction_eq) {
                        // console.log("Warning: lines are a straight sequence");
                        v_trans_x = -v_prev_y;
                        v_trans_y = v_prev_x;
                        shrink_by = Math.sqrt(v_prev_lensq);
                    } else {
                        // console.log("Warning: lines are a straight spike");
                        v_trans_x = v_prev_x;
                        v_trans_y = v_prev_y;
                        shrink_by = Math.sqrt(v_prev_lensq / 2);
                    }
                }
                return new $b383cde4e0574ff6$export$c977b3e384af9ae1(v_trans_x / shrink_by, v_trans_y / shrink_by);
            }
            var contourMovements = [];
            for(var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++){
                if (j === il) j = 0;
                if (k === il) k = 0;
                //  (j)---(i)---(k)
                // console.log('i,j,k', i, j , k)
                contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
            }
            var holesMovements = [];
            var oneHoleMovements, verticesMovements = contourMovements.concat();
            for(var h2 = 0, hl2 = holes.length; h2 < hl2; h2++){
                var ahole2 = holes[h2];
                oneHoleMovements = [];
                for(var i1 = 0, il1 = ahole2.length, j1 = il1 - 1, k1 = i1 + 1; i1 < il1; i1++, j1++, k1++){
                    if (j1 === il1) j1 = 0;
                    if (k1 === il1) k1 = 0;
                    //  (j)---(i)---(k)
                    oneHoleMovements[i1] = getBevelVec(ahole2[i1], ahole2[j1], ahole2[k1]);
                }
                holesMovements.push(oneHoleMovements);
                verticesMovements = verticesMovements.concat(oneHoleMovements);
            }
            // Loop bevelSegments, 1 for the front, 1 for the back
            for(var b = 0; b < bevelSegments; b++){
                //for ( b = bevelSegments; b > 0; b -- ) {
                var t = b / bevelSegments;
                var z = bevelThickness * Math.cos(t * Math.PI / 2);
                var bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
                // contract shape
                for(var i2 = 0, il2 = contour.length; i2 < il2; i2++){
                    var vert = scalePt2(contour[i2], contourMovements[i2], bs);
                    v(vert.x, vert.y, -z);
                }
                // expand holes
                for(var h3 = 0, hl3 = holes.length; h3 < hl3; h3++){
                    var ahole3 = holes[h3];
                    oneHoleMovements = holesMovements[h3];
                    for(var i3 = 0, il3 = ahole3.length; i3 < il3; i3++){
                        var vert1 = scalePt2(ahole3[i3], oneHoleMovements[i3], bs);
                        v(vert1.x, vert1.y, -z);
                    }
                }
            }
            var bs1 = bevelSize + bevelOffset;
            // Back facing vertices
            for(var i4 = 0; i4 < vlen; i4++){
                var vert2 = bevelEnabled ? scalePt2(vertices[i4], verticesMovements[i4], bs1) : vertices[i4];
                if (!extrudeByPath) v(vert2.x, vert2.y, 0);
                else {
                    // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
                    normal.copy(splineTube.normals[0]).multiplyScalar(vert2.x);
                    binormal.copy(splineTube.binormals[0]).multiplyScalar(vert2.y);
                    position2.copy(extrudePts[0]).add(normal).add(binormal);
                    v(position2.x, position2.y, position2.z);
                }
            }
            // Add stepped vertices...
            // Including front facing vertices
            for(var s = 1; s <= steps; s++)for(var i5 = 0; i5 < vlen; i5++){
                var vert3 = bevelEnabled ? scalePt2(vertices[i5], verticesMovements[i5], bs1) : vertices[i5];
                if (!extrudeByPath) v(vert3.x, vert3.y, depth / steps * s);
                else {
                    // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
                    normal.copy(splineTube.normals[s]).multiplyScalar(vert3.x);
                    binormal.copy(splineTube.binormals[s]).multiplyScalar(vert3.y);
                    position2.copy(extrudePts[s]).add(normal).add(binormal);
                    v(position2.x, position2.y, position2.z);
                }
            }
            // Add bevel segments planes
            //for ( b = 1; b <= bevelSegments; b ++ ) {
            for(var b1 = bevelSegments - 1; b1 >= 0; b1--){
                var t1 = b1 / bevelSegments;
                var z1 = bevelThickness * Math.cos(t1 * Math.PI / 2);
                var bs2 = bevelSize * Math.sin(t1 * Math.PI / 2) + bevelOffset;
                // contract shape
                for(var i6 = 0, il4 = contour.length; i6 < il4; i6++){
                    var vert4 = scalePt2(contour[i6], contourMovements[i6], bs2);
                    v(vert4.x, vert4.y, depth + z1);
                }
                // expand holes
                for(var h4 = 0, hl4 = holes.length; h4 < hl4; h4++){
                    var ahole4 = holes[h4];
                    oneHoleMovements = holesMovements[h4];
                    for(var i7 = 0, il5 = ahole4.length; i7 < il5; i7++){
                        var vert5 = scalePt2(ahole4[i7], oneHoleMovements[i7], bs2);
                        if (!extrudeByPath) v(vert5.x, vert5.y, depth + z1);
                        else v(vert5.x, vert5.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z1);
                    }
                }
            }
            /* Faces */ // Top and bottom faces
            buildLidFaces();
            // Sides faces
            buildSideFaces();
            /////  Internal functions
            function buildLidFaces() {
                var start = verticesArray.length / 3;
                if (bevelEnabled) {
                    var layer = 0; // steps + 1
                    var offset = vlen * layer;
                    // Bottom faces
                    for(var i = 0; i < flen; i++){
                        var face = faces[i];
                        f3(face[2] + offset, face[1] + offset, face[0] + offset);
                    }
                    layer = steps + bevelSegments * 2;
                    offset = vlen * layer;
                    // Top faces
                    for(var i1 = 0; i1 < flen; i1++){
                        var face1 = faces[i1];
                        f3(face1[0] + offset, face1[1] + offset, face1[2] + offset);
                    }
                } else {
                    // Bottom faces
                    for(var i2 = 0; i2 < flen; i2++){
                        var face2 = faces[i2];
                        f3(face2[2], face2[1], face2[0]);
                    }
                    // Top faces
                    for(var i3 = 0; i3 < flen; i3++){
                        var face3 = faces[i3];
                        f3(face3[0] + vlen * steps, face3[1] + vlen * steps, face3[2] + vlen * steps);
                    }
                }
                scope.addGroup(start, verticesArray.length / 3 - start, 0);
            }
            // Create faces for the z-sides of the shape
            function buildSideFaces() {
                var start = verticesArray.length / 3;
                var layeroffset = 0;
                sidewalls(contour, layeroffset);
                layeroffset += contour.length;
                for(var h = 0, hl = holes.length; h < hl; h++){
                    var ahole = holes[h];
                    sidewalls(ahole, layeroffset);
                    //, true
                    layeroffset += ahole.length;
                }
                scope.addGroup(start, verticesArray.length / 3 - start, 1);
            }
            function sidewalls(contour, layeroffset) {
                var i = contour.length;
                while(--i >= 0){
                    var j = i;
                    var k = i - 1;
                    if (k < 0) k = contour.length - 1;
                    //console.log('b', i,j, i-1, k,vertices.length);
                    for(var s = 0, sl = steps + bevelSegments * 2; s < sl; s++){
                        var slen1 = vlen * s;
                        var slen2 = vlen * (s + 1);
                        var a = layeroffset + j + slen1, b = layeroffset + k + slen1, c = layeroffset + k + slen2, d = layeroffset + j + slen2;
                        f4(a, b, c, d);
                    }
                }
            }
            function v(x, y, z) {
                placeholder.push(x);
                placeholder.push(y);
                placeholder.push(z);
            }
            function f3(a, b, c) {
                addVertex(a);
                addVertex(b);
                addVertex(c);
                var nextIndex = verticesArray.length / 3;
                var uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                addUV(uvs[0]);
                addUV(uvs[1]);
                addUV(uvs[2]);
            }
            function f4(a, b, c, d) {
                addVertex(a);
                addVertex(b);
                addVertex(d);
                addVertex(b);
                addVertex(c);
                addVertex(d);
                var nextIndex = verticesArray.length / 3;
                var uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                addUV(uvs[0]);
                addUV(uvs[1]);
                addUV(uvs[3]);
                addUV(uvs[1]);
                addUV(uvs[2]);
                addUV(uvs[3]);
            }
            function addVertex(index) {
                verticesArray.push(placeholder[index * 3 + 0]);
                verticesArray.push(placeholder[index * 3 + 1]);
                verticesArray.push(placeholder[index * 3 + 2]);
            }
            function addUV(vector2) {
                uvArray.push(vector2.x);
                uvArray.push(vector2.y);
            }
        };
        _this = _super.call(this);
        _this.type = "ExtrudeGeometry";
        _this.parameters = {
            shapes: shapes,
            options: options
        };
        shapes = Array.isArray(shapes) ? shapes : [
            shapes
        ];
        var scope = (0, $4enQD.default)(_this);
        var verticesArray = [];
        var uvArray = [];
        for(var i = 0, l = shapes.length; i < l; i++){
            var shape = shapes[i];
            addShape(shape);
        }
        // build geometry
        _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(verticesArray, 3));
        _this.setAttribute("uv", new $b383cde4e0574ff6$export$cbe7a62641830ebd(uvArray, 2));
        _this.computeVertexNormals();
        return _this;
    }
    (0, $9SLyD.default)(ExtrudeGeometry, [
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(ExtrudeGeometry.prototype), "toJSON", this).call(this);
                var shapes = this.parameters.shapes;
                var options = this.parameters.options;
                return $b383cde4e0574ff6$var$toJSON$1(shapes, options, data);
            }
        }
    ], [
        {
            key: "fromJSON",
            value: function fromJSON(data, shapes) {
                var geometryShapes = [];
                for(var j = 0, jl = data.shapes.length; j < jl; j++){
                    var shape = shapes[data.shapes[j]];
                    geometryShapes.push(shape);
                }
                var extrudePath = data.options.extrudePath;
                if (extrudePath !== undefined) data.options.extrudePath = new $b383cde4e0574ff6$var$Curves[extrudePath.type]().fromJSON(extrudePath);
                return new ExtrudeGeometry(geometryShapes, data.options);
            }
        }
    ]);
    return ExtrudeGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
var $b383cde4e0574ff6$var$WorldUVGenerator = {
    generateTopUV: function generateTopUV(geometry, vertices, indexA, indexB, indexC) {
        var a_x = vertices[indexA * 3];
        var a_y = vertices[indexA * 3 + 1];
        var b_x = vertices[indexB * 3];
        var b_y = vertices[indexB * 3 + 1];
        var c_x = vertices[indexC * 3];
        var c_y = vertices[indexC * 3 + 1];
        return [
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(a_x, a_y),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(b_x, b_y),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(c_x, c_y)
        ];
    },
    generateSideWallUV: function generateSideWallUV(geometry, vertices, indexA, indexB, indexC, indexD) {
        var a_x = vertices[indexA * 3];
        var a_y = vertices[indexA * 3 + 1];
        var a_z = vertices[indexA * 3 + 2];
        var b_x = vertices[indexB * 3];
        var b_y = vertices[indexB * 3 + 1];
        var b_z = vertices[indexB * 3 + 2];
        var c_x = vertices[indexC * 3];
        var c_y = vertices[indexC * 3 + 1];
        var c_z = vertices[indexC * 3 + 2];
        var d_x = vertices[indexD * 3];
        var d_y = vertices[indexD * 3 + 1];
        var d_z = vertices[indexD * 3 + 2];
        if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) return [
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(a_x, 1 - a_z),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(b_x, 1 - b_z),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(c_x, 1 - c_z),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(d_x, 1 - d_z)
        ];
        else return [
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(a_y, 1 - a_z),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(b_y, 1 - b_z),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(c_y, 1 - c_z),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(d_y, 1 - d_z)
        ];
    }
};
function $b383cde4e0574ff6$var$toJSON$1(shapes, options, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) for(var i = 0, l = shapes.length; i < l; i++){
        var shape = shapes[i];
        data.shapes.push(shape.uuid);
    }
    else data.shapes.push(shapes.uuid);
    if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();
    return data;
}
var $b383cde4e0574ff6$export$731fd4feef063ea2 = /*#__PURE__*/ function(PolyhedronGeometry) {
    "use strict";
    (0, $gQI4D.default)(IcosahedronGeometry, PolyhedronGeometry);
    var _super = (0, $a0Xbx.default)(IcosahedronGeometry);
    function IcosahedronGeometry() {
        var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, detail = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        (0, $dnGTK.default)(this, IcosahedronGeometry);
        var _this;
        var t = (1 + Math.sqrt(5)) / 2;
        var vertices = [
            -1,
            t,
            0,
            1,
            t,
            0,
            -1,
            -t,
            0,
            1,
            -t,
            0,
            0,
            -1,
            t,
            0,
            1,
            t,
            0,
            -1,
            -t,
            0,
            1,
            -t,
            t,
            0,
            -1,
            t,
            0,
            1,
            -t,
            0,
            -1,
            -t,
            0,
            1
        ];
        var indices = [
            0,
            11,
            5,
            0,
            5,
            1,
            0,
            1,
            7,
            0,
            7,
            10,
            0,
            10,
            11,
            1,
            5,
            9,
            5,
            11,
            4,
            11,
            10,
            2,
            10,
            7,
            6,
            7,
            1,
            8,
            3,
            9,
            4,
            3,
            4,
            2,
            3,
            2,
            6,
            3,
            6,
            8,
            3,
            8,
            9,
            4,
            9,
            5,
            2,
            4,
            11,
            6,
            2,
            10,
            8,
            6,
            7,
            9,
            8,
            1
        ];
        _this = _super.call(this, vertices, indices, radius, detail);
        _this.type = "IcosahedronGeometry";
        _this.parameters = {
            radius: radius,
            detail: detail
        };
        return _this;
    }
    (0, $9SLyD.default)(IcosahedronGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new IcosahedronGeometry(data.radius, data.detail);
            }
        }
    ]);
    return IcosahedronGeometry;
}($b383cde4e0574ff6$export$38789b531813345c);
var $b383cde4e0574ff6$export$dc3e1273c1dd9240 = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(LatheGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(LatheGeometry);
    function LatheGeometry() {
        var points = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(0, 0.5),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(0.5, 0),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(0, -0.5)
        ], segments = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 12, phiStart = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, phiLength = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Math.PI * 2;
        (0, $dnGTK.default)(this, LatheGeometry);
        var _this;
        _this = _super.call(this);
        _this.type = "LatheGeometry";
        _this.parameters = {
            points: points,
            segments: segments,
            phiStart: phiStart,
            phiLength: phiLength
        };
        segments = Math.floor(segments);
        // clamp phiLength so it's in range of [ 0, 2PI ]
        phiLength = $b383cde4e0574ff6$var$clamp(phiLength, 0, Math.PI * 2);
        // buffers
        var indices = [];
        var vertices = [];
        var uvs = [];
        // helper variables
        var inverseSegments = 1.0 / segments;
        var vertex = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var uv = new $b383cde4e0574ff6$export$c977b3e384af9ae1();
        // generate vertices and uvs
        for(var i = 0; i <= segments; i++){
            var phi = phiStart + i * inverseSegments * phiLength;
            var sin = Math.sin(phi);
            var cos = Math.cos(phi);
            for(var j = 0; j <= points.length - 1; j++){
                // vertex
                vertex.x = points[j].x * sin;
                vertex.y = points[j].y;
                vertex.z = points[j].x * cos;
                vertices.push(vertex.x, vertex.y, vertex.z);
                // uv
                uv.x = i / segments;
                uv.y = j / (points.length - 1);
                uvs.push(uv.x, uv.y);
            }
        }
        // indices
        for(var i1 = 0; i1 < segments; i1++)for(var j1 = 0; j1 < points.length - 1; j1++){
            var base = j1 + i1 * points.length;
            var a = base;
            var b = base + points.length;
            var c = base + points.length + 1;
            var d = base + 1;
            // faces
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        _this.setIndex(indices);
        _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        _this.setAttribute("uv", new $b383cde4e0574ff6$export$cbe7a62641830ebd(uvs, 2));
        // generate normals
        _this.computeVertexNormals();
        // if the geometry is closed, we need to average the normals along the seam.
        // because the corresponding vertices are identical (but still have different UVs).
        if (phiLength === Math.PI * 2) {
            var normals = _this.attributes.normal.array;
            var n1 = new $b383cde4e0574ff6$export$64b5c384219d3699();
            var n2 = new $b383cde4e0574ff6$export$64b5c384219d3699();
            var n = new $b383cde4e0574ff6$export$64b5c384219d3699();
            // this is the buffer offset for the last line of vertices
            var base1 = segments * points.length * 3;
            for(var i2 = 0, j2 = 0; i2 < points.length; i2++, j2 += 3){
                // select the normal of the vertex in the first line
                n1.x = normals[j2 + 0];
                n1.y = normals[j2 + 1];
                n1.z = normals[j2 + 2];
                // select the normal of the vertex in the last line
                n2.x = normals[base1 + j2 + 0];
                n2.y = normals[base1 + j2 + 1];
                n2.z = normals[base1 + j2 + 2];
                // average normals
                n.addVectors(n1, n2).normalize();
                // assign the new values to both normals
                normals[j2 + 0] = normals[base1 + j2 + 0] = n.x;
                normals[j2 + 1] = normals[base1 + j2 + 1] = n.y;
                normals[j2 + 2] = normals[base1 + j2 + 2] = n.z;
            }
        }
        return _this;
    }
    (0, $9SLyD.default)(LatheGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);
            }
        }
    ]);
    return LatheGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
var $b383cde4e0574ff6$export$8e05fc91596f4752 = /*#__PURE__*/ function(PolyhedronGeometry) {
    "use strict";
    (0, $gQI4D.default)(OctahedronGeometry, PolyhedronGeometry);
    var _super = (0, $a0Xbx.default)(OctahedronGeometry);
    function OctahedronGeometry() {
        var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, detail = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        (0, $dnGTK.default)(this, OctahedronGeometry);
        var _this;
        var vertices = [
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1
        ];
        var indices = [
            0,
            2,
            4,
            0,
            4,
            3,
            0,
            3,
            5,
            0,
            5,
            2,
            1,
            2,
            5,
            1,
            5,
            3,
            1,
            3,
            4,
            1,
            4,
            2
        ];
        _this = _super.call(this, vertices, indices, radius, detail);
        _this.type = "OctahedronGeometry";
        _this.parameters = {
            radius: radius,
            detail: detail
        };
        return _this;
    }
    (0, $9SLyD.default)(OctahedronGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new OctahedronGeometry(data.radius, data.detail);
            }
        }
    ]);
    return OctahedronGeometry;
}($b383cde4e0574ff6$export$38789b531813345c);
var $b383cde4e0574ff6$export$ee8b85b34b7d9cad = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(RingGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(RingGeometry);
    function RingGeometry() {
        var innerRadius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0.5, outerRadius = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, thetaSegments = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 8, phiSegments = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1, thetaStart = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0, thetaLength = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : Math.PI * 2;
        (0, $dnGTK.default)(this, RingGeometry);
        var _this;
        _this = _super.call(this);
        _this.type = "RingGeometry";
        _this.parameters = {
            innerRadius: innerRadius,
            outerRadius: outerRadius,
            thetaSegments: thetaSegments,
            phiSegments: phiSegments,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        thetaSegments = Math.max(3, thetaSegments);
        phiSegments = Math.max(1, phiSegments);
        // buffers
        var indices = [];
        var vertices = [];
        var normals = [];
        var uvs = [];
        // some helper variables
        var radius = innerRadius;
        var radiusStep = (outerRadius - innerRadius) / phiSegments;
        var vertex = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var uv = new $b383cde4e0574ff6$export$c977b3e384af9ae1();
        // generate vertices, normals and uvs
        for(var j = 0; j <= phiSegments; j++){
            for(var i = 0; i <= thetaSegments; i++){
                // values are generate from the inside of the ring to the outside
                var segment = thetaStart + i / thetaSegments * thetaLength;
                // vertex
                vertex.x = radius * Math.cos(segment);
                vertex.y = radius * Math.sin(segment);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normals.push(0, 0, 1);
                // uv
                uv.x = (vertex.x / outerRadius + 1) / 2;
                uv.y = (vertex.y / outerRadius + 1) / 2;
                uvs.push(uv.x, uv.y);
            }
            // increase the radius for next row of vertices
            radius += radiusStep;
        }
        // indices
        for(var j1 = 0; j1 < phiSegments; j1++){
            var thetaSegmentLevel = j1 * (thetaSegments + 1);
            for(var i1 = 0; i1 < thetaSegments; i1++){
                var segment1 = i1 + thetaSegmentLevel;
                var a = segment1;
                var b = segment1 + thetaSegments + 1;
                var c = segment1 + thetaSegments + 2;
                var d = segment1 + 1;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
            }
        }
        // build geometry
        _this.setIndex(indices);
        _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        _this.setAttribute("normal", new $b383cde4e0574ff6$export$cbe7a62641830ebd(normals, 3));
        _this.setAttribute("uv", new $b383cde4e0574ff6$export$cbe7a62641830ebd(uvs, 2));
        return _this;
    }
    (0, $9SLyD.default)(RingGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
            }
        }
    ]);
    return RingGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
var $b383cde4e0574ff6$export$233afc324766bed8 = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(ShapeGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(ShapeGeometry);
    function ShapeGeometry() {
        var shapes = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$6428a7f2611ef1fa([
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(0, 0.5),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(-0.5, -0.5),
            new $b383cde4e0574ff6$export$c977b3e384af9ae1(0.5, -0.5)
        ]), curveSegments = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 12;
        (0, $dnGTK.default)(this, ShapeGeometry);
        var _this;
        var addShape = // helper functions
        function addShape(shape) {
            var indexOffset = vertices.length / 3;
            var points = shape.extractPoints(curveSegments);
            var shapeVertices = points.shape;
            var shapeHoles = points.holes;
            // check direction of vertices
            if ($b383cde4e0574ff6$export$96bdf6d9c66d7ba8.isClockWise(shapeVertices) === false) shapeVertices = shapeVertices.reverse();
            for(var i = 0, l = shapeHoles.length; i < l; i++){
                var shapeHole = shapeHoles[i];
                if ($b383cde4e0574ff6$export$96bdf6d9c66d7ba8.isClockWise(shapeHole) === true) shapeHoles[i] = shapeHole.reverse();
            }
            var faces = $b383cde4e0574ff6$export$96bdf6d9c66d7ba8.triangulateShape(shapeVertices, shapeHoles);
            // join vertices of inner and outer paths to a single array
            for(var i1 = 0, l1 = shapeHoles.length; i1 < l1; i1++){
                var shapeHole1 = shapeHoles[i1];
                shapeVertices = shapeVertices.concat(shapeHole1);
            }
            // vertices, normals, uvs
            for(var i2 = 0, l2 = shapeVertices.length; i2 < l2; i2++){
                var vertex = shapeVertices[i2];
                vertices.push(vertex.x, vertex.y, 0);
                normals.push(0, 0, 1);
                uvs.push(vertex.x, vertex.y); // world uvs
            }
            // incides
            for(var i3 = 0, l3 = faces.length; i3 < l3; i3++){
                var face = faces[i3];
                var a = face[0] + indexOffset;
                var b = face[1] + indexOffset;
                var c = face[2] + indexOffset;
                indices.push(a, b, c);
                groupCount += 3;
            }
        };
        _this = _super.call(this);
        _this.type = "ShapeGeometry";
        _this.parameters = {
            shapes: shapes,
            curveSegments: curveSegments
        };
        // buffers
        var indices = [];
        var vertices = [];
        var normals = [];
        var uvs = [];
        // helper variables
        var groupStart = 0;
        var groupCount = 0;
        // allow single and array values for "shapes" parameter
        if (Array.isArray(shapes) === false) addShape(shapes);
        else for(var i = 0; i < shapes.length; i++){
            addShape(shapes[i]);
            _this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support
            groupStart += groupCount;
            groupCount = 0;
        }
        // build geometry
        _this.setIndex(indices);
        _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        _this.setAttribute("normal", new $b383cde4e0574ff6$export$cbe7a62641830ebd(normals, 3));
        _this.setAttribute("uv", new $b383cde4e0574ff6$export$cbe7a62641830ebd(uvs, 2));
        return _this;
    }
    (0, $9SLyD.default)(ShapeGeometry, [
        {
            key: "toJSON",
            value: function toJSON1() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(ShapeGeometry.prototype), "toJSON", this).call(this);
                var shapes = this.parameters.shapes;
                return $b383cde4e0574ff6$var$toJSON(shapes, data);
            }
        }
    ], [
        {
            key: "fromJSON",
            value: function fromJSON(data, shapes) {
                var geometryShapes = [];
                for(var j = 0, jl = data.shapes.length; j < jl; j++){
                    var shape = shapes[data.shapes[j]];
                    geometryShapes.push(shape);
                }
                return new ShapeGeometry(geometryShapes, data.curveSegments);
            }
        }
    ]);
    return ShapeGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
function $b383cde4e0574ff6$var$toJSON(shapes, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) for(var i = 0, l = shapes.length; i < l; i++){
        var shape = shapes[i];
        data.shapes.push(shape.uuid);
    }
    else data.shapes.push(shapes.uuid);
    return data;
}
var $b383cde4e0574ff6$export$d5d06a966fec4192 = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(SphereGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(SphereGeometry);
    function SphereGeometry() {
        var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, widthSegments = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 32, heightSegments = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 16, phiStart = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, phiLength = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : Math.PI * 2, thetaStart = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0, thetaLength = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : Math.PI;
        (0, $dnGTK.default)(this, SphereGeometry);
        var _this;
        _this = _super.call(this);
        _this.type = "SphereGeometry";
        _this.parameters = {
            radius: radius,
            widthSegments: widthSegments,
            heightSegments: heightSegments,
            phiStart: phiStart,
            phiLength: phiLength,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        widthSegments = Math.max(3, Math.floor(widthSegments));
        heightSegments = Math.max(2, Math.floor(heightSegments));
        var thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
        var index = 0;
        var grid = [];
        var vertex = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var normal = new $b383cde4e0574ff6$export$64b5c384219d3699();
        // buffers
        var indices = [];
        var vertices = [];
        var normals = [];
        var uvs = [];
        // generate vertices, normals and uvs
        for(var iy = 0; iy <= heightSegments; iy++){
            var verticesRow = [];
            var v = iy / heightSegments;
            // special case for the poles
            var uOffset = 0;
            if (iy == 0 && thetaStart == 0) uOffset = 0.5 / widthSegments;
            else if (iy == heightSegments && thetaEnd == Math.PI) uOffset = -0.5 / widthSegments;
            for(var ix = 0; ix <= widthSegments; ix++){
                var u = ix / widthSegments;
                // vertex
                vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
                vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normal.copy(vertex).normalize();
                normals.push(normal.x, normal.y, normal.z);
                // uv
                uvs.push(u + uOffset, 1 - v);
                verticesRow.push(index++);
            }
            grid.push(verticesRow);
        }
        // indices
        for(var iy1 = 0; iy1 < heightSegments; iy1++)for(var ix1 = 0; ix1 < widthSegments; ix1++){
            var a = grid[iy1][ix1 + 1];
            var b = grid[iy1][ix1];
            var c = grid[iy1 + 1][ix1];
            var d = grid[iy1 + 1][ix1 + 1];
            if (iy1 !== 0 || thetaStart > 0) indices.push(a, b, d);
            if (iy1 !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
        }
        // build geometry
        _this.setIndex(indices);
        _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        _this.setAttribute("normal", new $b383cde4e0574ff6$export$cbe7a62641830ebd(normals, 3));
        _this.setAttribute("uv", new $b383cde4e0574ff6$export$cbe7a62641830ebd(uvs, 2));
        return _this;
    }
    (0, $9SLyD.default)(SphereGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
            }
        }
    ]);
    return SphereGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
var $b383cde4e0574ff6$export$369e08f62a796c65 = /*#__PURE__*/ function(PolyhedronGeometry) {
    "use strict";
    (0, $gQI4D.default)(TetrahedronGeometry, PolyhedronGeometry);
    var _super = (0, $a0Xbx.default)(TetrahedronGeometry);
    function TetrahedronGeometry() {
        var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, detail = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        (0, $dnGTK.default)(this, TetrahedronGeometry);
        var _this;
        var vertices = [
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            1,
            -1,
            -1
        ];
        var indices = [
            2,
            1,
            0,
            0,
            3,
            2,
            1,
            3,
            0,
            2,
            3,
            1
        ];
        _this = _super.call(this, vertices, indices, radius, detail);
        _this.type = "TetrahedronGeometry";
        _this.parameters = {
            radius: radius,
            detail: detail
        };
        return _this;
    }
    (0, $9SLyD.default)(TetrahedronGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new TetrahedronGeometry(data.radius, data.detail);
            }
        }
    ]);
    return TetrahedronGeometry;
}($b383cde4e0574ff6$export$38789b531813345c);
var $b383cde4e0574ff6$export$19d55f905fa4f2cb = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(TorusGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(TorusGeometry);
    function TorusGeometry() {
        var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, tube = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.4, radialSegments = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 8, tubularSegments = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 6, arc = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : Math.PI * 2;
        (0, $dnGTK.default)(this, TorusGeometry);
        var _this;
        _this = _super.call(this);
        _this.type = "TorusGeometry";
        _this.parameters = {
            radius: radius,
            tube: tube,
            radialSegments: radialSegments,
            tubularSegments: tubularSegments,
            arc: arc
        };
        radialSegments = Math.floor(radialSegments);
        tubularSegments = Math.floor(tubularSegments);
        // buffers
        var indices = [];
        var vertices = [];
        var normals = [];
        var uvs = [];
        // helper variables
        var center = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var vertex = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var normal = new $b383cde4e0574ff6$export$64b5c384219d3699();
        // generate vertices, normals and uvs
        for(var j = 0; j <= radialSegments; j++)for(var i = 0; i <= tubularSegments; i++){
            var u = i / tubularSegments * arc;
            var v = j / radialSegments * Math.PI * 2;
            // vertex
            vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);
            vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);
            vertex.z = tube * Math.sin(v);
            vertices.push(vertex.x, vertex.y, vertex.z);
            // normal
            center.x = radius * Math.cos(u);
            center.y = radius * Math.sin(u);
            normal.subVectors(vertex, center).normalize();
            normals.push(normal.x, normal.y, normal.z);
            // uv
            uvs.push(i / tubularSegments);
            uvs.push(j / radialSegments);
        }
        // generate indices
        for(var j1 = 1; j1 <= radialSegments; j1++)for(var i1 = 1; i1 <= tubularSegments; i1++){
            // indices
            var a = (tubularSegments + 1) * j1 + i1 - 1;
            var b = (tubularSegments + 1) * (j1 - 1) + i1 - 1;
            var c = (tubularSegments + 1) * (j1 - 1) + i1;
            var d = (tubularSegments + 1) * j1 + i1;
            // faces
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        _this.setIndex(indices);
        _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        _this.setAttribute("normal", new $b383cde4e0574ff6$export$cbe7a62641830ebd(normals, 3));
        _this.setAttribute("uv", new $b383cde4e0574ff6$export$cbe7a62641830ebd(uvs, 2));
        return _this;
    }
    (0, $9SLyD.default)(TorusGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
            }
        }
    ]);
    return TorusGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
var $b383cde4e0574ff6$export$2b32466f4274fe5c = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(TorusKnotGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(TorusKnotGeometry);
    function TorusKnotGeometry() {
        var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, tube = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.4, tubularSegments = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 64, radialSegments = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 8, p = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 2, q = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 3;
        (0, $dnGTK.default)(this, TorusKnotGeometry);
        var _this;
        var calculatePositionOnCurve = // this function calculates the current position on the torus curve
        function calculatePositionOnCurve(u, p, q, radius, position) {
            var cu = Math.cos(u);
            var su = Math.sin(u);
            var quOverP = q / p * u;
            var cs = Math.cos(quOverP);
            position.x = radius * (2 + cs) * 0.5 * cu;
            position.y = radius * (2 + cs) * su * 0.5;
            position.z = radius * Math.sin(quOverP) * 0.5;
        };
        _this = _super.call(this);
        _this.type = "TorusKnotGeometry";
        _this.parameters = {
            radius: radius,
            tube: tube,
            tubularSegments: tubularSegments,
            radialSegments: radialSegments,
            p: p,
            q: q
        };
        tubularSegments = Math.floor(tubularSegments);
        radialSegments = Math.floor(radialSegments);
        // buffers
        var indices = [];
        var vertices = [];
        var normals = [];
        var uvs = [];
        // helper variables
        var vertex = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var normal = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var P1 = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var P2 = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var B = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var T = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var N = new $b383cde4e0574ff6$export$64b5c384219d3699();
        // generate vertices, normals and uvs
        for(var i = 0; i <= tubularSegments; ++i){
            // the radian "u" is used to calculate the position on the torus curve of the current tubular segement
            var u = i / tubularSegments * p * Math.PI * 2;
            // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
            // these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
            calculatePositionOnCurve(u, p, q, radius, P1);
            calculatePositionOnCurve(u + 0.01, p, q, radius, P2);
            // calculate orthonormal basis
            T.subVectors(P2, P1);
            N.addVectors(P2, P1);
            B.crossVectors(T, N);
            N.crossVectors(B, T);
            // normalize B, N. T can be ignored, we don't use it
            B.normalize();
            N.normalize();
            for(var j = 0; j <= radialSegments; ++j){
                // now calculate the vertices. they are nothing more than an extrusion of the torus curve.
                // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
                var v = j / radialSegments * Math.PI * 2;
                var cx = -tube * Math.cos(v);
                var cy = tube * Math.sin(v);
                // now calculate the final vertex position.
                // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve
                vertex.x = P1.x + (cx * N.x + cy * B.x);
                vertex.y = P1.y + (cx * N.y + cy * B.y);
                vertex.z = P1.z + (cx * N.z + cy * B.z);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
                normal.subVectors(vertex, P1).normalize();
                normals.push(normal.x, normal.y, normal.z);
                // uv
                uvs.push(i / tubularSegments);
                uvs.push(j / radialSegments);
            }
        }
        // generate indices
        for(var j1 = 1; j1 <= tubularSegments; j1++)for(var i1 = 1; i1 <= radialSegments; i1++){
            // indices
            var a = (radialSegments + 1) * (j1 - 1) + (i1 - 1);
            var b = (radialSegments + 1) * j1 + (i1 - 1);
            var c = (radialSegments + 1) * j1 + i1;
            var d = (radialSegments + 1) * (j1 - 1) + i1;
            // faces
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        _this.setIndex(indices);
        _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        _this.setAttribute("normal", new $b383cde4e0574ff6$export$cbe7a62641830ebd(normals, 3));
        _this.setAttribute("uv", new $b383cde4e0574ff6$export$cbe7a62641830ebd(uvs, 2));
        return _this;
    }
    (0, $9SLyD.default)(TorusKnotGeometry, null, [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                return new TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
            }
        }
    ]);
    return TorusKnotGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
var $b383cde4e0574ff6$export$d97a193ce44e691b = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(TubeGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(TubeGeometry);
    function TubeGeometry() {
        var path = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$bf3f4c7e459f90fc(new $b383cde4e0574ff6$export$64b5c384219d3699(-1, -1, 0), new $b383cde4e0574ff6$export$64b5c384219d3699(-1, 1, 0), new $b383cde4e0574ff6$export$64b5c384219d3699(1, 1, 0)), tubularSegments = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 64, radius = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, radialSegments = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 8, closed = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
        (0, $dnGTK.default)(this, TubeGeometry);
        var _this;
        var generateBufferData = // functions
        function generateBufferData() {
            for(var i = 0; i < tubularSegments; i++)generateSegment(i);
            // if the geometry is not closed, generate the last row of vertices and normals
            // at the regular position on the given path
            //
            // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
            generateSegment(closed === false ? tubularSegments : 0);
            // uvs are generated in a separate function.
            // this makes it easy compute correct values for closed geometries
            generateUVs();
            // finally create faces
            generateIndices();
        };
        var generateSegment = function generateSegment(i) {
            // we use getPointAt to sample evenly distributed points from the given path
            P = path.getPointAt(i / tubularSegments, P);
            // retrieve corresponding normal and binormal
            var N = frames.normals[i];
            var B = frames.binormals[i];
            // generate normals and vertices for the current segment
            for(var j = 0; j <= radialSegments; j++){
                var v = j / radialSegments * Math.PI * 2;
                var sin = Math.sin(v);
                var cos = -Math.cos(v);
                // normal
                normal.x = cos * N.x + sin * B.x;
                normal.y = cos * N.y + sin * B.y;
                normal.z = cos * N.z + sin * B.z;
                normal.normalize();
                normals.push(normal.x, normal.y, normal.z);
                // vertex
                vertex.x = P.x + radius * normal.x;
                vertex.y = P.y + radius * normal.y;
                vertex.z = P.z + radius * normal.z;
                vertices.push(vertex.x, vertex.y, vertex.z);
            }
        };
        var generateIndices = function generateIndices() {
            for(var j = 1; j <= tubularSegments; j++)for(var i = 1; i <= radialSegments; i++){
                var a = (radialSegments + 1) * (j - 1) + (i - 1);
                var b = (radialSegments + 1) * j + (i - 1);
                var c = (radialSegments + 1) * j + i;
                var d = (radialSegments + 1) * (j - 1) + i;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
            }
        };
        var generateUVs = function generateUVs() {
            for(var i = 0; i <= tubularSegments; i++)for(var j = 0; j <= radialSegments; j++){
                uv.x = i / tubularSegments;
                uv.y = j / radialSegments;
                uvs.push(uv.x, uv.y);
            }
        };
        _this = _super.call(this);
        _this.type = "TubeGeometry";
        _this.parameters = {
            path: path,
            tubularSegments: tubularSegments,
            radius: radius,
            radialSegments: radialSegments,
            closed: closed
        };
        var frames = path.computeFrenetFrames(tubularSegments, closed);
        // expose internals
        _this.tangents = frames.tangents;
        _this.normals = frames.normals;
        _this.binormals = frames.binormals;
        // helper variables
        var vertex = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var normal = new $b383cde4e0574ff6$export$64b5c384219d3699();
        var uv = new $b383cde4e0574ff6$export$c977b3e384af9ae1();
        var P = new $b383cde4e0574ff6$export$64b5c384219d3699();
        // buffer
        var vertices = [];
        var normals = [];
        var uvs = [];
        var indices = [];
        // create buffer data
        generateBufferData();
        // build geometry
        _this.setIndex(indices);
        _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        _this.setAttribute("normal", new $b383cde4e0574ff6$export$cbe7a62641830ebd(normals, 3));
        _this.setAttribute("uv", new $b383cde4e0574ff6$export$cbe7a62641830ebd(uvs, 2));
        return _this;
    }
    (0, $9SLyD.default)(TubeGeometry, [
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(TubeGeometry.prototype), "toJSON", this).call(this);
                data.path = this.parameters.path.toJSON();
                return data;
            }
        }
    ], [
        {
            key: "fromJSON",
            value: function fromJSON(data) {
                // This only works for built-in curves (e.g. CatmullRomCurve3).
                // User defined curves or instances of CurvePath will not be deserialized.
                return new TubeGeometry(new $b383cde4e0574ff6$var$Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);
            }
        }
    ]);
    return TubeGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
var $b383cde4e0574ff6$export$4b739da06d24892b = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(WireframeGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(WireframeGeometry);
    function WireframeGeometry() {
        var geometry = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        (0, $dnGTK.default)(this, WireframeGeometry);
        var _this;
        _this = _super.call(this);
        _this.type = "WireframeGeometry";
        _this.parameters = {
            geometry: geometry
        };
        if (geometry !== null) {
            // buffer
            var vertices = [];
            var edges = new Set();
            // helper variables
            var start = new $b383cde4e0574ff6$export$64b5c384219d3699();
            var end = new $b383cde4e0574ff6$export$64b5c384219d3699();
            if (geometry.index !== null) {
                // indexed BufferGeometry
                var position = geometry.attributes.position;
                var indices = geometry.index;
                var groups = geometry.groups;
                if (groups.length === 0) groups = [
                    {
                        start: 0,
                        count: indices.count,
                        materialIndex: 0
                    }
                ];
                // create a data structure that contains all eges without duplicates
                for(var o = 0, ol = groups.length; o < ol; ++o){
                    var group = groups[o];
                    var groupStart = group.start;
                    var groupCount = group.count;
                    for(var i = groupStart, l = groupStart + groupCount; i < l; i += 3)for(var j = 0; j < 3; j++){
                        var index1 = indices.getX(i + j);
                        var index2 = indices.getX(i + (j + 1) % 3);
                        start.fromBufferAttribute(position, index1);
                        end.fromBufferAttribute(position, index2);
                        if ($b383cde4e0574ff6$var$isUniqueEdge(start, end, edges) === true) {
                            vertices.push(start.x, start.y, start.z);
                            vertices.push(end.x, end.y, end.z);
                        }
                    }
                }
            } else {
                // non-indexed BufferGeometry
                var position1 = geometry.attributes.position;
                for(var i1 = 0, l1 = position1.count / 3; i1 < l1; i1++)for(var j1 = 0; j1 < 3; j1++){
                    // three edges per triangle, an edge is represented as (index1, index2)
                    // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
                    var index11 = 3 * i1 + j1;
                    var index21 = 3 * i1 + (j1 + 1) % 3;
                    start.fromBufferAttribute(position1, index11);
                    end.fromBufferAttribute(position1, index21);
                    if ($b383cde4e0574ff6$var$isUniqueEdge(start, end, edges) === true) {
                        vertices.push(start.x, start.y, start.z);
                        vertices.push(end.x, end.y, end.z);
                    }
                }
            }
            // build geometry
            _this.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        }
        return _this;
    }
    return WireframeGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
function $b383cde4e0574ff6$var$isUniqueEdge(start, end, edges) {
    var hash1 = "".concat(start.x, ",").concat(start.y, ",").concat(start.z, "-").concat(end.x, ",").concat(end.y, ",").concat(end.z);
    var hash2 = "".concat(end.x, ",").concat(end.y, ",").concat(end.z, "-").concat(start.x, ",").concat(start.y, ",").concat(start.z); // coincident edge
    if (edges.has(hash1) === true || edges.has(hash2) === true) return false;
    else {
        edges.add(hash1, hash2);
        return true;
    }
}
var $b383cde4e0574ff6$var$Geometries = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    BoxGeometry: $b383cde4e0574ff6$export$ab3456a079aa7d80,
    BoxBufferGeometry: $b383cde4e0574ff6$export$ab3456a079aa7d80,
    CircleGeometry: $b383cde4e0574ff6$export$3f74fe60decf7462,
    CircleBufferGeometry: $b383cde4e0574ff6$export$3f74fe60decf7462,
    ConeGeometry: $b383cde4e0574ff6$export$59d971120dc8b6e7,
    ConeBufferGeometry: $b383cde4e0574ff6$export$59d971120dc8b6e7,
    CylinderGeometry: $b383cde4e0574ff6$export$d4345c83207d7c68,
    CylinderBufferGeometry: $b383cde4e0574ff6$export$d4345c83207d7c68,
    DodecahedronGeometry: $b383cde4e0574ff6$export$37cd4e52cce48c4c,
    DodecahedronBufferGeometry: $b383cde4e0574ff6$export$37cd4e52cce48c4c,
    EdgesGeometry: $b383cde4e0574ff6$export$4730b1542707547f,
    ExtrudeGeometry: $b383cde4e0574ff6$export$91836d01b9f75a58,
    ExtrudeBufferGeometry: $b383cde4e0574ff6$export$91836d01b9f75a58,
    IcosahedronGeometry: $b383cde4e0574ff6$export$731fd4feef063ea2,
    IcosahedronBufferGeometry: $b383cde4e0574ff6$export$731fd4feef063ea2,
    LatheGeometry: $b383cde4e0574ff6$export$dc3e1273c1dd9240,
    LatheBufferGeometry: $b383cde4e0574ff6$export$dc3e1273c1dd9240,
    OctahedronGeometry: $b383cde4e0574ff6$export$8e05fc91596f4752,
    OctahedronBufferGeometry: $b383cde4e0574ff6$export$8e05fc91596f4752,
    PlaneGeometry: $b383cde4e0574ff6$export$e789a11a194ca4e0,
    PlaneBufferGeometry: $b383cde4e0574ff6$export$e789a11a194ca4e0,
    PolyhedronGeometry: $b383cde4e0574ff6$export$38789b531813345c,
    PolyhedronBufferGeometry: $b383cde4e0574ff6$export$38789b531813345c,
    RingGeometry: $b383cde4e0574ff6$export$ee8b85b34b7d9cad,
    RingBufferGeometry: $b383cde4e0574ff6$export$ee8b85b34b7d9cad,
    ShapeGeometry: $b383cde4e0574ff6$export$233afc324766bed8,
    ShapeBufferGeometry: $b383cde4e0574ff6$export$233afc324766bed8,
    SphereGeometry: $b383cde4e0574ff6$export$d5d06a966fec4192,
    SphereBufferGeometry: $b383cde4e0574ff6$export$d5d06a966fec4192,
    TetrahedronGeometry: $b383cde4e0574ff6$export$369e08f62a796c65,
    TetrahedronBufferGeometry: $b383cde4e0574ff6$export$369e08f62a796c65,
    TorusGeometry: $b383cde4e0574ff6$export$19d55f905fa4f2cb,
    TorusBufferGeometry: $b383cde4e0574ff6$export$19d55f905fa4f2cb,
    TorusKnotGeometry: $b383cde4e0574ff6$export$2b32466f4274fe5c,
    TorusKnotBufferGeometry: $b383cde4e0574ff6$export$2b32466f4274fe5c,
    TubeGeometry: $b383cde4e0574ff6$export$d97a193ce44e691b,
    TubeBufferGeometry: $b383cde4e0574ff6$export$d97a193ce44e691b,
    WireframeGeometry: $b383cde4e0574ff6$export$4b739da06d24892b
});
/**
 * parameters = {
 *  color: <THREE.Color>
 * }
 */ var $b383cde4e0574ff6$export$e8564da406055a3 = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(ShadowMaterial, Material);
    var _super = (0, $a0Xbx.default)(ShadowMaterial);
    function ShadowMaterial(parameters) {
        (0, $dnGTK.default)(this, ShadowMaterial);
        var _this;
        _this = _super.call(this);
        _this.type = "ShadowMaterial";
        _this.color = new $b383cde4e0574ff6$export$892596cec99bc70e(0x000000);
        _this.transparent = true;
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(ShadowMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(ShadowMaterial.prototype), "copy", this).call(this, source);
                this.color.copy(source.color);
                return this;
            }
        }
    ]);
    return ShadowMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$e8564da406055a3.prototype.isShadowMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  roughness: <float>,
 *  metalness: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  roughnessMap: new THREE.Texture( <Image> ),
 *
 *  metalnessMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  envMapIntensity: <float>
 *
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  flatShading: <bool>
 * }
 */ var $b383cde4e0574ff6$export$f2980790215acccd = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(MeshStandardMaterial, Material);
    var _super = (0, $a0Xbx.default)(MeshStandardMaterial);
    function MeshStandardMaterial(parameters) {
        (0, $dnGTK.default)(this, MeshStandardMaterial);
        var _this;
        _this = _super.call(this);
        _this.defines = {
            "STANDARD": ""
        };
        _this.type = "MeshStandardMaterial";
        _this.color = new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff); // diffuse
        _this.roughness = 1.0;
        _this.metalness = 0.0;
        _this.map = null;
        _this.lightMap = null;
        _this.lightMapIntensity = 1.0;
        _this.aoMap = null;
        _this.aoMapIntensity = 1.0;
        _this.emissive = new $b383cde4e0574ff6$export$892596cec99bc70e(0x000000);
        _this.emissiveIntensity = 1.0;
        _this.emissiveMap = null;
        _this.bumpMap = null;
        _this.bumpScale = 1;
        _this.normalMap = null;
        _this.normalMapType = $b383cde4e0574ff6$export$2852a58ebdac27b8;
        _this.normalScale = new $b383cde4e0574ff6$export$c977b3e384af9ae1(1, 1);
        _this.displacementMap = null;
        _this.displacementScale = 1;
        _this.displacementBias = 0;
        _this.roughnessMap = null;
        _this.metalnessMap = null;
        _this.alphaMap = null;
        _this.envMap = null;
        _this.envMapIntensity = 1.0;
        _this.refractionRatio = 0.98;
        _this.wireframe = false;
        _this.wireframeLinewidth = 1;
        _this.wireframeLinecap = "round";
        _this.wireframeLinejoin = "round";
        _this.flatShading = false;
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(MeshStandardMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(MeshStandardMaterial.prototype), "copy", this).call(this, source);
                this.defines = {
                    "STANDARD": ""
                };
                this.color.copy(source.color);
                this.roughness = source.roughness;
                this.metalness = source.metalness;
                this.map = source.map;
                this.lightMap = source.lightMap;
                this.lightMapIntensity = source.lightMapIntensity;
                this.aoMap = source.aoMap;
                this.aoMapIntensity = source.aoMapIntensity;
                this.emissive.copy(source.emissive);
                this.emissiveMap = source.emissiveMap;
                this.emissiveIntensity = source.emissiveIntensity;
                this.bumpMap = source.bumpMap;
                this.bumpScale = source.bumpScale;
                this.normalMap = source.normalMap;
                this.normalMapType = source.normalMapType;
                this.normalScale.copy(source.normalScale);
                this.displacementMap = source.displacementMap;
                this.displacementScale = source.displacementScale;
                this.displacementBias = source.displacementBias;
                this.roughnessMap = source.roughnessMap;
                this.metalnessMap = source.metalnessMap;
                this.alphaMap = source.alphaMap;
                this.envMap = source.envMap;
                this.envMapIntensity = source.envMapIntensity;
                this.refractionRatio = source.refractionRatio;
                this.wireframe = source.wireframe;
                this.wireframeLinewidth = source.wireframeLinewidth;
                this.wireframeLinecap = source.wireframeLinecap;
                this.wireframeLinejoin = source.wireframeLinejoin;
                this.flatShading = source.flatShading;
                return this;
            }
        }
    ]);
    return MeshStandardMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$f2980790215acccd.prototype.isMeshStandardMaterial = true;
/**
 * parameters = {
 *  clearcoat: <float>,
 *  clearcoatMap: new THREE.Texture( <Image> ),
 *  clearcoatRoughness: <float>,
 *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),
 *  clearcoatNormalScale: <Vector2>,
 *  clearcoatNormalMap: new THREE.Texture( <Image> ),
 *
 *  ior: <float>,
 *  reflectivity: <float>,
 *
 *  sheen: <float>,
 *  sheenColor: <Color>,
 *  sheenColorMap: new THREE.Texture( <Image> ),
 *  sheenRoughness: <float>,
 *  sheenRoughnessMap: new THREE.Texture( <Image> ),
 *
 *  transmission: <float>,
 *  transmissionMap: new THREE.Texture( <Image> ),
 *
 *  thickness: <float>,
 *  thicknessMap: new THREE.Texture( <Image> ),
 *  attenuationDistance: <float>,
 *  attenuationColor: <Color>,
 *
 *  specularIntensity: <float>,
 *  specularIntensityMap: new THREE.Texture( <Image> ),
 *  specularColor: <Color>,
 *  specularColorMap: new THREE.Texture( <Image> )
 * }
 */ var $b383cde4e0574ff6$export$28d04986c4269c9f = /*#__PURE__*/ function(MeshStandardMaterial) {
    "use strict";
    (0, $gQI4D.default)(MeshPhysicalMaterial, MeshStandardMaterial);
    var _super = (0, $a0Xbx.default)(MeshPhysicalMaterial);
    function MeshPhysicalMaterial(parameters) {
        (0, $dnGTK.default)(this, MeshPhysicalMaterial);
        var _this;
        _this = _super.call(this);
        _this.defines = {
            "STANDARD": "",
            "PHYSICAL": ""
        };
        _this.type = "MeshPhysicalMaterial";
        _this.clearcoatMap = null;
        _this.clearcoatRoughness = 0.0;
        _this.clearcoatRoughnessMap = null;
        _this.clearcoatNormalScale = new $b383cde4e0574ff6$export$c977b3e384af9ae1(1, 1);
        _this.clearcoatNormalMap = null;
        _this.ior = 1.5;
        Object.defineProperty((0, $4enQD.default)(_this), "reflectivity", {
            get: function get() {
                return $b383cde4e0574ff6$var$clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
            },
            set: function set(reflectivity) {
                this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
            }
        });
        _this.sheenColor = new $b383cde4e0574ff6$export$892596cec99bc70e(0x000000);
        _this.sheenColorMap = null;
        _this.sheenRoughness = 1.0;
        _this.sheenRoughnessMap = null;
        _this.transmissionMap = null;
        _this.thickness = 0.01;
        _this.thicknessMap = null;
        _this.attenuationDistance = 0.0;
        _this.attenuationColor = new $b383cde4e0574ff6$export$892596cec99bc70e(1, 1, 1);
        _this.specularIntensity = 1.0;
        _this.specularIntensityMap = null;
        _this.specularColor = new $b383cde4e0574ff6$export$892596cec99bc70e(1, 1, 1);
        _this.specularColorMap = null;
        _this._sheen = 0.0;
        _this._clearcoat = 0;
        _this._transmission = 0;
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(MeshPhysicalMaterial, [
        {
            key: "sheen",
            get: function get() {
                return this._sheen;
            },
            set: function set(value) {
                if (this._sheen > 0 !== value > 0) this.version++;
                this._sheen = value;
            }
        },
        {
            key: "clearcoat",
            get: function get() {
                return this._clearcoat;
            },
            set: function set(value) {
                if (this._clearcoat > 0 !== value > 0) this.version++;
                this._clearcoat = value;
            }
        },
        {
            key: "transmission",
            get: function get() {
                return this._transmission;
            },
            set: function set(value) {
                if (this._transmission > 0 !== value > 0) this.version++;
                this._transmission = value;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(MeshPhysicalMaterial.prototype), "copy", this).call(this, source);
                this.defines = {
                    "STANDARD": "",
                    "PHYSICAL": ""
                };
                this.clearcoat = source.clearcoat;
                this.clearcoatMap = source.clearcoatMap;
                this.clearcoatRoughness = source.clearcoatRoughness;
                this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
                this.clearcoatNormalMap = source.clearcoatNormalMap;
                this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
                this.ior = source.ior;
                this.sheen = source.sheen;
                this.sheenColor.copy(source.sheenColor);
                this.sheenColorMap = source.sheenColorMap;
                this.sheenRoughness = source.sheenRoughness;
                this.sheenRoughnessMap = source.sheenRoughnessMap;
                this.transmission = source.transmission;
                this.transmissionMap = source.transmissionMap;
                this.thickness = source.thickness;
                this.thicknessMap = source.thicknessMap;
                this.attenuationDistance = source.attenuationDistance;
                this.attenuationColor.copy(source.attenuationColor);
                this.specularIntensity = source.specularIntensity;
                this.specularIntensityMap = source.specularIntensityMap;
                this.specularColor.copy(source.specularColor);
                this.specularColorMap = source.specularColorMap;
                return this;
            }
        }
    ]);
    return MeshPhysicalMaterial;
}($b383cde4e0574ff6$export$f2980790215acccd);
$b383cde4e0574ff6$export$28d04986c4269c9f.prototype.isMeshPhysicalMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.MultiplyOperation,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  flatShading: <bool>
 * }
 */ var $b383cde4e0574ff6$export$24c72f71cbaf0678 = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(MeshPhongMaterial, Material);
    var _super = (0, $a0Xbx.default)(MeshPhongMaterial);
    function MeshPhongMaterial(parameters) {
        (0, $dnGTK.default)(this, MeshPhongMaterial);
        var _this;
        _this = _super.call(this);
        _this.type = "MeshPhongMaterial";
        _this.color = new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff); // diffuse
        _this.specular = new $b383cde4e0574ff6$export$892596cec99bc70e(0x111111);
        _this.shininess = 30;
        _this.map = null;
        _this.lightMap = null;
        _this.lightMapIntensity = 1.0;
        _this.aoMap = null;
        _this.aoMapIntensity = 1.0;
        _this.emissive = new $b383cde4e0574ff6$export$892596cec99bc70e(0x000000);
        _this.emissiveIntensity = 1.0;
        _this.emissiveMap = null;
        _this.bumpMap = null;
        _this.bumpScale = 1;
        _this.normalMap = null;
        _this.normalMapType = $b383cde4e0574ff6$export$2852a58ebdac27b8;
        _this.normalScale = new $b383cde4e0574ff6$export$c977b3e384af9ae1(1, 1);
        _this.displacementMap = null;
        _this.displacementScale = 1;
        _this.displacementBias = 0;
        _this.specularMap = null;
        _this.alphaMap = null;
        _this.envMap = null;
        _this.combine = $b383cde4e0574ff6$export$e50ac29801f1774d;
        _this.reflectivity = 1;
        _this.refractionRatio = 0.98;
        _this.wireframe = false;
        _this.wireframeLinewidth = 1;
        _this.wireframeLinecap = "round";
        _this.wireframeLinejoin = "round";
        _this.flatShading = false;
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(MeshPhongMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(MeshPhongMaterial.prototype), "copy", this).call(this, source);
                this.color.copy(source.color);
                this.specular.copy(source.specular);
                this.shininess = source.shininess;
                this.map = source.map;
                this.lightMap = source.lightMap;
                this.lightMapIntensity = source.lightMapIntensity;
                this.aoMap = source.aoMap;
                this.aoMapIntensity = source.aoMapIntensity;
                this.emissive.copy(source.emissive);
                this.emissiveMap = source.emissiveMap;
                this.emissiveIntensity = source.emissiveIntensity;
                this.bumpMap = source.bumpMap;
                this.bumpScale = source.bumpScale;
                this.normalMap = source.normalMap;
                this.normalMapType = source.normalMapType;
                this.normalScale.copy(source.normalScale);
                this.displacementMap = source.displacementMap;
                this.displacementScale = source.displacementScale;
                this.displacementBias = source.displacementBias;
                this.specularMap = source.specularMap;
                this.alphaMap = source.alphaMap;
                this.envMap = source.envMap;
                this.combine = source.combine;
                this.reflectivity = source.reflectivity;
                this.refractionRatio = source.refractionRatio;
                this.wireframe = source.wireframe;
                this.wireframeLinewidth = source.wireframeLinewidth;
                this.wireframeLinecap = source.wireframeLinecap;
                this.wireframeLinejoin = source.wireframeLinejoin;
                this.flatShading = source.flatShading;
                return this;
            }
        }
    ]);
    return MeshPhongMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$24c72f71cbaf0678.prototype.isMeshPhongMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *
 *  map: new THREE.Texture( <Image> ),
 *  gradientMap: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 * }
 */ var $b383cde4e0574ff6$export$df893cf97e765622 = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(MeshToonMaterial, Material);
    var _super = (0, $a0Xbx.default)(MeshToonMaterial);
    function MeshToonMaterial(parameters) {
        (0, $dnGTK.default)(this, MeshToonMaterial);
        var _this;
        _this = _super.call(this);
        _this.defines = {
            "TOON": ""
        };
        _this.type = "MeshToonMaterial";
        _this.color = new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff);
        _this.map = null;
        _this.gradientMap = null;
        _this.lightMap = null;
        _this.lightMapIntensity = 1.0;
        _this.aoMap = null;
        _this.aoMapIntensity = 1.0;
        _this.emissive = new $b383cde4e0574ff6$export$892596cec99bc70e(0x000000);
        _this.emissiveIntensity = 1.0;
        _this.emissiveMap = null;
        _this.bumpMap = null;
        _this.bumpScale = 1;
        _this.normalMap = null;
        _this.normalMapType = $b383cde4e0574ff6$export$2852a58ebdac27b8;
        _this.normalScale = new $b383cde4e0574ff6$export$c977b3e384af9ae1(1, 1);
        _this.displacementMap = null;
        _this.displacementScale = 1;
        _this.displacementBias = 0;
        _this.alphaMap = null;
        _this.wireframe = false;
        _this.wireframeLinewidth = 1;
        _this.wireframeLinecap = "round";
        _this.wireframeLinejoin = "round";
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(MeshToonMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(MeshToonMaterial.prototype), "copy", this).call(this, source);
                this.color.copy(source.color);
                this.map = source.map;
                this.gradientMap = source.gradientMap;
                this.lightMap = source.lightMap;
                this.lightMapIntensity = source.lightMapIntensity;
                this.aoMap = source.aoMap;
                this.aoMapIntensity = source.aoMapIntensity;
                this.emissive.copy(source.emissive);
                this.emissiveMap = source.emissiveMap;
                this.emissiveIntensity = source.emissiveIntensity;
                this.bumpMap = source.bumpMap;
                this.bumpScale = source.bumpScale;
                this.normalMap = source.normalMap;
                this.normalMapType = source.normalMapType;
                this.normalScale.copy(source.normalScale);
                this.displacementMap = source.displacementMap;
                this.displacementScale = source.displacementScale;
                this.displacementBias = source.displacementBias;
                this.alphaMap = source.alphaMap;
                this.wireframe = source.wireframe;
                this.wireframeLinewidth = source.wireframeLinewidth;
                this.wireframeLinecap = source.wireframeLinecap;
                this.wireframeLinejoin = source.wireframeLinejoin;
                return this;
            }
        }
    ]);
    return MeshToonMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$df893cf97e765622.prototype.isMeshToonMaterial = true;
/**
 * parameters = {
 *  opacity: <float>,
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 *
 *  flatShading: <bool>
 * }
 */ var $b383cde4e0574ff6$export$bfe8c0a091f41ae7 = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(MeshNormalMaterial, Material);
    var _super = (0, $a0Xbx.default)(MeshNormalMaterial);
    function MeshNormalMaterial(parameters) {
        (0, $dnGTK.default)(this, MeshNormalMaterial);
        var _this;
        _this = _super.call(this);
        _this.type = "MeshNormalMaterial";
        _this.bumpMap = null;
        _this.bumpScale = 1;
        _this.normalMap = null;
        _this.normalMapType = $b383cde4e0574ff6$export$2852a58ebdac27b8;
        _this.normalScale = new $b383cde4e0574ff6$export$c977b3e384af9ae1(1, 1);
        _this.displacementMap = null;
        _this.displacementScale = 1;
        _this.displacementBias = 0;
        _this.wireframe = false;
        _this.wireframeLinewidth = 1;
        _this.fog = false;
        _this.flatShading = false;
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(MeshNormalMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(MeshNormalMaterial.prototype), "copy", this).call(this, source);
                this.bumpMap = source.bumpMap;
                this.bumpScale = source.bumpScale;
                this.normalMap = source.normalMap;
                this.normalMapType = source.normalMapType;
                this.normalScale.copy(source.normalScale);
                this.displacementMap = source.displacementMap;
                this.displacementScale = source.displacementScale;
                this.displacementBias = source.displacementBias;
                this.wireframe = source.wireframe;
                this.wireframeLinewidth = source.wireframeLinewidth;
                this.flatShading = source.flatShading;
                return this;
            }
        }
    ]);
    return MeshNormalMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$bfe8c0a091f41ae7.prototype.isMeshNormalMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 * }
 */ var $b383cde4e0574ff6$export$5023a9a8114806b8 = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(MeshLambertMaterial, Material);
    var _super = (0, $a0Xbx.default)(MeshLambertMaterial);
    function MeshLambertMaterial(parameters) {
        (0, $dnGTK.default)(this, MeshLambertMaterial);
        var _this;
        _this = _super.call(this);
        _this.type = "MeshLambertMaterial";
        _this.color = new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff); // diffuse
        _this.map = null;
        _this.lightMap = null;
        _this.lightMapIntensity = 1.0;
        _this.aoMap = null;
        _this.aoMapIntensity = 1.0;
        _this.emissive = new $b383cde4e0574ff6$export$892596cec99bc70e(0x000000);
        _this.emissiveIntensity = 1.0;
        _this.emissiveMap = null;
        _this.specularMap = null;
        _this.alphaMap = null;
        _this.envMap = null;
        _this.combine = $b383cde4e0574ff6$export$e50ac29801f1774d;
        _this.reflectivity = 1;
        _this.refractionRatio = 0.98;
        _this.wireframe = false;
        _this.wireframeLinewidth = 1;
        _this.wireframeLinecap = "round";
        _this.wireframeLinejoin = "round";
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(MeshLambertMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(MeshLambertMaterial.prototype), "copy", this).call(this, source);
                this.color.copy(source.color);
                this.map = source.map;
                this.lightMap = source.lightMap;
                this.lightMapIntensity = source.lightMapIntensity;
                this.aoMap = source.aoMap;
                this.aoMapIntensity = source.aoMapIntensity;
                this.emissive.copy(source.emissive);
                this.emissiveMap = source.emissiveMap;
                this.emissiveIntensity = source.emissiveIntensity;
                this.specularMap = source.specularMap;
                this.alphaMap = source.alphaMap;
                this.envMap = source.envMap;
                this.combine = source.combine;
                this.reflectivity = source.reflectivity;
                this.refractionRatio = source.refractionRatio;
                this.wireframe = source.wireframe;
                this.wireframeLinewidth = source.wireframeLinewidth;
                this.wireframeLinecap = source.wireframeLinecap;
                this.wireframeLinejoin = source.wireframeLinejoin;
                return this;
            }
        }
    ]);
    return MeshLambertMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$5023a9a8114806b8.prototype.isMeshLambertMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  matcap: new THREE.Texture( <Image> ),
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  flatShading: <bool>
 * }
 */ var $b383cde4e0574ff6$export$6f5fef6235ec12ee = /*#__PURE__*/ function(Material) {
    "use strict";
    (0, $gQI4D.default)(MeshMatcapMaterial, Material);
    var _super = (0, $a0Xbx.default)(MeshMatcapMaterial);
    function MeshMatcapMaterial(parameters) {
        (0, $dnGTK.default)(this, MeshMatcapMaterial);
        var _this;
        _this = _super.call(this);
        _this.defines = {
            "MATCAP": ""
        };
        _this.type = "MeshMatcapMaterial";
        _this.color = new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff); // diffuse
        _this.matcap = null;
        _this.map = null;
        _this.bumpMap = null;
        _this.bumpScale = 1;
        _this.normalMap = null;
        _this.normalMapType = $b383cde4e0574ff6$export$2852a58ebdac27b8;
        _this.normalScale = new $b383cde4e0574ff6$export$c977b3e384af9ae1(1, 1);
        _this.displacementMap = null;
        _this.displacementScale = 1;
        _this.displacementBias = 0;
        _this.alphaMap = null;
        _this.flatShading = false;
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(MeshMatcapMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(MeshMatcapMaterial.prototype), "copy", this).call(this, source);
                this.defines = {
                    "MATCAP": ""
                };
                this.color.copy(source.color);
                this.matcap = source.matcap;
                this.map = source.map;
                this.bumpMap = source.bumpMap;
                this.bumpScale = source.bumpScale;
                this.normalMap = source.normalMap;
                this.normalMapType = source.normalMapType;
                this.normalScale.copy(source.normalScale);
                this.displacementMap = source.displacementMap;
                this.displacementScale = source.displacementScale;
                this.displacementBias = source.displacementBias;
                this.alphaMap = source.alphaMap;
                this.flatShading = source.flatShading;
                return this;
            }
        }
    ]);
    return MeshMatcapMaterial;
}($b383cde4e0574ff6$export$a2d8b23205c25948);
$b383cde4e0574ff6$export$6f5fef6235ec12ee.prototype.isMeshMatcapMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>
 * }
 */ var $b383cde4e0574ff6$export$327886a3efaeaebe = /*#__PURE__*/ function(LineBasicMaterial) {
    "use strict";
    (0, $gQI4D.default)(LineDashedMaterial, LineBasicMaterial);
    var _super = (0, $a0Xbx.default)(LineDashedMaterial);
    function LineDashedMaterial(parameters) {
        (0, $dnGTK.default)(this, LineDashedMaterial);
        var _this;
        _this = _super.call(this);
        _this.type = "LineDashedMaterial";
        _this.scale = 1;
        _this.dashSize = 3;
        _this.gapSize = 1;
        _this.setValues(parameters);
        return _this;
    }
    (0, $9SLyD.default)(LineDashedMaterial, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(LineDashedMaterial.prototype), "copy", this).call(this, source);
                this.scale = source.scale;
                this.dashSize = source.dashSize;
                this.gapSize = source.gapSize;
                return this;
            }
        }
    ]);
    return LineDashedMaterial;
}($b383cde4e0574ff6$export$fbaaa33907730a0c);
$b383cde4e0574ff6$export$327886a3efaeaebe.prototype.isLineDashedMaterial = true;
var $b383cde4e0574ff6$var$Materials = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ShadowMaterial: $b383cde4e0574ff6$export$e8564da406055a3,
    SpriteMaterial: $b383cde4e0574ff6$export$5ec7dd1c6994bf8e,
    RawShaderMaterial: $b383cde4e0574ff6$export$21c421a2e1df9d22,
    ShaderMaterial: $b383cde4e0574ff6$export$83c7d75d550a8b0d,
    PointsMaterial: $b383cde4e0574ff6$export$a178c45366ce5d6b,
    MeshPhysicalMaterial: $b383cde4e0574ff6$export$28d04986c4269c9f,
    MeshStandardMaterial: $b383cde4e0574ff6$export$f2980790215acccd,
    MeshPhongMaterial: $b383cde4e0574ff6$export$24c72f71cbaf0678,
    MeshToonMaterial: $b383cde4e0574ff6$export$df893cf97e765622,
    MeshNormalMaterial: $b383cde4e0574ff6$export$bfe8c0a091f41ae7,
    MeshLambertMaterial: $b383cde4e0574ff6$export$5023a9a8114806b8,
    MeshDepthMaterial: $b383cde4e0574ff6$export$2698c22ec13825db,
    MeshDistanceMaterial: $b383cde4e0574ff6$export$33e187ed002f2a19,
    MeshBasicMaterial: $b383cde4e0574ff6$export$55cbcc9b622fe1f5,
    MeshMatcapMaterial: $b383cde4e0574ff6$export$6f5fef6235ec12ee,
    LineDashedMaterial: $b383cde4e0574ff6$export$327886a3efaeaebe,
    LineBasicMaterial: $b383cde4e0574ff6$export$fbaaa33907730a0c,
    Material: $b383cde4e0574ff6$export$a2d8b23205c25948
});
var $b383cde4e0574ff6$export$7ee8caa573e71ad1 = {
    // same as Array.prototype.slice, but also works on typed arrays
    arraySlice: function arraySlice(array, from, to) {
        if ($b383cde4e0574ff6$export$7ee8caa573e71ad1.isTypedArray(array)) // in ios9 array.subarray(from, undefined) will return empty array
        // but array.subarray(from) or array.subarray(from, len) is correct
        return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));
        return array.slice(from, to);
    },
    // converts an array to a specific type
    convertArray: function convertArray(array, type, forceClone) {
        if (!array || // let 'undefined' and 'null' pass
        !forceClone && array.constructor === type) return array;
        if (typeof type.BYTES_PER_ELEMENT === "number") return new type(array); // create typed array
        return Array.prototype.slice.call(array); // create Array
    },
    isTypedArray: function isTypedArray(object) {
        return ArrayBuffer.isView(object) && !(object instanceof DataView);
    },
    // returns an array by which times and values can be sorted
    getKeyframeOrder: function getKeyframeOrder(times) {
        var compareTime = function compareTime(i, j) {
            return times[i] - times[j];
        };
        var n = times.length;
        var result = new Array(n);
        for(var i = 0; i !== n; ++i)result[i] = i;
        result.sort(compareTime);
        return result;
    },
    // uses the array previously returned by 'getKeyframeOrder' to sort data
    sortedArray: function sortedArray(values, stride, order) {
        var nValues = values.length;
        var result = new values.constructor(nValues);
        for(var i = 0, dstOffset = 0; dstOffset !== nValues; ++i){
            var srcOffset = order[i] * stride;
            for(var j = 0; j !== stride; ++j)result[dstOffset++] = values[srcOffset + j];
        }
        return result;
    },
    // function for parsing AOS keyframe formats
    flattenJSON: function flattenJSON(jsonKeys, times, values, valuePropertyName) {
        var i = 1, key = jsonKeys[0];
        while(key !== undefined && key[valuePropertyName] === undefined)key = jsonKeys[i++];
        if (key === undefined) return; // no data
        var value = key[valuePropertyName];
        if (value === undefined) return; // no data
        if (Array.isArray(value)) do {
            value = key[valuePropertyName];
            if (value !== undefined) {
                times.push(key.time);
                values.push.apply(values, value); // push all elements
            }
            key = jsonKeys[i++];
        }while (key !== undefined);
        else if (value.toArray !== undefined) // ...assume THREE.Math-ish
        do {
            value = key[valuePropertyName];
            if (value !== undefined) {
                times.push(key.time);
                value.toArray(values, values.length);
            }
            key = jsonKeys[i++];
        }while (key !== undefined);
        else // otherwise push as-is
        do {
            value = key[valuePropertyName];
            if (value !== undefined) {
                times.push(key.time);
                values.push(value);
            }
            key = jsonKeys[i++];
        }while (key !== undefined);
    },
    subclip: function subclip(sourceClip, name, startFrame, endFrame) {
        var fps = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 30;
        var clip = sourceClip.clone();
        clip.name = name;
        var tracks = [];
        for(var i = 0; i < clip.tracks.length; ++i){
            var track = clip.tracks[i];
            var valueSize = track.getValueSize();
            var times = [];
            var values = [];
            for(var j = 0; j < track.times.length; ++j){
                var frame = track.times[j] * fps;
                if (frame < startFrame || frame >= endFrame) continue;
                times.push(track.times[j]);
                for(var k = 0; k < valueSize; ++k)values.push(track.values[j * valueSize + k]);
            }
            if (times.length === 0) continue;
            track.times = $b383cde4e0574ff6$export$7ee8caa573e71ad1.convertArray(times, track.times.constructor);
            track.values = $b383cde4e0574ff6$export$7ee8caa573e71ad1.convertArray(values, track.values.constructor);
            tracks.push(track);
        }
        clip.tracks = tracks;
        // find minimum .times value across all tracks in the trimmed clip
        var minStartTime = Infinity;
        for(var i1 = 0; i1 < clip.tracks.length; ++i1)if (minStartTime > clip.tracks[i1].times[0]) minStartTime = clip.tracks[i1].times[0];
        // shift all tracks such that clip begins at t=0
        for(var i2 = 0; i2 < clip.tracks.length; ++i2)clip.tracks[i2].shift(-1 * minStartTime);
        clip.resetDuration();
        return clip;
    },
    makeClipAdditive: function makeClipAdditive(targetClip) {
        var _loop = function(i) {
            var referenceTrack = referenceClip.tracks[i];
            var referenceTrackType = referenceTrack.ValueTypeName;
            // Skip this track if it's non-numeric
            if (referenceTrackType === "bool" || referenceTrackType === "string") return "continue";
            // Find the track in the target clip whose name and type matches the reference track
            var targetTrack = targetClip.tracks.find(function(track) {
                return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
            });
            if (targetTrack === undefined) return "continue";
            var referenceOffset = 0;
            var referenceValueSize = referenceTrack.getValueSize();
            if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) referenceOffset = referenceValueSize / 3;
            var targetOffset = 0;
            var targetValueSize = targetTrack.getValueSize();
            if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) targetOffset = targetValueSize / 3;
            var lastIndex = referenceTrack.times.length - 1;
            var referenceValue = void 0;
            // Find the value to subtract out of the track
            if (referenceTime <= referenceTrack.times[0]) {
                // Reference frame is earlier than the first keyframe, so just use the first keyframe
                var startIndex = referenceOffset;
                var endIndex = referenceValueSize - referenceOffset;
                referenceValue = $b383cde4e0574ff6$export$7ee8caa573e71ad1.arraySlice(referenceTrack.values, startIndex, endIndex);
            } else if (referenceTime >= referenceTrack.times[lastIndex]) {
                // Reference frame is after the last keyframe, so just use the last keyframe
                var startIndex1 = lastIndex * referenceValueSize + referenceOffset;
                var endIndex1 = startIndex1 + referenceValueSize - referenceOffset;
                referenceValue = $b383cde4e0574ff6$export$7ee8caa573e71ad1.arraySlice(referenceTrack.values, startIndex1, endIndex1);
            } else {
                // Interpolate to the reference value
                var interpolant = referenceTrack.createInterpolant();
                var startIndex2 = referenceOffset;
                var endIndex2 = referenceValueSize - referenceOffset;
                interpolant.evaluate(referenceTime);
                referenceValue = $b383cde4e0574ff6$export$7ee8caa573e71ad1.arraySlice(interpolant.resultBuffer, startIndex2, endIndex2);
            }
            // Conjugate the quaternion
            if (referenceTrackType === "quaternion") {
                var referenceQuat = new $b383cde4e0574ff6$export$23d6a54f0bbc85a3().fromArray(referenceValue).normalize().conjugate();
                referenceQuat.toArray(referenceValue);
            }
            // Subtract the reference value from all of the track values
            var numTimes = targetTrack.times.length;
            for(var j = 0; j < numTimes; ++j){
                var valueStart = j * targetValueSize + targetOffset;
                if (referenceTrackType === "quaternion") // Multiply the conjugate for quaternion track types
                $b383cde4e0574ff6$export$23d6a54f0bbc85a3.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
                else {
                    var valueEnd = targetValueSize - targetOffset * 2;
                    // Subtract each value for all other numeric track types
                    for(var k = 0; k < valueEnd; ++k)targetTrack.values[valueStart + k] -= referenceValue[k];
                }
            }
        };
        var referenceFrame = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, referenceClip = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : targetClip, fps = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 30;
        if (fps <= 0) fps = 30;
        var numTracks = referenceClip.tracks.length;
        var referenceTime = referenceFrame / fps;
        // Make each track's values relative to the values at the reference frame
        for(var i = 0; i < numTracks; ++i)_loop(i);
        targetClip.blendMode = $b383cde4e0574ff6$export$d875e029ef558d3;
        return targetClip;
    }
};
/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 */ var $b383cde4e0574ff6$export$b558baee9c0f72d3 = /*#__PURE__*/ function() {
    "use strict";
    function Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        (0, $dnGTK.default)(this, Interpolant);
        this.parameterPositions = parameterPositions;
        this._cachedIndex = 0;
        this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);
        this.sampleValues = sampleValues;
        this.valueSize = sampleSize;
        this.settings = null;
        this.DefaultSettings_ = {};
    }
    (0, $9SLyD.default)(Interpolant, [
        {
            key: "evaluate",
            value: function evaluate(t) {
                var pp = this.parameterPositions;
                var i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
                validate_interval: {
                    seek: {
                        var right;
                        linear_scan: {
                            //- See http://jsperf.com/comparison-to-undefined/3
                            //- slower code:
                            //-
                            //- 				if ( t >= t1 || t1 === undefined ) {
                            forward_scan: if (!(t < t1)) {
                                for(var giveUpAt = i1 + 2;;){
                                    if (t1 === undefined) {
                                        if (t < t0) break forward_scan;
                                        // after end
                                        i1 = pp.length;
                                        this._cachedIndex = i1;
                                        return this.afterEnd_(i1 - 1, t, t0);
                                    }
                                    if (i1 === giveUpAt) break; // this loop
                                    t0 = t1;
                                    t1 = pp[++i1];
                                    if (t < t1) break seek;
                                }
                                // prepare binary search on the right side of the index
                                right = pp.length;
                                break linear_scan;
                            }
                            //- slower code:
                            //-					if ( t < t0 || t0 === undefined ) {
                            if (!(t >= t0)) {
                                // looping?
                                var t1global = pp[1];
                                if (t < t1global) {
                                    i1 = 2; // + 1, using the scan for the details
                                    t0 = t1global;
                                }
                                // linear reverse scan
                                for(var giveUpAt1 = i1 - 2;;){
                                    if (t0 === undefined) {
                                        // before start
                                        this._cachedIndex = 0;
                                        return this.beforeStart_(0, t, t1);
                                    }
                                    if (i1 === giveUpAt1) break; // this loop
                                    t1 = t0;
                                    t0 = pp[--i1 - 1];
                                    if (t >= t0) break seek;
                                }
                                // prepare binary search on the left side of the index
                                right = i1;
                                i1 = 0;
                                break linear_scan;
                            }
                            break validate_interval;
                        } // linear scan
                        // binary search
                        while(i1 < right){
                            var mid = i1 + right >>> 1;
                            if (t < pp[mid]) right = mid;
                            else i1 = mid + 1;
                        }
                        t1 = pp[i1];
                        t0 = pp[i1 - 1];
                        // check boundary cases, again
                        if (t0 === undefined) {
                            this._cachedIndex = 0;
                            return this.beforeStart_(0, t, t1);
                        }
                        if (t1 === undefined) {
                            i1 = pp.length;
                            this._cachedIndex = i1;
                            return this.afterEnd_(i1 - 1, t0, t);
                        }
                    } // seek
                    this._cachedIndex = i1;
                    this.intervalChanged_(i1, t0, t1);
                } // validate_interval
                return this.interpolate_(i1, t0, t, t1);
            }
        },
        {
            key: "getSettings_",
            value: function getSettings_() {
                return this.settings || this.DefaultSettings_;
            }
        },
        {
            key: "copySampleValue_",
            value: function copySampleValue_(index) {
                // copies a sample value to the result buffer
                var result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
                for(var i = 0; i !== stride; ++i)result[i] = values[offset + i];
                return result;
            }
        },
        {
            // Template methods for derived classes:
            key: "interpolate_",
            value: function interpolate_() {
                throw new Error("call to abstract method");
            // implementations shall return this.resultBuffer
            }
        },
        {
            key: "intervalChanged_",
            value: function intervalChanged_() {
            // empty
            }
        }
    ]);
    return Interpolant;
}();
// ALIAS DEFINITIONS
$b383cde4e0574ff6$export$b558baee9c0f72d3.prototype.beforeStart_ = $b383cde4e0574ff6$export$b558baee9c0f72d3.prototype.copySampleValue_;
$b383cde4e0574ff6$export$b558baee9c0f72d3.prototype.afterEnd_ = $b383cde4e0574ff6$export$b558baee9c0f72d3.prototype.copySampleValue_;
/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 */ var $b383cde4e0574ff6$export$3646682e7a3959 = /*#__PURE__*/ function(Interpolant) {
    "use strict";
    (0, $gQI4D.default)(CubicInterpolant, Interpolant);
    var _super = (0, $a0Xbx.default)(CubicInterpolant);
    function CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        (0, $dnGTK.default)(this, CubicInterpolant);
        var _this;
        _this = _super.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
        _this._weightPrev = -0;
        _this._offsetPrev = -0;
        _this._weightNext = -0;
        _this._offsetNext = -0;
        _this.DefaultSettings_ = {
            endingStart: $b383cde4e0574ff6$export$7f795934b84ab523,
            endingEnd: $b383cde4e0574ff6$export$7f795934b84ab523
        };
        return _this;
    }
    (0, $9SLyD.default)(CubicInterpolant, [
        {
            key: "intervalChanged_",
            value: function intervalChanged_(i1, t0, t1) {
                var pp = this.parameterPositions;
                var iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
                if (tPrev === undefined) switch(this.getSettings_().endingStart){
                    case $b383cde4e0574ff6$export$24a4ccb5099273b5:
                        // f'(t0) = 0
                        iPrev = i1;
                        tPrev = 2 * t0 - t1;
                        break;
                    case $b383cde4e0574ff6$export$8e8c3ecdcd8e1fee:
                        // use the other end of the curve
                        iPrev = pp.length - 2;
                        tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
                        break;
                    default:
                        // f''(t0) = 0 a.k.a. Natural Spline
                        iPrev = i1;
                        tPrev = t1;
                }
                if (tNext === undefined) switch(this.getSettings_().endingEnd){
                    case $b383cde4e0574ff6$export$24a4ccb5099273b5:
                        // f'(tN) = 0
                        iNext = i1;
                        tNext = 2 * t1 - t0;
                        break;
                    case $b383cde4e0574ff6$export$8e8c3ecdcd8e1fee:
                        // use the other end of the curve
                        iNext = 1;
                        tNext = t1 + pp[1] - pp[0];
                        break;
                    default:
                        // f''(tN) = 0, a.k.a. Natural Spline
                        iNext = i1 - 1;
                        tNext = t0;
                }
                var halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
                this._weightPrev = halfDt / (t0 - tPrev);
                this._weightNext = halfDt / (tNext - t1);
                this._offsetPrev = iPrev * stride;
                this._offsetNext = iNext * stride;
            }
        },
        {
            key: "interpolate_",
            value: function interpolate_(i1, t0, t, t1) {
                var result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
                // evaluate polynomials
                var sP = -wP * ppp + 2 * wP * pp - wP * p;
                var s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
                var s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
                var sN = wN * ppp - wN * pp;
                // combine data linearly
                for(var i = 0; i !== stride; ++i)result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
                return result;
            }
        }
    ]);
    return CubicInterpolant;
}($b383cde4e0574ff6$export$b558baee9c0f72d3);
var $b383cde4e0574ff6$export$a8e6009059f51e1a = /*#__PURE__*/ function(Interpolant) {
    "use strict";
    (0, $gQI4D.default)(LinearInterpolant, Interpolant);
    var _super = (0, $a0Xbx.default)(LinearInterpolant);
    function LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        (0, $dnGTK.default)(this, LinearInterpolant);
        return _super.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    (0, $9SLyD.default)(LinearInterpolant, [
        {
            key: "interpolate_",
            value: function interpolate_(i1, t0, t, t1) {
                var result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
                for(var i = 0; i !== stride; ++i)result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
                return result;
            }
        }
    ]);
    return LinearInterpolant;
}($b383cde4e0574ff6$export$b558baee9c0f72d3);
/**
 *
 * Interpolant that evaluates to the sample value at the position preceeding
 * the parameter.
 */ var $b383cde4e0574ff6$export$fb9758ef7ef8d5cc = /*#__PURE__*/ function(Interpolant) {
    "use strict";
    (0, $gQI4D.default)(DiscreteInterpolant, Interpolant);
    var _super = (0, $a0Xbx.default)(DiscreteInterpolant);
    function DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        (0, $dnGTK.default)(this, DiscreteInterpolant);
        return _super.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    (0, $9SLyD.default)(DiscreteInterpolant, [
        {
            key: "interpolate_",
            value: function interpolate_(i1 /*, t0, t, t1 */ ) {
                return this.copySampleValue_(i1 - 1);
            }
        }
    ]);
    return DiscreteInterpolant;
}($b383cde4e0574ff6$export$b558baee9c0f72d3);
var $b383cde4e0574ff6$export$b0e479f45b7006d6 = /*#__PURE__*/ function() {
    "use strict";
    function KeyframeTrack(name, times, values, interpolation) {
        (0, $dnGTK.default)(this, KeyframeTrack);
        if (name === undefined) throw new Error("THREE.KeyframeTrack: track name is undefined");
        if (times === undefined || times.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
        this.name = name;
        this.times = $b383cde4e0574ff6$export$7ee8caa573e71ad1.convertArray(times, this.TimeBufferType);
        this.values = $b383cde4e0574ff6$export$7ee8caa573e71ad1.convertArray(values, this.ValueBufferType);
        this.setInterpolation(interpolation || this.DefaultInterpolation);
    }
    (0, $9SLyD.default)(KeyframeTrack, [
        {
            key: "InterpolantFactoryMethodDiscrete",
            value: function InterpolantFactoryMethodDiscrete(result) {
                return new $b383cde4e0574ff6$export$fb9758ef7ef8d5cc(this.times, this.values, this.getValueSize(), result);
            }
        },
        {
            key: "InterpolantFactoryMethodLinear",
            value: function InterpolantFactoryMethodLinear(result) {
                return new $b383cde4e0574ff6$export$a8e6009059f51e1a(this.times, this.values, this.getValueSize(), result);
            }
        },
        {
            key: "InterpolantFactoryMethodSmooth",
            value: function InterpolantFactoryMethodSmooth(result) {
                return new $b383cde4e0574ff6$export$3646682e7a3959(this.times, this.values, this.getValueSize(), result);
            }
        },
        {
            key: "setInterpolation",
            value: function setInterpolation(interpolation) {
                var factoryMethod;
                switch(interpolation){
                    case $b383cde4e0574ff6$export$995b32462a65e855:
                        factoryMethod = this.InterpolantFactoryMethodDiscrete;
                        break;
                    case $b383cde4e0574ff6$export$30fac1aace31cf4d:
                        factoryMethod = this.InterpolantFactoryMethodLinear;
                        break;
                    case $b383cde4e0574ff6$export$198b11ff4c72bb30:
                        factoryMethod = this.InterpolantFactoryMethodSmooth;
                        break;
                }
                if (factoryMethod === undefined) {
                    var message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
                    if (this.createInterpolant === undefined) {
                        // fall back to default, unless the default itself is messed up
                        if (interpolation !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
                        else throw new Error(message); // fatal, in this case
                    }
                    console.warn("THREE.KeyframeTrack:", message);
                    return this;
                }
                this.createInterpolant = factoryMethod;
                return this;
            }
        },
        {
            key: "getInterpolation",
            value: function getInterpolation() {
                switch(this.createInterpolant){
                    case this.InterpolantFactoryMethodDiscrete:
                        return $b383cde4e0574ff6$export$995b32462a65e855;
                    case this.InterpolantFactoryMethodLinear:
                        return $b383cde4e0574ff6$export$30fac1aace31cf4d;
                    case this.InterpolantFactoryMethodSmooth:
                        return $b383cde4e0574ff6$export$198b11ff4c72bb30;
                }
            }
        },
        {
            key: "getValueSize",
            value: function getValueSize() {
                return this.values.length / this.times.length;
            }
        },
        {
            // move all keyframes either forwards or backwards in time
            key: "shift",
            value: function shift(timeOffset) {
                if (timeOffset !== 0.0) {
                    var times = this.times;
                    for(var i = 0, n = times.length; i !== n; ++i)times[i] += timeOffset;
                }
                return this;
            }
        },
        {
            // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
            key: "scale",
            value: function scale(timeScale) {
                if (timeScale !== 1.0) {
                    var times = this.times;
                    for(var i = 0, n = times.length; i !== n; ++i)times[i] *= timeScale;
                }
                return this;
            }
        },
        {
            // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
            // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
            key: "trim",
            value: function trim(startTime, endTime) {
                var times = this.times, nKeys = times.length;
                var from = 0, to = nKeys - 1;
                while(from !== nKeys && times[from] < startTime)++from;
                while(to !== -1 && times[to] > endTime)--to;
                ++to; // inclusive -> exclusive bound
                if (from !== 0 || to !== nKeys) {
                    // empty tracks are forbidden, so keep at least one keyframe
                    if (from >= to) {
                        to = Math.max(to, 1);
                        from = to - 1;
                    }
                    var stride = this.getValueSize();
                    this.times = $b383cde4e0574ff6$export$7ee8caa573e71ad1.arraySlice(times, from, to);
                    this.values = $b383cde4e0574ff6$export$7ee8caa573e71ad1.arraySlice(this.values, from * stride, to * stride);
                }
                return this;
            }
        },
        {
            // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
            key: "validate",
            value: function validate() {
                var valid = true;
                var valueSize = this.getValueSize();
                if (valueSize - Math.floor(valueSize) !== 0) {
                    console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
                    valid = false;
                }
                var times = this.times, values = this.values, nKeys = times.length;
                if (nKeys === 0) {
                    console.error("THREE.KeyframeTrack: Track is empty.", this);
                    valid = false;
                }
                var prevTime = null;
                for(var i = 0; i !== nKeys; i++){
                    var currTime = times[i];
                    if (typeof currTime === "number" && isNaN(currTime)) {
                        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, currTime);
                        valid = false;
                        break;
                    }
                    if (prevTime !== null && prevTime > currTime) {
                        console.error("THREE.KeyframeTrack: Out of order keys.", this, i, currTime, prevTime);
                        valid = false;
                        break;
                    }
                    prevTime = currTime;
                }
                if (values !== undefined) {
                    if ($b383cde4e0574ff6$export$7ee8caa573e71ad1.isTypedArray(values)) for(var i1 = 0, n = values.length; i1 !== n; ++i1){
                        var value = values[i1];
                        if (isNaN(value)) {
                            console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i1, value);
                            valid = false;
                            break;
                        }
                    }
                }
                return valid;
            }
        },
        {
            // removes equivalent sequential keys as common in morph target sequences
            // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
            key: "optimize",
            value: function optimize() {
                // times or values may be shared with other tracks, so overwriting is unsafe
                var times = $b383cde4e0574ff6$export$7ee8caa573e71ad1.arraySlice(this.times), values = $b383cde4e0574ff6$export$7ee8caa573e71ad1.arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === $b383cde4e0574ff6$export$198b11ff4c72bb30, lastIndex = times.length - 1;
                var writeIndex = 1;
                for(var i = 1; i < lastIndex; ++i){
                    var keep = false;
                    var time = times[i];
                    var timeNext = times[i + 1];
                    // remove adjacent keyframes scheduled at the same time
                    if (time !== timeNext && (i !== 1 || time !== times[0])) {
                        if (!smoothInterpolation) {
                            // remove unnecessary keyframes same as their neighbors
                            var offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;
                            for(var j = 0; j !== stride; ++j){
                                var value = values[offset + j];
                                if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                                    keep = true;
                                    break;
                                }
                            }
                        } else keep = true;
                    }
                    // in-place compaction
                    if (keep) {
                        if (i !== writeIndex) {
                            times[writeIndex] = times[i];
                            var readOffset = i * stride, writeOffset = writeIndex * stride;
                            for(var j1 = 0; j1 !== stride; ++j1)values[writeOffset + j1] = values[readOffset + j1];
                        }
                        ++writeIndex;
                    }
                }
                // flush last keyframe (compaction looks ahead)
                if (lastIndex > 0) {
                    times[writeIndex] = times[lastIndex];
                    for(var readOffset1 = lastIndex * stride, writeOffset1 = writeIndex * stride, j2 = 0; j2 !== stride; ++j2)values[writeOffset1 + j2] = values[readOffset1 + j2];
                    ++writeIndex;
                }
                if (writeIndex !== times.length) {
                    this.times = $b383cde4e0574ff6$export$7ee8caa573e71ad1.arraySlice(times, 0, writeIndex);
                    this.values = $b383cde4e0574ff6$export$7ee8caa573e71ad1.arraySlice(values, 0, writeIndex * stride);
                } else {
                    this.times = times;
                    this.values = values;
                }
                return this;
            }
        },
        {
            key: "clone",
            value: function clone() {
                var times = $b383cde4e0574ff6$export$7ee8caa573e71ad1.arraySlice(this.times, 0);
                var values = $b383cde4e0574ff6$export$7ee8caa573e71ad1.arraySlice(this.values, 0);
                var TypedKeyframeTrack = this.constructor;
                var track = new TypedKeyframeTrack(this.name, times, values);
                // Interpolant argument to constructor is not saved, so copy the factory method directly.
                track.createInterpolant = this.createInterpolant;
                return track;
            }
        }
    ], [
        {
            key: "toJSON",
            value: // Serialization (in static context, because of constructor invocation
            // and automatic invocation of .toJSON):
            function toJSON(track) {
                var trackType = track.constructor;
                var json;
                // derived classes can define a static toJSON method
                if (trackType.toJSON !== this.toJSON) json = trackType.toJSON(track);
                else {
                    // by default, we assume the data can be serialized as-is
                    json = {
                        "name": track.name,
                        "times": $b383cde4e0574ff6$export$7ee8caa573e71ad1.convertArray(track.times, Array),
                        "values": $b383cde4e0574ff6$export$7ee8caa573e71ad1.convertArray(track.values, Array)
                    };
                    var interpolation = track.getInterpolation();
                    if (interpolation !== track.DefaultInterpolation) json.interpolation = interpolation;
                }
                json.type = track.ValueTypeName; // mandatory
                return json;
            }
        }
    ]);
    return KeyframeTrack;
}();
$b383cde4e0574ff6$export$b0e479f45b7006d6.prototype.TimeBufferType = Float32Array;
$b383cde4e0574ff6$export$b0e479f45b7006d6.prototype.ValueBufferType = Float32Array;
$b383cde4e0574ff6$export$b0e479f45b7006d6.prototype.DefaultInterpolation = $b383cde4e0574ff6$export$30fac1aace31cf4d;
/**
 * A Track of Boolean keyframe values.
 */ var $b383cde4e0574ff6$export$d3a344b98cf0b775 = /*#__PURE__*/ function(KeyframeTrack) {
    "use strict";
    (0, $gQI4D.default)(BooleanKeyframeTrack, KeyframeTrack);
    var _super = (0, $a0Xbx.default)(BooleanKeyframeTrack);
    function BooleanKeyframeTrack() {
        (0, $dnGTK.default)(this, BooleanKeyframeTrack);
        return _super.apply(this, arguments);
    }
    return BooleanKeyframeTrack;
}($b383cde4e0574ff6$export$b0e479f45b7006d6);
$b383cde4e0574ff6$export$d3a344b98cf0b775.prototype.ValueTypeName = "bool";
$b383cde4e0574ff6$export$d3a344b98cf0b775.prototype.ValueBufferType = Array;
$b383cde4e0574ff6$export$d3a344b98cf0b775.prototype.DefaultInterpolation = $b383cde4e0574ff6$export$995b32462a65e855;
$b383cde4e0574ff6$export$d3a344b98cf0b775.prototype.InterpolantFactoryMethodLinear = undefined;
$b383cde4e0574ff6$export$d3a344b98cf0b775.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track of keyframe values that represent color.
 */ var $b383cde4e0574ff6$export$83444c5d885347d8 = /*#__PURE__*/ function(KeyframeTrack) {
    "use strict";
    (0, $gQI4D.default)(ColorKeyframeTrack, KeyframeTrack);
    var _super = (0, $a0Xbx.default)(ColorKeyframeTrack);
    function ColorKeyframeTrack() {
        (0, $dnGTK.default)(this, ColorKeyframeTrack);
        return _super.apply(this, arguments);
    }
    return ColorKeyframeTrack;
}($b383cde4e0574ff6$export$b0e479f45b7006d6);
$b383cde4e0574ff6$export$83444c5d885347d8.prototype.ValueTypeName = "color";
/**
 * A Track of numeric keyframe values.
 */ var $b383cde4e0574ff6$export$d45f0d1a4d9a9314 = /*#__PURE__*/ function(KeyframeTrack) {
    "use strict";
    (0, $gQI4D.default)(NumberKeyframeTrack, KeyframeTrack);
    var _super = (0, $a0Xbx.default)(NumberKeyframeTrack);
    function NumberKeyframeTrack() {
        (0, $dnGTK.default)(this, NumberKeyframeTrack);
        return _super.apply(this, arguments);
    }
    return NumberKeyframeTrack;
}($b383cde4e0574ff6$export$b0e479f45b7006d6);
$b383cde4e0574ff6$export$d45f0d1a4d9a9314.prototype.ValueTypeName = "number";
/**
 * Spherical linear unit quaternion interpolant.
 */ var $b383cde4e0574ff6$export$2db1cfb7923d931e = /*#__PURE__*/ function(Interpolant) {
    "use strict";
    (0, $gQI4D.default)(QuaternionLinearInterpolant, Interpolant);
    var _super = (0, $a0Xbx.default)(QuaternionLinearInterpolant);
    function QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        (0, $dnGTK.default)(this, QuaternionLinearInterpolant);
        return _super.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    (0, $9SLyD.default)(QuaternionLinearInterpolant, [
        {
            key: "interpolate_",
            value: function interpolate_(i1, t0, t, t1) {
                var result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
                var offset = i1 * stride;
                for(var end = offset + stride; offset !== end; offset += 4)$b383cde4e0574ff6$export$23d6a54f0bbc85a3.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
                return result;
            }
        }
    ]);
    return QuaternionLinearInterpolant;
}($b383cde4e0574ff6$export$b558baee9c0f72d3);
/**
 * A Track of quaternion keyframe values.
 */ var $b383cde4e0574ff6$export$b8043f12b5aafbd7 = /*#__PURE__*/ function(KeyframeTrack) {
    "use strict";
    (0, $gQI4D.default)(QuaternionKeyframeTrack, KeyframeTrack);
    var _super = (0, $a0Xbx.default)(QuaternionKeyframeTrack);
    function QuaternionKeyframeTrack() {
        (0, $dnGTK.default)(this, QuaternionKeyframeTrack);
        return _super.apply(this, arguments);
    }
    (0, $9SLyD.default)(QuaternionKeyframeTrack, [
        {
            key: "InterpolantFactoryMethodLinear",
            value: function InterpolantFactoryMethodLinear(result) {
                return new $b383cde4e0574ff6$export$2db1cfb7923d931e(this.times, this.values, this.getValueSize(), result);
            }
        }
    ]);
    return QuaternionKeyframeTrack;
}($b383cde4e0574ff6$export$b0e479f45b7006d6);
$b383cde4e0574ff6$export$b8043f12b5aafbd7.prototype.ValueTypeName = "quaternion";
// ValueBufferType is inherited
$b383cde4e0574ff6$export$b8043f12b5aafbd7.prototype.DefaultInterpolation = $b383cde4e0574ff6$export$30fac1aace31cf4d;
$b383cde4e0574ff6$export$b8043f12b5aafbd7.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track that interpolates Strings
 */ var $b383cde4e0574ff6$export$6ce41d4f3a8df9cd = /*#__PURE__*/ function(KeyframeTrack) {
    "use strict";
    (0, $gQI4D.default)(StringKeyframeTrack, KeyframeTrack);
    var _super = (0, $a0Xbx.default)(StringKeyframeTrack);
    function StringKeyframeTrack() {
        (0, $dnGTK.default)(this, StringKeyframeTrack);
        return _super.apply(this, arguments);
    }
    return StringKeyframeTrack;
}($b383cde4e0574ff6$export$b0e479f45b7006d6);
$b383cde4e0574ff6$export$6ce41d4f3a8df9cd.prototype.ValueTypeName = "string";
$b383cde4e0574ff6$export$6ce41d4f3a8df9cd.prototype.ValueBufferType = Array;
$b383cde4e0574ff6$export$6ce41d4f3a8df9cd.prototype.DefaultInterpolation = $b383cde4e0574ff6$export$995b32462a65e855;
$b383cde4e0574ff6$export$6ce41d4f3a8df9cd.prototype.InterpolantFactoryMethodLinear = undefined;
$b383cde4e0574ff6$export$6ce41d4f3a8df9cd.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track of vectored keyframe values.
 */ var $b383cde4e0574ff6$export$5ce2dcb4cc9f2bff = /*#__PURE__*/ function(KeyframeTrack) {
    "use strict";
    (0, $gQI4D.default)(VectorKeyframeTrack, KeyframeTrack);
    var _super = (0, $a0Xbx.default)(VectorKeyframeTrack);
    function VectorKeyframeTrack() {
        (0, $dnGTK.default)(this, VectorKeyframeTrack);
        return _super.apply(this, arguments);
    }
    return VectorKeyframeTrack;
}($b383cde4e0574ff6$export$b0e479f45b7006d6);
$b383cde4e0574ff6$export$5ce2dcb4cc9f2bff.prototype.ValueTypeName = "vector";
var $b383cde4e0574ff6$export$d942c706bf23829c = /*#__PURE__*/ function() {
    "use strict";
    function AnimationClip(name) {
        var duration = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1, tracks = arguments.length > 2 ? arguments[2] : void 0, blendMode = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : $b383cde4e0574ff6$export$bcfbbdcf8de7f8cd;
        (0, $dnGTK.default)(this, AnimationClip);
        this.name = name;
        this.tracks = tracks;
        this.duration = duration;
        this.blendMode = blendMode;
        this.uuid = $b383cde4e0574ff6$var$generateUUID();
        // this means it should figure out its duration by scanning the tracks
        if (this.duration < 0) this.resetDuration();
    }
    (0, $9SLyD.default)(AnimationClip, [
        {
            key: "resetDuration",
            value: function resetDuration() {
                var tracks = this.tracks;
                var duration = 0;
                for(var i = 0, n = tracks.length; i !== n; ++i){
                    var track = this.tracks[i];
                    duration = Math.max(duration, track.times[track.times.length - 1]);
                }
                this.duration = duration;
                return this;
            }
        },
        {
            key: "trim",
            value: function trim() {
                for(var i = 0; i < this.tracks.length; i++)this.tracks[i].trim(0, this.duration);
                return this;
            }
        },
        {
            key: "validate",
            value: function validate() {
                var valid = true;
                for(var i = 0; i < this.tracks.length; i++)valid = valid && this.tracks[i].validate();
                return valid;
            }
        },
        {
            key: "optimize",
            value: function optimize() {
                for(var i = 0; i < this.tracks.length; i++)this.tracks[i].optimize();
                return this;
            }
        },
        {
            key: "clone",
            value: function clone() {
                var tracks = [];
                for(var i = 0; i < this.tracks.length; i++)tracks.push(this.tracks[i].clone());
                return new this.constructor(this.name, this.duration, tracks, this.blendMode);
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                return this.constructor.toJSON(this);
            }
        }
    ], [
        {
            key: "parse",
            value: function parse(json) {
                var tracks = [], jsonTracks = json.tracks, frameTime = 1.0 / (json.fps || 1.0);
                for(var i = 0, n = jsonTracks.length; i !== n; ++i)tracks.push($b383cde4e0574ff6$var$parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
                var clip = new this(json.name, json.duration, tracks, json.blendMode);
                clip.uuid = json.uuid;
                return clip;
            }
        },
        {
            key: "toJSON",
            value: function toJSON(clip) {
                var tracks = [], clipTracks = clip.tracks;
                var json = {
                    "name": clip.name,
                    "duration": clip.duration,
                    "tracks": tracks,
                    "uuid": clip.uuid,
                    "blendMode": clip.blendMode
                };
                for(var i = 0, n = clipTracks.length; i !== n; ++i)tracks.push($b383cde4e0574ff6$export$b0e479f45b7006d6.toJSON(clipTracks[i]));
                return json;
            }
        },
        {
            key: "CreateFromMorphTargetSequence",
            value: function CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
                var numMorphTargets = morphTargetSequence.length;
                var tracks = [];
                for(var i = 0; i < numMorphTargets; i++){
                    var times = [];
                    var values = [];
                    times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);
                    values.push(0, 1, 0);
                    var order = $b383cde4e0574ff6$export$7ee8caa573e71ad1.getKeyframeOrder(times);
                    times = $b383cde4e0574ff6$export$7ee8caa573e71ad1.sortedArray(times, 1, order);
                    values = $b383cde4e0574ff6$export$7ee8caa573e71ad1.sortedArray(values, 1, order);
                    // if there is a key at the first frame, duplicate it as the
                    // last frame as well for perfect loop.
                    if (!noLoop && times[0] === 0) {
                        times.push(numMorphTargets);
                        values.push(values[0]);
                    }
                    tracks.push(new $b383cde4e0574ff6$export$d45f0d1a4d9a9314(".morphTargetInfluences[" + morphTargetSequence[i].name + "]", times, values).scale(1.0 / fps));
                }
                return new this(name, -1, tracks);
            }
        },
        {
            key: "findByName",
            value: function findByName(objectOrClipArray, name) {
                var clipArray = objectOrClipArray;
                if (!Array.isArray(objectOrClipArray)) {
                    var o = objectOrClipArray;
                    clipArray = o.geometry && o.geometry.animations || o.animations;
                }
                for(var i = 0; i < clipArray.length; i++){
                    if (clipArray[i].name === name) return clipArray[i];
                }
                return null;
            }
        },
        {
            key: "CreateClipsFromMorphTargetSequences",
            value: function CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
                var animationToMorphTargets = {};
                // tested with https://regex101.com/ on trick sequences
                // such flamingo_flyA_003, flamingo_run1_003, crdeath0059
                var pattern = /^([\w-]*?)([\d]+)$/;
                // sort morph target names into animation groups based
                // patterns like Walk_001, Walk_002, Run_001, Run_002
                for(var i = 0, il = morphTargets.length; i < il; i++){
                    var morphTarget = morphTargets[i];
                    var parts = morphTarget.name.match(pattern);
                    if (parts && parts.length > 1) {
                        var name = parts[1];
                        var animationMorphTargets = animationToMorphTargets[name];
                        if (!animationMorphTargets) animationToMorphTargets[name] = animationMorphTargets = [];
                        animationMorphTargets.push(morphTarget);
                    }
                }
                var clips = [];
                for(var name1 in animationToMorphTargets)clips.push(this.CreateFromMorphTargetSequence(name1, animationToMorphTargets[name1], fps, noLoop));
                return clips;
            }
        },
        {
            key: "parseAnimation",
            value: // parse the animation.hierarchy format
            function parseAnimation(animation, bones) {
                if (!animation) {
                    console.error("THREE.AnimationClip: No animation in JSONLoader data.");
                    return null;
                }
                var addNonemptyTrack = function addNonemptyTrack(trackType, trackName, animationKeys, propertyName, destTracks) {
                    // only return track if there are actually keys.
                    if (animationKeys.length !== 0) {
                        var times = [];
                        var values = [];
                        $b383cde4e0574ff6$export$7ee8caa573e71ad1.flattenJSON(animationKeys, times, values, propertyName);
                        // empty keys are filtered out, so check again
                        if (times.length !== 0) destTracks.push(new trackType(trackName, times, values));
                    }
                };
                var tracks = [];
                var clipName = animation.name || "default";
                var fps = animation.fps || 30;
                var blendMode = animation.blendMode;
                // automatic length determination in AnimationClip.
                var duration = animation.length || -1;
                var hierarchyTracks = animation.hierarchy || [];
                for(var h = 0; h < hierarchyTracks.length; h++){
                    var animationKeys = hierarchyTracks[h].keys;
                    // skip empty tracks
                    if (!animationKeys || animationKeys.length === 0) continue;
                    // process morph targets
                    if (animationKeys[0].morphTargets) {
                        // figure out all morph targets used in this track
                        var morphTargetNames = {};
                        var k = void 0;
                        for(k = 0; k < animationKeys.length; k++){
                            if (animationKeys[k].morphTargets) for(var m = 0; m < animationKeys[k].morphTargets.length; m++)morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
                        }
                        // create a track for each morph target with all zero
                        // morphTargetInfluences except for the keys in which
                        // the morphTarget is named.
                        for(var morphTargetName in morphTargetNames){
                            var times = [];
                            var values = [];
                            for(var m1 = 0; m1 !== animationKeys[k].morphTargets.length; ++m1){
                                var animationKey = animationKeys[k];
                                times.push(animationKey.time);
                                values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
                            }
                            tracks.push(new $b383cde4e0574ff6$export$d45f0d1a4d9a9314(".morphTargetInfluence[" + morphTargetName + "]", times, values));
                        }
                        duration = morphTargetNames.length * (fps || 1.0);
                    } else {
                        // ...assume skeletal animation
                        var boneName = ".bones[" + bones[h].name + "]";
                        addNonemptyTrack($b383cde4e0574ff6$export$5ce2dcb4cc9f2bff, boneName + ".position", animationKeys, "pos", tracks);
                        addNonemptyTrack($b383cde4e0574ff6$export$b8043f12b5aafbd7, boneName + ".quaternion", animationKeys, "rot", tracks);
                        addNonemptyTrack($b383cde4e0574ff6$export$5ce2dcb4cc9f2bff, boneName + ".scale", animationKeys, "scl", tracks);
                    }
                }
                if (tracks.length === 0) return null;
                var clip = new this(clipName, duration, tracks, blendMode);
                return clip;
            }
        }
    ]);
    return AnimationClip;
}();
function $b383cde4e0574ff6$var$getTrackTypeForValueTypeName(typeName) {
    switch(typeName.toLowerCase()){
        case "scalar":
        case "double":
        case "float":
        case "number":
        case "integer":
            return $b383cde4e0574ff6$export$d45f0d1a4d9a9314;
        case "vector":
        case "vector2":
        case "vector3":
        case "vector4":
            return $b383cde4e0574ff6$export$5ce2dcb4cc9f2bff;
        case "color":
            return $b383cde4e0574ff6$export$83444c5d885347d8;
        case "quaternion":
            return $b383cde4e0574ff6$export$b8043f12b5aafbd7;
        case "bool":
        case "boolean":
            return $b383cde4e0574ff6$export$d3a344b98cf0b775;
        case "string":
            return $b383cde4e0574ff6$export$6ce41d4f3a8df9cd;
    }
    throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName);
}
function $b383cde4e0574ff6$var$parseKeyframeTrack(json) {
    if (json.type === undefined) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
    var trackType = $b383cde4e0574ff6$var$getTrackTypeForValueTypeName(json.type);
    if (json.times === undefined) {
        var times = [], values = [];
        $b383cde4e0574ff6$export$7ee8caa573e71ad1.flattenJSON(json.keys, times, values, "value");
        json.times = times;
        json.values = values;
    }
    // derived classes can define a static parse method
    if (trackType.parse !== undefined) return trackType.parse(json);
    else // by default, we assume a constructor compatible with the base
    return new trackType(json.name, json.times, json.values, json.interpolation);
}
var $b383cde4e0574ff6$export$94affb487e701bf2 = {
    enabled: false,
    files: {},
    add: function add(key, file) {
        if (this.enabled === false) return;
        // console.log( 'THREE.Cache', 'Adding key:', key );
        this.files[key] = file;
    },
    get: function get(key) {
        if (this.enabled === false) return;
        // console.log( 'THREE.Cache', 'Checking key:', key );
        return this.files[key];
    },
    remove: function remove(key) {
        delete this.files[key];
    },
    clear: function clear() {
        this.files = {};
    }
};
var $b383cde4e0574ff6$export$99cc795e99919eed = function LoadingManager(onLoad, onProgress, onError) {
    "use strict";
    (0, $dnGTK.default)(this, LoadingManager);
    var scope = this;
    var isLoading = false;
    var itemsLoaded = 0;
    var itemsTotal = 0;
    var urlModifier = undefined;
    var handlers = [];
    // Refer to #5689 for the reason why we don't set .onStart
    // in the constructor
    this.onStart = undefined;
    this.onLoad = onLoad;
    this.onProgress = onProgress;
    this.onError = onError;
    this.itemStart = function(url) {
        itemsTotal++;
        if (isLoading === false) {
            if (scope.onStart !== undefined) scope.onStart(url, itemsLoaded, itemsTotal);
        }
        isLoading = true;
    };
    this.itemEnd = function(url) {
        itemsLoaded++;
        if (scope.onProgress !== undefined) scope.onProgress(url, itemsLoaded, itemsTotal);
        if (itemsLoaded === itemsTotal) {
            isLoading = false;
            if (scope.onLoad !== undefined) scope.onLoad();
        }
    };
    this.itemError = function(url) {
        if (scope.onError !== undefined) scope.onError(url);
    };
    this.resolveURL = function(url) {
        if (urlModifier) return urlModifier(url);
        return url;
    };
    this.setURLModifier = function(transform) {
        urlModifier = transform;
        return this;
    };
    this.addHandler = function(regex, loader) {
        handlers.push(regex, loader);
        return this;
    };
    this.removeHandler = function(regex) {
        var index = handlers.indexOf(regex);
        if (index !== -1) handlers.splice(index, 2);
        return this;
    };
    this.getHandler = function(file) {
        for(var i = 0, l = handlers.length; i < l; i += 2){
            var regex = handlers[i];
            var loader = handlers[i + 1];
            if (regex.global) regex.lastIndex = 0; // see #17920
            if (regex.test(file)) return loader;
        }
        return null;
    };
};
var $b383cde4e0574ff6$export$b033c3f9a95c6a16 = new $b383cde4e0574ff6$export$99cc795e99919eed();
var $b383cde4e0574ff6$export$3b0d6d7590275603 = /*#__PURE__*/ function() {
    "use strict";
    function Loader(manager) {
        (0, $dnGTK.default)(this, Loader);
        this.manager = manager !== undefined ? manager : $b383cde4e0574ff6$export$b033c3f9a95c6a16;
        this.crossOrigin = "anonymous";
        this.withCredentials = false;
        this.path = "";
        this.resourcePath = "";
        this.requestHeader = {};
    }
    (0, $9SLyD.default)(Loader, [
        {
            key: "load",
            value: function load() {}
        },
        {
            key: "loadAsync",
            value: function loadAsync(url, onProgress) {
                var scope = this;
                return new Promise(function(resolve, reject) {
                    scope.load(url, resolve, onProgress, reject);
                });
            }
        },
        {
            key: "parse",
            value: function parse() {}
        },
        {
            key: "setCrossOrigin",
            value: function setCrossOrigin(crossOrigin) {
                this.crossOrigin = crossOrigin;
                return this;
            }
        },
        {
            key: "setWithCredentials",
            value: function setWithCredentials(value) {
                this.withCredentials = value;
                return this;
            }
        },
        {
            key: "setPath",
            value: function setPath(path) {
                this.path = path;
                return this;
            }
        },
        {
            key: "setResourcePath",
            value: function setResourcePath(resourcePath) {
                this.resourcePath = resourcePath;
                return this;
            }
        },
        {
            key: "setRequestHeader",
            value: function setRequestHeader(requestHeader) {
                this.requestHeader = requestHeader;
                return this;
            }
        }
    ]);
    return Loader;
}();
var $b383cde4e0574ff6$var$loading = {};
var $b383cde4e0574ff6$export$98435a25b5cf7b2b = /*#__PURE__*/ function(Loader) {
    "use strict";
    (0, $gQI4D.default)(FileLoader, Loader);
    var _super = (0, $a0Xbx.default)(FileLoader);
    function FileLoader(manager) {
        (0, $dnGTK.default)(this, FileLoader);
        return _super.call(this, manager);
    }
    (0, $9SLyD.default)(FileLoader, [
        {
            key: "load",
            value: function load(url, onLoad, onProgress, onError) {
                var _this = this;
                if (url === undefined) url = "";
                if (this.path !== undefined) url = this.path + url;
                url = this.manager.resolveURL(url);
                var cached = $b383cde4e0574ff6$export$94affb487e701bf2.get(url);
                if (cached !== undefined) {
                    this.manager.itemStart(url);
                    setTimeout(function() {
                        if (onLoad) onLoad(cached);
                        _this.manager.itemEnd(url);
                    }, 0);
                    return cached;
                }
                // Check if request is duplicate
                if ($b383cde4e0574ff6$var$loading[url] !== undefined) {
                    $b383cde4e0574ff6$var$loading[url].push({
                        onLoad: onLoad,
                        onProgress: onProgress,
                        onError: onError
                    });
                    return;
                }
                // Initialise array for duplicate requests
                $b383cde4e0574ff6$var$loading[url] = [];
                $b383cde4e0574ff6$var$loading[url].push({
                    onLoad: onLoad,
                    onProgress: onProgress,
                    onError: onError
                });
                // create request
                var req = new Request(url, {
                    headers: new Headers(this.requestHeader),
                    credentials: this.withCredentials ? "include" : "same-origin"
                });
                // start the fetch
                fetch(req).then(function(response) {
                    if (response.status === 200 || response.status === 0) {
                        // Some browsers return HTTP Status 0 when using non-http protocol
                        // e.g. 'file://' or 'data://'. Handle as success.
                        if (response.status === 0) console.warn("THREE.FileLoader: HTTP Status 0 received.");
                        var callbacks = $b383cde4e0574ff6$var$loading[url];
                        var reader = response.body.getReader();
                        var contentLength = response.headers.get("Content-Length");
                        var total = contentLength ? parseInt(contentLength) : 0;
                        var lengthComputable = total !== 0;
                        var loaded = 0;
                        // periodically read data into the new stream tracking while download progress
                        return new ReadableStream({
                            start: function(controller) {
                                readData();
                                function readData() {
                                    reader.read().then(function(param) {
                                        var done = param.done, value = param.value;
                                        if (done) controller.close();
                                        else {
                                            loaded += value.byteLength;
                                            var event = new ProgressEvent("progress", {
                                                lengthComputable: lengthComputable,
                                                loaded: loaded,
                                                total: total
                                            });
                                            for(var i = 0, il = callbacks.length; i < il; i++){
                                                var callback = callbacks[i];
                                                if (callback.onProgress) callback.onProgress(event);
                                            }
                                            controller.enqueue(value);
                                            readData();
                                        }
                                    });
                                }
                            }
                        });
                    } else throw Error('fetch for "'.concat(response.url, '" responded with ').concat(response.status, ": ").concat(response.statusText));
                }).then(function(stream) {
                    var response = new Response(stream);
                    switch(_this.responseType){
                        case "arraybuffer":
                            return response.arrayBuffer();
                        case "blob":
                            return response.blob();
                        case "document":
                            return response.text().then(function(text) {
                                var parser = new DOMParser();
                                return parser.parseFromString(text, _this.mimeType);
                            });
                        case "json":
                            return response.json();
                        default:
                            return response.text();
                    }
                }).then(function(data) {
                    // Add to cache only on HTTP success, so that we do not cache
                    // error response bodies as proper responses to requests.
                    $b383cde4e0574ff6$export$94affb487e701bf2.add(url, data);
                    var callbacks = $b383cde4e0574ff6$var$loading[url];
                    delete $b383cde4e0574ff6$var$loading[url];
                    for(var i = 0, il = callbacks.length; i < il; i++){
                        var callback = callbacks[i];
                        if (callback.onLoad) callback.onLoad(data);
                    }
                    _this.manager.itemEnd(url);
                }).catch(function(err) {
                    // Abort errors and other errors are handled the same
                    var callbacks = $b383cde4e0574ff6$var$loading[url];
                    delete $b383cde4e0574ff6$var$loading[url];
                    for(var i = 0, il = callbacks.length; i < il; i++){
                        var callback = callbacks[i];
                        if (callback.onError) callback.onError(err);
                    }
                    _this.manager.itemError(url);
                    _this.manager.itemEnd(url);
                });
                this.manager.itemStart(url);
            }
        },
        {
            key: "setResponseType",
            value: function setResponseType(value) {
                this.responseType = value;
                return this;
            }
        },
        {
            key: "setMimeType",
            value: function setMimeType(value) {
                this.mimeType = value;
                return this;
            }
        }
    ]);
    return FileLoader;
}($b383cde4e0574ff6$export$3b0d6d7590275603);
var $b383cde4e0574ff6$export$29711c7e14f61db = /*#__PURE__*/ function(Loader) {
    "use strict";
    (0, $gQI4D.default)(AnimationLoader, Loader);
    var _super = (0, $a0Xbx.default)(AnimationLoader);
    function AnimationLoader(manager) {
        (0, $dnGTK.default)(this, AnimationLoader);
        return _super.call(this, manager);
    }
    (0, $9SLyD.default)(AnimationLoader, [
        {
            key: "load",
            value: function load(url, onLoad, onProgress, onError) {
                var scope = this;
                var loader = new $b383cde4e0574ff6$export$98435a25b5cf7b2b(this.manager);
                loader.setPath(this.path);
                loader.setRequestHeader(this.requestHeader);
                loader.setWithCredentials(this.withCredentials);
                loader.load(url, function(text) {
                    try {
                        onLoad(scope.parse(JSON.parse(text)));
                    } catch (e) {
                        if (onError) onError(e);
                        else console.error(e);
                        scope.manager.itemError(url);
                    }
                }, onProgress, onError);
            }
        },
        {
            key: "parse",
            value: function parse(json) {
                var animations = [];
                for(var i = 0; i < json.length; i++){
                    var clip = $b383cde4e0574ff6$export$d942c706bf23829c.parse(json[i]);
                    animations.push(clip);
                }
                return animations;
            }
        }
    ]);
    return AnimationLoader;
}($b383cde4e0574ff6$export$3b0d6d7590275603);
/**
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */ var $b383cde4e0574ff6$export$bd73ce947a280350 = /*#__PURE__*/ function(Loader) {
    "use strict";
    (0, $gQI4D.default)(CompressedTextureLoader, Loader);
    var _super = (0, $a0Xbx.default)(CompressedTextureLoader);
    function CompressedTextureLoader(manager) {
        (0, $dnGTK.default)(this, CompressedTextureLoader);
        return _super.call(this, manager);
    }
    (0, $9SLyD.default)(CompressedTextureLoader, [
        {
            key: "load",
            value: function load(url, onLoad, onProgress, onError) {
                var loadTexture = function loadTexture(i) {
                    loader.load(url[i], function(buffer) {
                        var texDatas = scope.parse(buffer, true);
                        images[i] = {
                            width: texDatas.width,
                            height: texDatas.height,
                            format: texDatas.format,
                            mipmaps: texDatas.mipmaps
                        };
                        loaded += 1;
                        if (loaded === 6) {
                            if (texDatas.mipmapCount === 1) texture.minFilter = $b383cde4e0574ff6$export$8a72f490b25c56c8;
                            texture.image = images;
                            texture.format = texDatas.format;
                            texture.needsUpdate = true;
                            if (onLoad) onLoad(texture);
                        }
                    }, onProgress, onError);
                };
                var scope = this;
                var images = [];
                var texture = new $b383cde4e0574ff6$export$3466bac9141a5cc4();
                var loader = new $b383cde4e0574ff6$export$98435a25b5cf7b2b(this.manager);
                loader.setPath(this.path);
                loader.setResponseType("arraybuffer");
                loader.setRequestHeader(this.requestHeader);
                loader.setWithCredentials(scope.withCredentials);
                var loaded = 0;
                if (Array.isArray(url)) for(var i = 0, il = url.length; i < il; ++i)loadTexture(i);
                else // compressed cubemap texture stored in a single DDS file
                loader.load(url, function(buffer) {
                    var texDatas = scope.parse(buffer, true);
                    if (texDatas.isCubemap) {
                        var faces = texDatas.mipmaps.length / texDatas.mipmapCount;
                        for(var f = 0; f < faces; f++){
                            images[f] = {
                                mipmaps: []
                            };
                            for(var i = 0; i < texDatas.mipmapCount; i++){
                                images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
                                images[f].format = texDatas.format;
                                images[f].width = texDatas.width;
                                images[f].height = texDatas.height;
                            }
                        }
                        texture.image = images;
                    } else {
                        texture.image.width = texDatas.width;
                        texture.image.height = texDatas.height;
                        texture.mipmaps = texDatas.mipmaps;
                    }
                    if (texDatas.mipmapCount === 1) texture.minFilter = $b383cde4e0574ff6$export$8a72f490b25c56c8;
                    texture.format = texDatas.format;
                    texture.needsUpdate = true;
                    if (onLoad) onLoad(texture);
                }, onProgress, onError);
                return texture;
            }
        }
    ]);
    return CompressedTextureLoader;
}($b383cde4e0574ff6$export$3b0d6d7590275603);
var $b383cde4e0574ff6$export$8905ce1c7a2464a1 = /*#__PURE__*/ function(Loader) {
    "use strict";
    (0, $gQI4D.default)(ImageLoader, Loader);
    var _super = (0, $a0Xbx.default)(ImageLoader);
    function ImageLoader(manager) {
        (0, $dnGTK.default)(this, ImageLoader);
        return _super.call(this, manager);
    }
    (0, $9SLyD.default)(ImageLoader, [
        {
            key: "load",
            value: function load(url, onLoad, onProgress, onError) {
                var onImageLoad = function onImageLoad() {
                    removeEventListeners();
                    $b383cde4e0574ff6$export$94affb487e701bf2.add(url, this);
                    if (onLoad) onLoad(this);
                    scope.manager.itemEnd(url);
                };
                var onImageError = function onImageError(event) {
                    removeEventListeners();
                    if (onError) onError(event);
                    scope.manager.itemError(url);
                    scope.manager.itemEnd(url);
                };
                var removeEventListeners = function removeEventListeners() {
                    image.removeEventListener("load", onImageLoad, false);
                    image.removeEventListener("error", onImageError, false);
                };
                if (this.path !== undefined) url = this.path + url;
                url = this.manager.resolveURL(url);
                var scope = this;
                var cached = $b383cde4e0574ff6$export$94affb487e701bf2.get(url);
                if (cached !== undefined) {
                    scope.manager.itemStart(url);
                    setTimeout(function() {
                        if (onLoad) onLoad(cached);
                        scope.manager.itemEnd(url);
                    }, 0);
                    return cached;
                }
                var image = $b383cde4e0574ff6$var$createElementNS("img");
                image.addEventListener("load", onImageLoad, false);
                image.addEventListener("error", onImageError, false);
                if (url.substr(0, 5) !== "data:") {
                    if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;
                }
                scope.manager.itemStart(url);
                image.src = url;
                return image;
            }
        }
    ]);
    return ImageLoader;
}($b383cde4e0574ff6$export$3b0d6d7590275603);
var $b383cde4e0574ff6$export$2ec114afc2cf6308 = /*#__PURE__*/ function(Loader) {
    "use strict";
    (0, $gQI4D.default)(CubeTextureLoader, Loader);
    var _super = (0, $a0Xbx.default)(CubeTextureLoader);
    function CubeTextureLoader(manager) {
        (0, $dnGTK.default)(this, CubeTextureLoader);
        return _super.call(this, manager);
    }
    (0, $9SLyD.default)(CubeTextureLoader, [
        {
            key: "load",
            value: function load(urls, onLoad, onProgress, onError) {
                var loadTexture = function loadTexture(i) {
                    loader.load(urls[i], function(image) {
                        texture.images[i] = image;
                        loaded++;
                        if (loaded === 6) {
                            texture.needsUpdate = true;
                            if (onLoad) onLoad(texture);
                        }
                    }, undefined, onError);
                };
                var texture = new $b383cde4e0574ff6$export$ee2e5a18258a4049();
                var loader = new $b383cde4e0574ff6$export$8905ce1c7a2464a1(this.manager);
                loader.setCrossOrigin(this.crossOrigin);
                loader.setPath(this.path);
                var loaded = 0;
                for(var i = 0; i < urls.length; ++i)loadTexture(i);
                return texture;
            }
        }
    ]);
    return CubeTextureLoader;
}($b383cde4e0574ff6$export$3b0d6d7590275603);
/**
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */ var $b383cde4e0574ff6$export$792d8a18f2c55855 = /*#__PURE__*/ function(Loader) {
    "use strict";
    (0, $gQI4D.default)(DataTextureLoader, Loader);
    var _super = (0, $a0Xbx.default)(DataTextureLoader);
    function DataTextureLoader(manager) {
        (0, $dnGTK.default)(this, DataTextureLoader);
        return _super.call(this, manager);
    }
    (0, $9SLyD.default)(DataTextureLoader, [
        {
            key: "load",
            value: function load(url, onLoad, onProgress, onError) {
                var scope = this;
                var texture = new $b383cde4e0574ff6$export$b691f601014eabe1();
                var loader = new $b383cde4e0574ff6$export$98435a25b5cf7b2b(this.manager);
                loader.setResponseType("arraybuffer");
                loader.setRequestHeader(this.requestHeader);
                loader.setPath(this.path);
                loader.setWithCredentials(scope.withCredentials);
                loader.load(url, function(buffer) {
                    var texData = scope.parse(buffer);
                    if (!texData) return;
                    if (texData.image !== undefined) texture.image = texData.image;
                    else if (texData.data !== undefined) {
                        texture.image.width = texData.width;
                        texture.image.height = texData.height;
                        texture.image.data = texData.data;
                    }
                    texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : $b383cde4e0574ff6$export$9d9334239a5a5e06;
                    texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : $b383cde4e0574ff6$export$9d9334239a5a5e06;
                    texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : $b383cde4e0574ff6$export$8a72f490b25c56c8;
                    texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : $b383cde4e0574ff6$export$8a72f490b25c56c8;
                    texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;
                    if (texData.encoding !== undefined) texture.encoding = texData.encoding;
                    if (texData.flipY !== undefined) texture.flipY = texData.flipY;
                    if (texData.format !== undefined) texture.format = texData.format;
                    if (texData.type !== undefined) texture.type = texData.type;
                    if (texData.mipmaps !== undefined) {
                        texture.mipmaps = texData.mipmaps;
                        texture.minFilter = $b383cde4e0574ff6$export$5d8599b6a933fb1b; // presumably...
                    }
                    if (texData.mipmapCount === 1) texture.minFilter = $b383cde4e0574ff6$export$8a72f490b25c56c8;
                    if (texData.generateMipmaps !== undefined) texture.generateMipmaps = texData.generateMipmaps;
                    texture.needsUpdate = true;
                    if (onLoad) onLoad(texture, texData);
                }, onProgress, onError);
                return texture;
            }
        }
    ]);
    return DataTextureLoader;
}($b383cde4e0574ff6$export$3b0d6d7590275603);
var $b383cde4e0574ff6$export$fd1bfc71f64c538c = /*#__PURE__*/ function(Loader) {
    "use strict";
    (0, $gQI4D.default)(TextureLoader, Loader);
    var _super = (0, $a0Xbx.default)(TextureLoader);
    function TextureLoader(manager) {
        (0, $dnGTK.default)(this, TextureLoader);
        return _super.call(this, manager);
    }
    (0, $9SLyD.default)(TextureLoader, [
        {
            key: "load",
            value: function load(url, onLoad, onProgress, onError) {
                var texture = new $b383cde4e0574ff6$export$5431306cf43de24a();
                var loader = new $b383cde4e0574ff6$export$8905ce1c7a2464a1(this.manager);
                loader.setCrossOrigin(this.crossOrigin);
                loader.setPath(this.path);
                loader.load(url, function(image) {
                    texture.image = image;
                    texture.needsUpdate = true;
                    if (onLoad !== undefined) onLoad(texture);
                }, onProgress, onError);
                return texture;
            }
        }
    ]);
    return TextureLoader;
}($b383cde4e0574ff6$export$3b0d6d7590275603);
var $b383cde4e0574ff6$export$6ecadb6ed240d696 = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(Light, Object3D);
    var _super = (0, $a0Xbx.default)(Light);
    function Light(color) {
        var intensity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        (0, $dnGTK.default)(this, Light);
        var _this;
        _this = _super.call(this);
        _this.type = "Light";
        _this.color = new $b383cde4e0574ff6$export$892596cec99bc70e(color);
        _this.intensity = intensity;
        return _this;
    }
    (0, $9SLyD.default)(Light, [
        {
            key: "dispose",
            value: function dispose() {
            // Empty here in base class; some subclasses override.
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(Light.prototype), "copy", this).call(this, source);
                this.color.copy(source.color);
                this.intensity = source.intensity;
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON(meta) {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(Light.prototype), "toJSON", this).call(this, meta);
                data.object.color = this.color.getHex();
                data.object.intensity = this.intensity;
                if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();
                if (this.distance !== undefined) data.object.distance = this.distance;
                if (this.angle !== undefined) data.object.angle = this.angle;
                if (this.decay !== undefined) data.object.decay = this.decay;
                if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;
                if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();
                return data;
            }
        }
    ]);
    return Light;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
$b383cde4e0574ff6$export$6ecadb6ed240d696.prototype.isLight = true;
var $b383cde4e0574ff6$export$8d474f55edbb9624 = /*#__PURE__*/ function(Light1) {
    "use strict";
    (0, $gQI4D.default)(HemisphereLight, Light1);
    var _super = (0, $a0Xbx.default)(HemisphereLight);
    function HemisphereLight(skyColor, groundColor, intensity) {
        (0, $dnGTK.default)(this, HemisphereLight);
        var _this;
        _this = _super.call(this, skyColor, intensity);
        _this.type = "HemisphereLight";
        _this.position.copy($b383cde4e0574ff6$export$e4dd07dff30cc924.DefaultUp);
        _this.updateMatrix();
        _this.groundColor = new $b383cde4e0574ff6$export$892596cec99bc70e(groundColor);
        return _this;
    }
    (0, $9SLyD.default)(HemisphereLight, [
        {
            key: "copy",
            value: function copy(source) {
                $b383cde4e0574ff6$export$6ecadb6ed240d696.prototype.copy.call(this, source);
                this.groundColor.copy(source.groundColor);
                return this;
            }
        }
    ]);
    return HemisphereLight;
}($b383cde4e0574ff6$export$6ecadb6ed240d696);
$b383cde4e0574ff6$export$8d474f55edbb9624.prototype.isHemisphereLight = true;
var $b383cde4e0574ff6$var$_projScreenMatrix$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_lightPositionWorld$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_lookTarget$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$LightShadow = /*#__PURE__*/ function() {
    "use strict";
    function LightShadow(camera) {
        (0, $dnGTK.default)(this, LightShadow);
        this.camera = camera;
        this.bias = 0;
        this.normalBias = 0;
        this.radius = 1;
        this.blurSamples = 8;
        this.mapSize = new $b383cde4e0574ff6$export$c977b3e384af9ae1(512, 512);
        this.map = null;
        this.mapPass = null;
        this.matrix = new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
        this.autoUpdate = true;
        this.needsUpdate = false;
        this._frustum = new $b383cde4e0574ff6$export$35efe6f4c85463d2();
        this._frameExtents = new $b383cde4e0574ff6$export$c977b3e384af9ae1(1, 1);
        this._viewportCount = 1;
        this._viewports = [
            new $b383cde4e0574ff6$export$fa7daccca11cdbe3(0, 0, 1, 1)
        ];
    }
    (0, $9SLyD.default)(LightShadow, [
        {
            key: "getViewportCount",
            value: function getViewportCount() {
                return this._viewportCount;
            }
        },
        {
            key: "getFrustum",
            value: function getFrustum() {
                return this._frustum;
            }
        },
        {
            key: "updateMatrices",
            value: function updateMatrices(light) {
                var shadowCamera = this.camera;
                var shadowMatrix = this.matrix;
                $b383cde4e0574ff6$var$_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
                shadowCamera.position.copy($b383cde4e0574ff6$var$_lightPositionWorld$1);
                $b383cde4e0574ff6$var$_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
                shadowCamera.lookAt($b383cde4e0574ff6$var$_lookTarget$1);
                shadowCamera.updateMatrixWorld();
                $b383cde4e0574ff6$var$_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
                this._frustum.setFromProjectionMatrix($b383cde4e0574ff6$var$_projScreenMatrix$1);
                shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);
                shadowMatrix.multiply(shadowCamera.projectionMatrix);
                shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
            }
        },
        {
            key: "getViewport",
            value: function getViewport(viewportIndex) {
                return this._viewports[viewportIndex];
            }
        },
        {
            key: "getFrameExtents",
            value: function getFrameExtents() {
                return this._frameExtents;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                if (this.map) this.map.dispose();
                if (this.mapPass) this.mapPass.dispose();
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                this.camera = source.camera.clone();
                this.bias = source.bias;
                this.radius = source.radius;
                this.mapSize.copy(source.mapSize);
                return this;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var object = {};
                if (this.bias !== 0) object.bias = this.bias;
                if (this.normalBias !== 0) object.normalBias = this.normalBias;
                if (this.radius !== 1) object.radius = this.radius;
                if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();
                object.camera = this.camera.toJSON(false).object;
                delete object.camera.matrix;
                return object;
            }
        }
    ]);
    return LightShadow;
}();
var $b383cde4e0574ff6$var$SpotLightShadow = /*#__PURE__*/ function(LightShadow) {
    "use strict";
    (0, $gQI4D.default)(SpotLightShadow, LightShadow);
    var _super = (0, $a0Xbx.default)(SpotLightShadow);
    function SpotLightShadow() {
        (0, $dnGTK.default)(this, SpotLightShadow);
        var _this;
        _this = _super.call(this, new $b383cde4e0574ff6$export$74e4ae24825f68d7(50, 1, 0.5, 500));
        _this.focus = 1;
        return _this;
    }
    (0, $9SLyD.default)(SpotLightShadow, [
        {
            key: "updateMatrices",
            value: function updateMatrices(light) {
                var camera = this.camera;
                var fov = $b383cde4e0574ff6$var$RAD2DEG * 2 * light.angle * this.focus;
                var aspect = this.mapSize.width / this.mapSize.height;
                var far = light.distance || camera.far;
                if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {
                    camera.fov = fov;
                    camera.aspect = aspect;
                    camera.far = far;
                    camera.updateProjectionMatrix();
                }
                (0, $bWs11.default)((0, $6gb2n.default)(SpotLightShadow.prototype), "updateMatrices", this).call(this, light);
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(SpotLightShadow.prototype), "copy", this).call(this, source);
                this.focus = source.focus;
                return this;
            }
        }
    ]);
    return SpotLightShadow;
}($b383cde4e0574ff6$var$LightShadow);
$b383cde4e0574ff6$var$SpotLightShadow.prototype.isSpotLightShadow = true;
var $b383cde4e0574ff6$export$81495cbb73897362 = /*#__PURE__*/ function(Light) {
    "use strict";
    (0, $gQI4D.default)(SpotLight, Light);
    var _super = (0, $a0Xbx.default)(SpotLight);
    function SpotLight(color, intensity) {
        var distance = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, angle = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Math.PI / 3, penumbra = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0, decay = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 1;
        (0, $dnGTK.default)(this, SpotLight);
        var _this;
        _this = _super.call(this, color, intensity);
        _this.type = "SpotLight";
        _this.position.copy($b383cde4e0574ff6$export$e4dd07dff30cc924.DefaultUp);
        _this.updateMatrix();
        _this.target = new $b383cde4e0574ff6$export$e4dd07dff30cc924();
        _this.distance = distance;
        _this.angle = angle;
        _this.penumbra = penumbra;
        _this.decay = decay; // for physically correct lights, should be 2.
        _this.shadow = new $b383cde4e0574ff6$var$SpotLightShadow();
        return _this;
    }
    (0, $9SLyD.default)(SpotLight, [
        {
            key: "power",
            get: function get() {
                // compute the light's luminous power (in lumens) from its intensity (in candela)
                // by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
                return this.intensity * Math.PI;
            },
            set: function set(power) {
                // set the light's intensity (in candela) from the desired luminous power (in lumens)
                this.intensity = power / Math.PI;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.shadow.dispose();
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(SpotLight.prototype), "copy", this).call(this, source);
                this.distance = source.distance;
                this.angle = source.angle;
                this.penumbra = source.penumbra;
                this.decay = source.decay;
                this.target = source.target.clone();
                this.shadow = source.shadow.clone();
                return this;
            }
        }
    ]);
    return SpotLight;
}($b383cde4e0574ff6$export$6ecadb6ed240d696);
$b383cde4e0574ff6$export$81495cbb73897362.prototype.isSpotLight = true;
var $b383cde4e0574ff6$var$_projScreenMatrix = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_lightPositionWorld = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_lookTarget = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$PointLightShadow = /*#__PURE__*/ function(LightShadow) {
    "use strict";
    (0, $gQI4D.default)(PointLightShadow, LightShadow);
    var _super = (0, $a0Xbx.default)(PointLightShadow);
    function PointLightShadow() {
        (0, $dnGTK.default)(this, PointLightShadow);
        var _this;
        _this = _super.call(this, new $b383cde4e0574ff6$export$74e4ae24825f68d7(90, 1, 0.5, 500));
        _this._frameExtents = new $b383cde4e0574ff6$export$c977b3e384af9ae1(4, 2);
        _this._viewportCount = 6;
        _this._viewports = [
            // These viewports map a cube-map onto a 2D texture with the
            // following orientation:
            //
            //  xzXZ
            //   y Y
            //
            // X - Positive x direction
            // x - Negative x direction
            // Y - Positive y direction
            // y - Negative y direction
            // Z - Positive z direction
            // z - Negative z direction
            // positive X
            new $b383cde4e0574ff6$export$fa7daccca11cdbe3(2, 1, 1, 1),
            // negative X
            new $b383cde4e0574ff6$export$fa7daccca11cdbe3(0, 1, 1, 1),
            // positive Z
            new $b383cde4e0574ff6$export$fa7daccca11cdbe3(3, 1, 1, 1),
            // negative Z
            new $b383cde4e0574ff6$export$fa7daccca11cdbe3(1, 1, 1, 1),
            // positive Y
            new $b383cde4e0574ff6$export$fa7daccca11cdbe3(3, 0, 1, 1),
            // negative Y
            new $b383cde4e0574ff6$export$fa7daccca11cdbe3(1, 0, 1, 1)
        ];
        _this._cubeDirections = [
            new $b383cde4e0574ff6$export$64b5c384219d3699(1, 0, 0),
            new $b383cde4e0574ff6$export$64b5c384219d3699(-1, 0, 0),
            new $b383cde4e0574ff6$export$64b5c384219d3699(0, 0, 1),
            new $b383cde4e0574ff6$export$64b5c384219d3699(0, 0, -1),
            new $b383cde4e0574ff6$export$64b5c384219d3699(0, 1, 0),
            new $b383cde4e0574ff6$export$64b5c384219d3699(0, -1, 0)
        ];
        _this._cubeUps = [
            new $b383cde4e0574ff6$export$64b5c384219d3699(0, 1, 0),
            new $b383cde4e0574ff6$export$64b5c384219d3699(0, 1, 0),
            new $b383cde4e0574ff6$export$64b5c384219d3699(0, 1, 0),
            new $b383cde4e0574ff6$export$64b5c384219d3699(0, 1, 0),
            new $b383cde4e0574ff6$export$64b5c384219d3699(0, 0, 1),
            new $b383cde4e0574ff6$export$64b5c384219d3699(0, 0, -1)
        ];
        return _this;
    }
    (0, $9SLyD.default)(PointLightShadow, [
        {
            key: "updateMatrices",
            value: function updateMatrices(light) {
                var viewportIndex = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                var camera = this.camera;
                var shadowMatrix = this.matrix;
                var far = light.distance || camera.far;
                if (far !== camera.far) {
                    camera.far = far;
                    camera.updateProjectionMatrix();
                }
                $b383cde4e0574ff6$var$_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
                camera.position.copy($b383cde4e0574ff6$var$_lightPositionWorld);
                $b383cde4e0574ff6$var$_lookTarget.copy(camera.position);
                $b383cde4e0574ff6$var$_lookTarget.add(this._cubeDirections[viewportIndex]);
                camera.up.copy(this._cubeUps[viewportIndex]);
                camera.lookAt($b383cde4e0574ff6$var$_lookTarget);
                camera.updateMatrixWorld();
                shadowMatrix.makeTranslation(-$b383cde4e0574ff6$var$_lightPositionWorld.x, -$b383cde4e0574ff6$var$_lightPositionWorld.y, -$b383cde4e0574ff6$var$_lightPositionWorld.z);
                $b383cde4e0574ff6$var$_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
                this._frustum.setFromProjectionMatrix($b383cde4e0574ff6$var$_projScreenMatrix);
            }
        }
    ]);
    return PointLightShadow;
}($b383cde4e0574ff6$var$LightShadow);
$b383cde4e0574ff6$var$PointLightShadow.prototype.isPointLightShadow = true;
var $b383cde4e0574ff6$export$4c9c1cb3f0b6f455 = /*#__PURE__*/ function(Light) {
    "use strict";
    (0, $gQI4D.default)(PointLight, Light);
    var _super = (0, $a0Xbx.default)(PointLight);
    function PointLight(color, intensity) {
        var distance = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, decay = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
        (0, $dnGTK.default)(this, PointLight);
        var _this;
        _this = _super.call(this, color, intensity);
        _this.type = "PointLight";
        _this.distance = distance;
        _this.decay = decay; // for physically correct lights, should be 2.
        _this.shadow = new $b383cde4e0574ff6$var$PointLightShadow();
        return _this;
    }
    (0, $9SLyD.default)(PointLight, [
        {
            key: "power",
            get: function get() {
                // compute the light's luminous power (in lumens) from its intensity (in candela)
                // for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
                return this.intensity * 4 * Math.PI;
            },
            set: function set(power) {
                // set the light's intensity (in candela) from the desired luminous power (in lumens)
                this.intensity = power / (4 * Math.PI);
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.shadow.dispose();
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(PointLight.prototype), "copy", this).call(this, source);
                this.distance = source.distance;
                this.decay = source.decay;
                this.shadow = source.shadow.clone();
                return this;
            }
        }
    ]);
    return PointLight;
}($b383cde4e0574ff6$export$6ecadb6ed240d696);
$b383cde4e0574ff6$export$4c9c1cb3f0b6f455.prototype.isPointLight = true;
var $b383cde4e0574ff6$var$DirectionalLightShadow = /*#__PURE__*/ function(LightShadow) {
    "use strict";
    (0, $gQI4D.default)(DirectionalLightShadow, LightShadow);
    var _super = (0, $a0Xbx.default)(DirectionalLightShadow);
    function DirectionalLightShadow() {
        (0, $dnGTK.default)(this, DirectionalLightShadow);
        return _super.call(this, new $b383cde4e0574ff6$export$9ebf355ee4ed261b(-5, 5, 5, -5, 0.5, 500));
    }
    return DirectionalLightShadow;
}($b383cde4e0574ff6$var$LightShadow);
$b383cde4e0574ff6$var$DirectionalLightShadow.prototype.isDirectionalLightShadow = true;
var $b383cde4e0574ff6$export$3fea33cc9972c868 = /*#__PURE__*/ function(Light) {
    "use strict";
    (0, $gQI4D.default)(DirectionalLight, Light);
    var _super = (0, $a0Xbx.default)(DirectionalLight);
    function DirectionalLight(color, intensity) {
        (0, $dnGTK.default)(this, DirectionalLight);
        var _this;
        _this = _super.call(this, color, intensity);
        _this.type = "DirectionalLight";
        _this.position.copy($b383cde4e0574ff6$export$e4dd07dff30cc924.DefaultUp);
        _this.updateMatrix();
        _this.target = new $b383cde4e0574ff6$export$e4dd07dff30cc924();
        _this.shadow = new $b383cde4e0574ff6$var$DirectionalLightShadow();
        return _this;
    }
    (0, $9SLyD.default)(DirectionalLight, [
        {
            key: "dispose",
            value: function dispose() {
                this.shadow.dispose();
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(DirectionalLight.prototype), "copy", this).call(this, source);
                this.target = source.target.clone();
                this.shadow = source.shadow.clone();
                return this;
            }
        }
    ]);
    return DirectionalLight;
}($b383cde4e0574ff6$export$6ecadb6ed240d696);
$b383cde4e0574ff6$export$3fea33cc9972c868.prototype.isDirectionalLight = true;
var $b383cde4e0574ff6$export$af279bfef9ec2c96 = /*#__PURE__*/ function(Light) {
    "use strict";
    (0, $gQI4D.default)(AmbientLight, Light);
    var _super = (0, $a0Xbx.default)(AmbientLight);
    function AmbientLight(color, intensity) {
        (0, $dnGTK.default)(this, AmbientLight);
        var _this;
        _this = _super.call(this, color, intensity);
        _this.type = "AmbientLight";
        return _this;
    }
    return AmbientLight;
}($b383cde4e0574ff6$export$6ecadb6ed240d696);
$b383cde4e0574ff6$export$af279bfef9ec2c96.prototype.isAmbientLight = true;
var $b383cde4e0574ff6$export$61db2d908bbd2429 = /*#__PURE__*/ function(Light) {
    "use strict";
    (0, $gQI4D.default)(RectAreaLight, Light);
    var _super = (0, $a0Xbx.default)(RectAreaLight);
    function RectAreaLight(color, intensity) {
        var width = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10, height = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 10;
        (0, $dnGTK.default)(this, RectAreaLight);
        var _this;
        _this = _super.call(this, color, intensity);
        _this.type = "RectAreaLight";
        _this.width = width;
        _this.height = height;
        return _this;
    }
    (0, $9SLyD.default)(RectAreaLight, [
        {
            key: "power",
            get: function get() {
                // compute the light's luminous power (in lumens) from its intensity (in nits)
                return this.intensity * this.width * this.height * Math.PI;
            },
            set: function set(power) {
                // set the light's intensity (in nits) from the desired luminous power (in lumens)
                this.intensity = power / (this.width * this.height * Math.PI);
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(RectAreaLight.prototype), "copy", this).call(this, source);
                this.width = source.width;
                this.height = source.height;
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON(meta) {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(RectAreaLight.prototype), "toJSON", this).call(this, meta);
                data.object.width = this.width;
                data.object.height = this.height;
                return data;
            }
        }
    ]);
    return RectAreaLight;
}($b383cde4e0574ff6$export$6ecadb6ed240d696);
$b383cde4e0574ff6$export$61db2d908bbd2429.prototype.isRectAreaLight = true;
/**
 * Primary reference:
 *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
 *
 * Secondary reference:
 *   https://www.ppsloan.org/publications/StupidSH36.pdf
 */ // 3-band SH defined by 9 coefficients
var $b383cde4e0574ff6$export$ba61ce607e1f405a = /*#__PURE__*/ function() {
    "use strict";
    function SphericalHarmonics3() {
        (0, $dnGTK.default)(this, SphericalHarmonics3);
        this.coefficients = [];
        for(var i = 0; i < 9; i++)this.coefficients.push(new $b383cde4e0574ff6$export$64b5c384219d3699());
    }
    (0, $9SLyD.default)(SphericalHarmonics3, [
        {
            key: "set",
            value: function set(coefficients) {
                for(var i = 0; i < 9; i++)this.coefficients[i].copy(coefficients[i]);
                return this;
            }
        },
        {
            key: "zero",
            value: function zero() {
                for(var i = 0; i < 9; i++)this.coefficients[i].set(0, 0, 0);
                return this;
            }
        },
        {
            // get the radiance in the direction of the normal
            // target is a Vector3
            key: "getAt",
            value: function getAt(normal, target) {
                // normal is assumed to be unit length
                var x = normal.x, y = normal.y, z = normal.z;
                var coeff = this.coefficients;
                // band 0
                target.copy(coeff[0]).multiplyScalar(0.282095);
                // band 1
                target.addScaledVector(coeff[1], 0.488603 * y);
                target.addScaledVector(coeff[2], 0.488603 * z);
                target.addScaledVector(coeff[3], 0.488603 * x);
                // band 2
                target.addScaledVector(coeff[4], 1.092548 * (x * y));
                target.addScaledVector(coeff[5], 1.092548 * (y * z));
                target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));
                target.addScaledVector(coeff[7], 1.092548 * (x * z));
                target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
                return target;
            }
        },
        {
            // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
            // target is a Vector3
            // https://graphics.stanford.edu/papers/envmap/envmap.pdf
            key: "getIrradianceAt",
            value: function getIrradianceAt(normal, target) {
                // normal is assumed to be unit length
                var x = normal.x, y = normal.y, z = normal.z;
                var coeff = this.coefficients;
                // band 0
                target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095
                // band 1
                target.addScaledVector(coeff[1], 1.023328 * y); // ( 2 * π / 3 ) * 0.488603
                target.addScaledVector(coeff[2], 1.023328 * z);
                target.addScaledVector(coeff[3], 1.023328 * x);
                // band 2
                target.addScaledVector(coeff[4], 0.858086 * x * y); // ( π / 4 ) * 1.092548
                target.addScaledVector(coeff[5], 0.858086 * y * z);
                target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3
                target.addScaledVector(coeff[7], 0.858086 * x * z);
                target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274
                return target;
            }
        },
        {
            key: "add",
            value: function add(sh) {
                for(var i = 0; i < 9; i++)this.coefficients[i].add(sh.coefficients[i]);
                return this;
            }
        },
        {
            key: "addScaledSH",
            value: function addScaledSH(sh, s) {
                for(var i = 0; i < 9; i++)this.coefficients[i].addScaledVector(sh.coefficients[i], s);
                return this;
            }
        },
        {
            key: "scale",
            value: function scale(s) {
                for(var i = 0; i < 9; i++)this.coefficients[i].multiplyScalar(s);
                return this;
            }
        },
        {
            key: "lerp",
            value: function lerp(sh, alpha) {
                for(var i = 0; i < 9; i++)this.coefficients[i].lerp(sh.coefficients[i], alpha);
                return this;
            }
        },
        {
            key: "equals",
            value: function equals(sh) {
                for(var i = 0; i < 9; i++){
                    if (!this.coefficients[i].equals(sh.coefficients[i])) return false;
                }
                return true;
            }
        },
        {
            key: "copy",
            value: function copy(sh) {
                return this.set(sh.coefficients);
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        },
        {
            key: "fromArray",
            value: function fromArray(array) {
                var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                var coefficients = this.coefficients;
                for(var i = 0; i < 9; i++)coefficients[i].fromArray(array, offset + i * 3);
                return this;
            }
        },
        {
            key: "toArray",
            value: function toArray() {
                var array = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                var coefficients = this.coefficients;
                for(var i = 0; i < 9; i++)coefficients[i].toArray(array, offset + i * 3);
                return array;
            }
        }
    ], [
        {
            key: "getBasisAt",
            value: // evaluate the basis functions
            // shBasis is an Array[ 9 ]
            function getBasisAt(normal, shBasis) {
                // normal is assumed to be unit length
                var x = normal.x, y = normal.y, z = normal.z;
                // band 0
                shBasis[0] = 0.282095;
                // band 1
                shBasis[1] = 0.488603 * y;
                shBasis[2] = 0.488603 * z;
                shBasis[3] = 0.488603 * x;
                // band 2
                shBasis[4] = 1.092548 * x * y;
                shBasis[5] = 1.092548 * y * z;
                shBasis[6] = 0.315392 * (3 * z * z - 1);
                shBasis[7] = 1.092548 * x * z;
                shBasis[8] = 0.546274 * (x * x - y * y);
            }
        }
    ]);
    return SphericalHarmonics3;
}();
$b383cde4e0574ff6$export$ba61ce607e1f405a.prototype.isSphericalHarmonics3 = true;
var $b383cde4e0574ff6$export$e7ef036e309b38d2 = /*#__PURE__*/ function(Light) {
    "use strict";
    (0, $gQI4D.default)(LightProbe, Light);
    var _super = (0, $a0Xbx.default)(LightProbe);
    function LightProbe() {
        var sh = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$ba61ce607e1f405a(), intensity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        (0, $dnGTK.default)(this, LightProbe);
        var _this;
        _this = _super.call(this, undefined, intensity);
        _this.sh = sh;
        return _this;
    }
    (0, $9SLyD.default)(LightProbe, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(LightProbe.prototype), "copy", this).call(this, source);
                this.sh.copy(source.sh);
                return this;
            }
        },
        {
            key: "fromJSON",
            value: function fromJSON(json) {
                this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();
                this.sh.fromArray(json.sh);
                return this;
            }
        },
        {
            key: "toJSON",
            value: function toJSON(meta) {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(LightProbe.prototype), "toJSON", this).call(this, meta);
                data.object.sh = this.sh.toArray();
                return data;
            }
        }
    ]);
    return LightProbe;
}($b383cde4e0574ff6$export$6ecadb6ed240d696);
$b383cde4e0574ff6$export$e7ef036e309b38d2.prototype.isLightProbe = true;
var $b383cde4e0574ff6$export$3bd6d323353dcf96 = /*#__PURE__*/ function(Loader) {
    "use strict";
    (0, $gQI4D.default)(MaterialLoader, Loader);
    var _super = (0, $a0Xbx.default)(MaterialLoader);
    function MaterialLoader(manager) {
        (0, $dnGTK.default)(this, MaterialLoader);
        var _this;
        _this = _super.call(this, manager);
        _this.textures = {};
        return _this;
    }
    (0, $9SLyD.default)(MaterialLoader, [
        {
            key: "load",
            value: function load(url, onLoad, onProgress, onError) {
                var scope = this;
                var loader = new $b383cde4e0574ff6$export$98435a25b5cf7b2b(scope.manager);
                loader.setPath(scope.path);
                loader.setRequestHeader(scope.requestHeader);
                loader.setWithCredentials(scope.withCredentials);
                loader.load(url, function(text) {
                    try {
                        onLoad(scope.parse(JSON.parse(text)));
                    } catch (e) {
                        if (onError) onError(e);
                        else console.error(e);
                        scope.manager.itemError(url);
                    }
                }, onProgress, onError);
            }
        },
        {
            key: "parse",
            value: function parse(json) {
                var getTexture = function getTexture(name) {
                    if (textures[name] === undefined) console.warn("THREE.MaterialLoader: Undefined texture", name);
                    return textures[name];
                };
                var textures = this.textures;
                var material = new $b383cde4e0574ff6$var$Materials[json.type]();
                if (json.uuid !== undefined) material.uuid = json.uuid;
                if (json.name !== undefined) material.name = json.name;
                if (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);
                if (json.roughness !== undefined) material.roughness = json.roughness;
                if (json.metalness !== undefined) material.metalness = json.metalness;
                if (json.sheen !== undefined) material.sheen = json.sheen;
                if (json.sheenColor !== undefined) material.sheenColor = new $b383cde4e0574ff6$export$892596cec99bc70e().setHex(json.sheenColor);
                if (json.sheenRoughness !== undefined) material.sheenRoughness = json.sheenRoughness;
                if (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);
                if (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);
                if (json.specularIntensity !== undefined) material.specularIntensity = json.specularIntensity;
                if (json.specularColor !== undefined && material.specularColor !== undefined) material.specularColor.setHex(json.specularColor);
                if (json.shininess !== undefined) material.shininess = json.shininess;
                if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;
                if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;
                if (json.transmission !== undefined) material.transmission = json.transmission;
                if (json.thickness !== undefined) material.thickness = json.thickness;
                if (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;
                if (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);
                if (json.fog !== undefined) material.fog = json.fog;
                if (json.flatShading !== undefined) material.flatShading = json.flatShading;
                if (json.blending !== undefined) material.blending = json.blending;
                if (json.combine !== undefined) material.combine = json.combine;
                if (json.side !== undefined) material.side = json.side;
                if (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;
                if (json.opacity !== undefined) material.opacity = json.opacity;
                if (json.format !== undefined) material.format = json.format;
                if (json.transparent !== undefined) material.transparent = json.transparent;
                if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;
                if (json.depthTest !== undefined) material.depthTest = json.depthTest;
                if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;
                if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;
                if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;
                if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;
                if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;
                if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;
                if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;
                if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;
                if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;
                if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;
                if (json.wireframe !== undefined) material.wireframe = json.wireframe;
                if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;
                if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;
                if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;
                if (json.rotation !== undefined) material.rotation = json.rotation;
                if (json.linewidth !== 1) material.linewidth = json.linewidth;
                if (json.dashSize !== undefined) material.dashSize = json.dashSize;
                if (json.gapSize !== undefined) material.gapSize = json.gapSize;
                if (json.scale !== undefined) material.scale = json.scale;
                if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;
                if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;
                if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;
                if (json.dithering !== undefined) material.dithering = json.dithering;
                if (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;
                if (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;
                if (json.visible !== undefined) material.visible = json.visible;
                if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;
                if (json.userData !== undefined) material.userData = json.userData;
                if (json.vertexColors !== undefined) {
                    if (typeof json.vertexColors === "number") material.vertexColors = json.vertexColors > 0 ? true : false;
                    else material.vertexColors = json.vertexColors;
                }
                // Shader Material
                if (json.uniforms !== undefined) for(var name in json.uniforms){
                    var uniform = json.uniforms[name];
                    material.uniforms[name] = {};
                    switch(uniform.type){
                        case "t":
                            material.uniforms[name].value = getTexture(uniform.value);
                            break;
                        case "c":
                            material.uniforms[name].value = new $b383cde4e0574ff6$export$892596cec99bc70e().setHex(uniform.value);
                            break;
                        case "v2":
                            material.uniforms[name].value = new $b383cde4e0574ff6$export$c977b3e384af9ae1().fromArray(uniform.value);
                            break;
                        case "v3":
                            material.uniforms[name].value = new $b383cde4e0574ff6$export$64b5c384219d3699().fromArray(uniform.value);
                            break;
                        case "v4":
                            material.uniforms[name].value = new $b383cde4e0574ff6$export$fa7daccca11cdbe3().fromArray(uniform.value);
                            break;
                        case "m3":
                            material.uniforms[name].value = new $b383cde4e0574ff6$export$8ff26dafa08918().fromArray(uniform.value);
                            break;
                        case "m4":
                            material.uniforms[name].value = new $b383cde4e0574ff6$export$2ae72fc923e5eb5().fromArray(uniform.value);
                            break;
                        default:
                            material.uniforms[name].value = uniform.value;
                    }
                }
                if (json.defines !== undefined) material.defines = json.defines;
                if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;
                if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;
                if (json.extensions !== undefined) for(var key in json.extensions)material.extensions[key] = json.extensions[key];
                // Deprecated
                if (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading
                // for PointsMaterial
                if (json.size !== undefined) material.size = json.size;
                if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation;
                // maps
                if (json.map !== undefined) material.map = getTexture(json.map);
                if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);
                if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);
                if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);
                if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;
                if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);
                if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;
                if (json.normalScale !== undefined) {
                    var normalScale = json.normalScale;
                    if (Array.isArray(normalScale) === false) // Blender exporter used to export a scalar. See #7459
                    normalScale = [
                        normalScale,
                        normalScale
                    ];
                    material.normalScale = new $b383cde4e0574ff6$export$c977b3e384af9ae1().fromArray(normalScale);
                }
                if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);
                if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;
                if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;
                if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);
                if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);
                if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);
                if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;
                if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);
                if (json.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json.specularIntensityMap);
                if (json.specularColorMap !== undefined) material.specularColorMap = getTexture(json.specularColorMap);
                if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);
                if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;
                if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;
                if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;
                if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);
                if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;
                if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);
                if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;
                if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);
                if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);
                if (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
                if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
                if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new $b383cde4e0574ff6$export$c977b3e384af9ae1().fromArray(json.clearcoatNormalScale);
                if (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);
                if (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);
                if (json.sheenColorMap !== undefined) material.sheenColorMap = getTexture(json.sheenColorMap);
                if (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);
                return material;
            }
        },
        {
            key: "setTextures",
            value: function setTextures(value) {
                this.textures = value;
                return this;
            }
        }
    ]);
    return MaterialLoader;
}($b383cde4e0574ff6$export$3b0d6d7590275603);
var $b383cde4e0574ff6$export$b5d2dc08d867e41a = /*#__PURE__*/ function() {
    "use strict";
    function LoaderUtils() {
        (0, $dnGTK.default)(this, LoaderUtils);
    }
    (0, $9SLyD.default)(LoaderUtils, null, [
        {
            key: "decodeText",
            value: function decodeText(array) {
                if (typeof TextDecoder !== "undefined") return new TextDecoder().decode(array);
                // Avoid the String.fromCharCode.apply(null, array) shortcut, which
                // throws a "maximum call stack size exceeded" error for large arrays.
                var s = "";
                for(var i = 0, il = array.length; i < il; i++)// Implicitly assumes little-endian.
                s += String.fromCharCode(array[i]);
                try {
                    // merges multi-byte utf-8 characters.
                    return decodeURIComponent(escape(s));
                } catch (e) {
                    return s;
                }
            }
        },
        {
            key: "extractUrlBase",
            value: function extractUrlBase(url) {
                var index = url.lastIndexOf("/");
                if (index === -1) return "./";
                return url.substr(0, index + 1);
            }
        },
        {
            key: "resolveURL",
            value: function resolveURL(url, path) {
                // Invalid URL
                if (typeof url !== "string" || url === "") return "";
                // Host Relative URL
                if (/^https?:\/\//i.test(path) && /^\//.test(url)) path = path.replace(/(^https?:\/\/[^\/]+).*/i, "$1");
                // Absolute URL http://,https://,//
                if (/^(https?:)?\/\//i.test(url)) return url;
                // Data URI
                if (/^data:.*,.*$/i.test(url)) return url;
                // Blob URL
                if (/^blob:.*$/i.test(url)) return url;
                // Relative URL
                return path + url;
            }
        }
    ]);
    return LoaderUtils;
}();
var $b383cde4e0574ff6$export$231f009cbe414146 = /*#__PURE__*/ function(BufferGeometry) {
    "use strict";
    (0, $gQI4D.default)(InstancedBufferGeometry, BufferGeometry);
    var _super = (0, $a0Xbx.default)(InstancedBufferGeometry);
    function InstancedBufferGeometry() {
        (0, $dnGTK.default)(this, InstancedBufferGeometry);
        var _this;
        _this = _super.call(this);
        _this.type = "InstancedBufferGeometry";
        _this.instanceCount = Infinity;
        return _this;
    }
    (0, $9SLyD.default)(InstancedBufferGeometry, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(InstancedBufferGeometry.prototype), "copy", this).call(this, source);
                this.instanceCount = source.instanceCount;
                return this;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        },
        {
            key: "toJSON",
            value: function toJSON() {
                var data = (0, $bWs11.default)((0, $6gb2n.default)(InstancedBufferGeometry.prototype), "toJSON", this).call(this, this);
                data.instanceCount = this.instanceCount;
                data.isInstancedBufferGeometry = true;
                return data;
            }
        }
    ]);
    return InstancedBufferGeometry;
}($b383cde4e0574ff6$export$b7be63a67df8959);
$b383cde4e0574ff6$export$231f009cbe414146.prototype.isInstancedBufferGeometry = true;
var $b383cde4e0574ff6$export$dc275bb96327833a = /*#__PURE__*/ function(Loader) {
    "use strict";
    (0, $gQI4D.default)(BufferGeometryLoader, Loader);
    var _super = (0, $a0Xbx.default)(BufferGeometryLoader);
    function BufferGeometryLoader(manager) {
        (0, $dnGTK.default)(this, BufferGeometryLoader);
        return _super.call(this, manager);
    }
    (0, $9SLyD.default)(BufferGeometryLoader, [
        {
            key: "load",
            value: function load(url, onLoad, onProgress, onError) {
                var scope = this;
                var loader = new $b383cde4e0574ff6$export$98435a25b5cf7b2b(scope.manager);
                loader.setPath(scope.path);
                loader.setRequestHeader(scope.requestHeader);
                loader.setWithCredentials(scope.withCredentials);
                loader.load(url, function(text) {
                    try {
                        onLoad(scope.parse(JSON.parse(text)));
                    } catch (e) {
                        if (onError) onError(e);
                        else console.error(e);
                        scope.manager.itemError(url);
                    }
                }, onProgress, onError);
            }
        },
        {
            key: "parse",
            value: function parse(json) {
                var getInterleavedBuffer = function getInterleavedBuffer(json, uuid) {
                    if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];
                    var interleavedBuffers = json.interleavedBuffers;
                    var interleavedBuffer = interleavedBuffers[uuid];
                    var buffer = getArrayBuffer(json, interleavedBuffer.buffer);
                    var array = $b383cde4e0574ff6$var$getTypedArray(interleavedBuffer.type, buffer);
                    var ib = new $b383cde4e0574ff6$export$3d5cd879f108f53f(array, interleavedBuffer.stride);
                    ib.uuid = interleavedBuffer.uuid;
                    interleavedBufferMap[uuid] = ib;
                    return ib;
                };
                var getArrayBuffer = function getArrayBuffer(json, uuid) {
                    if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];
                    var arrayBuffers = json.arrayBuffers;
                    var arrayBuffer = arrayBuffers[uuid];
                    var ab = new Uint32Array(arrayBuffer).buffer;
                    arrayBufferMap[uuid] = ab;
                    return ab;
                };
                var interleavedBufferMap = {};
                var arrayBufferMap = {};
                var geometry = json.isInstancedBufferGeometry ? new $b383cde4e0574ff6$export$231f009cbe414146() : new $b383cde4e0574ff6$export$b7be63a67df8959();
                var index = json.data.index;
                if (index !== undefined) {
                    var typedArray = $b383cde4e0574ff6$var$getTypedArray(index.type, index.array);
                    geometry.setIndex(new $b383cde4e0574ff6$export$8dea267bd6bde117(typedArray, 1));
                }
                var attributes = json.data.attributes;
                for(var key in attributes){
                    var attribute = attributes[key];
                    var bufferAttribute = void 0;
                    if (attribute.isInterleavedBufferAttribute) {
                        var interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
                        bufferAttribute = new $b383cde4e0574ff6$export$920b6d07334599c7(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
                    } else {
                        var typedArray1 = $b383cde4e0574ff6$var$getTypedArray(attribute.type, attribute.array);
                        var bufferAttributeConstr = attribute.isInstancedBufferAttribute ? $b383cde4e0574ff6$export$32ea87a8b54d744a : $b383cde4e0574ff6$export$8dea267bd6bde117;
                        bufferAttribute = new bufferAttributeConstr(typedArray1, attribute.itemSize, attribute.normalized);
                    }
                    if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
                    if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);
                    if (attribute.updateRange !== undefined) {
                        bufferAttribute.updateRange.offset = attribute.updateRange.offset;
                        bufferAttribute.updateRange.count = attribute.updateRange.count;
                    }
                    geometry.setAttribute(key, bufferAttribute);
                }
                var morphAttributes = json.data.morphAttributes;
                if (morphAttributes) for(var key1 in morphAttributes){
                    var attributeArray = morphAttributes[key1];
                    var array = [];
                    for(var i = 0, il = attributeArray.length; i < il; i++){
                        var attribute1 = attributeArray[i];
                        var bufferAttribute1 = void 0;
                        if (attribute1.isInterleavedBufferAttribute) {
                            var interleavedBuffer1 = getInterleavedBuffer(json.data, attribute1.data);
                            bufferAttribute1 = new $b383cde4e0574ff6$export$920b6d07334599c7(interleavedBuffer1, attribute1.itemSize, attribute1.offset, attribute1.normalized);
                        } else {
                            var typedArray2 = $b383cde4e0574ff6$var$getTypedArray(attribute1.type, attribute1.array);
                            bufferAttribute1 = new $b383cde4e0574ff6$export$8dea267bd6bde117(typedArray2, attribute1.itemSize, attribute1.normalized);
                        }
                        if (attribute1.name !== undefined) bufferAttribute1.name = attribute1.name;
                        array.push(bufferAttribute1);
                    }
                    geometry.morphAttributes[key1] = array;
                }
                var morphTargetsRelative = json.data.morphTargetsRelative;
                if (morphTargetsRelative) geometry.morphTargetsRelative = true;
                var groups = json.data.groups || json.data.drawcalls || json.data.offsets;
                if (groups !== undefined) for(var i1 = 0, n = groups.length; i1 !== n; ++i1){
                    var group = groups[i1];
                    geometry.addGroup(group.start, group.count, group.materialIndex);
                }
                var boundingSphere = json.data.boundingSphere;
                if (boundingSphere !== undefined) {
                    var center = new $b383cde4e0574ff6$export$64b5c384219d3699();
                    if (boundingSphere.center !== undefined) center.fromArray(boundingSphere.center);
                    geometry.boundingSphere = new $b383cde4e0574ff6$export$805e8b72413ccaba(center, boundingSphere.radius);
                }
                if (json.name) geometry.name = json.name;
                if (json.userData) geometry.userData = json.userData;
                return geometry;
            }
        }
    ]);
    return BufferGeometryLoader;
}($b383cde4e0574ff6$export$3b0d6d7590275603);
var $b383cde4e0574ff6$export$40110c8505c5ad19 = /*#__PURE__*/ function(Loader) {
    "use strict";
    (0, $gQI4D.default)(ObjectLoader, Loader);
    var _super = (0, $a0Xbx.default)(ObjectLoader);
    function ObjectLoader(manager) {
        (0, $dnGTK.default)(this, ObjectLoader);
        return _super.call(this, manager);
    }
    (0, $9SLyD.default)(ObjectLoader, [
        {
            key: "load",
            value: function load(url, onLoad, onProgress, onError) {
                var scope = this;
                var path = this.path === "" ? $b383cde4e0574ff6$export$b5d2dc08d867e41a.extractUrlBase(url) : this.path;
                this.resourcePath = this.resourcePath || path;
                var loader = new $b383cde4e0574ff6$export$98435a25b5cf7b2b(this.manager);
                loader.setPath(this.path);
                loader.setRequestHeader(this.requestHeader);
                loader.setWithCredentials(this.withCredentials);
                loader.load(url, function(text) {
                    var json = null;
                    try {
                        json = JSON.parse(text);
                    } catch (error) {
                        if (onError !== undefined) onError(error);
                        console.error("THREE:ObjectLoader: Can't parse " + url + ".", error.message);
                        return;
                    }
                    var metadata = json.metadata;
                    if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === "geometry") {
                        console.error("THREE.ObjectLoader: Can't load " + url);
                        return;
                    }
                    scope.parse(json, onLoad);
                }, onProgress, onError);
            }
        },
        {
            key: "loadAsync",
            value: function loadAsync(url, onProgress) {
                var _this = this;
                return (0, $kyywQ.default)(function() {
                    var scope, path, loader, text, json, metadata;
                    return (0, $672mD.__generator)(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                scope = _this;
                                path = _this.path === "" ? $b383cde4e0574ff6$export$b5d2dc08d867e41a.extractUrlBase(url) : _this.path;
                                _this.resourcePath = _this.resourcePath || path;
                                loader = new $b383cde4e0574ff6$export$98435a25b5cf7b2b(_this.manager);
                                loader.setPath(_this.path);
                                loader.setRequestHeader(_this.requestHeader);
                                loader.setWithCredentials(_this.withCredentials);
                                return [
                                    4,
                                    loader.loadAsync(url, onProgress)
                                ];
                            case 1:
                                text = _state.sent();
                                json = JSON.parse(text);
                                metadata = json.metadata;
                                if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === "geometry") throw new Error("THREE.ObjectLoader: Can't load " + url);
                                return [
                                    4,
                                    scope.parseAsync(json)
                                ];
                            case 2:
                                return [
                                    2,
                                    _state.sent()
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "parse",
            value: function parse(json, onLoad) {
                var animations = this.parseAnimations(json.animations);
                var shapes = this.parseShapes(json.shapes);
                var geometries = this.parseGeometries(json.geometries, shapes);
                var images = this.parseImages(json.images, function() {
                    if (onLoad !== undefined) onLoad(object);
                });
                var textures = this.parseTextures(json.textures, images);
                var materials = this.parseMaterials(json.materials, textures);
                var object = this.parseObject(json.object, geometries, materials, textures, animations);
                var skeletons = this.parseSkeletons(json.skeletons, object);
                this.bindSkeletons(object, skeletons);
                //
                if (onLoad !== undefined) {
                    var hasImages = false;
                    for(var uuid in images)if (images[uuid] instanceof HTMLImageElement) {
                        hasImages = true;
                        break;
                    }
                    if (hasImages === false) onLoad(object);
                }
                return object;
            }
        },
        {
            key: "parseAsync",
            value: function parseAsync(json) {
                var _this = this;
                return (0, $kyywQ.default)(function() {
                    var animations, shapes, geometries, images, textures, materials, object, skeletons;
                    return (0, $672mD.__generator)(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                animations = _this.parseAnimations(json.animations);
                                shapes = _this.parseShapes(json.shapes);
                                geometries = _this.parseGeometries(json.geometries, shapes);
                                return [
                                    4,
                                    _this.parseImagesAsync(json.images)
                                ];
                            case 1:
                                images = _state.sent();
                                textures = _this.parseTextures(json.textures, images);
                                materials = _this.parseMaterials(json.materials, textures);
                                object = _this.parseObject(json.object, geometries, materials, textures, animations);
                                skeletons = _this.parseSkeletons(json.skeletons, object);
                                _this.bindSkeletons(object, skeletons);
                                return [
                                    2,
                                    object
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "parseShapes",
            value: function parseShapes(json) {
                var shapes = {};
                if (json !== undefined) for(var i = 0, l = json.length; i < l; i++){
                    var shape = new $b383cde4e0574ff6$export$6428a7f2611ef1fa().fromJSON(json[i]);
                    shapes[shape.uuid] = shape;
                }
                return shapes;
            }
        },
        {
            key: "parseSkeletons",
            value: function parseSkeletons(json, object) {
                var skeletons = {};
                var bones = {};
                // generate bone lookup table
                object.traverse(function(child) {
                    if (child.isBone) bones[child.uuid] = child;
                });
                // create skeletons
                if (json !== undefined) for(var i = 0, l = json.length; i < l; i++){
                    var skeleton = new $b383cde4e0574ff6$export$8f31e4c4a37b8e9c().fromJSON(json[i], bones);
                    skeletons[skeleton.uuid] = skeleton;
                }
                return skeletons;
            }
        },
        {
            key: "parseGeometries",
            value: function parseGeometries(json, shapes) {
                var geometries = {};
                if (json !== undefined) {
                    var bufferGeometryLoader = new $b383cde4e0574ff6$export$dc275bb96327833a();
                    for(var i = 0, l = json.length; i < l; i++){
                        var geometry = void 0;
                        var data = json[i];
                        switch(data.type){
                            case "BufferGeometry":
                            case "InstancedBufferGeometry":
                                geometry = bufferGeometryLoader.parse(data);
                                break;
                            case "Geometry":
                                console.error("THREE.ObjectLoader: The legacy Geometry type is no longer supported.");
                                break;
                            default:
                                if (data.type in $b383cde4e0574ff6$var$Geometries) geometry = $b383cde4e0574ff6$var$Geometries[data.type].fromJSON(data, shapes);
                                else console.warn('THREE.ObjectLoader: Unsupported geometry type "'.concat(data.type, '"'));
                        }
                        geometry.uuid = data.uuid;
                        if (data.name !== undefined) geometry.name = data.name;
                        if (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;
                        geometries[data.uuid] = geometry;
                    }
                }
                return geometries;
            }
        },
        {
            key: "parseMaterials",
            value: function parseMaterials(json, textures) {
                var cache = {}; // MultiMaterial
                var materials = {};
                if (json !== undefined) {
                    var loader = new $b383cde4e0574ff6$export$3bd6d323353dcf96();
                    loader.setTextures(textures);
                    for(var i = 0, l = json.length; i < l; i++){
                        var data = json[i];
                        if (data.type === "MultiMaterial") {
                            // Deprecated
                            var array = [];
                            for(var j = 0; j < data.materials.length; j++){
                                var material = data.materials[j];
                                if (cache[material.uuid] === undefined) cache[material.uuid] = loader.parse(material);
                                array.push(cache[material.uuid]);
                            }
                            materials[data.uuid] = array;
                        } else {
                            if (cache[data.uuid] === undefined) cache[data.uuid] = loader.parse(data);
                            materials[data.uuid] = cache[data.uuid];
                        }
                    }
                }
                return materials;
            }
        },
        {
            key: "parseAnimations",
            value: function parseAnimations(json) {
                var animations = {};
                if (json !== undefined) for(var i = 0; i < json.length; i++){
                    var data = json[i];
                    var clip = $b383cde4e0574ff6$export$d942c706bf23829c.parse(data);
                    animations[clip.uuid] = clip;
                }
                return animations;
            }
        },
        {
            key: "parseImages",
            value: function parseImages(json, onLoad) {
                var loadImage = function loadImage(url) {
                    scope.manager.itemStart(url);
                    return loader.load(url, function() {
                        scope.manager.itemEnd(url);
                    }, undefined, function() {
                        scope.manager.itemError(url);
                        scope.manager.itemEnd(url);
                    });
                };
                var deserializeImage = function deserializeImage(image) {
                    if (typeof image === "string") {
                        var url = image;
                        var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
                        return loadImage(path);
                    } else {
                        if (image.data) return {
                            data: $b383cde4e0574ff6$var$getTypedArray(image.type, image.data),
                            width: image.width,
                            height: image.height
                        };
                        else return null;
                    }
                };
                var scope = this;
                var images = {};
                var loader;
                if (json !== undefined && json.length > 0) {
                    var manager = new $b383cde4e0574ff6$export$99cc795e99919eed(onLoad);
                    loader = new $b383cde4e0574ff6$export$8905ce1c7a2464a1(manager);
                    loader.setCrossOrigin(this.crossOrigin);
                    for(var i = 0, il = json.length; i < il; i++){
                        var image = json[i];
                        var url = image.url;
                        if (Array.isArray(url)) {
                            // load array of images e.g CubeTexture
                            images[image.uuid] = [];
                            for(var j = 0, jl = url.length; j < jl; j++){
                                var currentUrl = url[j];
                                var deserializedImage = deserializeImage(currentUrl);
                                if (deserializedImage !== null) {
                                    if (deserializedImage instanceof HTMLImageElement) images[image.uuid].push(deserializedImage);
                                    else // special case: handle array of data textures for cube textures
                                    images[image.uuid].push(new $b383cde4e0574ff6$export$b691f601014eabe1(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                                }
                            }
                        } else {
                            // load single image
                            var deserializedImage1 = deserializeImage(image.url);
                            if (deserializedImage1 !== null) images[image.uuid] = deserializedImage1;
                        }
                    }
                }
                return images;
            }
        },
        {
            key: "parseImagesAsync",
            value: function parseImagesAsync(json) {
                var _this = this;
                return (0, $kyywQ.default)(function() {
                    var scope, images, loader, i, il, image, url, j, jl, currentUrl, deserializedImage, deserializedImage1;
                    function deserializeImage(image) {
                        return _deserializeImage.apply(this, arguments);
                    }
                    function _deserializeImage() {
                        _deserializeImage = (0, $kyywQ.default)(function(image) {
                            var url, path;
                            return (0, $672mD.__generator)(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        if (!(typeof image === "string")) return [
                                            3,
                                            2
                                        ];
                                        url = image;
                                        path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
                                        return [
                                            4,
                                            loader.loadAsync(path)
                                        ];
                                    case 1:
                                        return [
                                            2,
                                            _state.sent()
                                        ];
                                    case 2:
                                        if (image.data) return [
                                            2,
                                            {
                                                data: $b383cde4e0574ff6$var$getTypedArray(image.type, image.data),
                                                width: image.width,
                                                height: image.height
                                            }
                                        ];
                                        else return [
                                            2,
                                            null
                                        ];
                                        _state.label = 3;
                                    case 3:
                                        return [
                                            2
                                        ];
                                }
                            });
                        });
                        return _deserializeImage.apply(this, arguments);
                    }
                    return (0, $672mD.__generator)(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                scope = _this;
                                images = {};
                                if (!(json !== undefined && json.length > 0)) return [
                                    3,
                                    9
                                ];
                                loader = new $b383cde4e0574ff6$export$8905ce1c7a2464a1(_this.manager);
                                loader.setCrossOrigin(_this.crossOrigin);
                                i = 0, il = json.length;
                                _state.label = 1;
                            case 1:
                                if (!(i < il)) return [
                                    3,
                                    9
                                ];
                                image = json[i];
                                url = image.url;
                                if (!Array.isArray(url)) return [
                                    3,
                                    6
                                ];
                                // load array of images e.g CubeTexture
                                images[image.uuid] = [];
                                j = 0, jl = url.length;
                                _state.label = 2;
                            case 2:
                                if (!(j < jl)) return [
                                    3,
                                    5
                                ];
                                currentUrl = url[j];
                                return [
                                    4,
                                    deserializeImage(currentUrl)
                                ];
                            case 3:
                                deserializedImage = _state.sent();
                                if (deserializedImage !== null) {
                                    if (deserializedImage instanceof HTMLImageElement) images[image.uuid].push(deserializedImage);
                                    else // special case: handle array of data textures for cube textures
                                    images[image.uuid].push(new $b383cde4e0574ff6$export$b691f601014eabe1(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                                }
                                _state.label = 4;
                            case 4:
                                j++;
                                return [
                                    3,
                                    2
                                ];
                            case 5:
                                return [
                                    3,
                                    8
                                ];
                            case 6:
                                return [
                                    4,
                                    deserializeImage(image.url)
                                ];
                            case 7:
                                deserializedImage1 = _state.sent();
                                if (deserializedImage1 !== null) images[image.uuid] = deserializedImage1;
                                _state.label = 8;
                            case 8:
                                i++;
                                return [
                                    3,
                                    1
                                ];
                            case 9:
                                return [
                                    2,
                                    images
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "parseTextures",
            value: function parseTextures(json, images) {
                var parseConstant = function parseConstant(value, type) {
                    if (typeof value === "number") return value;
                    console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", value);
                    return type[value];
                };
                var textures = {};
                if (json !== undefined) for(var i = 0, l = json.length; i < l; i++){
                    var data = json[i];
                    if (data.image === undefined) console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
                    if (images[data.image] === undefined) console.warn("THREE.ObjectLoader: Undefined image", data.image);
                    var texture = void 0;
                    var image = images[data.image];
                    if (Array.isArray(image)) {
                        texture = new $b383cde4e0574ff6$export$ee2e5a18258a4049(image);
                        if (image.length === 6) texture.needsUpdate = true;
                    } else {
                        if (image && image.data) texture = new $b383cde4e0574ff6$export$b691f601014eabe1(image.data, image.width, image.height);
                        else texture = new $b383cde4e0574ff6$export$5431306cf43de24a(image);
                        if (image) texture.needsUpdate = true; // textures can have undefined image data
                    }
                    texture.uuid = data.uuid;
                    if (data.name !== undefined) texture.name = data.name;
                    if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, $b383cde4e0574ff6$var$TEXTURE_MAPPING);
                    if (data.offset !== undefined) texture.offset.fromArray(data.offset);
                    if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);
                    if (data.center !== undefined) texture.center.fromArray(data.center);
                    if (data.rotation !== undefined) texture.rotation = data.rotation;
                    if (data.wrap !== undefined) {
                        texture.wrapS = parseConstant(data.wrap[0], $b383cde4e0574ff6$var$TEXTURE_WRAPPING);
                        texture.wrapT = parseConstant(data.wrap[1], $b383cde4e0574ff6$var$TEXTURE_WRAPPING);
                    }
                    if (data.format !== undefined) texture.format = data.format;
                    if (data.type !== undefined) texture.type = data.type;
                    if (data.encoding !== undefined) texture.encoding = data.encoding;
                    if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, $b383cde4e0574ff6$var$TEXTURE_FILTER);
                    if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, $b383cde4e0574ff6$var$TEXTURE_FILTER);
                    if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;
                    if (data.flipY !== undefined) texture.flipY = data.flipY;
                    if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;
                    if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;
                    if (data.userData !== undefined) texture.userData = data.userData;
                    textures[data.uuid] = texture;
                }
                return textures;
            }
        },
        {
            key: "parseObject",
            value: function parseObject(data, geometries, materials, textures, animations) {
                var getGeometry = function getGeometry(name) {
                    if (geometries[name] === undefined) console.warn("THREE.ObjectLoader: Undefined geometry", name);
                    return geometries[name];
                };
                var getMaterial = function getMaterial(name) {
                    if (name === undefined) return undefined;
                    if (Array.isArray(name)) {
                        var array = [];
                        for(var i = 0, l = name.length; i < l; i++){
                            var uuid = name[i];
                            if (materials[uuid] === undefined) console.warn("THREE.ObjectLoader: Undefined material", uuid);
                            array.push(materials[uuid]);
                        }
                        return array;
                    }
                    if (materials[name] === undefined) console.warn("THREE.ObjectLoader: Undefined material", name);
                    return materials[name];
                };
                var getTexture = function getTexture(uuid) {
                    if (textures[uuid] === undefined) console.warn("THREE.ObjectLoader: Undefined texture", uuid);
                    return textures[uuid];
                };
                var object;
                var geometry, material;
                switch(data.type){
                    case "Scene":
                        object = new $b383cde4e0574ff6$export$38af1803e3442a7f();
                        if (data.background !== undefined) {
                            if (Number.isInteger(data.background)) object.background = new $b383cde4e0574ff6$export$892596cec99bc70e(data.background);
                            else object.background = getTexture(data.background);
                        }
                        if (data.environment !== undefined) object.environment = getTexture(data.environment);
                        if (data.fog !== undefined) {
                            if (data.fog.type === "Fog") object.fog = new $b383cde4e0574ff6$export$3c890837b09508d4(data.fog.color, data.fog.near, data.fog.far);
                            else if (data.fog.type === "FogExp2") object.fog = new $b383cde4e0574ff6$export$6f1519f023b8d0f6(data.fog.color, data.fog.density);
                        }
                        break;
                    case "PerspectiveCamera":
                        object = new $b383cde4e0574ff6$export$74e4ae24825f68d7(data.fov, data.aspect, data.near, data.far);
                        if (data.focus !== undefined) object.focus = data.focus;
                        if (data.zoom !== undefined) object.zoom = data.zoom;
                        if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;
                        if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;
                        if (data.view !== undefined) object.view = Object.assign({}, data.view);
                        break;
                    case "OrthographicCamera":
                        object = new $b383cde4e0574ff6$export$9ebf355ee4ed261b(data.left, data.right, data.top, data.bottom, data.near, data.far);
                        if (data.zoom !== undefined) object.zoom = data.zoom;
                        if (data.view !== undefined) object.view = Object.assign({}, data.view);
                        break;
                    case "AmbientLight":
                        object = new $b383cde4e0574ff6$export$af279bfef9ec2c96(data.color, data.intensity);
                        break;
                    case "DirectionalLight":
                        object = new $b383cde4e0574ff6$export$3fea33cc9972c868(data.color, data.intensity);
                        break;
                    case "PointLight":
                        object = new $b383cde4e0574ff6$export$4c9c1cb3f0b6f455(data.color, data.intensity, data.distance, data.decay);
                        break;
                    case "RectAreaLight":
                        object = new $b383cde4e0574ff6$export$61db2d908bbd2429(data.color, data.intensity, data.width, data.height);
                        break;
                    case "SpotLight":
                        object = new $b383cde4e0574ff6$export$81495cbb73897362(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
                        break;
                    case "HemisphereLight":
                        object = new $b383cde4e0574ff6$export$8d474f55edbb9624(data.color, data.groundColor, data.intensity);
                        break;
                    case "LightProbe":
                        object = new $b383cde4e0574ff6$export$e7ef036e309b38d2().fromJSON(data);
                        break;
                    case "SkinnedMesh":
                        geometry = getGeometry(data.geometry);
                        material = getMaterial(data.material);
                        object = new $b383cde4e0574ff6$export$b303577035157ecf(geometry, material);
                        if (data.bindMode !== undefined) object.bindMode = data.bindMode;
                        if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);
                        if (data.skeleton !== undefined) object.skeleton = data.skeleton;
                        break;
                    case "Mesh":
                        geometry = getGeometry(data.geometry);
                        material = getMaterial(data.material);
                        object = new $b383cde4e0574ff6$export$e176487c05830cc5(geometry, material);
                        break;
                    case "InstancedMesh":
                        geometry = getGeometry(data.geometry);
                        material = getMaterial(data.material);
                        var count = data.count;
                        var instanceMatrix = data.instanceMatrix;
                        var instanceColor = data.instanceColor;
                        object = new $b383cde4e0574ff6$export$f3c979c331175ad7(geometry, material, count);
                        object.instanceMatrix = new $b383cde4e0574ff6$export$32ea87a8b54d744a(new Float32Array(instanceMatrix.array), 16);
                        if (instanceColor !== undefined) object.instanceColor = new $b383cde4e0574ff6$export$32ea87a8b54d744a(new Float32Array(instanceColor.array), instanceColor.itemSize);
                        break;
                    case "LOD":
                        object = new $b383cde4e0574ff6$export$112e7237be0c5f30();
                        break;
                    case "Line":
                        object = new $b383cde4e0574ff6$export$17d680238e50603e(getGeometry(data.geometry), getMaterial(data.material));
                        break;
                    case "LineLoop":
                        object = new $b383cde4e0574ff6$export$f85a24d745e4f17d(getGeometry(data.geometry), getMaterial(data.material));
                        break;
                    case "LineSegments":
                        object = new $b383cde4e0574ff6$export$ff1ed10fedfdd604(getGeometry(data.geometry), getMaterial(data.material));
                        break;
                    case "PointCloud":
                    case "Points":
                        object = new $b383cde4e0574ff6$export$1c787534cb11aa3e(getGeometry(data.geometry), getMaterial(data.material));
                        break;
                    case "Sprite":
                        object = new $b383cde4e0574ff6$export$3075603db8e6204c(getMaterial(data.material));
                        break;
                    case "Group":
                        object = new $b383cde4e0574ff6$export$eb2fcfdbd7ba97d4();
                        break;
                    case "Bone":
                        object = new $b383cde4e0574ff6$export$b127726e56765aa4();
                        break;
                    default:
                        object = new $b383cde4e0574ff6$export$e4dd07dff30cc924();
                }
                object.uuid = data.uuid;
                if (data.name !== undefined) object.name = data.name;
                if (data.matrix !== undefined) {
                    object.matrix.fromArray(data.matrix);
                    if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;
                    if (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);
                } else {
                    if (data.position !== undefined) object.position.fromArray(data.position);
                    if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);
                    if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);
                    if (data.scale !== undefined) object.scale.fromArray(data.scale);
                }
                if (data.castShadow !== undefined) object.castShadow = data.castShadow;
                if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;
                if (data.shadow) {
                    if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;
                    if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;
                    if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;
                    if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);
                    if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);
                }
                if (data.visible !== undefined) object.visible = data.visible;
                if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;
                if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;
                if (data.userData !== undefined) object.userData = data.userData;
                if (data.layers !== undefined) object.layers.mask = data.layers;
                if (data.children !== undefined) {
                    var children = data.children;
                    for(var i = 0; i < children.length; i++)object.add(this.parseObject(children[i], geometries, materials, textures, animations));
                }
                if (data.animations !== undefined) {
                    var objectAnimations = data.animations;
                    for(var i1 = 0; i1 < objectAnimations.length; i1++){
                        var uuid = objectAnimations[i1];
                        object.animations.push(animations[uuid]);
                    }
                }
                if (data.type === "LOD") {
                    if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;
                    var levels = data.levels;
                    for(var l = 0; l < levels.length; l++){
                        var level = levels[l];
                        var child = object.getObjectByProperty("uuid", level.object);
                        if (child !== undefined) object.addLevel(child, level.distance);
                    }
                }
                return object;
            }
        },
        {
            key: "bindSkeletons",
            value: function bindSkeletons(object, skeletons) {
                if (Object.keys(skeletons).length === 0) return;
                object.traverse(function(child) {
                    if (child.isSkinnedMesh === true && child.skeleton !== undefined) {
                        var skeleton = skeletons[child.skeleton];
                        if (skeleton === undefined) console.warn("THREE.ObjectLoader: No skeleton found with UUID:", child.skeleton);
                        else child.bind(skeleton, child.bindMatrix);
                    }
                });
            }
        },
        {
            /* DEPRECATED */ key: "setTexturePath",
            value: function setTexturePath(value) {
                console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");
                return this.setResourcePath(value);
            }
        }
    ]);
    return ObjectLoader;
}($b383cde4e0574ff6$export$3b0d6d7590275603);
var $b383cde4e0574ff6$var$TEXTURE_MAPPING = {
    UVMapping: $b383cde4e0574ff6$export$1beec6768cbb3d2d,
    CubeReflectionMapping: $b383cde4e0574ff6$export$8759762a6477f2c4,
    CubeRefractionMapping: $b383cde4e0574ff6$export$dc59f8aed047f61d,
    EquirectangularReflectionMapping: $b383cde4e0574ff6$export$d64030b316d3b087,
    EquirectangularRefractionMapping: $b383cde4e0574ff6$export$ee99d97d46898098,
    CubeUVReflectionMapping: $b383cde4e0574ff6$export$dbf3e70ff37af79,
    CubeUVRefractionMapping: $b383cde4e0574ff6$export$76a9f4355364345c
};
var $b383cde4e0574ff6$var$TEXTURE_WRAPPING = {
    RepeatWrapping: $b383cde4e0574ff6$export$533346c8e8dac0f5,
    ClampToEdgeWrapping: $b383cde4e0574ff6$export$9d9334239a5a5e06,
    MirroredRepeatWrapping: $b383cde4e0574ff6$export$c7e7c00b14f51a4f
};
var $b383cde4e0574ff6$var$TEXTURE_FILTER = {
    NearestFilter: $b383cde4e0574ff6$export$727aa5ec3fe39bf0,
    NearestMipmapNearestFilter: $b383cde4e0574ff6$export$d129e38cf6feaa8c,
    NearestMipmapLinearFilter: $b383cde4e0574ff6$export$d2327c1afe5bfdf2,
    LinearFilter: $b383cde4e0574ff6$export$8a72f490b25c56c8,
    LinearMipmapNearestFilter: $b383cde4e0574ff6$export$19a719f377145a13,
    LinearMipmapLinearFilter: $b383cde4e0574ff6$export$5d8599b6a933fb1b
};
var $b383cde4e0574ff6$export$52286b55c4a9b51f = /*#__PURE__*/ function(Loader) {
    "use strict";
    (0, $gQI4D.default)(ImageBitmapLoader, Loader);
    var _super = (0, $a0Xbx.default)(ImageBitmapLoader);
    function ImageBitmapLoader(manager) {
        (0, $dnGTK.default)(this, ImageBitmapLoader);
        var _this;
        _this = _super.call(this, manager);
        if (typeof createImageBitmap === "undefined") console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
        if (typeof fetch === "undefined") console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
        _this.options = {
            premultiplyAlpha: "none"
        };
        return _this;
    }
    (0, $9SLyD.default)(ImageBitmapLoader, [
        {
            key: "setOptions",
            value: function setOptions(options) {
                this.options = options;
                return this;
            }
        },
        {
            key: "load",
            value: function load(url, onLoad, onProgress, onError) {
                if (url === undefined) url = "";
                if (this.path !== undefined) url = this.path + url;
                url = this.manager.resolveURL(url);
                var scope = this;
                var cached = $b383cde4e0574ff6$export$94affb487e701bf2.get(url);
                if (cached !== undefined) {
                    scope.manager.itemStart(url);
                    setTimeout(function() {
                        if (onLoad) onLoad(cached);
                        scope.manager.itemEnd(url);
                    }, 0);
                    return cached;
                }
                var fetchOptions = {};
                fetchOptions.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
                fetchOptions.headers = this.requestHeader;
                fetch(url, fetchOptions).then(function(res) {
                    return res.blob();
                }).then(function(blob) {
                    return createImageBitmap(blob, Object.assign(scope.options, {
                        colorSpaceConversion: "none"
                    }));
                }).then(function(imageBitmap) {
                    $b383cde4e0574ff6$export$94affb487e701bf2.add(url, imageBitmap);
                    if (onLoad) onLoad(imageBitmap);
                    scope.manager.itemEnd(url);
                }).catch(function(e) {
                    if (onError) onError(e);
                    scope.manager.itemError(url);
                    scope.manager.itemEnd(url);
                });
                scope.manager.itemStart(url);
            }
        }
    ]);
    return ImageBitmapLoader;
}($b383cde4e0574ff6$export$3b0d6d7590275603);
$b383cde4e0574ff6$export$52286b55c4a9b51f.prototype.isImageBitmapLoader = true;
var $b383cde4e0574ff6$var$_context;
var $b383cde4e0574ff6$export$fcbc63750ec2a81f = {
    getContext: function getContext() {
        if ($b383cde4e0574ff6$var$_context === undefined) $b383cde4e0574ff6$var$_context = new (window.AudioContext || window.webkitAudioContext)();
        return $b383cde4e0574ff6$var$_context;
    },
    setContext: function setContext(value) {
        $b383cde4e0574ff6$var$_context = value;
    }
};
var $b383cde4e0574ff6$export$d8d5fccfbf47714e = /*#__PURE__*/ function(Loader) {
    "use strict";
    (0, $gQI4D.default)(AudioLoader, Loader);
    var _super = (0, $a0Xbx.default)(AudioLoader);
    function AudioLoader(manager) {
        (0, $dnGTK.default)(this, AudioLoader);
        return _super.call(this, manager);
    }
    (0, $9SLyD.default)(AudioLoader, [
        {
            key: "load",
            value: function load(url, onLoad, onProgress, onError) {
                var scope = this;
                var loader = new $b383cde4e0574ff6$export$98435a25b5cf7b2b(this.manager);
                loader.setResponseType("arraybuffer");
                loader.setPath(this.path);
                loader.setRequestHeader(this.requestHeader);
                loader.setWithCredentials(this.withCredentials);
                loader.load(url, function(buffer) {
                    try {
                        // Create a copy of the buffer. The `decodeAudioData` method
                        // detaches the buffer when complete, preventing reuse.
                        var bufferCopy = buffer.slice(0);
                        var context = $b383cde4e0574ff6$export$fcbc63750ec2a81f.getContext();
                        context.decodeAudioData(bufferCopy, function(audioBuffer) {
                            onLoad(audioBuffer);
                        });
                    } catch (e) {
                        if (onError) onError(e);
                        else console.error(e);
                        scope.manager.itemError(url);
                    }
                }, onProgress, onError);
            }
        }
    ]);
    return AudioLoader;
}($b383cde4e0574ff6$export$3b0d6d7590275603);
var $b383cde4e0574ff6$export$2f22dadc8bc42820 = /*#__PURE__*/ function(LightProbe) {
    "use strict";
    (0, $gQI4D.default)(HemisphereLightProbe, LightProbe);
    var _super = (0, $a0Xbx.default)(HemisphereLightProbe);
    function HemisphereLightProbe(skyColor, groundColor) {
        var intensity = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
        (0, $dnGTK.default)(this, HemisphereLightProbe);
        var _this;
        _this = _super.call(this, undefined, intensity);
        var color1 = new $b383cde4e0574ff6$export$892596cec99bc70e().set(skyColor);
        var color2 = new $b383cde4e0574ff6$export$892596cec99bc70e().set(groundColor);
        var sky = new $b383cde4e0574ff6$export$64b5c384219d3699(color1.r, color1.g, color1.b);
        var ground = new $b383cde4e0574ff6$export$64b5c384219d3699(color2.r, color2.g, color2.b);
        // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
        var c0 = Math.sqrt(Math.PI);
        var c1 = c0 * Math.sqrt(0.75);
        _this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
        _this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
        return _this;
    }
    return HemisphereLightProbe;
}($b383cde4e0574ff6$export$e7ef036e309b38d2);
$b383cde4e0574ff6$export$2f22dadc8bc42820.prototype.isHemisphereLightProbe = true;
var $b383cde4e0574ff6$export$afe310a21c86023d = /*#__PURE__*/ function(LightProbe) {
    "use strict";
    (0, $gQI4D.default)(AmbientLightProbe, LightProbe);
    var _super = (0, $a0Xbx.default)(AmbientLightProbe);
    function AmbientLightProbe(color) {
        var intensity = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        (0, $dnGTK.default)(this, AmbientLightProbe);
        var _this;
        _this = _super.call(this, undefined, intensity);
        var color1 = new $b383cde4e0574ff6$export$892596cec99bc70e().set(color);
        // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
        _this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
        return _this;
    }
    return AmbientLightProbe;
}($b383cde4e0574ff6$export$e7ef036e309b38d2);
$b383cde4e0574ff6$export$afe310a21c86023d.prototype.isAmbientLightProbe = true;
var $b383cde4e0574ff6$var$_eyeRight = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_eyeLeft = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$export$bc7f73a1065bee0c = /*#__PURE__*/ function() {
    "use strict";
    function StereoCamera() {
        (0, $dnGTK.default)(this, StereoCamera);
        this.type = "StereoCamera";
        this.aspect = 1;
        this.eyeSep = 0.064;
        this.cameraL = new $b383cde4e0574ff6$export$74e4ae24825f68d7();
        this.cameraL.layers.enable(1);
        this.cameraL.matrixAutoUpdate = false;
        this.cameraR = new $b383cde4e0574ff6$export$74e4ae24825f68d7();
        this.cameraR.layers.enable(2);
        this.cameraR.matrixAutoUpdate = false;
        this._cache = {
            focus: null,
            fov: null,
            aspect: null,
            near: null,
            far: null,
            zoom: null,
            eyeSep: null
        };
    }
    (0, $9SLyD.default)(StereoCamera, [
        {
            key: "update",
            value: function update(camera) {
                var cache = this._cache;
                var needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;
                if (needsUpdate) {
                    cache.focus = camera.focus;
                    cache.fov = camera.fov;
                    cache.aspect = camera.aspect * this.aspect;
                    cache.near = camera.near;
                    cache.far = camera.far;
                    cache.zoom = camera.zoom;
                    cache.eyeSep = this.eyeSep;
                    // Off-axis stereoscopic effect based on
                    // http://paulbourke.net/stereographics/stereorender/
                    var projectionMatrix = camera.projectionMatrix.clone();
                    var eyeSepHalf = cache.eyeSep / 2;
                    var eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
                    var ymax = cache.near * Math.tan($b383cde4e0574ff6$var$DEG2RAD * cache.fov * 0.5) / cache.zoom;
                    var xmin, xmax;
                    // translate xOffset
                    $b383cde4e0574ff6$var$_eyeLeft.elements[12] = -eyeSepHalf;
                    $b383cde4e0574ff6$var$_eyeRight.elements[12] = eyeSepHalf;
                    // for left eye
                    xmin = -ymax * cache.aspect + eyeSepOnProjection;
                    xmax = ymax * cache.aspect + eyeSepOnProjection;
                    projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
                    projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
                    this.cameraL.projectionMatrix.copy(projectionMatrix);
                    // for right eye
                    xmin = -ymax * cache.aspect - eyeSepOnProjection;
                    xmax = ymax * cache.aspect - eyeSepOnProjection;
                    projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
                    projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
                    this.cameraR.projectionMatrix.copy(projectionMatrix);
                }
                this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply($b383cde4e0574ff6$var$_eyeLeft);
                this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply($b383cde4e0574ff6$var$_eyeRight);
            }
        }
    ]);
    return StereoCamera;
}();
var $b383cde4e0574ff6$export$9735c82c4bae3302 = /*#__PURE__*/ function() {
    "use strict";
    function Clock() {
        var autoStart = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
        (0, $dnGTK.default)(this, Clock);
        this.autoStart = autoStart;
        this.startTime = 0;
        this.oldTime = 0;
        this.elapsedTime = 0;
        this.running = false;
    }
    (0, $9SLyD.default)(Clock, [
        {
            key: "start",
            value: function start() {
                this.startTime = $b383cde4e0574ff6$var$now();
                this.oldTime = this.startTime;
                this.elapsedTime = 0;
                this.running = true;
            }
        },
        {
            key: "stop",
            value: function stop() {
                this.getElapsedTime();
                this.running = false;
                this.autoStart = false;
            }
        },
        {
            key: "getElapsedTime",
            value: function getElapsedTime() {
                this.getDelta();
                return this.elapsedTime;
            }
        },
        {
            key: "getDelta",
            value: function getDelta() {
                var diff = 0;
                if (this.autoStart && !this.running) {
                    this.start();
                    return 0;
                }
                if (this.running) {
                    var newTime = $b383cde4e0574ff6$var$now();
                    diff = (newTime - this.oldTime) / 1000;
                    this.oldTime = newTime;
                    this.elapsedTime += diff;
                }
                return diff;
            }
        }
    ]);
    return Clock;
}();
function $b383cde4e0574ff6$var$now() {
    return (typeof performance === "undefined" ? Date : performance).now(); // see #10732
}
var $b383cde4e0574ff6$var$_position$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_quaternion$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$23d6a54f0bbc85a3();
var $b383cde4e0574ff6$var$_scale$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_orientation$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$8a1b810c6fde8951 = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(AudioListener, Object3D);
    var _super = (0, $a0Xbx.default)(AudioListener);
    function AudioListener() {
        (0, $dnGTK.default)(this, AudioListener);
        var _this;
        _this = _super.call(this);
        _this.type = "AudioListener";
        _this.context = $b383cde4e0574ff6$export$fcbc63750ec2a81f.getContext();
        _this.gain = _this.context.createGain();
        _this.gain.connect(_this.context.destination);
        _this.filter = null;
        _this.timeDelta = 0;
        // private
        _this._clock = new $b383cde4e0574ff6$export$9735c82c4bae3302();
        return _this;
    }
    (0, $9SLyD.default)(AudioListener, [
        {
            key: "getInput",
            value: function getInput() {
                return this.gain;
            }
        },
        {
            key: "removeFilter",
            value: function removeFilter() {
                if (this.filter !== null) {
                    this.gain.disconnect(this.filter);
                    this.filter.disconnect(this.context.destination);
                    this.gain.connect(this.context.destination);
                    this.filter = null;
                }
                return this;
            }
        },
        {
            key: "getFilter",
            value: function getFilter() {
                return this.filter;
            }
        },
        {
            key: "setFilter",
            value: function setFilter(value) {
                if (this.filter !== null) {
                    this.gain.disconnect(this.filter);
                    this.filter.disconnect(this.context.destination);
                } else this.gain.disconnect(this.context.destination);
                this.filter = value;
                this.gain.connect(this.filter);
                this.filter.connect(this.context.destination);
                return this;
            }
        },
        {
            key: "getMasterVolume",
            value: function getMasterVolume() {
                return this.gain.gain.value;
            }
        },
        {
            key: "setMasterVolume",
            value: function setMasterVolume(value) {
                this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
                return this;
            }
        },
        {
            key: "updateMatrixWorld",
            value: function updateMatrixWorld(force) {
                (0, $bWs11.default)((0, $6gb2n.default)(AudioListener.prototype), "updateMatrixWorld", this).call(this, force);
                var listener = this.context.listener;
                var up = this.up;
                this.timeDelta = this._clock.getDelta();
                this.matrixWorld.decompose($b383cde4e0574ff6$var$_position$1, $b383cde4e0574ff6$var$_quaternion$1, $b383cde4e0574ff6$var$_scale$1);
                $b383cde4e0574ff6$var$_orientation$1.set(0, 0, -1).applyQuaternion($b383cde4e0574ff6$var$_quaternion$1);
                if (listener.positionX) {
                    // code path for Chrome (see #14393)
                    var endTime = this.context.currentTime + this.timeDelta;
                    listener.positionX.linearRampToValueAtTime($b383cde4e0574ff6$var$_position$1.x, endTime);
                    listener.positionY.linearRampToValueAtTime($b383cde4e0574ff6$var$_position$1.y, endTime);
                    listener.positionZ.linearRampToValueAtTime($b383cde4e0574ff6$var$_position$1.z, endTime);
                    listener.forwardX.linearRampToValueAtTime($b383cde4e0574ff6$var$_orientation$1.x, endTime);
                    listener.forwardY.linearRampToValueAtTime($b383cde4e0574ff6$var$_orientation$1.y, endTime);
                    listener.forwardZ.linearRampToValueAtTime($b383cde4e0574ff6$var$_orientation$1.z, endTime);
                    listener.upX.linearRampToValueAtTime(up.x, endTime);
                    listener.upY.linearRampToValueAtTime(up.y, endTime);
                    listener.upZ.linearRampToValueAtTime(up.z, endTime);
                } else {
                    listener.setPosition($b383cde4e0574ff6$var$_position$1.x, $b383cde4e0574ff6$var$_position$1.y, $b383cde4e0574ff6$var$_position$1.z);
                    listener.setOrientation($b383cde4e0574ff6$var$_orientation$1.x, $b383cde4e0574ff6$var$_orientation$1.y, $b383cde4e0574ff6$var$_orientation$1.z, up.x, up.y, up.z);
                }
            }
        }
    ]);
    return AudioListener;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
var $b383cde4e0574ff6$export$153755f98d9861de = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(Audio, Object3D);
    var _super = (0, $a0Xbx.default)(Audio);
    function Audio(listener) {
        (0, $dnGTK.default)(this, Audio);
        var _this;
        _this = _super.call(this);
        _this.type = "Audio";
        _this.listener = listener;
        _this.context = listener.context;
        _this.gain = _this.context.createGain();
        _this.gain.connect(listener.getInput());
        _this.autoplay = false;
        _this.buffer = null;
        _this.detune = 0;
        _this.loop = false;
        _this.loopStart = 0;
        _this.loopEnd = 0;
        _this.offset = 0;
        _this.duration = undefined;
        _this.playbackRate = 1;
        _this.isPlaying = false;
        _this.hasPlaybackControl = true;
        _this.source = null;
        _this.sourceType = "empty";
        _this._startedAt = 0;
        _this._progress = 0;
        _this._connected = false;
        _this.filters = [];
        return _this;
    }
    (0, $9SLyD.default)(Audio, [
        {
            key: "getOutput",
            value: function getOutput() {
                return this.gain;
            }
        },
        {
            key: "setNodeSource",
            value: function setNodeSource(audioNode) {
                this.hasPlaybackControl = false;
                this.sourceType = "audioNode";
                this.source = audioNode;
                this.connect();
                return this;
            }
        },
        {
            key: "setMediaElementSource",
            value: function setMediaElementSource(mediaElement) {
                this.hasPlaybackControl = false;
                this.sourceType = "mediaNode";
                this.source = this.context.createMediaElementSource(mediaElement);
                this.connect();
                return this;
            }
        },
        {
            key: "setMediaStreamSource",
            value: function setMediaStreamSource(mediaStream) {
                this.hasPlaybackControl = false;
                this.sourceType = "mediaStreamNode";
                this.source = this.context.createMediaStreamSource(mediaStream);
                this.connect();
                return this;
            }
        },
        {
            key: "setBuffer",
            value: function setBuffer(audioBuffer) {
                this.buffer = audioBuffer;
                this.sourceType = "buffer";
                if (this.autoplay) this.play();
                return this;
            }
        },
        {
            key: "play",
            value: function play() {
                var delay = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
                if (this.isPlaying === true) {
                    console.warn("THREE.Audio: Audio is already playing.");
                    return;
                }
                if (this.hasPlaybackControl === false) {
                    console.warn("THREE.Audio: this Audio has no playback control.");
                    return;
                }
                this._startedAt = this.context.currentTime + delay;
                var source = this.context.createBufferSource();
                source.buffer = this.buffer;
                source.loop = this.loop;
                source.loopStart = this.loopStart;
                source.loopEnd = this.loopEnd;
                source.onended = this.onEnded.bind(this);
                source.start(this._startedAt, this._progress + this.offset, this.duration);
                this.isPlaying = true;
                this.source = source;
                this.setDetune(this.detune);
                this.setPlaybackRate(this.playbackRate);
                return this.connect();
            }
        },
        {
            key: "pause",
            value: function pause() {
                if (this.hasPlaybackControl === false) {
                    console.warn("THREE.Audio: this Audio has no playback control.");
                    return;
                }
                if (this.isPlaying === true) {
                    // update current progress
                    this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
                    if (this.loop === true) // ensure _progress does not exceed duration with looped audios
                    this._progress = this._progress % (this.duration || this.buffer.duration);
                    this.source.stop();
                    this.source.onended = null;
                    this.isPlaying = false;
                }
                return this;
            }
        },
        {
            key: "stop",
            value: function stop() {
                if (this.hasPlaybackControl === false) {
                    console.warn("THREE.Audio: this Audio has no playback control.");
                    return;
                }
                this._progress = 0;
                this.source.stop();
                this.source.onended = null;
                this.isPlaying = false;
                return this;
            }
        },
        {
            key: "connect",
            value: function connect() {
                if (this.filters.length > 0) {
                    this.source.connect(this.filters[0]);
                    for(var i = 1, l = this.filters.length; i < l; i++)this.filters[i - 1].connect(this.filters[i]);
                    this.filters[this.filters.length - 1].connect(this.getOutput());
                } else this.source.connect(this.getOutput());
                this._connected = true;
                return this;
            }
        },
        {
            key: "disconnect",
            value: function disconnect() {
                if (this.filters.length > 0) {
                    this.source.disconnect(this.filters[0]);
                    for(var i = 1, l = this.filters.length; i < l; i++)this.filters[i - 1].disconnect(this.filters[i]);
                    this.filters[this.filters.length - 1].disconnect(this.getOutput());
                } else this.source.disconnect(this.getOutput());
                this._connected = false;
                return this;
            }
        },
        {
            key: "getFilters",
            value: function getFilters() {
                return this.filters;
            }
        },
        {
            key: "setFilters",
            value: function setFilters(value) {
                if (!value) value = [];
                if (this._connected === true) {
                    this.disconnect();
                    this.filters = value.slice();
                    this.connect();
                } else this.filters = value.slice();
                return this;
            }
        },
        {
            key: "setDetune",
            value: function setDetune(value) {
                this.detune = value;
                if (this.source.detune === undefined) return; // only set detune when available
                if (this.isPlaying === true) this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
                return this;
            }
        },
        {
            key: "getDetune",
            value: function getDetune() {
                return this.detune;
            }
        },
        {
            key: "getFilter",
            value: function getFilter() {
                return this.getFilters()[0];
            }
        },
        {
            key: "setFilter",
            value: function setFilter(filter) {
                return this.setFilters(filter ? [
                    filter
                ] : []);
            }
        },
        {
            key: "setPlaybackRate",
            value: function setPlaybackRate(value) {
                if (this.hasPlaybackControl === false) {
                    console.warn("THREE.Audio: this Audio has no playback control.");
                    return;
                }
                this.playbackRate = value;
                if (this.isPlaying === true) this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
                return this;
            }
        },
        {
            key: "getPlaybackRate",
            value: function getPlaybackRate() {
                return this.playbackRate;
            }
        },
        {
            key: "onEnded",
            value: function onEnded() {
                this.isPlaying = false;
            }
        },
        {
            key: "getLoop",
            value: function getLoop() {
                if (this.hasPlaybackControl === false) {
                    console.warn("THREE.Audio: this Audio has no playback control.");
                    return false;
                }
                return this.loop;
            }
        },
        {
            key: "setLoop",
            value: function setLoop(value) {
                if (this.hasPlaybackControl === false) {
                    console.warn("THREE.Audio: this Audio has no playback control.");
                    return;
                }
                this.loop = value;
                if (this.isPlaying === true) this.source.loop = this.loop;
                return this;
            }
        },
        {
            key: "setLoopStart",
            value: function setLoopStart(value) {
                this.loopStart = value;
                return this;
            }
        },
        {
            key: "setLoopEnd",
            value: function setLoopEnd(value) {
                this.loopEnd = value;
                return this;
            }
        },
        {
            key: "getVolume",
            value: function getVolume() {
                return this.gain.gain.value;
            }
        },
        {
            key: "setVolume",
            value: function setVolume(value) {
                this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
                return this;
            }
        }
    ]);
    return Audio;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
var $b383cde4e0574ff6$var$_position = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_quaternion = /*@__PURE__*/ new $b383cde4e0574ff6$export$23d6a54f0bbc85a3();
var $b383cde4e0574ff6$var$_scale = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_orientation = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$4b3e397ef1832507 = /*#__PURE__*/ function(Audio) {
    "use strict";
    (0, $gQI4D.default)(PositionalAudio, Audio);
    var _super = (0, $a0Xbx.default)(PositionalAudio);
    function PositionalAudio(listener) {
        (0, $dnGTK.default)(this, PositionalAudio);
        var _this;
        _this = _super.call(this, listener);
        _this.panner = _this.context.createPanner();
        _this.panner.panningModel = "HRTF";
        _this.panner.connect(_this.gain);
        return _this;
    }
    (0, $9SLyD.default)(PositionalAudio, [
        {
            key: "getOutput",
            value: function getOutput() {
                return this.panner;
            }
        },
        {
            key: "getRefDistance",
            value: function getRefDistance() {
                return this.panner.refDistance;
            }
        },
        {
            key: "setRefDistance",
            value: function setRefDistance(value) {
                this.panner.refDistance = value;
                return this;
            }
        },
        {
            key: "getRolloffFactor",
            value: function getRolloffFactor() {
                return this.panner.rolloffFactor;
            }
        },
        {
            key: "setRolloffFactor",
            value: function setRolloffFactor(value) {
                this.panner.rolloffFactor = value;
                return this;
            }
        },
        {
            key: "getDistanceModel",
            value: function getDistanceModel() {
                return this.panner.distanceModel;
            }
        },
        {
            key: "setDistanceModel",
            value: function setDistanceModel(value) {
                this.panner.distanceModel = value;
                return this;
            }
        },
        {
            key: "getMaxDistance",
            value: function getMaxDistance() {
                return this.panner.maxDistance;
            }
        },
        {
            key: "setMaxDistance",
            value: function setMaxDistance(value) {
                this.panner.maxDistance = value;
                return this;
            }
        },
        {
            key: "setDirectionalCone",
            value: function setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
                this.panner.coneInnerAngle = coneInnerAngle;
                this.panner.coneOuterAngle = coneOuterAngle;
                this.panner.coneOuterGain = coneOuterGain;
                return this;
            }
        },
        {
            key: "updateMatrixWorld",
            value: function updateMatrixWorld(force) {
                (0, $bWs11.default)((0, $6gb2n.default)(PositionalAudio.prototype), "updateMatrixWorld", this).call(this, force);
                if (this.hasPlaybackControl === true && this.isPlaying === false) return;
                this.matrixWorld.decompose($b383cde4e0574ff6$var$_position, $b383cde4e0574ff6$var$_quaternion, $b383cde4e0574ff6$var$_scale);
                $b383cde4e0574ff6$var$_orientation.set(0, 0, 1).applyQuaternion($b383cde4e0574ff6$var$_quaternion);
                var panner = this.panner;
                if (panner.positionX) {
                    // code path for Chrome and Firefox (see #14393)
                    var endTime = this.context.currentTime + this.listener.timeDelta;
                    panner.positionX.linearRampToValueAtTime($b383cde4e0574ff6$var$_position.x, endTime);
                    panner.positionY.linearRampToValueAtTime($b383cde4e0574ff6$var$_position.y, endTime);
                    panner.positionZ.linearRampToValueAtTime($b383cde4e0574ff6$var$_position.z, endTime);
                    panner.orientationX.linearRampToValueAtTime($b383cde4e0574ff6$var$_orientation.x, endTime);
                    panner.orientationY.linearRampToValueAtTime($b383cde4e0574ff6$var$_orientation.y, endTime);
                    panner.orientationZ.linearRampToValueAtTime($b383cde4e0574ff6$var$_orientation.z, endTime);
                } else {
                    panner.setPosition($b383cde4e0574ff6$var$_position.x, $b383cde4e0574ff6$var$_position.y, $b383cde4e0574ff6$var$_position.z);
                    panner.setOrientation($b383cde4e0574ff6$var$_orientation.x, $b383cde4e0574ff6$var$_orientation.y, $b383cde4e0574ff6$var$_orientation.z);
                }
            }
        }
    ]);
    return PositionalAudio;
}((0, $caHck.default)($b383cde4e0574ff6$export$153755f98d9861de));
var $b383cde4e0574ff6$export$d47da1ef3d382827 = /*#__PURE__*/ function() {
    "use strict";
    function AudioAnalyser(audio) {
        var fftSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2048;
        (0, $dnGTK.default)(this, AudioAnalyser);
        this.analyser = audio.context.createAnalyser();
        this.analyser.fftSize = fftSize;
        this.data = new Uint8Array(this.analyser.frequencyBinCount);
        audio.getOutput().connect(this.analyser);
    }
    (0, $9SLyD.default)(AudioAnalyser, [
        {
            key: "getFrequencyData",
            value: function getFrequencyData() {
                this.analyser.getByteFrequencyData(this.data);
                return this.data;
            }
        },
        {
            key: "getAverageFrequency",
            value: function getAverageFrequency() {
                var value = 0;
                var data = this.getFrequencyData();
                for(var i = 0; i < data.length; i++)value += data[i];
                return value / data.length;
            }
        }
    ]);
    return AudioAnalyser;
}();
var $b383cde4e0574ff6$export$dfe0af1ca1acb78a = /*#__PURE__*/ function() {
    "use strict";
    function PropertyMixer(binding, typeName, valueSize) {
        (0, $dnGTK.default)(this, PropertyMixer);
        this.binding = binding;
        this.valueSize = valueSize;
        var mixFunction, mixFunctionAdditive, setIdentity;
        // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
        //
        // interpolators can use .buffer as their .result
        // the data then goes to 'incoming'
        //
        // 'accu0' and 'accu1' are used frame-interleaved for
        // the cumulative result and are compared to detect
        // changes
        //
        // 'orig' stores the original state of the property
        //
        // 'add' is used for additive cumulative results
        //
        // 'work' is optional and is only present for quaternion types. It is used
        // to store intermediate quaternion multiplication results
        switch(typeName){
            case "quaternion":
                mixFunction = this._slerp;
                mixFunctionAdditive = this._slerpAdditive;
                setIdentity = this._setAdditiveIdentityQuaternion;
                this.buffer = new Float64Array(valueSize * 6);
                this._workIndex = 5;
                break;
            case "string":
            case "bool":
                mixFunction = this._select;
                // Use the regular mix function and for additive on these types,
                // additive is not relevant for non-numeric types
                mixFunctionAdditive = this._select;
                setIdentity = this._setAdditiveIdentityOther;
                this.buffer = new Array(valueSize * 5);
                break;
            default:
                mixFunction = this._lerp;
                mixFunctionAdditive = this._lerpAdditive;
                setIdentity = this._setAdditiveIdentityNumeric;
                this.buffer = new Float64Array(valueSize * 5);
        }
        this._mixBufferRegion = mixFunction;
        this._mixBufferRegionAdditive = mixFunctionAdditive;
        this._setIdentity = setIdentity;
        this._origIndex = 3;
        this._addIndex = 4;
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
        this.useCount = 0;
        this.referenceCount = 0;
    }
    (0, $9SLyD.default)(PropertyMixer, [
        {
            // accumulate data in the 'incoming' region into 'accu<i>'
            key: "accumulate",
            value: function accumulate(accuIndex, weight) {
                // note: happily accumulating nothing when weight = 0, the caller knows
                // the weight and shouldn't have made the call in the first place
                var buffer = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride;
                var currentWeight = this.cumulativeWeight;
                if (currentWeight === 0) {
                    // accuN := incoming * weight
                    for(var i = 0; i !== stride; ++i)buffer[offset + i] = buffer[i];
                    currentWeight = weight;
                } else {
                    // accuN := accuN + incoming * weight
                    currentWeight += weight;
                    var mix = weight / currentWeight;
                    this._mixBufferRegion(buffer, offset, 0, mix, stride);
                }
                this.cumulativeWeight = currentWeight;
            }
        },
        {
            // accumulate data in the 'incoming' region into 'add'
            key: "accumulateAdditive",
            value: function accumulateAdditive(weight) {
                var buffer = this.buffer, stride = this.valueSize, offset = stride * this._addIndex;
                if (this.cumulativeWeightAdditive === 0) // add = identity
                this._setIdentity();
                // add := add + incoming * weight
                this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);
                this.cumulativeWeightAdditive += weight;
            }
        },
        {
            // apply the state of 'accu<i>' to the binding when accus differ
            key: "apply",
            value: function apply(accuIndex) {
                var stride = this.valueSize, buffer = this.buffer, offset = accuIndex * stride + stride, weight = this.cumulativeWeight, weightAdditive = this.cumulativeWeightAdditive, binding = this.binding;
                this.cumulativeWeight = 0;
                this.cumulativeWeightAdditive = 0;
                if (weight < 1) {
                    // accuN := accuN + original * ( 1 - cumulativeWeight )
                    var originalValueOffset = stride * this._origIndex;
                    this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
                }
                if (weightAdditive > 0) // accuN := accuN + additive accuN
                this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
                for(var i = stride, e = stride + stride; i !== e; ++i)if (buffer[i] !== buffer[i + stride]) {
                    // value has changed -> update scene graph
                    binding.setValue(buffer, offset);
                    break;
                }
            }
        },
        {
            // remember the state of the bound property and copy it to both accus
            key: "saveOriginalState",
            value: function saveOriginalState() {
                var binding = this.binding;
                var buffer = this.buffer, stride = this.valueSize, originalValueOffset = stride * this._origIndex;
                binding.getValue(buffer, originalValueOffset);
                // accu[0..1] := orig -- initially detect changes against the original
                for(var i = stride, e = originalValueOffset; i !== e; ++i)buffer[i] = buffer[originalValueOffset + i % stride];
                // Add to identity for additive
                this._setIdentity();
                this.cumulativeWeight = 0;
                this.cumulativeWeightAdditive = 0;
            }
        },
        {
            // apply the state previously taken via 'saveOriginalState' to the binding
            key: "restoreOriginalState",
            value: function restoreOriginalState() {
                var originalValueOffset = this.valueSize * 3;
                this.binding.setValue(this.buffer, originalValueOffset);
            }
        },
        {
            key: "_setAdditiveIdentityNumeric",
            value: function _setAdditiveIdentityNumeric() {
                var startIndex = this._addIndex * this.valueSize;
                var endIndex = startIndex + this.valueSize;
                for(var i = startIndex; i < endIndex; i++)this.buffer[i] = 0;
            }
        },
        {
            key: "_setAdditiveIdentityQuaternion",
            value: function _setAdditiveIdentityQuaternion() {
                this._setAdditiveIdentityNumeric();
                this.buffer[this._addIndex * this.valueSize + 3] = 1;
            }
        },
        {
            key: "_setAdditiveIdentityOther",
            value: function _setAdditiveIdentityOther() {
                var startIndex = this._origIndex * this.valueSize;
                var targetIndex = this._addIndex * this.valueSize;
                for(var i = 0; i < this.valueSize; i++)this.buffer[targetIndex + i] = this.buffer[startIndex + i];
            }
        },
        {
            // mix functions
            key: "_select",
            value: function _select(buffer, dstOffset, srcOffset, t, stride) {
                if (t >= 0.5) for(var i = 0; i !== stride; ++i)buffer[dstOffset + i] = buffer[srcOffset + i];
            }
        },
        {
            key: "_slerp",
            value: function _slerp(buffer, dstOffset, srcOffset, t) {
                $b383cde4e0574ff6$export$23d6a54f0bbc85a3.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
            }
        },
        {
            key: "_slerpAdditive",
            value: function _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
                var workOffset = this._workIndex * stride;
                // Store result in intermediate buffer offset
                $b383cde4e0574ff6$export$23d6a54f0bbc85a3.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);
                // Slerp to the intermediate result
                $b383cde4e0574ff6$export$23d6a54f0bbc85a3.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
            }
        },
        {
            key: "_lerp",
            value: function _lerp(buffer, dstOffset, srcOffset, t, stride) {
                var s = 1 - t;
                for(var i = 0; i !== stride; ++i){
                    var j = dstOffset + i;
                    buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;
                }
            }
        },
        {
            key: "_lerpAdditive",
            value: function _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
                for(var i = 0; i !== stride; ++i){
                    var j = dstOffset + i;
                    buffer[j] = buffer[j] + buffer[srcOffset + i] * t;
                }
            }
        }
    ]);
    return PropertyMixer;
}();
// Characters [].:/ are reserved for track binding syntax.
var $b383cde4e0574ff6$var$_RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
var $b383cde4e0574ff6$var$_reservedRe = new RegExp("[" + $b383cde4e0574ff6$var$_RESERVED_CHARS_RE + "]", "g");
// Attempts to allow node names from any language. ES5's `\w` regexp matches
// only latin characters, and the unicode \p{L} is not yet supported. So
// instead, we exclude reserved characters and match everything else.
var $b383cde4e0574ff6$var$_wordChar = "[^" + $b383cde4e0574ff6$var$_RESERVED_CHARS_RE + "]";
var $b383cde4e0574ff6$var$_wordCharOrDot = "[^" + $b383cde4e0574ff6$var$_RESERVED_CHARS_RE.replace("\\.", "") + "]";
// Parent directories, delimited by '/' or ':'. Currently unused, but must
// be matched to parse the rest of the track name.
var $b383cde4e0574ff6$var$_directoryRe = /((?:WC+[\/:])*)/.source.replace("WC", $b383cde4e0574ff6$var$_wordChar);
// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
var $b383cde4e0574ff6$var$_nodeRe = /(WCOD+)?/.source.replace("WCOD", $b383cde4e0574ff6$var$_wordCharOrDot);
// Object on target node, and accessor. May not contain reserved
// characters. Accessor may contain any character except closing bracket.
var $b383cde4e0574ff6$var$_objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", $b383cde4e0574ff6$var$_wordChar);
// Property and accessor. May not contain reserved characters. Accessor may
// contain any non-bracket characters.
var $b383cde4e0574ff6$var$_propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", $b383cde4e0574ff6$var$_wordChar);
var $b383cde4e0574ff6$var$_trackRe = new RegExp("^" + $b383cde4e0574ff6$var$_directoryRe + $b383cde4e0574ff6$var$_nodeRe + $b383cde4e0574ff6$var$_objectRe + $b383cde4e0574ff6$var$_propertyRe + "$");
var $b383cde4e0574ff6$var$_supportedObjectNames = [
    "material",
    "materials",
    "bones"
];
var $b383cde4e0574ff6$var$Composite = /*#__PURE__*/ function() {
    "use strict";
    function Composite(targetGroup, path, optionalParsedPath) {
        (0, $dnGTK.default)(this, Composite);
        var parsedPath = optionalParsedPath || $b383cde4e0574ff6$export$7bf70fcf9f891893.parseTrackName(path);
        this._targetGroup = targetGroup;
        this._bindings = targetGroup.subscribe_(path, parsedPath);
    }
    (0, $9SLyD.default)(Composite, [
        {
            key: "getValue",
            value: function getValue(array, offset) {
                this.bind(); // bind all binding
                var firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
                // and only call .getValue on the first
                if (binding !== undefined) binding.getValue(array, offset);
            }
        },
        {
            key: "setValue",
            value: function setValue(array, offset) {
                var bindings = this._bindings;
                for(var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].setValue(array, offset);
            }
        },
        {
            key: "bind",
            value: function bind() {
                var bindings = this._bindings;
                for(var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].bind();
            }
        },
        {
            key: "unbind",
            value: function unbind() {
                var bindings = this._bindings;
                for(var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].unbind();
            }
        }
    ]);
    return Composite;
}();
// Note: This class uses a State pattern on a per-method basis:
// 'bind' sets 'this.getValue' / 'setValue' and shadows the
// prototype version of these methods with one that represents
// the bound state. When the property is not found, the methods
// become no-ops.
var $b383cde4e0574ff6$export$7bf70fcf9f891893 = /*#__PURE__*/ function() {
    "use strict";
    function PropertyBinding(rootNode, path, parsedPath) {
        (0, $dnGTK.default)(this, PropertyBinding);
        this.path = path;
        this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
        this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
        this.rootNode = rootNode;
        // initial state of these methods that calls 'bind'
        this.getValue = this._getValue_unbound;
        this.setValue = this._setValue_unbound;
    }
    (0, $9SLyD.default)(PropertyBinding, [
        {
            // these are used to "bind" a nonexistent property
            key: "_getValue_unavailable",
            value: function _getValue_unavailable() {}
        },
        {
            key: "_setValue_unavailable",
            value: function _setValue_unavailable() {}
        },
        {
            // Getters
            key: "_getValue_direct",
            value: function _getValue_direct(buffer, offset) {
                buffer[offset] = this.targetObject[this.propertyName];
            }
        },
        {
            key: "_getValue_array",
            value: function _getValue_array(buffer, offset) {
                var source = this.resolvedProperty;
                for(var i = 0, n = source.length; i !== n; ++i)buffer[offset++] = source[i];
            }
        },
        {
            key: "_getValue_arrayElement",
            value: function _getValue_arrayElement(buffer, offset) {
                buffer[offset] = this.resolvedProperty[this.propertyIndex];
            }
        },
        {
            key: "_getValue_toArray",
            value: function _getValue_toArray(buffer, offset) {
                this.resolvedProperty.toArray(buffer, offset);
            }
        },
        {
            // Direct
            key: "_setValue_direct",
            value: function _setValue_direct(buffer, offset) {
                this.targetObject[this.propertyName] = buffer[offset];
            }
        },
        {
            key: "_setValue_direct_setNeedsUpdate",
            value: function _setValue_direct_setNeedsUpdate(buffer, offset) {
                this.targetObject[this.propertyName] = buffer[offset];
                this.targetObject.needsUpdate = true;
            }
        },
        {
            key: "_setValue_direct_setMatrixWorldNeedsUpdate",
            value: function _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
                this.targetObject[this.propertyName] = buffer[offset];
                this.targetObject.matrixWorldNeedsUpdate = true;
            }
        },
        {
            // EntireArray
            key: "_setValue_array",
            value: function _setValue_array(buffer, offset) {
                var dest = this.resolvedProperty;
                for(var i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer[offset++];
            }
        },
        {
            key: "_setValue_array_setNeedsUpdate",
            value: function _setValue_array_setNeedsUpdate(buffer, offset) {
                var dest = this.resolvedProperty;
                for(var i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer[offset++];
                this.targetObject.needsUpdate = true;
            }
        },
        {
            key: "_setValue_array_setMatrixWorldNeedsUpdate",
            value: function _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
                var dest = this.resolvedProperty;
                for(var i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer[offset++];
                this.targetObject.matrixWorldNeedsUpdate = true;
            }
        },
        {
            // ArrayElement
            key: "_setValue_arrayElement",
            value: function _setValue_arrayElement(buffer, offset) {
                this.resolvedProperty[this.propertyIndex] = buffer[offset];
            }
        },
        {
            key: "_setValue_arrayElement_setNeedsUpdate",
            value: function _setValue_arrayElement_setNeedsUpdate(buffer, offset) {
                this.resolvedProperty[this.propertyIndex] = buffer[offset];
                this.targetObject.needsUpdate = true;
            }
        },
        {
            key: "_setValue_arrayElement_setMatrixWorldNeedsUpdate",
            value: function _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
                this.resolvedProperty[this.propertyIndex] = buffer[offset];
                this.targetObject.matrixWorldNeedsUpdate = true;
            }
        },
        {
            // HasToFromArray
            key: "_setValue_fromArray",
            value: function _setValue_fromArray(buffer, offset) {
                this.resolvedProperty.fromArray(buffer, offset);
            }
        },
        {
            key: "_setValue_fromArray_setNeedsUpdate",
            value: function _setValue_fromArray_setNeedsUpdate(buffer, offset) {
                this.resolvedProperty.fromArray(buffer, offset);
                this.targetObject.needsUpdate = true;
            }
        },
        {
            key: "_setValue_fromArray_setMatrixWorldNeedsUpdate",
            value: function _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
                this.resolvedProperty.fromArray(buffer, offset);
                this.targetObject.matrixWorldNeedsUpdate = true;
            }
        },
        {
            key: "_getValue_unbound",
            value: function _getValue_unbound(targetArray, offset) {
                this.bind();
                this.getValue(targetArray, offset);
            }
        },
        {
            key: "_setValue_unbound",
            value: function _setValue_unbound(sourceArray, offset) {
                this.bind();
                this.setValue(sourceArray, offset);
            }
        },
        {
            // create getter / setter pair for a property in the scene graph
            key: "bind",
            value: function bind() {
                var targetObject = this.node;
                var parsedPath = this.parsedPath;
                var objectName = parsedPath.objectName;
                var propertyName = parsedPath.propertyName;
                var propertyIndex = parsedPath.propertyIndex;
                if (!targetObject) {
                    targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
                    this.node = targetObject;
                }
                // set fail state so we can just 'return' on error
                this.getValue = this._getValue_unavailable;
                this.setValue = this._setValue_unavailable;
                // ensure there is a value node
                if (!targetObject) {
                    console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
                    return;
                }
                if (objectName) {
                    var objectIndex = parsedPath.objectIndex;
                    // special cases were we need to reach deeper into the hierarchy to get the face materials....
                    switch(objectName){
                        case "materials":
                            if (!targetObject.material) {
                                console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                                return;
                            }
                            if (!targetObject.material.materials) {
                                console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                                return;
                            }
                            targetObject = targetObject.material.materials;
                            break;
                        case "bones":
                            if (!targetObject.skeleton) {
                                console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                                return;
                            }
                            // potential future optimization: skip this if propertyIndex is already an integer
                            // and convert the integer string to a true integer.
                            targetObject = targetObject.skeleton.bones;
                            // support resolving morphTarget names into indices.
                            for(var i = 0; i < targetObject.length; i++)if (targetObject[i].name === objectIndex) {
                                objectIndex = i;
                                break;
                            }
                            break;
                        default:
                            if (targetObject[objectName] === undefined) {
                                console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                                return;
                            }
                            targetObject = targetObject[objectName];
                    }
                    if (objectIndex !== undefined) {
                        if (targetObject[objectIndex] === undefined) {
                            console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
                            return;
                        }
                        targetObject = targetObject[objectIndex];
                    }
                }
                // resolve property
                var nodeProperty = targetObject[propertyName];
                if (nodeProperty === undefined) {
                    var nodeName = parsedPath.nodeName;
                    console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
                    return;
                }
                // determine versioning scheme
                var versioning = this.Versioning.None;
                this.targetObject = targetObject;
                if (targetObject.needsUpdate !== undefined) versioning = this.Versioning.NeedsUpdate;
                else if (targetObject.matrixWorldNeedsUpdate !== undefined) versioning = this.Versioning.MatrixWorldNeedsUpdate;
                // determine how the property gets bound
                var bindingType = this.BindingType.Direct;
                if (propertyIndex !== undefined) {
                    // access a sub element of the property array (only primitives are supported right now)
                    if (propertyName === "morphTargetInfluences") {
                        // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
                        // support resolving morphTarget names into indices.
                        if (!targetObject.geometry) {
                            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                            return;
                        }
                        if (targetObject.geometry.isBufferGeometry) {
                            if (!targetObject.geometry.morphAttributes) {
                                console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                                return;
                            }
                            if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
                        } else {
                            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.", this);
                            return;
                        }
                    }
                    bindingType = this.BindingType.ArrayElement;
                    this.resolvedProperty = nodeProperty;
                    this.propertyIndex = propertyIndex;
                } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {
                    // must use copy for Object3D.Euler/Quaternion
                    bindingType = this.BindingType.HasFromToArray;
                    this.resolvedProperty = nodeProperty;
                } else if (Array.isArray(nodeProperty)) {
                    bindingType = this.BindingType.EntireArray;
                    this.resolvedProperty = nodeProperty;
                } else this.propertyName = propertyName;
                // select getter / setter
                this.getValue = this.GetterByBindingType[bindingType];
                this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
            }
        },
        {
            key: "unbind",
            value: function unbind() {
                this.node = null;
                // back to the prototype version of getValue / setValue
                // note: avoiding to mutate the shape of 'this' via 'delete'
                this.getValue = this._getValue_unbound;
                this.setValue = this._setValue_unbound;
            }
        }
    ], [
        {
            key: "create",
            value: function create(root, path, parsedPath) {
                if (!(root && root.isAnimationObjectGroup)) return new PropertyBinding(root, path, parsedPath);
                else return new PropertyBinding.Composite(root, path, parsedPath);
            }
        },
        {
            key: "sanitizeNodeName",
            value: /**
	 * Replaces spaces with underscores and removes unsupported characters from
	 * node names, to ensure compatibility with parseTrackName().
	 *
	 * @param {string} name Node name to be sanitized.
	 * @return {string}
	 */ function sanitizeNodeName(name) {
                return name.replace(/\s/g, "_").replace($b383cde4e0574ff6$var$_reservedRe, "");
            }
        },
        {
            key: "parseTrackName",
            value: function parseTrackName(trackName) {
                var matches = $b383cde4e0574ff6$var$_trackRe.exec(trackName);
                if (!matches) throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
                var results = {
                    // directoryName: matches[ 1 ], // (tschw) currently unused
                    nodeName: matches[2],
                    objectName: matches[3],
                    objectIndex: matches[4],
                    propertyName: matches[5],
                    propertyIndex: matches[6]
                };
                var lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
                if (lastDot !== undefined && lastDot !== -1) {
                    var objectName = results.nodeName.substring(lastDot + 1);
                    // Object names must be checked against an allowlist. Otherwise, there
                    // is no way to parse 'foo.bar.baz': 'baz' must be a property, but
                    // 'bar' could be the objectName, or part of a nodeName (which can
                    // include '.' characters).
                    if ($b383cde4e0574ff6$var$_supportedObjectNames.indexOf(objectName) !== -1) {
                        results.nodeName = results.nodeName.substring(0, lastDot);
                        results.objectName = objectName;
                    }
                }
                if (results.propertyName === null || results.propertyName.length === 0) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
                return results;
            }
        },
        {
            key: "findNode",
            value: function findNode(root, nodeName) {
                if (!nodeName || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) return root;
                // search into skeleton bones.
                if (root.skeleton) {
                    var bone = root.skeleton.getBoneByName(nodeName);
                    if (bone !== undefined) return bone;
                }
                // search into node subtree.
                if (root.children) {
                    var searchNodeSubtree = function(children) {
                        for(var i = 0; i < children.length; i++){
                            var childNode = children[i];
                            if (childNode.name === nodeName || childNode.uuid === nodeName) return childNode;
                            var result = searchNodeSubtree(childNode.children);
                            if (result) return result;
                        }
                        return null;
                    };
                    var subTreeNode = searchNodeSubtree(root.children);
                    if (subTreeNode) return subTreeNode;
                }
                return null;
            }
        }
    ]);
    return PropertyBinding;
}();
$b383cde4e0574ff6$export$7bf70fcf9f891893.Composite = $b383cde4e0574ff6$var$Composite;
$b383cde4e0574ff6$export$7bf70fcf9f891893.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
};
$b383cde4e0574ff6$export$7bf70fcf9f891893.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
};
$b383cde4e0574ff6$export$7bf70fcf9f891893.prototype.GetterByBindingType = [
    $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._getValue_direct,
    $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._getValue_array,
    $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._getValue_arrayElement,
    $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._getValue_toArray
];
$b383cde4e0574ff6$export$7bf70fcf9f891893.prototype.SetterByBindingTypeAndVersioning = [
    [
        // Direct
        $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._setValue_direct,
        $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._setValue_direct_setNeedsUpdate,
        $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._setValue_direct_setMatrixWorldNeedsUpdate
    ],
    [
        // EntireArray
        $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._setValue_array,
        $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._setValue_array_setNeedsUpdate,
        $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._setValue_array_setMatrixWorldNeedsUpdate
    ],
    [
        // ArrayElement
        $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._setValue_arrayElement,
        $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._setValue_arrayElement_setNeedsUpdate,
        $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
    ],
    [
        // HasToFromArray
        $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._setValue_fromArray,
        $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._setValue_fromArray_setNeedsUpdate,
        $b383cde4e0574ff6$export$7bf70fcf9f891893.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
    ]
];
/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 *  - Add objects you would otherwise pass as 'root' to the
 *    constructor or the .clipAction method of AnimationMixer.
 *
 *  - Instead pass this object as 'root'.
 *
 *  - You can also add and remove objects later when the mixer
 *    is running.
 *
 * Note:
 *
 *    Objects of this class appear as one object to the mixer,
 *    so cache control of the individual objects must be done
 *    on the group.
 *
 * Limitation:
 *
 *  - The animated properties must be compatible among the
 *    all objects in the group.
 *
 *  - A single property can either be controlled through a
 *    target group or directly, but not both.
 */ var $b383cde4e0574ff6$export$30619c2afd3f34db = /*#__PURE__*/ function() {
    "use strict";
    function AnimationObjectGroup() {
        (0, $dnGTK.default)(this, AnimationObjectGroup);
        this.uuid = $b383cde4e0574ff6$var$generateUUID();
        // cached objects followed by the active ones
        this._objects = Array.prototype.slice.call(arguments);
        this.nCachedObjects_ = 0; // threshold
        // note: read by PropertyBinding.Composite
        var indices = {};
        this._indicesByUUID = indices; // for bookkeeping
        for(var i = 0, n = arguments.length; i !== n; ++i)indices[arguments[i].uuid] = i;
        this._paths = []; // inside: string
        this._parsedPaths = []; // inside: { we don't care, here }
        this._bindings = []; // inside: Array< PropertyBinding >
        this._bindingsIndicesByPath = {}; // inside: indices in these arrays
        var scope = this;
        this.stats = {
            objects: {
                get total () {
                    return scope._objects.length;
                },
                get inUse () {
                    return this.total - scope.nCachedObjects_;
                }
            },
            get bindingsPerObject () {
                return scope._bindings.length;
            }
        };
    }
    (0, $9SLyD.default)(AnimationObjectGroup, [
        {
            key: "add",
            value: function add() {
                var objects = this._objects, indicesByUUID = this._indicesByUUID, paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length;
                var knownObject = undefined, nObjects = objects.length, nCachedObjects = this.nCachedObjects_;
                for(var i = 0, n = arguments.length; i !== n; ++i){
                    var object = arguments[i], uuid = object.uuid;
                    var index = indicesByUUID[uuid];
                    if (index === undefined) {
                        // unknown object -> add it to the ACTIVE region
                        index = nObjects++;
                        indicesByUUID[uuid] = index;
                        objects.push(object);
                        // accounting is done, now do the same for all bindings
                        for(var j = 0, m = nBindings; j !== m; ++j)bindings[j].push(new $b383cde4e0574ff6$export$7bf70fcf9f891893(object, paths[j], parsedPaths[j]));
                    } else if (index < nCachedObjects) {
                        knownObject = objects[index];
                        // move existing object to the ACTIVE region
                        var firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];
                        indicesByUUID[lastCachedObject.uuid] = index;
                        objects[index] = lastCachedObject;
                        indicesByUUID[uuid] = firstActiveIndex;
                        objects[firstActiveIndex] = object;
                        // accounting is done, now do the same for all bindings
                        for(var j1 = 0, m1 = nBindings; j1 !== m1; ++j1){
                            var bindingsForPath = bindings[j1], lastCached = bindingsForPath[firstActiveIndex];
                            var binding = bindingsForPath[index];
                            bindingsForPath[index] = lastCached;
                            if (binding === undefined) // since we do not bother to create new bindings
                            // for objects that are cached, the binding may
                            // or may not exist
                            binding = new $b383cde4e0574ff6$export$7bf70fcf9f891893(object, paths[j1], parsedPaths[j1]);
                            bindingsForPath[firstActiveIndex] = binding;
                        }
                    } else if (objects[index] !== knownObject) console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
                     // else the object is already where we want it to be
                } // for arguments
                this.nCachedObjects_ = nCachedObjects;
            }
        },
        {
            key: "remove",
            value: function remove() {
                var objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
                var nCachedObjects = this.nCachedObjects_;
                for(var i = 0, n = arguments.length; i !== n; ++i){
                    var object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
                    if (index !== undefined && index >= nCachedObjects) {
                        // move existing object into the CACHED region
                        var lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];
                        indicesByUUID[firstActiveObject.uuid] = index;
                        objects[index] = firstActiveObject;
                        indicesByUUID[uuid] = lastCachedIndex;
                        objects[lastCachedIndex] = object;
                        // accounting is done, now do the same for all bindings
                        for(var j = 0, m = nBindings; j !== m; ++j){
                            var bindingsForPath = bindings[j], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];
                            bindingsForPath[index] = firstActive;
                            bindingsForPath[lastCachedIndex] = binding;
                        }
                    }
                } // for arguments
                this.nCachedObjects_ = nCachedObjects;
            }
        },
        {
            // remove & forget
            key: "uncache",
            value: function uncache() {
                var objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
                var nCachedObjects = this.nCachedObjects_, nObjects = objects.length;
                for(var i = 0, n = arguments.length; i !== n; ++i){
                    var object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
                    if (index !== undefined) {
                        delete indicesByUUID[uuid];
                        if (index < nCachedObjects) {
                            // object is cached, shrink the CACHED region
                            var firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];
                            // last cached object takes this object's place
                            indicesByUUID[lastCachedObject.uuid] = index;
                            objects[index] = lastCachedObject;
                            // last object goes to the activated slot and pop
                            indicesByUUID[lastObject.uuid] = firstActiveIndex;
                            objects[firstActiveIndex] = lastObject;
                            objects.pop();
                            // accounting is done, now do the same for all bindings
                            for(var j = 0, m = nBindings; j !== m; ++j){
                                var bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];
                                bindingsForPath[index] = lastCached;
                                bindingsForPath[firstActiveIndex] = last;
                                bindingsForPath.pop();
                            }
                        } else {
                            // object is active, just swap with the last and pop
                            var lastIndex1 = --nObjects, lastObject1 = objects[lastIndex1];
                            if (lastIndex1 > 0) indicesByUUID[lastObject1.uuid] = index;
                            objects[index] = lastObject1;
                            objects.pop();
                            // accounting is done, now do the same for all bindings
                            for(var j1 = 0, m1 = nBindings; j1 !== m1; ++j1){
                                var bindingsForPath1 = bindings[j1];
                                bindingsForPath1[index] = bindingsForPath1[lastIndex1];
                                bindingsForPath1.pop();
                            }
                        } // cached or active
                    } // if object is known
                } // for arguments
                this.nCachedObjects_ = nCachedObjects;
            }
        },
        {
            // Internal interface used by befriended PropertyBinding.Composite:
            key: "subscribe_",
            value: function subscribe_(path, parsedPath) {
                // returns an array of bindings for the given path that is changed
                // according to the contained objects in the group
                var indicesByPath = this._bindingsIndicesByPath;
                var index = indicesByPath[path];
                var bindings = this._bindings;
                if (index !== undefined) return bindings[index];
                var paths = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = new Array(nObjects);
                index = bindings.length;
                indicesByPath[path] = index;
                paths.push(path);
                parsedPaths.push(parsedPath);
                bindings.push(bindingsForPath);
                for(var i = nCachedObjects, n = objects.length; i !== n; ++i){
                    var object = objects[i];
                    bindingsForPath[i] = new $b383cde4e0574ff6$export$7bf70fcf9f891893(object, path, parsedPath);
                }
                return bindingsForPath;
            }
        },
        {
            key: "unsubscribe_",
            value: function unsubscribe_(path) {
                // tells the group to forget about a property path and no longer
                // update the array previously obtained with 'subscribe_'
                var indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path];
                if (index !== undefined) {
                    var paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex], lastBindingsPath = path[lastBindingsIndex];
                    indicesByPath[lastBindingsPath] = index;
                    bindings[index] = lastBindings;
                    bindings.pop();
                    parsedPaths[index] = parsedPaths[lastBindingsIndex];
                    parsedPaths.pop();
                    paths[index] = paths[lastBindingsIndex];
                    paths.pop();
                }
            }
        }
    ]);
    return AnimationObjectGroup;
}();
$b383cde4e0574ff6$export$30619c2afd3f34db.prototype.isAnimationObjectGroup = true;
var $b383cde4e0574ff6$var$AnimationAction = /*#__PURE__*/ function() {
    "use strict";
    function AnimationAction(mixer, clip) {
        var localRoot = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, blendMode = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : clip.blendMode;
        (0, $dnGTK.default)(this, AnimationAction);
        this._mixer = mixer;
        this._clip = clip;
        this._localRoot = localRoot;
        this.blendMode = blendMode;
        var tracks = clip.tracks, nTracks = tracks.length, interpolants = new Array(nTracks);
        var interpolantSettings = {
            endingStart: $b383cde4e0574ff6$export$7f795934b84ab523,
            endingEnd: $b383cde4e0574ff6$export$7f795934b84ab523
        };
        for(var i = 0; i !== nTracks; ++i){
            var interpolant = tracks[i].createInterpolant(null);
            interpolants[i] = interpolant;
            interpolant.settings = interpolantSettings;
        }
        this._interpolantSettings = interpolantSettings;
        this._interpolants = interpolants; // bound by the mixer
        // inside: PropertyMixer (managed by the mixer)
        this._propertyBindings = new Array(nTracks);
        this._cacheIndex = null; // for the memory manager
        this._byClipCacheIndex = null; // for the memory manager
        this._timeScaleInterpolant = null;
        this._weightInterpolant = null;
        this.loop = $b383cde4e0574ff6$export$dfaf4422ce096e29;
        this._loopCount = -1;
        // global mixer time when the action is to be started
        // it's set back to 'null' upon start of the action
        this._startTime = null;
        // scaled local time of the action
        // gets clamped or wrapped to 0..clip.duration according to loop
        this.time = 0;
        this.timeScale = 1;
        this._effectiveTimeScale = 1;
        this.weight = 1;
        this._effectiveWeight = 1;
        this.repetitions = Infinity; // no. of repetitions when looping
        this.paused = false; // true -> zero effective time scale
        this.enabled = true; // false -> zero effective weight
        this.clampWhenFinished = false; // keep feeding the last frame?
        this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate
        this.zeroSlopeAtEnd = true; // clips for start, loop and end
    }
    (0, $9SLyD.default)(AnimationAction, [
        {
            // State & Scheduling
            key: "play",
            value: function play() {
                this._mixer._activateAction(this);
                return this;
            }
        },
        {
            key: "stop",
            value: function stop() {
                this._mixer._deactivateAction(this);
                return this.reset();
            }
        },
        {
            key: "reset",
            value: function reset() {
                this.paused = false;
                this.enabled = true;
                this.time = 0; // restart clip
                this._loopCount = -1; // forget previous loops
                this._startTime = null; // forget scheduling
                return this.stopFading().stopWarping();
            }
        },
        {
            key: "isRunning",
            value: function isRunning() {
                return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
            }
        },
        {
            // return true when play has been called
            key: "isScheduled",
            value: function isScheduled() {
                return this._mixer._isActiveAction(this);
            }
        },
        {
            key: "startAt",
            value: function startAt(time) {
                this._startTime = time;
                return this;
            }
        },
        {
            key: "setLoop",
            value: function setLoop(mode, repetitions) {
                this.loop = mode;
                this.repetitions = repetitions;
                return this;
            }
        },
        {
            // Weight
            // set the weight stopping any scheduled fading
            // although .enabled = false yields an effective weight of zero, this
            // method does *not* change .enabled, because it would be confusing
            key: "setEffectiveWeight",
            value: function setEffectiveWeight(weight) {
                this.weight = weight;
                // note: same logic as when updated at runtime
                this._effectiveWeight = this.enabled ? weight : 0;
                return this.stopFading();
            }
        },
        {
            // return the weight considering fading and .enabled
            key: "getEffectiveWeight",
            value: function getEffectiveWeight() {
                return this._effectiveWeight;
            }
        },
        {
            key: "fadeIn",
            value: function fadeIn(duration) {
                return this._scheduleFading(duration, 0, 1);
            }
        },
        {
            key: "fadeOut",
            value: function fadeOut(duration) {
                return this._scheduleFading(duration, 1, 0);
            }
        },
        {
            key: "crossFadeFrom",
            value: function crossFadeFrom(fadeOutAction, duration, warp) {
                fadeOutAction.fadeOut(duration);
                this.fadeIn(duration);
                if (warp) {
                    var fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration, startEndRatio = fadeOutDuration / fadeInDuration, endStartRatio = fadeInDuration / fadeOutDuration;
                    fadeOutAction.warp(1.0, startEndRatio, duration);
                    this.warp(endStartRatio, 1.0, duration);
                }
                return this;
            }
        },
        {
            key: "crossFadeTo",
            value: function crossFadeTo(fadeInAction, duration, warp) {
                return fadeInAction.crossFadeFrom(this, duration, warp);
            }
        },
        {
            key: "stopFading",
            value: function stopFading() {
                var weightInterpolant = this._weightInterpolant;
                if (weightInterpolant !== null) {
                    this._weightInterpolant = null;
                    this._mixer._takeBackControlInterpolant(weightInterpolant);
                }
                return this;
            }
        },
        {
            // Time Scale Control
            // set the time scale stopping any scheduled warping
            // although .paused = true yields an effective time scale of zero, this
            // method does *not* change .paused, because it would be confusing
            key: "setEffectiveTimeScale",
            value: function setEffectiveTimeScale(timeScale) {
                this.timeScale = timeScale;
                this._effectiveTimeScale = this.paused ? 0 : timeScale;
                return this.stopWarping();
            }
        },
        {
            // return the time scale considering warping and .paused
            key: "getEffectiveTimeScale",
            value: function getEffectiveTimeScale() {
                return this._effectiveTimeScale;
            }
        },
        {
            key: "setDuration",
            value: function setDuration(duration) {
                this.timeScale = this._clip.duration / duration;
                return this.stopWarping();
            }
        },
        {
            key: "syncWith",
            value: function syncWith(action) {
                this.time = action.time;
                this.timeScale = action.timeScale;
                return this.stopWarping();
            }
        },
        {
            key: "halt",
            value: function halt(duration) {
                return this.warp(this._effectiveTimeScale, 0, duration);
            }
        },
        {
            key: "warp",
            value: function warp(startTimeScale, endTimeScale, duration) {
                var mixer = this._mixer, now = mixer.time, timeScale = this.timeScale;
                var interpolant = this._timeScaleInterpolant;
                if (interpolant === null) {
                    interpolant = mixer._lendControlInterpolant();
                    this._timeScaleInterpolant = interpolant;
                }
                var times = interpolant.parameterPositions, values = interpolant.sampleValues;
                times[0] = now;
                times[1] = now + duration;
                values[0] = startTimeScale / timeScale;
                values[1] = endTimeScale / timeScale;
                return this;
            }
        },
        {
            key: "stopWarping",
            value: function stopWarping() {
                var timeScaleInterpolant = this._timeScaleInterpolant;
                if (timeScaleInterpolant !== null) {
                    this._timeScaleInterpolant = null;
                    this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
                }
                return this;
            }
        },
        {
            // Object Accessors
            key: "getMixer",
            value: function getMixer() {
                return this._mixer;
            }
        },
        {
            key: "getClip",
            value: function getClip() {
                return this._clip;
            }
        },
        {
            key: "getRoot",
            value: function getRoot() {
                return this._localRoot || this._mixer._root;
            }
        },
        {
            // Interna
            key: "_update",
            value: function _update(time, deltaTime, timeDirection, accuIndex) {
                // called by the mixer
                if (!this.enabled) {
                    // call ._updateWeight() to update ._effectiveWeight
                    this._updateWeight(time);
                    return;
                }
                var startTime = this._startTime;
                if (startTime !== null) {
                    // check for scheduled start of action
                    var timeRunning = (time - startTime) * timeDirection;
                    if (timeRunning < 0 || timeDirection === 0) return; // yet to come / don't decide when delta = 0
                    // start
                    this._startTime = null; // unschedule
                    deltaTime = timeDirection * timeRunning;
                }
                // apply time scale and advance time
                deltaTime *= this._updateTimeScale(time);
                var clipTime = this._updateTime(deltaTime);
                // note: _updateTime may disable the action resulting in
                // an effective weight of 0
                var weight = this._updateWeight(time);
                if (weight > 0) {
                    var interpolants = this._interpolants;
                    var propertyMixers = this._propertyBindings;
                    switch(this.blendMode){
                        case $b383cde4e0574ff6$export$d875e029ef558d3:
                            for(var j = 0, m = interpolants.length; j !== m; ++j){
                                interpolants[j].evaluate(clipTime);
                                propertyMixers[j].accumulateAdditive(weight);
                            }
                            break;
                        case $b383cde4e0574ff6$export$bcfbbdcf8de7f8cd:
                        default:
                            for(var j1 = 0, m1 = interpolants.length; j1 !== m1; ++j1){
                                interpolants[j1].evaluate(clipTime);
                                propertyMixers[j1].accumulate(accuIndex, weight);
                            }
                    }
                }
            }
        },
        {
            key: "_updateWeight",
            value: function _updateWeight(time) {
                var weight = 0;
                if (this.enabled) {
                    weight = this.weight;
                    var interpolant = this._weightInterpolant;
                    if (interpolant !== null) {
                        var interpolantValue = interpolant.evaluate(time)[0];
                        weight *= interpolantValue;
                        if (time > interpolant.parameterPositions[1]) {
                            this.stopFading();
                            if (interpolantValue === 0) // faded out, disable
                            this.enabled = false;
                        }
                    }
                }
                this._effectiveWeight = weight;
                return weight;
            }
        },
        {
            key: "_updateTimeScale",
            value: function _updateTimeScale(time) {
                var timeScale = 0;
                if (!this.paused) {
                    timeScale = this.timeScale;
                    var interpolant = this._timeScaleInterpolant;
                    if (interpolant !== null) {
                        var interpolantValue = interpolant.evaluate(time)[0];
                        timeScale *= interpolantValue;
                        if (time > interpolant.parameterPositions[1]) {
                            this.stopWarping();
                            if (timeScale === 0) // motion has halted, pause
                            this.paused = true;
                            else // warp done - apply final time scale
                            this.timeScale = timeScale;
                        }
                    }
                }
                this._effectiveTimeScale = timeScale;
                return timeScale;
            }
        },
        {
            key: "_updateTime",
            value: function _updateTime(deltaTime) {
                var duration = this._clip.duration;
                var loop = this.loop;
                var time = this.time + deltaTime;
                var loopCount = this._loopCount;
                var pingPong = loop === $b383cde4e0574ff6$export$f8f6f2041b78e210;
                if (deltaTime === 0) {
                    if (loopCount === -1) return time;
                    return pingPong && (loopCount & 1) === 1 ? duration - time : time;
                }
                if (loop === $b383cde4e0574ff6$export$d62fdc9d1b1cccad) {
                    if (loopCount === -1) {
                        // just started
                        this._loopCount = 0;
                        this._setEndings(true, true, false);
                    }
                    handle_stop: {
                        if (time >= duration) time = duration;
                        else if (time < 0) time = 0;
                        else {
                            this.time = time;
                            break handle_stop;
                        }
                        if (this.clampWhenFinished) this.paused = true;
                        else this.enabled = false;
                        this.time = time;
                        this._mixer.dispatchEvent({
                            type: "finished",
                            action: this,
                            direction: deltaTime < 0 ? -1 : 1
                        });
                    }
                } else {
                    if (loopCount === -1) {
                        // just started
                        if (deltaTime >= 0) {
                            loopCount = 0;
                            this._setEndings(true, this.repetitions === 0, pingPong);
                        } else // when looping in reverse direction, the initial
                        // transition through zero counts as a repetition,
                        // so leave loopCount at -1
                        this._setEndings(this.repetitions === 0, true, pingPong);
                    }
                    if (time >= duration || time < 0) {
                        // wrap around
                        var loopDelta = Math.floor(time / duration); // signed
                        time -= duration * loopDelta;
                        loopCount += Math.abs(loopDelta);
                        var pending = this.repetitions - loopCount;
                        if (pending <= 0) {
                            // have to stop (switch state, clamp time, fire event)
                            if (this.clampWhenFinished) this.paused = true;
                            else this.enabled = false;
                            time = deltaTime > 0 ? duration : 0;
                            this.time = time;
                            this._mixer.dispatchEvent({
                                type: "finished",
                                action: this,
                                direction: deltaTime > 0 ? 1 : -1
                            });
                        } else {
                            // keep running
                            if (pending === 1) {
                                // entering the last round
                                var atStart = deltaTime < 0;
                                this._setEndings(atStart, !atStart, pingPong);
                            } else this._setEndings(false, false, pingPong);
                            this._loopCount = loopCount;
                            this.time = time;
                            this._mixer.dispatchEvent({
                                type: "loop",
                                action: this,
                                loopDelta: loopDelta
                            });
                        }
                    } else this.time = time;
                    if (pingPong && (loopCount & 1) === 1) // invert time for the "pong round"
                    return duration - time;
                }
                return time;
            }
        },
        {
            key: "_setEndings",
            value: function _setEndings(atStart, atEnd, pingPong) {
                var settings = this._interpolantSettings;
                if (pingPong) {
                    settings.endingStart = $b383cde4e0574ff6$export$24a4ccb5099273b5;
                    settings.endingEnd = $b383cde4e0574ff6$export$24a4ccb5099273b5;
                } else {
                    // assuming for LoopOnce atStart == atEnd == true
                    if (atStart) settings.endingStart = this.zeroSlopeAtStart ? $b383cde4e0574ff6$export$24a4ccb5099273b5 : $b383cde4e0574ff6$export$7f795934b84ab523;
                    else settings.endingStart = $b383cde4e0574ff6$export$8e8c3ecdcd8e1fee;
                    if (atEnd) settings.endingEnd = this.zeroSlopeAtEnd ? $b383cde4e0574ff6$export$24a4ccb5099273b5 : $b383cde4e0574ff6$export$7f795934b84ab523;
                    else settings.endingEnd = $b383cde4e0574ff6$export$8e8c3ecdcd8e1fee;
                }
            }
        },
        {
            key: "_scheduleFading",
            value: function _scheduleFading(duration, weightNow, weightThen) {
                var mixer = this._mixer, now = mixer.time;
                var interpolant = this._weightInterpolant;
                if (interpolant === null) {
                    interpolant = mixer._lendControlInterpolant();
                    this._weightInterpolant = interpolant;
                }
                var times = interpolant.parameterPositions, values = interpolant.sampleValues;
                times[0] = now;
                values[0] = weightNow;
                times[1] = now + duration;
                values[1] = weightThen;
                return this;
            }
        }
    ]);
    return AnimationAction;
}();
var $b383cde4e0574ff6$export$fbd77e5aefaa0102 = /*#__PURE__*/ function(EventDispatcher) {
    "use strict";
    (0, $gQI4D.default)(AnimationMixer, EventDispatcher);
    var _super = (0, $a0Xbx.default)(AnimationMixer);
    function AnimationMixer(root) {
        (0, $dnGTK.default)(this, AnimationMixer);
        var _this;
        _this = _super.call(this);
        _this._root = root;
        _this._initMemoryManager();
        _this._accuIndex = 0;
        _this.time = 0;
        _this.timeScale = 1.0;
        return _this;
    }
    (0, $9SLyD.default)(AnimationMixer, [
        {
            key: "_bindAction",
            value: function _bindAction(action, prototypeAction) {
                var root = action._localRoot || this._root, tracks = action._clip.tracks, nTracks = tracks.length, bindings = action._propertyBindings, interpolants = action._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName;
                var bindingsByName = bindingsByRoot[rootUuid];
                if (bindingsByName === undefined) {
                    bindingsByName = {};
                    bindingsByRoot[rootUuid] = bindingsByName;
                }
                for(var i = 0; i !== nTracks; ++i){
                    var track = tracks[i], trackName = track.name;
                    var binding = bindingsByName[trackName];
                    if (binding !== undefined) bindings[i] = binding;
                    else {
                        binding = bindings[i];
                        if (binding !== undefined) {
                            // existing binding, make sure the cache knows
                            if (binding._cacheIndex === null) {
                                ++binding.referenceCount;
                                this._addInactiveBinding(binding, rootUuid, trackName);
                            }
                            continue;
                        }
                        var path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
                        binding = new $b383cde4e0574ff6$export$dfe0af1ca1acb78a($b383cde4e0574ff6$export$7bf70fcf9f891893.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
                        ++binding.referenceCount;
                        this._addInactiveBinding(binding, rootUuid, trackName);
                        bindings[i] = binding;
                    }
                    interpolants[i].resultBuffer = binding.buffer;
                }
            }
        },
        {
            key: "_activateAction",
            value: function _activateAction(action) {
                if (!this._isActiveAction(action)) {
                    if (action._cacheIndex === null) {
                        // this action has been forgotten by the cache, but the user
                        // appears to be still using it -> rebind
                        var rootUuid = (action._localRoot || this._root).uuid, clipUuid = action._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];
                        this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);
                        this._addInactiveAction(action, clipUuid, rootUuid);
                    }
                    var bindings = action._propertyBindings;
                    // increment reference counts / sort out state
                    for(var i = 0, n = bindings.length; i !== n; ++i){
                        var binding = bindings[i];
                        if (binding.useCount++ === 0) {
                            this._lendBinding(binding);
                            binding.saveOriginalState();
                        }
                    }
                    this._lendAction(action);
                }
            }
        },
        {
            key: "_deactivateAction",
            value: function _deactivateAction(action) {
                if (this._isActiveAction(action)) {
                    var bindings = action._propertyBindings;
                    // decrement reference counts / sort out state
                    for(var i = 0, n = bindings.length; i !== n; ++i){
                        var binding = bindings[i];
                        if (--binding.useCount === 0) {
                            binding.restoreOriginalState();
                            this._takeBackBinding(binding);
                        }
                    }
                    this._takeBackAction(action);
                }
            }
        },
        {
            // Memory manager
            key: "_initMemoryManager",
            value: function _initMemoryManager() {
                this._actions = []; // 'nActiveActions' followed by inactive ones
                this._nActiveActions = 0;
                this._actionsByClip = {};
                // inside:
                // {
                // 	knownActions: Array< AnimationAction > - used as prototypes
                // 	actionByRoot: AnimationAction - lookup
                // }
                this._bindings = []; // 'nActiveBindings' followed by inactive ones
                this._nActiveBindings = 0;
                this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >
                this._controlInterpolants = []; // same game as above
                this._nActiveControlInterpolants = 0;
                var scope = this;
                this.stats = {
                    actions: {
                        get total () {
                            return scope._actions.length;
                        },
                        get inUse () {
                            return scope._nActiveActions;
                        }
                    },
                    bindings: {
                        get total () {
                            return scope._bindings.length;
                        },
                        get inUse () {
                            return scope._nActiveBindings;
                        }
                    },
                    controlInterpolants: {
                        get total () {
                            return scope._controlInterpolants.length;
                        },
                        get inUse () {
                            return scope._nActiveControlInterpolants;
                        }
                    }
                };
            }
        },
        {
            // Memory management for AnimationAction objects
            key: "_isActiveAction",
            value: function _isActiveAction(action) {
                var index = action._cacheIndex;
                return index !== null && index < this._nActiveActions;
            }
        },
        {
            key: "_addInactiveAction",
            value: function _addInactiveAction(action, clipUuid, rootUuid) {
                var actions = this._actions, actionsByClip = this._actionsByClip;
                var actionsForClip = actionsByClip[clipUuid];
                if (actionsForClip === undefined) {
                    actionsForClip = {
                        knownActions: [
                            action
                        ],
                        actionByRoot: {}
                    };
                    action._byClipCacheIndex = 0;
                    actionsByClip[clipUuid] = actionsForClip;
                } else {
                    var knownActions = actionsForClip.knownActions;
                    action._byClipCacheIndex = knownActions.length;
                    knownActions.push(action);
                }
                action._cacheIndex = actions.length;
                actions.push(action);
                actionsForClip.actionByRoot[rootUuid] = action;
            }
        },
        {
            key: "_removeInactiveAction",
            value: function _removeInactiveAction(action) {
                var actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action._cacheIndex;
                lastInactiveAction._cacheIndex = cacheIndex;
                actions[cacheIndex] = lastInactiveAction;
                actions.pop();
                action._cacheIndex = null;
                var clipUuid = action._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action._byClipCacheIndex;
                lastKnownAction._byClipCacheIndex = byClipCacheIndex;
                knownActionsForClip[byClipCacheIndex] = lastKnownAction;
                knownActionsForClip.pop();
                action._byClipCacheIndex = null;
                var actionByRoot = actionsForClip.actionByRoot, rootUuid = (action._localRoot || this._root).uuid;
                delete actionByRoot[rootUuid];
                if (knownActionsForClip.length === 0) delete actionsByClip[clipUuid];
                this._removeInactiveBindingsForAction(action);
            }
        },
        {
            key: "_removeInactiveBindingsForAction",
            value: function _removeInactiveBindingsForAction(action) {
                var bindings = action._propertyBindings;
                for(var i = 0, n = bindings.length; i !== n; ++i){
                    var binding = bindings[i];
                    if (--binding.referenceCount === 0) this._removeInactiveBinding(binding);
                }
            }
        },
        {
            key: "_lendAction",
            value: function _lendAction(action) {
                // [ active actions |  inactive actions  ]
                // [  active actions >| inactive actions ]
                //                 s        a
                //                  <-swap->
                //                 a        s
                var actions = this._actions, prevIndex = action._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];
                action._cacheIndex = lastActiveIndex;
                actions[lastActiveIndex] = action;
                firstInactiveAction._cacheIndex = prevIndex;
                actions[prevIndex] = firstInactiveAction;
            }
        },
        {
            key: "_takeBackAction",
            value: function _takeBackAction(action) {
                // [  active actions  | inactive actions ]
                // [ active actions |< inactive actions  ]
                //        a        s
                //         <-swap->
                //        s        a
                var actions = this._actions, prevIndex = action._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];
                action._cacheIndex = firstInactiveIndex;
                actions[firstInactiveIndex] = action;
                lastActiveAction._cacheIndex = prevIndex;
                actions[prevIndex] = lastActiveAction;
            }
        },
        {
            // Memory management for PropertyMixer objects
            key: "_addInactiveBinding",
            value: function _addInactiveBinding(binding, rootUuid, trackName) {
                var bindingsByRoot = this._bindingsByRootAndName, bindings = this._bindings;
                var bindingByName = bindingsByRoot[rootUuid];
                if (bindingByName === undefined) {
                    bindingByName = {};
                    bindingsByRoot[rootUuid] = bindingByName;
                }
                bindingByName[trackName] = binding;
                binding._cacheIndex = bindings.length;
                bindings.push(binding);
            }
        },
        {
            key: "_removeInactiveBinding",
            value: function _removeInactiveBinding(binding) {
                var bindings = this._bindings, propBinding = binding.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding._cacheIndex;
                lastInactiveBinding._cacheIndex = cacheIndex;
                bindings[cacheIndex] = lastInactiveBinding;
                bindings.pop();
                delete bindingByName[trackName];
                if (Object.keys(bindingByName).length === 0) delete bindingsByRoot[rootUuid];
            }
        },
        {
            key: "_lendBinding",
            value: function _lendBinding(binding) {
                var bindings = this._bindings, prevIndex = binding._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];
                binding._cacheIndex = lastActiveIndex;
                bindings[lastActiveIndex] = binding;
                firstInactiveBinding._cacheIndex = prevIndex;
                bindings[prevIndex] = firstInactiveBinding;
            }
        },
        {
            key: "_takeBackBinding",
            value: function _takeBackBinding(binding) {
                var bindings = this._bindings, prevIndex = binding._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];
                binding._cacheIndex = firstInactiveIndex;
                bindings[firstInactiveIndex] = binding;
                lastActiveBinding._cacheIndex = prevIndex;
                bindings[prevIndex] = lastActiveBinding;
            }
        },
        {
            // Memory management of Interpolants for weight and time scale
            key: "_lendControlInterpolant",
            value: function _lendControlInterpolant() {
                var interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++;
                var interpolant = interpolants[lastActiveIndex];
                if (interpolant === undefined) {
                    interpolant = new $b383cde4e0574ff6$export$a8e6009059f51e1a(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
                    interpolant.__cacheIndex = lastActiveIndex;
                    interpolants[lastActiveIndex] = interpolant;
                }
                return interpolant;
            }
        },
        {
            key: "_takeBackControlInterpolant",
            value: function _takeBackControlInterpolant(interpolant) {
                var interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];
                interpolant.__cacheIndex = firstInactiveIndex;
                interpolants[firstInactiveIndex] = interpolant;
                lastActiveInterpolant.__cacheIndex = prevIndex;
                interpolants[prevIndex] = lastActiveInterpolant;
            }
        },
        {
            // return an action for a clip optionally using a custom root target
            // object (this method allocates a lot of dynamic memory in case a
            // previously unknown clip/root combination is specified)
            key: "clipAction",
            value: function clipAction(clip, optionalRoot, blendMode) {
                var root = optionalRoot || this._root, rootUuid = root.uuid;
                var clipObject = typeof clip === "string" ? $b383cde4e0574ff6$export$d942c706bf23829c.findByName(root, clip) : clip;
                var clipUuid = clipObject !== null ? clipObject.uuid : clip;
                var actionsForClip = this._actionsByClip[clipUuid];
                var prototypeAction = null;
                if (blendMode === undefined) {
                    if (clipObject !== null) blendMode = clipObject.blendMode;
                    else blendMode = $b383cde4e0574ff6$export$bcfbbdcf8de7f8cd;
                }
                if (actionsForClip !== undefined) {
                    var existingAction = actionsForClip.actionByRoot[rootUuid];
                    if (existingAction !== undefined && existingAction.blendMode === blendMode) return existingAction;
                    // we know the clip, so we don't have to parse all
                    // the bindings again but can just copy
                    prototypeAction = actionsForClip.knownActions[0];
                    // also, take the clip from the prototype action
                    if (clipObject === null) clipObject = prototypeAction._clip;
                }
                // clip must be known when specified via string
                if (clipObject === null) return null;
                // allocate all resources required to run it
                var newAction = new $b383cde4e0574ff6$var$AnimationAction(this, clipObject, optionalRoot, blendMode);
                this._bindAction(newAction, prototypeAction);
                // and make the action known to the memory manager
                this._addInactiveAction(newAction, clipUuid, rootUuid);
                return newAction;
            }
        },
        {
            // get an existing action
            key: "existingAction",
            value: function existingAction(clip, optionalRoot) {
                var root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = typeof clip === "string" ? $b383cde4e0574ff6$export$d942c706bf23829c.findByName(root, clip) : clip, clipUuid = clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid];
                if (actionsForClip !== undefined) return actionsForClip.actionByRoot[rootUuid] || null;
                return null;
            }
        },
        {
            // deactivates all previously scheduled actions
            key: "stopAllAction",
            value: function stopAllAction() {
                var actions = this._actions, nActions = this._nActiveActions;
                for(var i = nActions - 1; i >= 0; --i)actions[i].stop();
                return this;
            }
        },
        {
            // advance the time and update apply the animation
            key: "update",
            value: function update(deltaTime) {
                deltaTime *= this.timeScale;
                var actions = this._actions, nActions = this._nActiveActions, time = this.time += deltaTime, timeDirection = Math.sign(deltaTime), accuIndex = this._accuIndex ^= 1;
                // run active actions
                for(var i = 0; i !== nActions; ++i){
                    var action = actions[i];
                    action._update(time, deltaTime, timeDirection, accuIndex);
                }
                // update scene graph
                var bindings = this._bindings, nBindings = this._nActiveBindings;
                for(var i1 = 0; i1 !== nBindings; ++i1)bindings[i1].apply(accuIndex);
                return this;
            }
        },
        {
            // Allows you to seek to a specific time in an animation.
            key: "setTime",
            value: function setTime(timeInSeconds) {
                this.time = 0; // Zero out time attribute for AnimationMixer object;
                for(var i = 0; i < this._actions.length; i++)this._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.
                return this.update(timeInSeconds); // Update used to set exact time. Returns "this" AnimationMixer object.
            }
        },
        {
            // return this mixer's root target object
            key: "getRoot",
            value: function getRoot() {
                return this._root;
            }
        },
        {
            // free all resources specific to a particular clip
            key: "uncacheClip",
            value: function uncacheClip(clip) {
                var actions = this._actions, clipUuid = clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
                if (actionsForClip !== undefined) {
                    // note: just calling _removeInactiveAction would mess up the
                    // iteration state and also require updating the state we can
                    // just throw away
                    var actionsToRemove = actionsForClip.knownActions;
                    for(var i = 0, n = actionsToRemove.length; i !== n; ++i){
                        var action = actionsToRemove[i];
                        this._deactivateAction(action);
                        var cacheIndex = action._cacheIndex, lastInactiveAction = actions[actions.length - 1];
                        action._cacheIndex = null;
                        action._byClipCacheIndex = null;
                        lastInactiveAction._cacheIndex = cacheIndex;
                        actions[cacheIndex] = lastInactiveAction;
                        actions.pop();
                        this._removeInactiveBindingsForAction(action);
                    }
                    delete actionsByClip[clipUuid];
                }
            }
        },
        {
            // free all resources specific to a particular root target object
            key: "uncacheRoot",
            value: function uncacheRoot(root) {
                var rootUuid = root.uuid, actionsByClip = this._actionsByClip;
                for(var clipUuid in actionsByClip){
                    var actionByRoot = actionsByClip[clipUuid].actionByRoot, action = actionByRoot[rootUuid];
                    if (action !== undefined) {
                        this._deactivateAction(action);
                        this._removeInactiveAction(action);
                    }
                }
                var bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid];
                if (bindingByName !== undefined) for(var trackName in bindingByName){
                    var binding = bindingByName[trackName];
                    binding.restoreOriginalState();
                    this._removeInactiveBinding(binding);
                }
            }
        },
        {
            // remove a targeted clip from the cache
            key: "uncacheAction",
            value: function uncacheAction(clip, optionalRoot) {
                var action = this.existingAction(clip, optionalRoot);
                if (action !== null) {
                    this._deactivateAction(action);
                    this._removeInactiveAction(action);
                }
            }
        }
    ]);
    return AnimationMixer;
}($b383cde4e0574ff6$export$ec8b666c5fe2c75a);
$b383cde4e0574ff6$export$fbd77e5aefaa0102.prototype._controlInterpolantsResultBuffer = new Float32Array(1);
var $b383cde4e0574ff6$export$2947cebfe91c02f8 = /*#__PURE__*/ function() {
    "use strict";
    function Uniform(value) {
        (0, $dnGTK.default)(this, Uniform);
        if (typeof value === "string") {
            console.warn("THREE.Uniform: Type parameter is no longer needed.");
            value = arguments[1];
        }
        this.value = value;
    }
    (0, $9SLyD.default)(Uniform, [
        {
            key: "clone",
            value: function clone() {
                return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());
            }
        }
    ]);
    return Uniform;
}();
var $b383cde4e0574ff6$export$25ec0e1af1389358 = /*#__PURE__*/ function(InterleavedBuffer) {
    "use strict";
    (0, $gQI4D.default)(InstancedInterleavedBuffer, InterleavedBuffer);
    var _super = (0, $a0Xbx.default)(InstancedInterleavedBuffer);
    function InstancedInterleavedBuffer(array, stride) {
        var meshPerAttribute = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
        (0, $dnGTK.default)(this, InstancedInterleavedBuffer);
        var _this;
        _this = _super.call(this, array, stride);
        _this.meshPerAttribute = meshPerAttribute;
        return _this;
    }
    (0, $9SLyD.default)(InstancedInterleavedBuffer, [
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(InstancedInterleavedBuffer.prototype), "copy", this).call(this, source);
                this.meshPerAttribute = source.meshPerAttribute;
                return this;
            }
        },
        {
            key: "clone",
            value: function clone(data) {
                var ib = (0, $bWs11.default)((0, $6gb2n.default)(InstancedInterleavedBuffer.prototype), "clone", this).call(this, data);
                ib.meshPerAttribute = this.meshPerAttribute;
                return ib;
            }
        },
        {
            key: "toJSON",
            value: function toJSON(data) {
                var json = (0, $bWs11.default)((0, $6gb2n.default)(InstancedInterleavedBuffer.prototype), "toJSON", this).call(this, data);
                json.isInstancedInterleavedBuffer = true;
                json.meshPerAttribute = this.meshPerAttribute;
                return json;
            }
        }
    ]);
    return InstancedInterleavedBuffer;
}($b383cde4e0574ff6$export$3d5cd879f108f53f);
$b383cde4e0574ff6$export$25ec0e1af1389358.prototype.isInstancedInterleavedBuffer = true;
var $b383cde4e0574ff6$export$6b7339ae8dbddf73 = /*#__PURE__*/ function() {
    "use strict";
    function GLBufferAttribute(buffer, type, itemSize, elementSize, count) {
        (0, $dnGTK.default)(this, GLBufferAttribute);
        this.buffer = buffer;
        this.type = type;
        this.itemSize = itemSize;
        this.elementSize = elementSize;
        this.count = count;
        this.version = 0;
    }
    (0, $9SLyD.default)(GLBufferAttribute, [
        {
            key: "needsUpdate",
            set: function set(value) {
                if (value === true) this.version++;
            }
        },
        {
            key: "setBuffer",
            value: function setBuffer(buffer) {
                this.buffer = buffer;
                return this;
            }
        },
        {
            key: "setType",
            value: function setType(type, elementSize) {
                this.type = type;
                this.elementSize = elementSize;
                return this;
            }
        },
        {
            key: "setItemSize",
            value: function setItemSize(itemSize) {
                this.itemSize = itemSize;
                return this;
            }
        },
        {
            key: "setCount",
            value: function setCount(count) {
                this.count = count;
                return this;
            }
        }
    ]);
    return GLBufferAttribute;
}();
$b383cde4e0574ff6$export$6b7339ae8dbddf73.prototype.isGLBufferAttribute = true;
var $b383cde4e0574ff6$export$8b7aaceff00bd2f = /*#__PURE__*/ function() {
    "use strict";
    function Raycaster(origin, direction) {
        var near = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, far = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Infinity;
        (0, $dnGTK.default)(this, Raycaster);
        this.ray = new $b383cde4e0574ff6$export$a186db52eed6d40e(origin, direction);
        // direction is assumed to be normalized (for accurate distance calculations)
        this.near = near;
        this.far = far;
        this.camera = null;
        this.layers = new $b383cde4e0574ff6$export$89312ce47c0ca777();
        this.params = {
            Mesh: {},
            Line: {
                threshold: 1
            },
            LOD: {},
            Points: {
                threshold: 1
            },
            Sprite: {}
        };
    }
    (0, $9SLyD.default)(Raycaster, [
        {
            key: "set",
            value: function set(origin, direction) {
                // direction is assumed to be normalized (for accurate distance calculations)
                this.ray.set(origin, direction);
            }
        },
        {
            key: "setFromCamera",
            value: function setFromCamera(coords, camera) {
                if (camera && camera.isPerspectiveCamera) {
                    this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
                    this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();
                    this.camera = camera;
                } else if (camera && camera.isOrthographicCamera) {
                    this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera
                    this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
                    this.camera = camera;
                } else console.error("THREE.Raycaster: Unsupported camera type: " + camera.type);
            }
        },
        {
            key: "intersectObject",
            value: function intersectObject1(object) {
                var recursive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true, intersects = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
                $b383cde4e0574ff6$var$intersectObject(object, this, intersects, recursive);
                intersects.sort($b383cde4e0574ff6$var$ascSort);
                return intersects;
            }
        },
        {
            key: "intersectObjects",
            value: function intersectObjects(objects) {
                var recursive = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true, intersects = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
                for(var i = 0, l = objects.length; i < l; i++)$b383cde4e0574ff6$var$intersectObject(objects[i], this, intersects, recursive);
                intersects.sort($b383cde4e0574ff6$var$ascSort);
                return intersects;
            }
        }
    ]);
    return Raycaster;
}();
function $b383cde4e0574ff6$var$ascSort(a, b) {
    return a.distance - b.distance;
}
function $b383cde4e0574ff6$var$intersectObject(object, raycaster, intersects, recursive) {
    if (object.layers.test(raycaster.layers)) object.raycast(raycaster, intersects);
    if (recursive === true) {
        var children = object.children;
        for(var i = 0, l = children.length; i < l; i++)$b383cde4e0574ff6$var$intersectObject(children[i], raycaster, intersects, true);
    }
}
/**
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 * The azimuthal angle (theta) is measured from the positive z-axis.
 */ var $b383cde4e0574ff6$export$d712cd887b4a00f7 = /*#__PURE__*/ function() {
    "use strict";
    function Spherical() {
        var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, phi = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, theta = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
        (0, $dnGTK.default)(this, Spherical);
        this.radius = radius;
        this.phi = phi; // polar angle
        this.theta = theta; // azimuthal angle
        return this;
    }
    (0, $9SLyD.default)(Spherical, [
        {
            key: "set",
            value: function set(radius, phi, theta) {
                this.radius = radius;
                this.phi = phi;
                this.theta = theta;
                return this;
            }
        },
        {
            key: "copy",
            value: function copy(other) {
                this.radius = other.radius;
                this.phi = other.phi;
                this.theta = other.theta;
                return this;
            }
        },
        {
            // restrict phi to be betwee EPS and PI-EPS
            key: "makeSafe",
            value: function makeSafe() {
                var EPS = 0.000001;
                this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
                return this;
            }
        },
        {
            key: "setFromVector3",
            value: function setFromVector3(v) {
                return this.setFromCartesianCoords(v.x, v.y, v.z);
            }
        },
        {
            key: "setFromCartesianCoords",
            value: function setFromCartesianCoords(x, y, z) {
                this.radius = Math.sqrt(x * x + y * y + z * z);
                if (this.radius === 0) {
                    this.theta = 0;
                    this.phi = 0;
                } else {
                    this.theta = Math.atan2(x, z);
                    this.phi = Math.acos($b383cde4e0574ff6$var$clamp(y / this.radius, -1, 1));
                }
                return this;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        }
    ]);
    return Spherical;
}();
/**
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 */ var $b383cde4e0574ff6$export$287165bb2177f4fd = /*#__PURE__*/ function() {
    "use strict";
    function Cylindrical() {
        var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, theta = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, y = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
        (0, $dnGTK.default)(this, Cylindrical);
        this.radius = radius; // distance from the origin to a point in the x-z plane
        this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
        this.y = y; // height above the x-z plane
        return this;
    }
    (0, $9SLyD.default)(Cylindrical, [
        {
            key: "set",
            value: function set(radius, theta, y) {
                this.radius = radius;
                this.theta = theta;
                this.y = y;
                return this;
            }
        },
        {
            key: "copy",
            value: function copy(other) {
                this.radius = other.radius;
                this.theta = other.theta;
                this.y = other.y;
                return this;
            }
        },
        {
            key: "setFromVector3",
            value: function setFromVector3(v) {
                return this.setFromCartesianCoords(v.x, v.y, v.z);
            }
        },
        {
            key: "setFromCartesianCoords",
            value: function setFromCartesianCoords(x, y, z) {
                this.radius = Math.sqrt(x * x + z * z);
                this.theta = Math.atan2(x, z);
                this.y = y;
                return this;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        }
    ]);
    return Cylindrical;
}();
var $b383cde4e0574ff6$var$_vector$4 = /*@__PURE__*/ new $b383cde4e0574ff6$export$c977b3e384af9ae1();
var $b383cde4e0574ff6$export$60f553fa130f08b0 = /*#__PURE__*/ function() {
    "use strict";
    function Box2() {
        var min = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$c977b3e384af9ae1(Infinity, Infinity), max = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$c977b3e384af9ae1(-Infinity, -Infinity);
        (0, $dnGTK.default)(this, Box2);
        this.min = min;
        this.max = max;
    }
    (0, $9SLyD.default)(Box2, [
        {
            key: "set",
            value: function set(min, max) {
                this.min.copy(min);
                this.max.copy(max);
                return this;
            }
        },
        {
            key: "setFromPoints",
            value: function setFromPoints(points) {
                this.makeEmpty();
                for(var i = 0, il = points.length; i < il; i++)this.expandByPoint(points[i]);
                return this;
            }
        },
        {
            key: "setFromCenterAndSize",
            value: function setFromCenterAndSize(center, size) {
                var halfSize = $b383cde4e0574ff6$var$_vector$4.copy(size).multiplyScalar(0.5);
                this.min.copy(center).sub(halfSize);
                this.max.copy(center).add(halfSize);
                return this;
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        },
        {
            key: "copy",
            value: function copy(box) {
                this.min.copy(box.min);
                this.max.copy(box.max);
                return this;
            }
        },
        {
            key: "makeEmpty",
            value: function makeEmpty() {
                this.min.x = this.min.y = Infinity;
                this.max.x = this.max.y = -Infinity;
                return this;
            }
        },
        {
            key: "isEmpty",
            value: function isEmpty() {
                // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
                return this.max.x < this.min.x || this.max.y < this.min.y;
            }
        },
        {
            key: "getCenter",
            value: function getCenter(target) {
                return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
            }
        },
        {
            key: "getSize",
            value: function getSize(target) {
                return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
            }
        },
        {
            key: "expandByPoint",
            value: function expandByPoint(point) {
                this.min.min(point);
                this.max.max(point);
                return this;
            }
        },
        {
            key: "expandByVector",
            value: function expandByVector(vector) {
                this.min.sub(vector);
                this.max.add(vector);
                return this;
            }
        },
        {
            key: "expandByScalar",
            value: function expandByScalar(scalar) {
                this.min.addScalar(-scalar);
                this.max.addScalar(scalar);
                return this;
            }
        },
        {
            key: "containsPoint",
            value: function containsPoint(point) {
                return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
            }
        },
        {
            key: "containsBox",
            value: function containsBox(box) {
                return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
            }
        },
        {
            key: "getParameter",
            value: function getParameter(point, target) {
                // This can potentially have a divide by zero if the box
                // has a size dimension of 0.
                return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
            }
        },
        {
            key: "intersectsBox",
            value: function intersectsBox(box) {
                // using 4 splitting planes to rule out intersections
                return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
            }
        },
        {
            key: "clampPoint",
            value: function clampPoint(point, target) {
                return target.copy(point).clamp(this.min, this.max);
            }
        },
        {
            key: "distanceToPoint",
            value: function distanceToPoint(point) {
                var clampedPoint = $b383cde4e0574ff6$var$_vector$4.copy(point).clamp(this.min, this.max);
                return clampedPoint.sub(point).length();
            }
        },
        {
            key: "intersect",
            value: function intersect(box) {
                this.min.max(box.min);
                this.max.min(box.max);
                return this;
            }
        },
        {
            key: "union",
            value: function union(box) {
                this.min.min(box.min);
                this.max.max(box.max);
                return this;
            }
        },
        {
            key: "translate",
            value: function translate(offset) {
                this.min.add(offset);
                this.max.add(offset);
                return this;
            }
        },
        {
            key: "equals",
            value: function equals(box) {
                return box.min.equals(this.min) && box.max.equals(this.max);
            }
        }
    ]);
    return Box2;
}();
$b383cde4e0574ff6$export$60f553fa130f08b0.prototype.isBox2 = true;
var $b383cde4e0574ff6$var$_startP = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_startEnd = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$e0ba6359f1954fd3 = /*#__PURE__*/ function() {
    "use strict";
    function Line3() {
        var start = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$64b5c384219d3699(), end = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$64b5c384219d3699();
        (0, $dnGTK.default)(this, Line3);
        this.start = start;
        this.end = end;
    }
    (0, $9SLyD.default)(Line3, [
        {
            key: "set",
            value: function set(start, end) {
                this.start.copy(start);
                this.end.copy(end);
                return this;
            }
        },
        {
            key: "copy",
            value: function copy(line) {
                this.start.copy(line.start);
                this.end.copy(line.end);
                return this;
            }
        },
        {
            key: "getCenter",
            value: function getCenter(target) {
                return target.addVectors(this.start, this.end).multiplyScalar(0.5);
            }
        },
        {
            key: "delta",
            value: function delta(target) {
                return target.subVectors(this.end, this.start);
            }
        },
        {
            key: "distanceSq",
            value: function distanceSq() {
                return this.start.distanceToSquared(this.end);
            }
        },
        {
            key: "distance",
            value: function distance() {
                return this.start.distanceTo(this.end);
            }
        },
        {
            key: "at",
            value: function at(t, target) {
                return this.delta(target).multiplyScalar(t).add(this.start);
            }
        },
        {
            key: "closestPointToPointParameter",
            value: function closestPointToPointParameter(point, clampToLine) {
                $b383cde4e0574ff6$var$_startP.subVectors(point, this.start);
                $b383cde4e0574ff6$var$_startEnd.subVectors(this.end, this.start);
                var startEnd2 = $b383cde4e0574ff6$var$_startEnd.dot($b383cde4e0574ff6$var$_startEnd);
                var startEnd_startP = $b383cde4e0574ff6$var$_startEnd.dot($b383cde4e0574ff6$var$_startP);
                var t = startEnd_startP / startEnd2;
                if (clampToLine) t = $b383cde4e0574ff6$var$clamp(t, 0, 1);
                return t;
            }
        },
        {
            key: "closestPointToPoint",
            value: function closestPointToPoint(point, clampToLine, target) {
                var t = this.closestPointToPointParameter(point, clampToLine);
                return this.delta(target).multiplyScalar(t).add(this.start);
            }
        },
        {
            key: "applyMatrix4",
            value: function applyMatrix4(matrix) {
                this.start.applyMatrix4(matrix);
                this.end.applyMatrix4(matrix);
                return this;
            }
        },
        {
            key: "equals",
            value: function equals(line) {
                return line.start.equals(this.start) && line.end.equals(this.end);
            }
        },
        {
            key: "clone",
            value: function clone() {
                return new this.constructor().copy(this);
            }
        }
    ]);
    return Line3;
}();
var $b383cde4e0574ff6$var$_vector$3 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$4b14638ffdd81e68 = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(SpotLightHelper, Object3D);
    var _super = (0, $a0Xbx.default)(SpotLightHelper);
    function SpotLightHelper(light, color) {
        (0, $dnGTK.default)(this, SpotLightHelper);
        var _this;
        _this = _super.call(this);
        _this.light = light;
        _this.light.updateMatrixWorld();
        _this.matrix = light.matrixWorld;
        _this.matrixAutoUpdate = false;
        _this.color = color;
        var geometry = new $b383cde4e0574ff6$export$b7be63a67df8959();
        var positions = [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            -1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            -1,
            1
        ];
        for(var i = 0, j = 1, l = 32; i < l; i++, j++){
            var p1 = i / l * Math.PI * 2;
            var p2 = j / l * Math.PI * 2;
            positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
        }
        geometry.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(positions, 3));
        var material = new $b383cde4e0574ff6$export$fbaaa33907730a0c({
            fog: false,
            toneMapped: false
        });
        _this.cone = new $b383cde4e0574ff6$export$ff1ed10fedfdd604(geometry, material);
        _this.add(_this.cone);
        _this.update();
        return _this;
    }
    (0, $9SLyD.default)(SpotLightHelper, [
        {
            key: "dispose",
            value: function dispose() {
                this.cone.geometry.dispose();
                this.cone.material.dispose();
            }
        },
        {
            key: "update",
            value: function update() {
                this.light.updateMatrixWorld();
                var coneLength = this.light.distance ? this.light.distance : 1000;
                var coneWidth = coneLength * Math.tan(this.light.angle);
                this.cone.scale.set(coneWidth, coneWidth, coneLength);
                $b383cde4e0574ff6$var$_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);
                this.cone.lookAt($b383cde4e0574ff6$var$_vector$3);
                if (this.color !== undefined) this.cone.material.color.set(this.color);
                else this.cone.material.color.copy(this.light.color);
            }
        }
    ]);
    return SpotLightHelper;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
var $b383cde4e0574ff6$var$_vector$2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_boneMatrix = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$var$_matrixWorldInv = /*@__PURE__*/ new $b383cde4e0574ff6$export$2ae72fc923e5eb5();
var $b383cde4e0574ff6$export$5277df3c9e732259 = /*#__PURE__*/ function(LineSegments) {
    "use strict";
    (0, $gQI4D.default)(SkeletonHelper, LineSegments);
    var _super = (0, $a0Xbx.default)(SkeletonHelper);
    function SkeletonHelper(object) {
        (0, $dnGTK.default)(this, SkeletonHelper);
        var _this;
        var bones = $b383cde4e0574ff6$var$getBoneList(object);
        var geometry = new $b383cde4e0574ff6$export$b7be63a67df8959();
        var vertices = [];
        var colors = [];
        var color1 = new $b383cde4e0574ff6$export$892596cec99bc70e(0, 0, 1);
        var color2 = new $b383cde4e0574ff6$export$892596cec99bc70e(0, 1, 0);
        for(var i = 0; i < bones.length; i++){
            var bone = bones[i];
            if (bone.parent && bone.parent.isBone) {
                vertices.push(0, 0, 0);
                vertices.push(0, 0, 0);
                colors.push(color1.r, color1.g, color1.b);
                colors.push(color2.r, color2.g, color2.b);
            }
        }
        geometry.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute("color", new $b383cde4e0574ff6$export$cbe7a62641830ebd(colors, 3));
        var material = new $b383cde4e0574ff6$export$fbaaa33907730a0c({
            vertexColors: true,
            depthTest: false,
            depthWrite: false,
            toneMapped: false,
            transparent: true
        });
        _this = _super.call(this, geometry, material);
        _this.type = "SkeletonHelper";
        _this.isSkeletonHelper = true;
        _this.root = object;
        _this.bones = bones;
        _this.matrix = object.matrixWorld;
        _this.matrixAutoUpdate = false;
        return _this;
    }
    (0, $9SLyD.default)(SkeletonHelper, [
        {
            key: "updateMatrixWorld",
            value: function updateMatrixWorld(force) {
                var bones = this.bones;
                var geometry = this.geometry;
                var position = geometry.getAttribute("position");
                $b383cde4e0574ff6$var$_matrixWorldInv.copy(this.root.matrixWorld).invert();
                for(var i = 0, j = 0; i < bones.length; i++){
                    var bone = bones[i];
                    if (bone.parent && bone.parent.isBone) {
                        $b383cde4e0574ff6$var$_boneMatrix.multiplyMatrices($b383cde4e0574ff6$var$_matrixWorldInv, bone.matrixWorld);
                        $b383cde4e0574ff6$var$_vector$2.setFromMatrixPosition($b383cde4e0574ff6$var$_boneMatrix);
                        position.setXYZ(j, $b383cde4e0574ff6$var$_vector$2.x, $b383cde4e0574ff6$var$_vector$2.y, $b383cde4e0574ff6$var$_vector$2.z);
                        $b383cde4e0574ff6$var$_boneMatrix.multiplyMatrices($b383cde4e0574ff6$var$_matrixWorldInv, bone.parent.matrixWorld);
                        $b383cde4e0574ff6$var$_vector$2.setFromMatrixPosition($b383cde4e0574ff6$var$_boneMatrix);
                        position.setXYZ(j + 1, $b383cde4e0574ff6$var$_vector$2.x, $b383cde4e0574ff6$var$_vector$2.y, $b383cde4e0574ff6$var$_vector$2.z);
                        j += 2;
                    }
                }
                geometry.getAttribute("position").needsUpdate = true;
                (0, $bWs11.default)((0, $6gb2n.default)(SkeletonHelper.prototype), "updateMatrixWorld", this).call(this, force);
            }
        }
    ]);
    return SkeletonHelper;
}($b383cde4e0574ff6$export$ff1ed10fedfdd604);
function $b383cde4e0574ff6$var$getBoneList(object) {
    var boneList = [];
    if (object && object.isBone) boneList.push(object);
    for(var i = 0; i < object.children.length; i++)boneList.push.apply(boneList, $b383cde4e0574ff6$var$getBoneList(object.children[i]));
    return boneList;
}
var $b383cde4e0574ff6$export$9a9291685b9e4023 = /*#__PURE__*/ function(Mesh) {
    "use strict";
    (0, $gQI4D.default)(PointLightHelper, Mesh);
    var _super = (0, $a0Xbx.default)(PointLightHelper);
    function PointLightHelper(light, sphereSize, color) {
        (0, $dnGTK.default)(this, PointLightHelper);
        var _this;
        var geometry = new $b383cde4e0574ff6$export$d5d06a966fec4192(sphereSize, 4, 2);
        var material = new $b383cde4e0574ff6$export$55cbcc9b622fe1f5({
            wireframe: true,
            fog: false,
            toneMapped: false
        });
        _this = _super.call(this, geometry, material);
        _this.light = light;
        _this.light.updateMatrixWorld();
        _this.color = color;
        _this.type = "PointLightHelper";
        _this.matrix = _this.light.matrixWorld;
        _this.matrixAutoUpdate = false;
        _this.update();
        return _this;
    }
    (0, $9SLyD.default)(PointLightHelper, [
        {
            key: "dispose",
            value: function dispose() {
                this.geometry.dispose();
                this.material.dispose();
            }
        },
        {
            key: "update",
            value: function update() {
                if (this.color !== undefined) this.material.color.set(this.color);
                else this.material.color.copy(this.light.color);
            /*
		const d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/ }
        }
    ]);
    return PointLightHelper;
}($b383cde4e0574ff6$export$e176487c05830cc5);
var $b383cde4e0574ff6$var$_vector$1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_color1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$892596cec99bc70e();
var $b383cde4e0574ff6$var$_color2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$892596cec99bc70e();
var $b383cde4e0574ff6$export$8dca15f13f4f8172 = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(HemisphereLightHelper, Object3D);
    var _super = (0, $a0Xbx.default)(HemisphereLightHelper);
    function HemisphereLightHelper(light, size, color) {
        (0, $dnGTK.default)(this, HemisphereLightHelper);
        var _this;
        _this = _super.call(this);
        _this.light = light;
        _this.light.updateMatrixWorld();
        _this.matrix = light.matrixWorld;
        _this.matrixAutoUpdate = false;
        _this.color = color;
        var geometry = new $b383cde4e0574ff6$export$8e05fc91596f4752(size);
        geometry.rotateY(Math.PI * 0.5);
        _this.material = new $b383cde4e0574ff6$export$55cbcc9b622fe1f5({
            wireframe: true,
            fog: false,
            toneMapped: false
        });
        if (_this.color === undefined) _this.material.vertexColors = true;
        var position = geometry.getAttribute("position");
        var colors = new Float32Array(position.count * 3);
        geometry.setAttribute("color", new $b383cde4e0574ff6$export$8dea267bd6bde117(colors, 3));
        _this.add(new $b383cde4e0574ff6$export$e176487c05830cc5(geometry, _this.material));
        _this.update();
        return _this;
    }
    (0, $9SLyD.default)(HemisphereLightHelper, [
        {
            key: "dispose",
            value: function dispose() {
                this.children[0].geometry.dispose();
                this.children[0].material.dispose();
            }
        },
        {
            key: "update",
            value: function update() {
                var mesh = this.children[0];
                if (this.color !== undefined) this.material.color.set(this.color);
                else {
                    var colors = mesh.geometry.getAttribute("color");
                    $b383cde4e0574ff6$var$_color1.copy(this.light.color);
                    $b383cde4e0574ff6$var$_color2.copy(this.light.groundColor);
                    for(var i = 0, l = colors.count; i < l; i++){
                        var color = i < l / 2 ? $b383cde4e0574ff6$var$_color1 : $b383cde4e0574ff6$var$_color2;
                        colors.setXYZ(i, color.r, color.g, color.b);
                    }
                    colors.needsUpdate = true;
                }
                mesh.lookAt($b383cde4e0574ff6$var$_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());
            }
        }
    ]);
    return HemisphereLightHelper;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
var $b383cde4e0574ff6$export$3875d39926561055 = /*#__PURE__*/ function(LineSegments) {
    "use strict";
    (0, $gQI4D.default)(GridHelper, LineSegments);
    var _super = (0, $a0Xbx.default)(GridHelper);
    function GridHelper() {
        var size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10, divisions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10, color1 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0x444444, color2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0x888888;
        (0, $dnGTK.default)(this, GridHelper);
        var _this;
        color1 = new $b383cde4e0574ff6$export$892596cec99bc70e(color1);
        color2 = new $b383cde4e0574ff6$export$892596cec99bc70e(color2);
        var center = divisions / 2;
        var step = size / divisions;
        var halfSize = size / 2;
        var vertices = [], colors = [];
        for(var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step){
            vertices.push(-halfSize, 0, k, halfSize, 0, k);
            vertices.push(k, 0, -halfSize, k, 0, halfSize);
            var color = i === center ? color1 : color2;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
        }
        var geometry = new $b383cde4e0574ff6$export$b7be63a67df8959();
        geometry.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute("color", new $b383cde4e0574ff6$export$cbe7a62641830ebd(colors, 3));
        var material = new $b383cde4e0574ff6$export$fbaaa33907730a0c({
            vertexColors: true,
            toneMapped: false
        });
        _this = _super.call(this, geometry, material);
        _this.type = "GridHelper";
        return _this;
    }
    return GridHelper;
}($b383cde4e0574ff6$export$ff1ed10fedfdd604);
var $b383cde4e0574ff6$export$361430a10f533cd3 = /*#__PURE__*/ function(LineSegments) {
    "use strict";
    (0, $gQI4D.default)(PolarGridHelper, LineSegments);
    var _super = (0, $a0Xbx.default)(PolarGridHelper);
    function PolarGridHelper() {
        var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10, radials = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 16, circles = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 8, divisions = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 64, color1 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0x444444, color2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0x888888;
        (0, $dnGTK.default)(this, PolarGridHelper);
        var _this;
        color1 = new $b383cde4e0574ff6$export$892596cec99bc70e(color1);
        color2 = new $b383cde4e0574ff6$export$892596cec99bc70e(color2);
        var vertices = [];
        var colors = [];
        // create the radials
        for(var i = 0; i <= radials; i++){
            var v = i / radials * (Math.PI * 2);
            var x = Math.sin(v) * radius;
            var z = Math.cos(v) * radius;
            vertices.push(0, 0, 0);
            vertices.push(x, 0, z);
            var color = i & 1 ? color1 : color2;
            colors.push(color.r, color.g, color.b);
            colors.push(color.r, color.g, color.b);
        }
        // create the circles
        for(var i1 = 0; i1 <= circles; i1++){
            var color3 = i1 & 1 ? color1 : color2;
            var r = radius - radius / circles * i1;
            for(var j = 0; j < divisions; j++){
                // first vertex
                var v1 = j / divisions * (Math.PI * 2);
                var x1 = Math.sin(v1) * r;
                var z1 = Math.cos(v1) * r;
                vertices.push(x1, 0, z1);
                colors.push(color3.r, color3.g, color3.b);
                // second vertex
                v1 = (j + 1) / divisions * (Math.PI * 2);
                x1 = Math.sin(v1) * r;
                z1 = Math.cos(v1) * r;
                vertices.push(x1, 0, z1);
                colors.push(color3.r, color3.g, color3.b);
            }
        }
        var geometry = new $b383cde4e0574ff6$export$b7be63a67df8959();
        geometry.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute("color", new $b383cde4e0574ff6$export$cbe7a62641830ebd(colors, 3));
        var material = new $b383cde4e0574ff6$export$fbaaa33907730a0c({
            vertexColors: true,
            toneMapped: false
        });
        _this = _super.call(this, geometry, material);
        _this.type = "PolarGridHelper";
        return _this;
    }
    return PolarGridHelper;
}($b383cde4e0574ff6$export$ff1ed10fedfdd604);
var $b383cde4e0574ff6$var$_v1 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_v2 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_v3 = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$export$f8e434dc14203e7d = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(DirectionalLightHelper, Object3D);
    var _super = (0, $a0Xbx.default)(DirectionalLightHelper);
    function DirectionalLightHelper(light, size, color) {
        (0, $dnGTK.default)(this, DirectionalLightHelper);
        var _this;
        _this = _super.call(this);
        _this.light = light;
        _this.light.updateMatrixWorld();
        _this.matrix = light.matrixWorld;
        _this.matrixAutoUpdate = false;
        _this.color = color;
        if (size === undefined) size = 1;
        var geometry = new $b383cde4e0574ff6$export$b7be63a67df8959();
        geometry.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd([
            -size,
            size,
            0,
            size,
            size,
            0,
            size,
            -size,
            0,
            -size,
            -size,
            0,
            -size,
            size,
            0
        ], 3));
        var material = new $b383cde4e0574ff6$export$fbaaa33907730a0c({
            fog: false,
            toneMapped: false
        });
        _this.lightPlane = new $b383cde4e0574ff6$export$17d680238e50603e(geometry, material);
        _this.add(_this.lightPlane);
        geometry = new $b383cde4e0574ff6$export$b7be63a67df8959();
        geometry.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd([
            0,
            0,
            0,
            0,
            0,
            1
        ], 3));
        _this.targetLine = new $b383cde4e0574ff6$export$17d680238e50603e(geometry, material);
        _this.add(_this.targetLine);
        _this.update();
        return _this;
    }
    (0, $9SLyD.default)(DirectionalLightHelper, [
        {
            key: "dispose",
            value: function dispose() {
                this.lightPlane.geometry.dispose();
                this.lightPlane.material.dispose();
                this.targetLine.geometry.dispose();
                this.targetLine.material.dispose();
            }
        },
        {
            key: "update",
            value: function update() {
                $b383cde4e0574ff6$var$_v1.setFromMatrixPosition(this.light.matrixWorld);
                $b383cde4e0574ff6$var$_v2.setFromMatrixPosition(this.light.target.matrixWorld);
                $b383cde4e0574ff6$var$_v3.subVectors($b383cde4e0574ff6$var$_v2, $b383cde4e0574ff6$var$_v1);
                this.lightPlane.lookAt($b383cde4e0574ff6$var$_v2);
                if (this.color !== undefined) {
                    this.lightPlane.material.color.set(this.color);
                    this.targetLine.material.color.set(this.color);
                } else {
                    this.lightPlane.material.color.copy(this.light.color);
                    this.targetLine.material.color.copy(this.light.color);
                }
                this.targetLine.lookAt($b383cde4e0574ff6$var$_v2);
                this.targetLine.scale.z = $b383cde4e0574ff6$var$_v3.length();
            }
        }
    ]);
    return DirectionalLightHelper;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
var $b383cde4e0574ff6$var$_vector = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_camera = /*@__PURE__*/ new $b383cde4e0574ff6$export$79f141de891a5fed();
/**
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
 */ var $b383cde4e0574ff6$export$ed8e93f853cd795 = /*#__PURE__*/ function(LineSegments) {
    "use strict";
    (0, $gQI4D.default)(CameraHelper, LineSegments);
    var _super = (0, $a0Xbx.default)(CameraHelper);
    function CameraHelper(camera) {
        (0, $dnGTK.default)(this, CameraHelper);
        var _this;
        var addLine = function addLine(a, b, color) {
            addPoint(a, color);
            addPoint(b, color);
        };
        var addPoint = function addPoint(id, color) {
            vertices.push(0, 0, 0);
            colors.push(color.r, color.g, color.b);
            if (pointMap[id] === undefined) pointMap[id] = [];
            pointMap[id].push(vertices.length / 3 - 1);
        };
        var geometry = new $b383cde4e0574ff6$export$b7be63a67df8959();
        var material = new $b383cde4e0574ff6$export$fbaaa33907730a0c({
            color: 0xffffff,
            vertexColors: true,
            toneMapped: false
        });
        var vertices = [];
        var colors = [];
        var pointMap = {};
        // colors
        var colorFrustum = new $b383cde4e0574ff6$export$892596cec99bc70e(0xffaa00);
        var colorCone = new $b383cde4e0574ff6$export$892596cec99bc70e(0xff0000);
        var colorUp = new $b383cde4e0574ff6$export$892596cec99bc70e(0x00aaff);
        var colorTarget = new $b383cde4e0574ff6$export$892596cec99bc70e(0xffffff);
        var colorCross = new $b383cde4e0574ff6$export$892596cec99bc70e(0x333333);
        // near
        addLine("n1", "n2", colorFrustum);
        addLine("n2", "n4", colorFrustum);
        addLine("n4", "n3", colorFrustum);
        addLine("n3", "n1", colorFrustum);
        // far
        addLine("f1", "f2", colorFrustum);
        addLine("f2", "f4", colorFrustum);
        addLine("f4", "f3", colorFrustum);
        addLine("f3", "f1", colorFrustum);
        // sides
        addLine("n1", "f1", colorFrustum);
        addLine("n2", "f2", colorFrustum);
        addLine("n3", "f3", colorFrustum);
        addLine("n4", "f4", colorFrustum);
        // cone
        addLine("p", "n1", colorCone);
        addLine("p", "n2", colorCone);
        addLine("p", "n3", colorCone);
        addLine("p", "n4", colorCone);
        // up
        addLine("u1", "u2", colorUp);
        addLine("u2", "u3", colorUp);
        addLine("u3", "u1", colorUp);
        // target
        addLine("c", "t", colorTarget);
        addLine("p", "c", colorCross);
        // cross
        addLine("cn1", "cn2", colorCross);
        addLine("cn3", "cn4", colorCross);
        addLine("cf1", "cf2", colorCross);
        addLine("cf3", "cf4", colorCross);
        geometry.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute("color", new $b383cde4e0574ff6$export$cbe7a62641830ebd(colors, 3));
        _this = _super.call(this, geometry, material);
        _this.type = "CameraHelper";
        _this.camera = camera;
        if (_this.camera.updateProjectionMatrix) _this.camera.updateProjectionMatrix();
        _this.matrix = camera.matrixWorld;
        _this.matrixAutoUpdate = false;
        _this.pointMap = pointMap;
        _this.update();
        return _this;
    }
    (0, $9SLyD.default)(CameraHelper, [
        {
            key: "update",
            value: function update() {
                var geometry = this.geometry;
                var pointMap = this.pointMap;
                var w = 1, h = 1;
                // we need just camera projection matrix inverse
                // world matrix must be identity
                $b383cde4e0574ff6$var$_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
                // center / target
                $b383cde4e0574ff6$var$setPoint("c", pointMap, geometry, $b383cde4e0574ff6$var$_camera, 0, 0, -1);
                $b383cde4e0574ff6$var$setPoint("t", pointMap, geometry, $b383cde4e0574ff6$var$_camera, 0, 0, 1);
                // near
                $b383cde4e0574ff6$var$setPoint("n1", pointMap, geometry, $b383cde4e0574ff6$var$_camera, -w, -h, -1);
                $b383cde4e0574ff6$var$setPoint("n2", pointMap, geometry, $b383cde4e0574ff6$var$_camera, w, -h, -1);
                $b383cde4e0574ff6$var$setPoint("n3", pointMap, geometry, $b383cde4e0574ff6$var$_camera, -w, h, -1);
                $b383cde4e0574ff6$var$setPoint("n4", pointMap, geometry, $b383cde4e0574ff6$var$_camera, w, h, -1);
                // far
                $b383cde4e0574ff6$var$setPoint("f1", pointMap, geometry, $b383cde4e0574ff6$var$_camera, -w, -h, 1);
                $b383cde4e0574ff6$var$setPoint("f2", pointMap, geometry, $b383cde4e0574ff6$var$_camera, w, -h, 1);
                $b383cde4e0574ff6$var$setPoint("f3", pointMap, geometry, $b383cde4e0574ff6$var$_camera, -w, h, 1);
                $b383cde4e0574ff6$var$setPoint("f4", pointMap, geometry, $b383cde4e0574ff6$var$_camera, w, h, 1);
                // up
                $b383cde4e0574ff6$var$setPoint("u1", pointMap, geometry, $b383cde4e0574ff6$var$_camera, w * 0.7, h * 1.1, -1);
                $b383cde4e0574ff6$var$setPoint("u2", pointMap, geometry, $b383cde4e0574ff6$var$_camera, -w * 0.7, h * 1.1, -1);
                $b383cde4e0574ff6$var$setPoint("u3", pointMap, geometry, $b383cde4e0574ff6$var$_camera, 0, h * 2, -1);
                // cross
                $b383cde4e0574ff6$var$setPoint("cf1", pointMap, geometry, $b383cde4e0574ff6$var$_camera, -w, 0, 1);
                $b383cde4e0574ff6$var$setPoint("cf2", pointMap, geometry, $b383cde4e0574ff6$var$_camera, w, 0, 1);
                $b383cde4e0574ff6$var$setPoint("cf3", pointMap, geometry, $b383cde4e0574ff6$var$_camera, 0, -h, 1);
                $b383cde4e0574ff6$var$setPoint("cf4", pointMap, geometry, $b383cde4e0574ff6$var$_camera, 0, h, 1);
                $b383cde4e0574ff6$var$setPoint("cn1", pointMap, geometry, $b383cde4e0574ff6$var$_camera, -w, 0, -1);
                $b383cde4e0574ff6$var$setPoint("cn2", pointMap, geometry, $b383cde4e0574ff6$var$_camera, w, 0, -1);
                $b383cde4e0574ff6$var$setPoint("cn3", pointMap, geometry, $b383cde4e0574ff6$var$_camera, 0, -h, -1);
                $b383cde4e0574ff6$var$setPoint("cn4", pointMap, geometry, $b383cde4e0574ff6$var$_camera, 0, h, -1);
                geometry.getAttribute("position").needsUpdate = true;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.geometry.dispose();
                this.material.dispose();
            }
        }
    ]);
    return CameraHelper;
}($b383cde4e0574ff6$export$ff1ed10fedfdd604);
function $b383cde4e0574ff6$var$setPoint(point, pointMap, geometry, camera, x, y, z) {
    $b383cde4e0574ff6$var$_vector.set(x, y, z).unproject(camera);
    var points = pointMap[point];
    if (points !== undefined) {
        var position = geometry.getAttribute("position");
        for(var i = 0, l = points.length; i < l; i++)position.setXYZ(points[i], $b383cde4e0574ff6$var$_vector.x, $b383cde4e0574ff6$var$_vector.y, $b383cde4e0574ff6$var$_vector.z);
    }
}
var $b383cde4e0574ff6$var$_box = /*@__PURE__*/ new $b383cde4e0574ff6$export$6f7d5a9418ab2aa3();
var $b383cde4e0574ff6$export$38a664cc862a6a9d = /*#__PURE__*/ function(LineSegments1) {
    "use strict";
    (0, $gQI4D.default)(BoxHelper, LineSegments1);
    var _super = (0, $a0Xbx.default)(BoxHelper);
    function BoxHelper(object) {
        var color = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0xffff00;
        (0, $dnGTK.default)(this, BoxHelper);
        var _this;
        var indices = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]);
        var positions = new Float32Array(24);
        var geometry = new $b383cde4e0574ff6$export$b7be63a67df8959();
        geometry.setIndex(new $b383cde4e0574ff6$export$8dea267bd6bde117(indices, 1));
        geometry.setAttribute("position", new $b383cde4e0574ff6$export$8dea267bd6bde117(positions, 3));
        _this = _super.call(this, geometry, new $b383cde4e0574ff6$export$fbaaa33907730a0c({
            color: color,
            toneMapped: false
        }));
        _this.object = object;
        _this.type = "BoxHelper";
        _this.matrixAutoUpdate = false;
        _this.update();
        return _this;
    }
    (0, $9SLyD.default)(BoxHelper, [
        {
            key: "update",
            value: function update(object) {
                if (object !== undefined) console.warn("THREE.BoxHelper: .update() has no longer arguments.");
                if (this.object !== undefined) $b383cde4e0574ff6$var$_box.setFromObject(this.object);
                if ($b383cde4e0574ff6$var$_box.isEmpty()) return;
                var min = $b383cde4e0574ff6$var$_box.min;
                var max = $b383cde4e0574ff6$var$_box.max;
                /*
			5____4
		1/___0/|
		| 6__|_7
		2/___3/

		0: max.x, max.y, max.z
		1: min.x, max.y, max.z
		2: min.x, min.y, max.z
		3: max.x, min.y, max.z
		4: max.x, max.y, min.z
		5: min.x, max.y, min.z
		6: min.x, min.y, min.z
		7: max.x, min.y, min.z
		*/ var position = this.geometry.attributes.position;
                var array = position.array;
                array[0] = max.x;
                array[1] = max.y;
                array[2] = max.z;
                array[3] = min.x;
                array[4] = max.y;
                array[5] = max.z;
                array[6] = min.x;
                array[7] = min.y;
                array[8] = max.z;
                array[9] = max.x;
                array[10] = min.y;
                array[11] = max.z;
                array[12] = max.x;
                array[13] = max.y;
                array[14] = min.z;
                array[15] = min.x;
                array[16] = max.y;
                array[17] = min.z;
                array[18] = min.x;
                array[19] = min.y;
                array[20] = min.z;
                array[21] = max.x;
                array[22] = min.y;
                array[23] = min.z;
                position.needsUpdate = true;
                this.geometry.computeBoundingSphere();
            }
        },
        {
            key: "setFromObject",
            value: function setFromObject(object) {
                this.object = object;
                this.update();
                return this;
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                $b383cde4e0574ff6$export$ff1ed10fedfdd604.prototype.copy.call(this, source);
                this.object = source.object;
                return this;
            }
        }
    ]);
    return BoxHelper;
}($b383cde4e0574ff6$export$ff1ed10fedfdd604);
var $b383cde4e0574ff6$export$ce39f4bb96c9a290 = /*#__PURE__*/ function(LineSegments) {
    "use strict";
    (0, $gQI4D.default)(Box3Helper, LineSegments);
    var _super = (0, $a0Xbx.default)(Box3Helper);
    function Box3Helper(box) {
        var color = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0xffff00;
        (0, $dnGTK.default)(this, Box3Helper);
        var _this;
        var indices = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]);
        var positions = [
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            -1
        ];
        var geometry = new $b383cde4e0574ff6$export$b7be63a67df8959();
        geometry.setIndex(new $b383cde4e0574ff6$export$8dea267bd6bde117(indices, 1));
        geometry.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(positions, 3));
        _this = _super.call(this, geometry, new $b383cde4e0574ff6$export$fbaaa33907730a0c({
            color: color,
            toneMapped: false
        }));
        _this.box = box;
        _this.type = "Box3Helper";
        _this.geometry.computeBoundingSphere();
        return _this;
    }
    (0, $9SLyD.default)(Box3Helper, [
        {
            key: "updateMatrixWorld",
            value: function updateMatrixWorld(force) {
                var box = this.box;
                if (box.isEmpty()) return;
                box.getCenter(this.position);
                box.getSize(this.scale);
                this.scale.multiplyScalar(0.5);
                (0, $bWs11.default)((0, $6gb2n.default)(Box3Helper.prototype), "updateMatrixWorld", this).call(this, force);
            }
        }
    ]);
    return Box3Helper;
}($b383cde4e0574ff6$export$ff1ed10fedfdd604);
var $b383cde4e0574ff6$export$a34fe8156c66e5d7 = /*#__PURE__*/ function(Line) {
    "use strict";
    (0, $gQI4D.default)(PlaneHelper, Line);
    var _super = (0, $a0Xbx.default)(PlaneHelper);
    function PlaneHelper(plane) {
        var size = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, hex = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0xffff00;
        (0, $dnGTK.default)(this, PlaneHelper);
        var _this;
        var color = hex;
        var positions = [
            1,
            -1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ];
        var geometry = new $b383cde4e0574ff6$export$b7be63a67df8959();
        geometry.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(positions, 3));
        geometry.computeBoundingSphere();
        _this = _super.call(this, geometry, new $b383cde4e0574ff6$export$fbaaa33907730a0c({
            color: color,
            toneMapped: false
        }));
        _this.type = "PlaneHelper";
        _this.plane = plane;
        _this.size = size;
        var positions2 = [
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1
        ];
        var geometry2 = new $b383cde4e0574ff6$export$b7be63a67df8959();
        geometry2.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(positions2, 3));
        geometry2.computeBoundingSphere();
        _this.add(new $b383cde4e0574ff6$export$e176487c05830cc5(geometry2, new $b383cde4e0574ff6$export$55cbcc9b622fe1f5({
            color: color,
            opacity: 0.2,
            transparent: true,
            depthWrite: false,
            toneMapped: false
        })));
        return _this;
    }
    (0, $9SLyD.default)(PlaneHelper, [
        {
            key: "updateMatrixWorld",
            value: function updateMatrixWorld(force) {
                var scale = -this.plane.constant;
                if (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter
                this.scale.set(0.5 * this.size, 0.5 * this.size, scale);
                this.children[0].material.side = scale < 0 ? $b383cde4e0574ff6$export$d9f0486e75b5ace : $b383cde4e0574ff6$export$2ede184fc2998901; // renderer flips side when determinant < 0; flipping not wanted here
                this.lookAt(this.plane.normal);
                (0, $bWs11.default)((0, $6gb2n.default)(PlaneHelper.prototype), "updateMatrixWorld", this).call(this, force);
            }
        }
    ]);
    return PlaneHelper;
}($b383cde4e0574ff6$export$17d680238e50603e);
var $b383cde4e0574ff6$var$_axis = /*@__PURE__*/ new $b383cde4e0574ff6$export$64b5c384219d3699();
var $b383cde4e0574ff6$var$_lineGeometry, $b383cde4e0574ff6$var$_coneGeometry;
var $b383cde4e0574ff6$export$a3008e7bd8d2cbe7 = /*#__PURE__*/ function(Object3D) {
    "use strict";
    (0, $gQI4D.default)(ArrowHelper, Object3D);
    var _super = (0, $a0Xbx.default)(ArrowHelper);
    function ArrowHelper() {
        var dir = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : new $b383cde4e0574ff6$export$64b5c384219d3699(0, 0, 1), origin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new $b383cde4e0574ff6$export$64b5c384219d3699(0, 0, 0), length = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, color = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0xffff00, headLength = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : length * 0.2, headWidth = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : headLength * 0.2;
        (0, $dnGTK.default)(this, ArrowHelper);
        var _this;
        _this = _super.call(this);
        _this.type = "ArrowHelper";
        if ($b383cde4e0574ff6$var$_lineGeometry === undefined) {
            $b383cde4e0574ff6$var$_lineGeometry = new $b383cde4e0574ff6$export$b7be63a67df8959();
            $b383cde4e0574ff6$var$_lineGeometry.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd([
                0,
                0,
                0,
                0,
                1,
                0
            ], 3));
            $b383cde4e0574ff6$var$_coneGeometry = new $b383cde4e0574ff6$export$d4345c83207d7c68(0, 0.5, 1, 5, 1);
            $b383cde4e0574ff6$var$_coneGeometry.translate(0, -0.5, 0);
        }
        _this.position.copy(origin);
        _this.line = new $b383cde4e0574ff6$export$17d680238e50603e($b383cde4e0574ff6$var$_lineGeometry, new $b383cde4e0574ff6$export$fbaaa33907730a0c({
            color: color,
            toneMapped: false
        }));
        _this.line.matrixAutoUpdate = false;
        _this.add(_this.line);
        _this.cone = new $b383cde4e0574ff6$export$e176487c05830cc5($b383cde4e0574ff6$var$_coneGeometry, new $b383cde4e0574ff6$export$55cbcc9b622fe1f5({
            color: color,
            toneMapped: false
        }));
        _this.cone.matrixAutoUpdate = false;
        _this.add(_this.cone);
        _this.setDirection(dir);
        _this.setLength(length, headLength, headWidth);
        return _this;
    }
    (0, $9SLyD.default)(ArrowHelper, [
        {
            key: "setDirection",
            value: function setDirection(dir) {
                // dir is assumed to be normalized
                if (dir.y > 0.99999) this.quaternion.set(0, 0, 0, 1);
                else if (dir.y < -0.99999) this.quaternion.set(1, 0, 0, 0);
                else {
                    $b383cde4e0574ff6$var$_axis.set(dir.z, 0, -dir.x).normalize();
                    var radians = Math.acos(dir.y);
                    this.quaternion.setFromAxisAngle($b383cde4e0574ff6$var$_axis, radians);
                }
            }
        },
        {
            key: "setLength",
            value: function setLength(length) {
                var headLength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : length * 0.2, headWidth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : headLength * 0.2;
                this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458
                this.line.updateMatrix();
                this.cone.scale.set(headWidth, headLength, headWidth);
                this.cone.position.y = length;
                this.cone.updateMatrix();
            }
        },
        {
            key: "setColor",
            value: function setColor(color) {
                this.line.material.color.set(color);
                this.cone.material.color.set(color);
            }
        },
        {
            key: "copy",
            value: function copy(source) {
                (0, $bWs11.default)((0, $6gb2n.default)(ArrowHelper.prototype), "copy", this).call(this, source, false);
                this.line.copy(source.line);
                this.cone.copy(source.cone);
                return this;
            }
        }
    ]);
    return ArrowHelper;
}($b383cde4e0574ff6$export$e4dd07dff30cc924);
var $b383cde4e0574ff6$export$6c8303f35b8578fd = /*#__PURE__*/ function(LineSegments) {
    "use strict";
    (0, $gQI4D.default)(AxesHelper, LineSegments);
    var _super = (0, $a0Xbx.default)(AxesHelper);
    function AxesHelper() {
        var size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
        (0, $dnGTK.default)(this, AxesHelper);
        var _this;
        var vertices = [
            0,
            0,
            0,
            size,
            0,
            0,
            0,
            0,
            0,
            0,
            size,
            0,
            0,
            0,
            0,
            0,
            0,
            size
        ];
        var colors = [
            1,
            0,
            0,
            1,
            0.6,
            0,
            0,
            1,
            0,
            0.6,
            1,
            0,
            0,
            0,
            1,
            0,
            0.6,
            1
        ];
        var geometry = new $b383cde4e0574ff6$export$b7be63a67df8959();
        geometry.setAttribute("position", new $b383cde4e0574ff6$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute("color", new $b383cde4e0574ff6$export$cbe7a62641830ebd(colors, 3));
        var material = new $b383cde4e0574ff6$export$fbaaa33907730a0c({
            vertexColors: true,
            toneMapped: false
        });
        _this = _super.call(this, geometry, material);
        _this.type = "AxesHelper";
        return _this;
    }
    (0, $9SLyD.default)(AxesHelper, [
        {
            key: "setColors",
            value: function setColors(xAxisColor, yAxisColor, zAxisColor) {
                var color = new $b383cde4e0574ff6$export$892596cec99bc70e();
                var array = this.geometry.attributes.color.array;
                color.set(xAxisColor);
                color.toArray(array, 0);
                color.toArray(array, 3);
                color.set(yAxisColor);
                color.toArray(array, 6);
                color.toArray(array, 9);
                color.set(zAxisColor);
                color.toArray(array, 12);
                color.toArray(array, 15);
                this.geometry.attributes.color.needsUpdate = true;
                return this;
            }
        },
        {
            key: "dispose",
            value: function dispose() {
                this.geometry.dispose();
                this.material.dispose();
            }
        }
    ]);
    return AxesHelper;
}($b383cde4e0574ff6$export$ff1ed10fedfdd604);
var $b383cde4e0574ff6$export$148534a3c727230b = /*#__PURE__*/ function() {
    "use strict";
    function ShapePath() {
        (0, $dnGTK.default)(this, ShapePath);
        this.type = "ShapePath";
        this.color = new $b383cde4e0574ff6$export$892596cec99bc70e();
        this.subPaths = [];
        this.currentPath = null;
    }
    (0, $9SLyD.default)(ShapePath, [
        {
            key: "moveTo",
            value: function moveTo(x, y) {
                this.currentPath = new $b383cde4e0574ff6$export$4b2950bdac9b6ee9();
                this.subPaths.push(this.currentPath);
                this.currentPath.moveTo(x, y);
                return this;
            }
        },
        {
            key: "lineTo",
            value: function lineTo(x, y) {
                this.currentPath.lineTo(x, y);
                return this;
            }
        },
        {
            key: "quadraticCurveTo",
            value: function quadraticCurveTo(aCPx, aCPy, aX, aY) {
                this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
                return this;
            }
        },
        {
            key: "bezierCurveTo",
            value: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
                this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
                return this;
            }
        },
        {
            key: "splineThru",
            value: function splineThru(pts) {
                this.currentPath.splineThru(pts);
                return this;
            }
        },
        {
            key: "toShapes",
            value: function toShapes(isCCW, noHoles) {
                var toShapesNoHoles = function toShapesNoHoles(inSubpaths) {
                    var shapes = [];
                    for(var i = 0, l = inSubpaths.length; i < l; i++){
                        var tmpPath = inSubpaths[i];
                        var tmpShape = new $b383cde4e0574ff6$export$6428a7f2611ef1fa();
                        tmpShape.curves = tmpPath.curves;
                        shapes.push(tmpShape);
                    }
                    return shapes;
                };
                var isPointInsidePolygon = function isPointInsidePolygon(inPt, inPolygon) {
                    var polyLen = inPolygon.length;
                    // inPt on polygon contour => immediate success    or
                    // toggling of inside/outside at every single! intersection point of an edge
                    //  with the horizontal line through inPt, left of inPt
                    //  not counting lowerY endpoints of edges and whole edges on that line
                    var inside = false;
                    for(var p = polyLen - 1, q = 0; q < polyLen; p = q++){
                        var edgeLowPt = inPolygon[p];
                        var edgeHighPt = inPolygon[q];
                        var edgeDx = edgeHighPt.x - edgeLowPt.x;
                        var edgeDy = edgeHighPt.y - edgeLowPt.y;
                        if (Math.abs(edgeDy) > Number.EPSILON) {
                            // not parallel
                            if (edgeDy < 0) {
                                edgeLowPt = inPolygon[q];
                                edgeDx = -edgeDx;
                                edgeHighPt = inPolygon[p];
                                edgeDy = -edgeDy;
                            }
                            if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;
                            if (inPt.y === edgeLowPt.y) {
                                if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?
                            // continue;				// no intersection or edgeLowPt => doesn't count !!!
                            } else {
                                var perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
                                if (perpEdge === 0) return true; // inPt is on contour ?
                                if (perpEdge < 0) continue;
                                inside = !inside; // true intersection left of inPt
                            }
                        } else {
                            // parallel or collinear
                            if (inPt.y !== edgeLowPt.y) continue; // parallel
                            // edge lies on the same horizontal line as inPt
                            if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !
                        // continue;
                        }
                    }
                    return inside;
                };
                var isClockWise = $b383cde4e0574ff6$export$96bdf6d9c66d7ba8.isClockWise;
                var subPaths = this.subPaths;
                if (subPaths.length === 0) return [];
                if (noHoles === true) return toShapesNoHoles(subPaths);
                var solid, tmpPath, tmpShape;
                var shapes = [];
                if (subPaths.length === 1) {
                    tmpPath = subPaths[0];
                    tmpShape = new $b383cde4e0574ff6$export$6428a7f2611ef1fa();
                    tmpShape.curves = tmpPath.curves;
                    shapes.push(tmpShape);
                    return shapes;
                }
                var holesFirst = !isClockWise(subPaths[0].getPoints());
                holesFirst = isCCW ? !holesFirst : holesFirst;
                // console.log("Holes first", holesFirst);
                var betterShapeHoles = [];
                var newShapes = [];
                var newShapeHoles = [];
                var mainIdx = 0;
                var tmpPoints;
                newShapes[mainIdx] = undefined;
                newShapeHoles[mainIdx] = [];
                for(var i = 0, l = subPaths.length; i < l; i++){
                    tmpPath = subPaths[i];
                    tmpPoints = tmpPath.getPoints();
                    solid = isClockWise(tmpPoints);
                    solid = isCCW ? !solid : solid;
                    if (solid) {
                        if (!holesFirst && newShapes[mainIdx]) mainIdx++;
                        newShapes[mainIdx] = {
                            s: new $b383cde4e0574ff6$export$6428a7f2611ef1fa(),
                            p: tmpPoints
                        };
                        newShapes[mainIdx].s.curves = tmpPath.curves;
                        if (holesFirst) mainIdx++;
                        newShapeHoles[mainIdx] = [];
                    //console.log('cw', i);
                    } else newShapeHoles[mainIdx].push({
                        h: tmpPath,
                        p: tmpPoints[0]
                    });
                }
                // only Holes? -> probably all Shapes with wrong orientation
                if (!newShapes[0]) return toShapesNoHoles(subPaths);
                if (newShapes.length > 1) {
                    var ambiguous = false;
                    var toChange = [];
                    for(var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++)betterShapeHoles[sIdx] = [];
                    for(var sIdx1 = 0, sLen1 = newShapes.length; sIdx1 < sLen1; sIdx1++){
                        var sho = newShapeHoles[sIdx1];
                        for(var hIdx = 0; hIdx < sho.length; hIdx++){
                            var ho = sho[hIdx];
                            var hole_unassigned = true;
                            for(var s2Idx = 0; s2Idx < newShapes.length; s2Idx++)if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
                                if (sIdx1 !== s2Idx) toChange.push({
                                    froms: sIdx1,
                                    tos: s2Idx,
                                    hole: hIdx
                                });
                                if (hole_unassigned) {
                                    hole_unassigned = false;
                                    betterShapeHoles[s2Idx].push(ho);
                                } else ambiguous = true;
                            }
                            if (hole_unassigned) betterShapeHoles[sIdx1].push(ho);
                        }
                    }
                    // console.log("ambiguous: ", ambiguous);
                    if (toChange.length > 0) // console.log("to change: ", toChange);
                    {
                        if (!ambiguous) newShapeHoles = betterShapeHoles;
                    }
                }
                var tmpHoles;
                for(var i1 = 0, il = newShapes.length; i1 < il; i1++){
                    tmpShape = newShapes[i1].s;
                    shapes.push(tmpShape);
                    tmpHoles = newShapeHoles[i1];
                    for(var j = 0, jl = tmpHoles.length; j < jl; j++)tmpShape.holes.push(tmpHoles[j].h);
                }
                //console.log("shape", shapes);
                return shapes;
            }
        }
    ]);
    return ShapePath;
}();
var $b383cde4e0574ff6$var$_floatView = new Float32Array(1);
var $b383cde4e0574ff6$var$_int32View = new Int32Array($b383cde4e0574ff6$var$_floatView.buffer);
var $b383cde4e0574ff6$export$11ce8b759162cc80 = /*#__PURE__*/ function() {
    "use strict";
    function DataUtils() {
        (0, $dnGTK.default)(this, DataUtils);
    }
    (0, $9SLyD.default)(DataUtils, null, [
        {
            key: "toHalfFloat",
            value: // Converts float32 to float16 (stored as uint16 value).
            function toHalfFloat(val) {
                if (val > 65504) {
                    console.warn("THREE.DataUtils.toHalfFloat(): value exceeds 65504.");
                    val = 65504; // maximum representable value in float16
                }
                // Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410
                /* This method is faster than the OpenEXR implementation (very often
		* used, eg. in Ogre), with the additional benefit of rounding, inspired
		* by James Tursa?s half-precision code. */ $b383cde4e0574ff6$var$_floatView[0] = val;
                var x = $b383cde4e0574ff6$var$_int32View[0];
                var bits = x >> 16 & 0x8000; /* Get the sign */ 
                var m = x >> 12 & 0x07ff; /* Keep one extra bit for rounding */ 
                var e = x >> 23 & 0xff; /* Using int is faster here */ 
                /* If zero, or denormal, or exponent underflows too much for a denormal
			* half, return signed zero. */ if (e < 103) return bits;
                /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */ if (e > 142) {
                    bits |= 0x7c00;
                    /* If exponent was 0xff and one mantissa bit was set, it means NaN,
						* not Inf, so make sure we set one mantissa bit too. */ bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;
                    return bits;
                }
                /* If exponent underflows but not too much, return a denormal */ if (e < 113) {
                    m |= 0x0800;
                    /* Extra rounding may overflow and set mantissa to 0 and exponent
				* to 1, which is OK. */ bits |= (m >> 114 - e) + (m >> 113 - e & 1);
                    return bits;
                }
                bits |= e - 112 << 10 | m >> 1;
                /* Extra rounding. An overflow will set mantissa to 0 and increment
			* the exponent, which is OK. */ bits += m & 1;
                return bits;
            }
        }
    ]);
    return DataUtils;
}();
var $b383cde4e0574ff6$export$195910b613d3dbcb = 0;
var $b383cde4e0574ff6$export$c8a71586e494fb81 = 1;
var $b383cde4e0574ff6$export$1a5c46edbdc9a5b7 = 0;
var $b383cde4e0574ff6$export$617e978cc3201d85 = 1;
var $b383cde4e0574ff6$export$969ede3d37172881 = 2;
function $b383cde4e0574ff6$export$8f0d8c869214e38a(materials) {
    console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");
    return materials;
}
function $b383cde4e0574ff6$export$4f1842f7cdf61f78() {
    var materials = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");
    materials.isMultiMaterial = true;
    materials.materials = materials;
    materials.clone = function() {
        return materials.slice();
    };
    return materials;
}
function $b383cde4e0574ff6$export$5c812f854e08d33d(geometry, material) {
    console.warn("THREE.PointCloud has been renamed to THREE.Points.");
    return new $b383cde4e0574ff6$export$1c787534cb11aa3e(geometry, material);
}
function $b383cde4e0574ff6$export$c36c68baa13912a5(material) {
    console.warn("THREE.Particle has been renamed to THREE.Sprite.");
    return new $b383cde4e0574ff6$export$3075603db8e6204c(material);
}
function $b383cde4e0574ff6$export$f219b6a0e4bb0b6d(geometry, material) {
    console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");
    return new $b383cde4e0574ff6$export$1c787534cb11aa3e(geometry, material);
}
function $b383cde4e0574ff6$export$29121d9ccd2f757a(parameters) {
    console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");
    return new $b383cde4e0574ff6$export$a178c45366ce5d6b(parameters);
}
function $b383cde4e0574ff6$export$ffa02580217a1c8(parameters) {
    console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");
    return new $b383cde4e0574ff6$export$a178c45366ce5d6b(parameters);
}
function $b383cde4e0574ff6$export$cb1306c614c86e6b(parameters) {
    console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");
    return new $b383cde4e0574ff6$export$a178c45366ce5d6b(parameters);
}
function $b383cde4e0574ff6$export$3e8a3cc8713efbec(x, y, z) {
    console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
    return new $b383cde4e0574ff6$export$64b5c384219d3699(x, y, z);
}
//
function $b383cde4e0574ff6$export$189ab5ea9d161e81(array, itemSize) {
    console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.");
    return new $b383cde4e0574ff6$export$8dea267bd6bde117(array, itemSize).setUsage($b383cde4e0574ff6$export$8505d14ac8546ca);
}
function $b383cde4e0574ff6$export$e0ae4f0a1804ea11(array, itemSize) {
    console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");
    return new $b383cde4e0574ff6$export$f9ff2d6a20248cbf(array, itemSize);
}
function $b383cde4e0574ff6$export$a0d192e03a5b32f5(array, itemSize) {
    console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");
    return new $b383cde4e0574ff6$export$cacc90cf35d11cdd(array, itemSize);
}
function $b383cde4e0574ff6$export$8ca743ab36552bfa(array, itemSize) {
    console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");
    return new $b383cde4e0574ff6$export$baaa85a1a812c157(array, itemSize);
}
function $b383cde4e0574ff6$export$5d9757676aad9dab(array, itemSize) {
    console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");
    return new $b383cde4e0574ff6$export$2b755a102ccdcefe(array, itemSize);
}
function $b383cde4e0574ff6$export$ed102ffd14092320(array, itemSize) {
    console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");
    return new $b383cde4e0574ff6$export$640a853f68025f2e(array, itemSize);
}
function $b383cde4e0574ff6$export$6acc479034658f15(array, itemSize) {
    console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");
    return new $b383cde4e0574ff6$export$46b369aed2968a0a(array, itemSize);
}
function $b383cde4e0574ff6$export$53474877d6e539b9(array, itemSize) {
    console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");
    return new $b383cde4e0574ff6$export$7eb8c9fa25cd5bd6(array, itemSize);
}
function $b383cde4e0574ff6$export$377af6eadc8006c3(array, itemSize) {
    console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");
    return new $b383cde4e0574ff6$export$cbe7a62641830ebd(array, itemSize);
}
function $b383cde4e0574ff6$export$b9212d1a67b6f081(array, itemSize) {
    console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");
    return new $b383cde4e0574ff6$export$9e0ade74842adbb8(array, itemSize);
}
//
$b383cde4e0574ff6$export$b0e83c3ef8d2db1.create = function(construct, getPoint) {
    console.log("THREE.Curve.create() has been deprecated");
    construct.prototype = Object.create($b383cde4e0574ff6$export$b0e83c3ef8d2db1.prototype);
    construct.prototype.constructor = construct;
    construct.prototype.getPoint = getPoint;
    return construct;
};
//
$b383cde4e0574ff6$export$4b2950bdac9b6ee9.prototype.fromPoints = function(points) {
    console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");
    return this.setFromPoints(points);
};
//
function $b383cde4e0574ff6$export$46c1eaab6b8d1e23(size) {
    console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");
    return new $b383cde4e0574ff6$export$6c8303f35b8578fd(size);
}
function $b383cde4e0574ff6$export$3c24c67720a2146c(object, color) {
    console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");
    return new $b383cde4e0574ff6$export$38a664cc862a6a9d(object, color);
}
function $b383cde4e0574ff6$export$e341a90264c62d4c(object, hex) {
    console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");
    return new $b383cde4e0574ff6$export$ff1ed10fedfdd604(new $b383cde4e0574ff6$export$4730b1542707547f(object.geometry), new $b383cde4e0574ff6$export$fbaaa33907730a0c({
        color: hex !== undefined ? hex : 0xffffff
    }));
}
$b383cde4e0574ff6$export$3875d39926561055.prototype.setColors = function() {
    console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
};
$b383cde4e0574ff6$export$5277df3c9e732259.prototype.update = function() {
    console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
};
function $b383cde4e0574ff6$export$72d033539c529f13(object, hex) {
    console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");
    return new $b383cde4e0574ff6$export$ff1ed10fedfdd604(new $b383cde4e0574ff6$export$4b739da06d24892b(object.geometry), new $b383cde4e0574ff6$export$fbaaa33907730a0c({
        color: hex !== undefined ? hex : 0xffffff
    }));
}
//
$b383cde4e0574ff6$export$3b0d6d7590275603.prototype.extractUrlBase = function(url) {
    console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
    return $b383cde4e0574ff6$export$b5d2dc08d867e41a.extractUrlBase(url);
};
$b383cde4e0574ff6$export$3b0d6d7590275603.Handlers = {
    add: function add() {
        console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
    },
    get: function get() {
        console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
    }
};
function $b383cde4e0574ff6$export$c8b77178c5db4e0d(manager) {
    console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");
    return new $b383cde4e0574ff6$export$98435a25b5cf7b2b(manager);
}
function $b383cde4e0574ff6$export$58c7c1107fc658f9(manager) {
    console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");
    return new $b383cde4e0574ff6$export$792d8a18f2c55855(manager);
}
//
$b383cde4e0574ff6$export$60f553fa130f08b0.prototype.center = function(optionalTarget) {
    console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
    return this.getCenter(optionalTarget);
};
$b383cde4e0574ff6$export$60f553fa130f08b0.prototype.empty = function() {
    console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
};
$b383cde4e0574ff6$export$60f553fa130f08b0.prototype.isIntersectionBox = function(box) {
    console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(box);
};
$b383cde4e0574ff6$export$60f553fa130f08b0.prototype.size = function(optionalTarget) {
    console.warn("THREE.Box2: .size() has been renamed to .getSize().");
    return this.getSize(optionalTarget);
};
//
$b383cde4e0574ff6$export$6f7d5a9418ab2aa3.prototype.center = function(optionalTarget) {
    console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
    return this.getCenter(optionalTarget);
};
$b383cde4e0574ff6$export$6f7d5a9418ab2aa3.prototype.empty = function() {
    console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
};
$b383cde4e0574ff6$export$6f7d5a9418ab2aa3.prototype.isIntersectionBox = function(box) {
    console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(box);
};
$b383cde4e0574ff6$export$6f7d5a9418ab2aa3.prototype.isIntersectionSphere = function(sphere) {
    console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(sphere);
};
$b383cde4e0574ff6$export$6f7d5a9418ab2aa3.prototype.size = function(optionalTarget) {
    console.warn("THREE.Box3: .size() has been renamed to .getSize().");
    return this.getSize(optionalTarget);
};
//
$b383cde4e0574ff6$export$805e8b72413ccaba.prototype.empty = function() {
    console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
};
//
$b383cde4e0574ff6$export$35efe6f4c85463d2.prototype.setFromMatrix = function(m) {
    console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().");
    return this.setFromProjectionMatrix(m);
};
//
$b383cde4e0574ff6$export$e0ba6359f1954fd3.prototype.center = function(optionalTarget) {
    console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
    return this.getCenter(optionalTarget);
};
//
$b383cde4e0574ff6$export$8ff26dafa08918.prototype.flattenToArrayOffset = function(array, offset) {
    console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(array, offset);
};
$b383cde4e0574ff6$export$8ff26dafa08918.prototype.multiplyVector3 = function(vector) {
    console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
    return vector.applyMatrix3(this);
};
$b383cde4e0574ff6$export$8ff26dafa08918.prototype.multiplyVector3Array = function() {
    console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
};
$b383cde4e0574ff6$export$8ff26dafa08918.prototype.applyToBufferAttribute = function(attribute) {
    console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.");
    return attribute.applyMatrix3(this);
};
$b383cde4e0574ff6$export$8ff26dafa08918.prototype.applyToVector3Array = function() {
    console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
};
$b383cde4e0574ff6$export$8ff26dafa08918.prototype.getInverse = function(matrix) {
    console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");
    return this.copy(matrix).invert();
};
//
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.extractPosition = function(m) {
    console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
    return this.copyPosition(m);
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.flattenToArrayOffset = function(array, offset) {
    console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(array, offset);
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.getPosition = function() {
    console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
    return new $b383cde4e0574ff6$export$64b5c384219d3699().setFromMatrixColumn(this, 3);
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.setRotationFromQuaternion = function(q) {
    console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
    return this.makeRotationFromQuaternion(q);
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.multiplyToArray = function() {
    console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.multiplyVector3 = function(vector) {
    console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return vector.applyMatrix4(this);
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.multiplyVector4 = function(vector) {
    console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return vector.applyMatrix4(this);
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.multiplyVector3Array = function() {
    console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.rotateAxis = function(v) {
    console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
    v.transformDirection(this);
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.crossVector = function(vector) {
    console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return vector.applyMatrix4(this);
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.translate = function() {
    console.error("THREE.Matrix4: .translate() has been removed.");
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.rotateX = function() {
    console.error("THREE.Matrix4: .rotateX() has been removed.");
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.rotateY = function() {
    console.error("THREE.Matrix4: .rotateY() has been removed.");
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.rotateZ = function() {
    console.error("THREE.Matrix4: .rotateZ() has been removed.");
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.rotateByAxis = function() {
    console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.applyToBufferAttribute = function(attribute) {
    console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.");
    return attribute.applyMatrix4(this);
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.applyToVector3Array = function() {
    console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.makeFrustum = function(left, right, bottom, top, near, far) {
    console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
    return this.makePerspective(left, right, top, bottom, near, far);
};
$b383cde4e0574ff6$export$2ae72fc923e5eb5.prototype.getInverse = function(matrix) {
    console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");
    return this.copy(matrix).invert();
};
//
$b383cde4e0574ff6$export$7ff5ac152ef991b0.prototype.isIntersectionLine = function(line) {
    console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
    return this.intersectsLine(line);
};
//
$b383cde4e0574ff6$export$23d6a54f0bbc85a3.prototype.multiplyVector3 = function(vector) {
    console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
    return vector.applyQuaternion(this);
};
$b383cde4e0574ff6$export$23d6a54f0bbc85a3.prototype.inverse = function() {
    console.warn("THREE.Quaternion: .inverse() has been renamed to invert().");
    return this.invert();
};
//
$b383cde4e0574ff6$export$a186db52eed6d40e.prototype.isIntersectionBox = function(box) {
    console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(box);
};
$b383cde4e0574ff6$export$a186db52eed6d40e.prototype.isIntersectionPlane = function(plane) {
    console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
    return this.intersectsPlane(plane);
};
$b383cde4e0574ff6$export$a186db52eed6d40e.prototype.isIntersectionSphere = function(sphere) {
    console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(sphere);
};
//
$b383cde4e0574ff6$export$5a465592bfe74b48.prototype.area = function() {
    console.warn("THREE.Triangle: .area() has been renamed to .getArea().");
    return this.getArea();
};
$b383cde4e0574ff6$export$5a465592bfe74b48.prototype.barycoordFromPoint = function(point, target) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return this.getBarycoord(point, target);
};
$b383cde4e0574ff6$export$5a465592bfe74b48.prototype.midpoint = function(target) {
    console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");
    return this.getMidpoint(target);
};
$b383cde4e0574ff6$export$5a465592bfe74b48.prototypenormal = function(target) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return this.getNormal(target);
};
$b383cde4e0574ff6$export$5a465592bfe74b48.prototype.plane = function(target) {
    console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");
    return this.getPlane(target);
};
$b383cde4e0574ff6$export$5a465592bfe74b48.barycoordFromPoint = function(point, a, b, c, target) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return $b383cde4e0574ff6$export$5a465592bfe74b48.getBarycoord(point, a, b, c, target);
};
$b383cde4e0574ff6$export$5a465592bfe74b48.normal = function(a, b, c, target) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return $b383cde4e0574ff6$export$5a465592bfe74b48.getNormal(a, b, c, target);
};
//
$b383cde4e0574ff6$export$6428a7f2611ef1fa.prototype.extractAllPoints = function(divisions) {
    console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
    return this.extractPoints(divisions);
};
$b383cde4e0574ff6$export$6428a7f2611ef1fa.prototype.extrude = function(options) {
    console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
    return new $b383cde4e0574ff6$export$91836d01b9f75a58(this, options);
};
$b383cde4e0574ff6$export$6428a7f2611ef1fa.prototype.makeGeometry = function(options) {
    console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
    return new $b383cde4e0574ff6$export$233afc324766bed8(this, options);
};
//
$b383cde4e0574ff6$export$c977b3e384af9ae1.prototype.fromAttribute = function(attribute, index, offset) {
    console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(attribute, index, offset);
};
$b383cde4e0574ff6$export$c977b3e384af9ae1.prototype.distanceToManhattan = function(v) {
    console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(v);
};
$b383cde4e0574ff6$export$c977b3e384af9ae1.prototype.lengthManhattan = function() {
    console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
};
//
$b383cde4e0574ff6$export$64b5c384219d3699.prototype.setEulerFromRotationMatrix = function() {
    console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
};
$b383cde4e0574ff6$export$64b5c384219d3699.prototype.setEulerFromQuaternion = function() {
    console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
};
$b383cde4e0574ff6$export$64b5c384219d3699.prototype.getPositionFromMatrix = function(m) {
    console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
    return this.setFromMatrixPosition(m);
};
$b383cde4e0574ff6$export$64b5c384219d3699.prototype.getScaleFromMatrix = function(m) {
    console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
    return this.setFromMatrixScale(m);
};
$b383cde4e0574ff6$export$64b5c384219d3699.prototype.getColumnFromMatrix = function(index, matrix) {
    console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
    return this.setFromMatrixColumn(matrix, index);
};
$b383cde4e0574ff6$export$64b5c384219d3699.prototype.applyProjection = function(m) {
    console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
    return this.applyMatrix4(m);
};
$b383cde4e0574ff6$export$64b5c384219d3699.prototype.fromAttribute = function(attribute, index, offset) {
    console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(attribute, index, offset);
};
$b383cde4e0574ff6$export$64b5c384219d3699.prototype.distanceToManhattan = function(v) {
    console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(v);
};
$b383cde4e0574ff6$export$64b5c384219d3699.prototype.lengthManhattan = function() {
    console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
};
//
$b383cde4e0574ff6$export$fa7daccca11cdbe3.prototype.fromAttribute = function(attribute, index, offset) {
    console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(attribute, index, offset);
};
$b383cde4e0574ff6$export$fa7daccca11cdbe3.prototype.lengthManhattan = function() {
    console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
};
//
$b383cde4e0574ff6$export$e4dd07dff30cc924.prototype.getChildByName = function(name) {
    console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
    return this.getObjectByName(name);
};
$b383cde4e0574ff6$export$e4dd07dff30cc924.prototype.renderDepth = function() {
    console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
};
$b383cde4e0574ff6$export$e4dd07dff30cc924.prototype.translate = function(distance, axis) {
    console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
    return this.translateOnAxis(axis, distance);
};
$b383cde4e0574ff6$export$e4dd07dff30cc924.prototype.getWorldRotation = function() {
    console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
};
$b383cde4e0574ff6$export$e4dd07dff30cc924.prototype.applyMatrix = function(matrix) {
    console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().");
    return this.applyMatrix4(matrix);
};
Object.defineProperties($b383cde4e0574ff6$export$e4dd07dff30cc924.prototype, {
    eulerOrder: {
        get: function get() {
            console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
            return this.rotation.order;
        },
        set: function set(value) {
            console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
            this.rotation.order = value;
        }
    },
    useQuaternion: {
        get: function get() {
            console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
        },
        set: function set() {
            console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
        }
    }
});
$b383cde4e0574ff6$export$e176487c05830cc5.prototype.setDrawMode = function() {
    console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
};
Object.defineProperties($b383cde4e0574ff6$export$e176487c05830cc5.prototype, {
    drawMode: {
        get: function get() {
            console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.");
            return $b383cde4e0574ff6$export$4c28c87c2dc84758;
        },
        set: function set() {
            console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
        }
    }
});
$b383cde4e0574ff6$export$b303577035157ecf.prototype.initBones = function() {
    console.error("THREE.SkinnedMesh: initBones() has been removed.");
};
//
$b383cde4e0574ff6$export$74e4ae24825f68d7.prototype.setLens = function(focalLength, filmGauge) {
    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
    if (filmGauge !== undefined) this.filmGauge = filmGauge;
    this.setFocalLength(focalLength);
};
//
Object.defineProperties($b383cde4e0574ff6$export$6ecadb6ed240d696.prototype, {
    onlyShadow: {
        set: function set() {
            console.warn("THREE.Light: .onlyShadow has been removed.");
        }
    },
    shadowCameraFov: {
        set: function set(value) {
            console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
            this.shadow.camera.fov = value;
        }
    },
    shadowCameraLeft: {
        set: function set(value) {
            console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
            this.shadow.camera.left = value;
        }
    },
    shadowCameraRight: {
        set: function set(value) {
            console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
            this.shadow.camera.right = value;
        }
    },
    shadowCameraTop: {
        set: function set(value) {
            console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
            this.shadow.camera.top = value;
        }
    },
    shadowCameraBottom: {
        set: function set(value) {
            console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
            this.shadow.camera.bottom = value;
        }
    },
    shadowCameraNear: {
        set: function set(value) {
            console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
            this.shadow.camera.near = value;
        }
    },
    shadowCameraFar: {
        set: function set(value) {
            console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
            this.shadow.camera.far = value;
        }
    },
    shadowCameraVisible: {
        set: function set() {
            console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
        }
    },
    shadowBias: {
        set: function set(value) {
            console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
            this.shadow.bias = value;
        }
    },
    shadowDarkness: {
        set: function set() {
            console.warn("THREE.Light: .shadowDarkness has been removed.");
        }
    },
    shadowMapWidth: {
        set: function set(value) {
            console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
            this.shadow.mapSize.width = value;
        }
    },
    shadowMapHeight: {
        set: function set(value) {
            console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
            this.shadow.mapSize.height = value;
        }
    }
});
//
Object.defineProperties($b383cde4e0574ff6$export$8dea267bd6bde117.prototype, {
    length: {
        get: function get() {
            console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
            return this.array.length;
        }
    },
    dynamic: {
        get: function get() {
            console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
            return this.usage === $b383cde4e0574ff6$export$8505d14ac8546ca;
        },
        set: function set() {
            console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
            this.setUsage($b383cde4e0574ff6$export$8505d14ac8546ca);
        }
    }
});
$b383cde4e0574ff6$export$8dea267bd6bde117.prototype.setDynamic = function(value) {
    console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.");
    this.setUsage(value === true ? $b383cde4e0574ff6$export$8505d14ac8546ca : $b383cde4e0574ff6$export$763e8360f4d7f77d);
    return this;
};
$b383cde4e0574ff6$export$8dea267bd6bde117.prototype.copyIndicesArray = function() {
    console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
}, $b383cde4e0574ff6$export$8dea267bd6bde117.prototype.setArray = function() {
    console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
};
//
$b383cde4e0574ff6$export$b7be63a67df8959.prototype.addIndex = function(index) {
    console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
    this.setIndex(index);
};
$b383cde4e0574ff6$export$b7be63a67df8959.prototype.addAttribute = function(name, attribute) {
    console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().");
    if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {
        console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).");
        return this.setAttribute(name, new $b383cde4e0574ff6$export$8dea267bd6bde117(arguments[1], arguments[2]));
    }
    if (name === "index") {
        console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.");
        this.setIndex(attribute);
        return this;
    }
    return this.setAttribute(name, attribute);
};
$b383cde4e0574ff6$export$b7be63a67df8959.prototype.addDrawCall = function(start, count, indexOffset) {
    if (indexOffset !== undefined) console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
    console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
    this.addGroup(start, count);
};
$b383cde4e0574ff6$export$b7be63a67df8959.prototype.clearDrawCalls = function() {
    console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
    this.clearGroups();
};
$b383cde4e0574ff6$export$b7be63a67df8959.prototype.computeOffsets = function() {
    console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
};
$b383cde4e0574ff6$export$b7be63a67df8959.prototype.removeAttribute = function(name) {
    console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().");
    return this.deleteAttribute(name);
};
$b383cde4e0574ff6$export$b7be63a67df8959.prototype.applyMatrix = function(matrix) {
    console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().");
    return this.applyMatrix4(matrix);
};
Object.defineProperties($b383cde4e0574ff6$export$b7be63a67df8959.prototype, {
    drawcalls: {
        get: function get() {
            console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
            return this.groups;
        }
    },
    offsets: {
        get: function get() {
            console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
            return this.groups;
        }
    }
});
$b383cde4e0574ff6$export$3d5cd879f108f53f.prototype.setDynamic = function(value) {
    console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.");
    this.setUsage(value === true ? $b383cde4e0574ff6$export$8505d14ac8546ca : $b383cde4e0574ff6$export$763e8360f4d7f77d);
    return this;
};
$b383cde4e0574ff6$export$3d5cd879f108f53f.prototype.setArray = function() {
    console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
};
//
$b383cde4e0574ff6$export$91836d01b9f75a58.prototype.getArrays = function() {
    console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.");
};
$b383cde4e0574ff6$export$91836d01b9f75a58.prototype.addShapeList = function() {
    console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.");
};
$b383cde4e0574ff6$export$91836d01b9f75a58.prototype.addShape = function() {
    console.error("THREE.ExtrudeGeometry: .addShape() has been removed.");
};
//
$b383cde4e0574ff6$export$38af1803e3442a7f.prototype.dispose = function() {
    console.error("THREE.Scene: .dispose() has been removed.");
};
//
$b383cde4e0574ff6$export$2947cebfe91c02f8.prototype.onUpdate = function() {
    console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
    return this;
};
//
Object.defineProperties($b383cde4e0574ff6$export$a2d8b23205c25948.prototype, {
    wrapAround: {
        get: function get() {
            console.warn("THREE.Material: .wrapAround has been removed.");
        },
        set: function set() {
            console.warn("THREE.Material: .wrapAround has been removed.");
        }
    },
    overdraw: {
        get: function get() {
            console.warn("THREE.Material: .overdraw has been removed.");
        },
        set: function set() {
            console.warn("THREE.Material: .overdraw has been removed.");
        }
    },
    wrapRGB: {
        get: function get() {
            console.warn("THREE.Material: .wrapRGB has been removed.");
            return new $b383cde4e0574ff6$export$892596cec99bc70e();
        }
    },
    shading: {
        get: function get() {
            console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
        },
        set: function set(value) {
            console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
            this.flatShading = value === $b383cde4e0574ff6$export$a62047d29c96d8ff;
        }
    },
    stencilMask: {
        get: function get() {
            console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
            return this.stencilFuncMask;
        },
        set: function set(value) {
            console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
            this.stencilFuncMask = value;
        }
    },
    vertexTangents: {
        get: function get() {
            console.warn("THREE." + this.type + ": .vertexTangents has been removed.");
        },
        set: function set() {
            console.warn("THREE." + this.type + ": .vertexTangents has been removed.");
        }
    }
});
Object.defineProperties($b383cde4e0574ff6$export$83c7d75d550a8b0d.prototype, {
    derivatives: {
        get: function get() {
            console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
            return this.extensions.derivatives;
        },
        set: function set(value) {
            console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
            this.extensions.derivatives = value;
        }
    }
});
//
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.clearTarget = function(renderTarget, color, depth, stencil) {
    console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");
    this.setRenderTarget(renderTarget);
    this.clear(color, depth, stencil);
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.animate = function(callback) {
    console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");
    this.setAnimationLoop(callback);
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.getCurrentRenderTarget = function() {
    console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
    return this.getRenderTarget();
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.getMaxAnisotropy = function() {
    console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
    return this.capabilities.getMaxAnisotropy();
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.getPrecision = function() {
    console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");
    return this.capabilities.precision;
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.resetGLState = function() {
    console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
    return this.state.reset();
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.supportsFloatTextures = function() {
    console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
    return this.extensions.get("OES_texture_float");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.supportsHalfFloatTextures = function() {
    console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
    return this.extensions.get("OES_texture_half_float");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.supportsStandardDerivatives = function() {
    console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
    return this.extensions.get("OES_standard_derivatives");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.supportsCompressedTextureS3TC = function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
    return this.extensions.get("WEBGL_compressed_texture_s3tc");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.supportsCompressedTexturePVRTC = function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
    return this.extensions.get("WEBGL_compressed_texture_pvrtc");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.supportsBlendMinMax = function() {
    console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
    return this.extensions.get("EXT_blend_minmax");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.supportsVertexTextures = function() {
    console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
    return this.capabilities.vertexTextures;
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.supportsInstancedArrays = function() {
    console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
    return this.extensions.get("ANGLE_instanced_arrays");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.enableScissorTest = function(boolean) {
    console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
    this.setScissorTest(boolean);
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.initMaterial = function() {
    console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.addPrePlugin = function() {
    console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.addPostPlugin = function() {
    console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.updateShadowMap = function() {
    console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.setFaceCulling = function() {
    console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.allocTextureUnit = function() {
    console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.setTexture = function() {
    console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.setTexture2D = function() {
    console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.setTextureCube = function() {
    console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
};
$b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype.getActiveMipMapLevel = function() {
    console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().");
    return this.getActiveMipmapLevel();
};
Object.defineProperties($b383cde4e0574ff6$export$f6cc00ef28d7cf97.prototype, {
    shadowMapEnabled: {
        get: function get() {
            return this.shadowMap.enabled;
        },
        set: function set(value) {
            console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
            this.shadowMap.enabled = value;
        }
    },
    shadowMapType: {
        get: function get() {
            return this.shadowMap.type;
        },
        set: function set(value) {
            console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
            this.shadowMap.type = value;
        }
    },
    shadowMapCullFace: {
        get: function get() {
            console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
            return undefined;
        },
        set: function set() {
            console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
        }
    },
    context: {
        get: function get() {
            console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.");
            return this.getContext();
        }
    },
    vr: {
        get: function get() {
            console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr");
            return this.xr;
        }
    },
    gammaInput: {
        get: function get() {
            console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
            return false;
        },
        set: function set() {
            console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
        }
    },
    gammaOutput: {
        get: function get() {
            console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
            return false;
        },
        set: function set(value) {
            console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
            this.outputEncoding = value === true ? $b383cde4e0574ff6$export$f32388edbb32674 : $b383cde4e0574ff6$export$7207336e4151a112;
        }
    },
    toneMappingWhitePoint: {
        get: function get() {
            console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
            return 1.0;
        },
        set: function set() {
            console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
        }
    }
});
Object.defineProperties($b383cde4e0574ff6$var$WebGLShadowMap.prototype, {
    cullFace: {
        get: function get() {
            console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
            return undefined;
        },
        set: function set() {
            console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
        }
    },
    renderReverseSided: {
        get: function get() {
            console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
            return undefined;
        },
        set: function set() {
            console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
        }
    },
    renderSingleSided: {
        get: function get() {
            console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
            return undefined;
        },
        set: function set() {
            console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
        }
    }
});
function $b383cde4e0574ff6$export$689069929abfa262(width, height, options) {
    console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).");
    return new $b383cde4e0574ff6$export$ac386671d651941e(width, options);
}
//
Object.defineProperties($b383cde4e0574ff6$export$3c052beb2e51e23f.prototype, {
    wrapS: {
        get: function get() {
            console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
            return this.texture.wrapS;
        },
        set: function set(value) {
            console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
            this.texture.wrapS = value;
        }
    },
    wrapT: {
        get: function get() {
            console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
            return this.texture.wrapT;
        },
        set: function set(value) {
            console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
            this.texture.wrapT = value;
        }
    },
    magFilter: {
        get: function get() {
            console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
            return this.texture.magFilter;
        },
        set: function set(value) {
            console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
            this.texture.magFilter = value;
        }
    },
    minFilter: {
        get: function get() {
            console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
            return this.texture.minFilter;
        },
        set: function set(value) {
            console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
            this.texture.minFilter = value;
        }
    },
    anisotropy: {
        get: function get() {
            console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
            return this.texture.anisotropy;
        },
        set: function set(value) {
            console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
            this.texture.anisotropy = value;
        }
    },
    offset: {
        get: function get() {
            console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
            return this.texture.offset;
        },
        set: function set(value) {
            console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
            this.texture.offset = value;
        }
    },
    repeat: {
        get: function get() {
            console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
            return this.texture.repeat;
        },
        set: function set(value) {
            console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
            this.texture.repeat = value;
        }
    },
    format: {
        get: function get() {
            console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
            return this.texture.format;
        },
        set: function set(value) {
            console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
            this.texture.format = value;
        }
    },
    type: {
        get: function get() {
            console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
            return this.texture.type;
        },
        set: function set(value) {
            console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
            this.texture.type = value;
        }
    },
    generateMipmaps: {
        get: function get() {
            console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
            return this.texture.generateMipmaps;
        },
        set: function set(value) {
            console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
            this.texture.generateMipmaps = value;
        }
    }
});
//
$b383cde4e0574ff6$export$153755f98d9861de.prototype.load = function(file) {
    console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
    var scope = this;
    var audioLoader = new $b383cde4e0574ff6$export$d8d5fccfbf47714e();
    audioLoader.load(file, function(buffer) {
        scope.setBuffer(buffer);
    });
    return this;
};
$b383cde4e0574ff6$export$d47da1ef3d382827.prototype.getData = function() {
    console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
    return this.getFrequencyData();
};
//
$b383cde4e0574ff6$export$d0cdd0bd804995de.prototype.updateCubeMap = function(renderer, scene) {
    console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");
    return this.update(renderer, scene);
};
$b383cde4e0574ff6$export$d0cdd0bd804995de.prototype.clear = function(renderer, color, depth, stencil) {
    console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear().");
    return this.renderTarget.clear(renderer, color, depth, stencil);
};
$b383cde4e0574ff6$export$698882cf06df44aa.crossOrigin = undefined;
$b383cde4e0574ff6$export$698882cf06df44aa.loadTexture = function(url, mapping, onLoad, onError) {
    console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
    var loader = new $b383cde4e0574ff6$export$fd1bfc71f64c538c();
    loader.setCrossOrigin(this.crossOrigin);
    var texture = loader.load(url, onLoad, undefined, onError);
    if (mapping) texture.mapping = mapping;
    return texture;
};
$b383cde4e0574ff6$export$698882cf06df44aa.loadTextureCube = function(urls, mapping, onLoad, onError) {
    console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
    var loader = new $b383cde4e0574ff6$export$2ec114afc2cf6308();
    loader.setCrossOrigin(this.crossOrigin);
    var texture = loader.load(urls, onLoad, undefined, onError);
    if (mapping) texture.mapping = mapping;
    return texture;
};
$b383cde4e0574ff6$export$698882cf06df44aa.loadCompressedTexture = function() {
    console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
};
$b383cde4e0574ff6$export$698882cf06df44aa.loadCompressedTextureCube = function() {
    console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
};
//
function $b383cde4e0574ff6$export$7adc20298958481a() {
    console.error("THREE.CanvasRenderer has been removed");
}
//
function $b383cde4e0574ff6$export$8e85bca5826c4696() {
    console.error("THREE.JSONLoader has been removed.");
}
//
var $b383cde4e0574ff6$export$a8351e0de8b3fd78 = {
    createMultiMaterialObject: function createMultiMaterialObject() {
        console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
    },
    detach: function detach() {
        console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
    },
    attach: function attach() {
        console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
    }
};
//
function $b383cde4e0574ff6$export$3f909fba4d49fe3d() {
    console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js");
}
//
function $b383cde4e0574ff6$export$8f6f2b4b16d33f() {
    console.error("THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js");
    return new $b383cde4e0574ff6$export$b7be63a67df8959();
}
function $b383cde4e0574ff6$export$684b774b4473ba5f() {
    console.error("THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js");
    return new $b383cde4e0574ff6$export$b7be63a67df8959();
}
function $b383cde4e0574ff6$export$812303d6cad736b3() {
    console.error("THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js");
}
function $b383cde4e0574ff6$export$89abf52a030e56ee() {
    console.error("THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js");
}
function $b383cde4e0574ff6$export$960665a8431ecff6() {
    console.error("THREE.ImmediateRenderObject has been removed.");
}
if (typeof __THREE_DEVTOOLS__ !== "undefined") /* eslint-disable no-undef */ __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", {
    detail: {
        revision: $b383cde4e0574ff6$export$3545e07a80636437
    }
}));
if (typeof window !== "undefined") {
    if (window.__THREE__) console.warn("WARNING: Multiple instances of Three.js being imported.");
    else window.__THREE__ = $b383cde4e0574ff6$export$3545e07a80636437;
}

});
parcelRequire.register("4enQD", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $1c27242a69d2ca26$export$2e2bcd8739ae039; });
function $1c27242a69d2ca26$export$2e2bcd8739ae039(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}

});

parcelRequire.register("kyywQ", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $762384b9fd144983$export$2e2bcd8739ae039; });
function $762384b9fd144983$var$asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) resolve(value);
    else Promise.resolve(value).then(_next, _throw);
}
function $762384b9fd144983$export$2e2bcd8739ae039(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                $762384b9fd144983$var$asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                $762384b9fd144983$var$asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}

});

parcelRequire.register("bWs11", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $e2e47a7d073bc53a$export$2e2bcd8739ae039; });

var $do5QW = parcelRequire("do5QW");
function $e2e47a7d073bc53a$var$get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) $e2e47a7d073bc53a$var$get = Reflect.get;
    else $e2e47a7d073bc53a$var$get = function get(target, property, receiver) {
        var base = (0, $do5QW.default)(target, property);
        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) return desc.get.call(receiver || target);
        return desc.value;
    };
    return $e2e47a7d073bc53a$var$get(target, property, receiver);
}
function $e2e47a7d073bc53a$export$2e2bcd8739ae039(target, property, receiver) {
    return $e2e47a7d073bc53a$var$get(target, property, receiver);
}

});
parcelRequire.register("do5QW", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $196f808f69620725$export$2e2bcd8739ae039; });

var $6gb2n = parcelRequire("6gb2n");
function $196f808f69620725$export$2e2bcd8739ae039(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = (0, $6gb2n.default)(object);
        if (object === null) break;
    }
    return object;
}

});
parcelRequire.register("6gb2n", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $a3b0c892c85ec3fc$export$2e2bcd8739ae039; });
function $a3b0c892c85ec3fc$var$getPrototypeOf(o) {
    $a3b0c892c85ec3fc$var$getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return $a3b0c892c85ec3fc$var$getPrototypeOf(o);
}
function $a3b0c892c85ec3fc$export$2e2bcd8739ae039(o) {
    return $a3b0c892c85ec3fc$var$getPrototypeOf(o);
}

});



parcelRequire.register("gQI4D", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $158249f48165c35d$export$2e2bcd8739ae039; });

var $bhrpx = parcelRequire("bhrpx");
function $158249f48165c35d$export$2e2bcd8739ae039(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) (0, $bhrpx.default)(subClass, superClass);
}

});
parcelRequire.register("bhrpx", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $fc39e194f8919610$export$2e2bcd8739ae039; });
function $fc39e194f8919610$var$setPrototypeOf(o, p) {
    $fc39e194f8919610$var$setPrototypeOf = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return $fc39e194f8919610$var$setPrototypeOf(o, p);
}
function $fc39e194f8919610$export$2e2bcd8739ae039(o, p) {
    return $fc39e194f8919610$var$setPrototypeOf(o, p);
}

});


parcelRequire.register("8lU41", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $83032149e38cfb5c$export$2e2bcd8739ae039; });

var $dK6Ta = parcelRequire("dK6Ta");
function $83032149e38cfb5c$export$2e2bcd8739ae039(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
        ownKeys.forEach(function(key) {
            (0, $dK6Ta.default)(target, key, source[key]);
        });
    }
    return target;
}

});

parcelRequire.register("2MVFf", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $5f4d3289d5a12393$export$2e2bcd8739ae039; });

var $4enQD = parcelRequire("4enQD");

var $5nNFW = parcelRequire("5nNFW");
function $5f4d3289d5a12393$export$2e2bcd8739ae039(self, call) {
    if (call && ((0, $5nNFW.default)(call) === "object" || typeof call === "function")) return call;
    return (0, $4enQD.default)(self);
}

});
parcelRequire.register("5nNFW", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $70ceb8cffaf565ea$export$2e2bcd8739ae039; });
function $70ceb8cffaf565ea$export$2e2bcd8739ae039(obj) {
    "@swc/helpers - typeof";
    return obj && obj.constructor === Symbol ? "symbol" : typeof obj;
}

});


parcelRequire.register("8B770", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $4f6052f59e2653b4$export$2e2bcd8739ae039; });

var $jvx8n = parcelRequire("jvx8n");

var $jwsfk = parcelRequire("jwsfk");

var $8qCkE = parcelRequire("8qCkE");

var $bgnxe = parcelRequire("bgnxe");
function $4f6052f59e2653b4$export$2e2bcd8739ae039(arr, i) {
    return (0, $jvx8n.default)(arr) || (0, $jwsfk.default)(arr, i) || (0, $bgnxe.default)(arr, i) || (0, $8qCkE.default)();
}

});
parcelRequire.register("jvx8n", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $37be91cf0f1882e6$export$2e2bcd8739ae039; });
function $37be91cf0f1882e6$export$2e2bcd8739ae039(arr) {
    if (Array.isArray(arr)) return arr;
}

});

parcelRequire.register("jwsfk", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $bacbd2cba624289c$export$2e2bcd8739ae039; });
function $bacbd2cba624289c$export$2e2bcd8739ae039(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

});

parcelRequire.register("8qCkE", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $e1cc955f82cf85a0$export$2e2bcd8739ae039; });
function $e1cc955f82cf85a0$export$2e2bcd8739ae039() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

});

parcelRequire.register("bgnxe", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $fb705da2a57d0eb6$export$2e2bcd8739ae039; });

var $91Vgj = parcelRequire("91Vgj");
function $fb705da2a57d0eb6$export$2e2bcd8739ae039(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return (0, $91Vgj.default)(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $91Vgj.default)(o, minLen);
}

});
parcelRequire.register("91Vgj", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $66651f3447e9e7b6$export$2e2bcd8739ae039; });
function $66651f3447e9e7b6$export$2e2bcd8739ae039(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}

});



parcelRequire.register("caHck", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $349c33328a18778b$export$2e2bcd8739ae039; });

var $3WVVM = parcelRequire("3WVVM");

var $4dtIL = parcelRequire("4dtIL");

var $6gb2n = parcelRequire("6gb2n");

var $bhrpx = parcelRequire("bhrpx");
function $349c33328a18778b$var$wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    $349c33328a18778b$var$wrapNativeSuper = function wrapNativeSuper(Class) {
        if (Class === null || !(0, $4dtIL.default)(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return (0, $3WVVM.default)(Class, arguments, (0, $6gb2n.default)(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return (0, $bhrpx.default)(Wrapper, Class);
    };
    return $349c33328a18778b$var$wrapNativeSuper(Class);
}
function $349c33328a18778b$export$2e2bcd8739ae039(Class) {
    return $349c33328a18778b$var$wrapNativeSuper(Class);
}

});
parcelRequire.register("3WVVM", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $b3a1fe00547f6a46$export$2e2bcd8739ae039; });

var $bhrpx = parcelRequire("bhrpx");
function $b3a1fe00547f6a46$var$isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function $b3a1fe00547f6a46$var$construct(Parent, args, Class) {
    if ($b3a1fe00547f6a46$var$isNativeReflectConstruct()) $b3a1fe00547f6a46$var$construct = Reflect.construct;
    else $b3a1fe00547f6a46$var$construct = function construct(Parent, args, Class) {
        var a = [
            null
        ];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) (0, $bhrpx.default)(instance, Class.prototype);
        return instance;
    };
    return $b3a1fe00547f6a46$var$construct.apply(null, arguments);
}
function $b3a1fe00547f6a46$export$2e2bcd8739ae039(Parent, args, Class) {
    return $b3a1fe00547f6a46$var$construct.apply(null, arguments);
}

});

parcelRequire.register("4dtIL", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $2d4f234225601da7$export$2e2bcd8739ae039; });
function $2d4f234225601da7$export$2e2bcd8739ae039(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

});


parcelRequire.register("a0Xbx", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $11849f506f75b00e$export$2e2bcd8739ae039; });

var $2DTeB = parcelRequire("2DTeB");

var $6gb2n = parcelRequire("6gb2n");

var $2MVFf = parcelRequire("2MVFf");
function $11849f506f75b00e$export$2e2bcd8739ae039(Derived) {
    var hasNativeReflectConstruct = (0, $2DTeB.default)();
    return function _createSuperInternal() {
        var Super = (0, $6gb2n.default)(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = (0, $6gb2n.default)(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return (0, $2MVFf.default)(this, result);
    };
}

});
parcelRequire.register("2DTeB", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $2c48585d8d6d8227$export$2e2bcd8739ae039; });
function $2c48585d8d6d8227$export$2e2bcd8739ae039() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}

});


parcelRequire.register("672mD", function(module, exports) {

$parcel$export(module.exports, "__generator", function () { return $47353af90d99c005$export$67ebef60e6f28a6; });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var $47353af90d99c005$var$extendStatics = function(d, b) {
    $47353af90d99c005$var$extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return $47353af90d99c005$var$extendStatics(d, b);
};
function $47353af90d99c005$export$a8ba968b8961cb8a(d, b) {
    var __ = function __() {
        this.constructor = d;
    };
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    $47353af90d99c005$var$extendStatics(d, b);
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var $47353af90d99c005$export$18ce0697a983be9b = function() {
    $47353af90d99c005$export$18ce0697a983be9b = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $47353af90d99c005$export$18ce0697a983be9b.apply(this, arguments);
};
function $47353af90d99c005$export$3c9a16f847548506(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function $47353af90d99c005$export$29e00dfd3077644b(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function $47353af90d99c005$export$d5ad3fd78186038f(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function $47353af90d99c005$export$f1db080c865becb9(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function $47353af90d99c005$export$1050f835b63b671e(thisArg, _arguments, P, generator) {
    var adopt = function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    };
    return new (P || (P = Promise))(function(resolve, reject) {
        var fulfilled = function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        };
        var rejected = function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        };
        var step = function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        };
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function $47353af90d99c005$export$67ebef60e6f28a6(thisArg, body) {
    var verb = function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    };
    var step = function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    };
    var _ = {
        label: 0,
        sent: function sent() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
}
var $47353af90d99c005$export$45d3717a4c69092e = Object.create ? function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function get() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function $47353af90d99c005$export$f33643c0debef087(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) $47353af90d99c005$export$45d3717a4c69092e(o, m, p);
}
function $47353af90d99c005$export$19a8beecd37a4c45(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function $47353af90d99c005$export$8d051b38c9118094(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function $47353af90d99c005$export$afc72e2116322959() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($47353af90d99c005$export$8d051b38c9118094(arguments[i]));
    return ar;
}
function $47353af90d99c005$export$6388937ca91ccae8() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function $47353af90d99c005$export$1216008129fb82ed(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function $47353af90d99c005$export$10c90e4f7922046c(v) {
    return this instanceof $47353af90d99c005$export$10c90e4f7922046c ? (this.v = v, this) : new $47353af90d99c005$export$10c90e4f7922046c(v);
}
function $47353af90d99c005$export$e427f37a30a4de9b(thisArg, _arguments, generator) {
    var verb = function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    };
    var resume = function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    };
    var step = function step(r) {
        r.value instanceof $47353af90d99c005$export$10c90e4f7922046c ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    };
    var fulfill = function fulfill(value) {
        resume("next", value);
    };
    var reject = function reject(value) {
        resume("throw", value);
    };
    var settle = function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    };
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
}
function $47353af90d99c005$export$bbd80228419bb833(o) {
    var verb = function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: $47353af90d99c005$export$10c90e4f7922046c(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    };
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
}
function $47353af90d99c005$export$e3b29a3d6162315f(o) {
    var verb = function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    };
    var settle = function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    };
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof $47353af90d99c005$export$19a8beecd37a4c45 === "function" ? $47353af90d99c005$export$19a8beecd37a4c45(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
}
function $47353af90d99c005$export$4fb47efe1390b86f(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var $47353af90d99c005$var$__setModuleDefault = Object.create ? function __setModuleDefault(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function $47353af90d99c005$export$c21735bcef00d192(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $47353af90d99c005$export$45d3717a4c69092e(result, mod, k);
    }
    $47353af90d99c005$var$__setModuleDefault(result, mod);
    return result;
}
function $47353af90d99c005$export$da59b14a69baef04(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function $47353af90d99c005$export$d5dcaf168c640c35(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function $47353af90d99c005$export$d40a35129aaff81f(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function $47353af90d99c005$export$81fdc39f203e4e04(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

});


})();
//# sourceMappingURL=index.7ab46738.js.map
