{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAe,kDAAyB,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE;IACvD,IAAI,OAAO,KACT,OAAO,cAAc,CAAC,KAAK,KAAK;QAC9B,OAAO;QACP,YAAY,IAAI;QAChB,cAAc,IAAI;QAClB,UAAU,IAAI;IAChB;SAEA,GAAG,CAAC,IAAI,GAAG;IAGb,OAAO;AACT;;ADbA;;;;AEAA,4BAAe;;;;ACAf,4BAAe;;;AHKf,MAAM,+BAAS,IAAI;AACnB,MAAM,sCAAgB,IAAI,qBAAoB,GAAG,GAAG,IAAI;AACxD,MAAM,sCAAgB,IAAI,sBAAqB;kBAC9C;oBACA;AACD;AAEA,MAAM;IA8BL,WAAW;QACV,SAAS,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU;IACnD;IAEA,WAAW;QACV,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,QAAQ,GAAG,oCAAc,KAAK;QACnC,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG;YACxB,QAAQ;gBAAE,OAAO;YAAE;YACnB,UAAU;gBAAE,MAAM;gBAAK,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;YAAC;YAC/C,UAAU;gBAAE,MAAM;gBAAK,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;YAAC;QAChD;QACA,IAAI,CAAC,KAAK,GAAG,IAAI,YAAW,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ;QACxD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK;IAC1B;IAEA,QAAQ,EAAE,EAAE;QACX,MAAM,WAAW,EAAE;QACnB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,IAAM;YAC7B,IAAI,UAAU,IAAI,QAAQ,CAAC,UAAY;gBACtC,6BAAO,IAAI,CAAC,KAAK;YAClB;YACA,SAAS,IAAI,CAAC;QACf;QAEA,QAAQ,GAAG,CAAC,UAAU,IAAI,CAAC,CAAC,MAAQ;YACnC,IAAI,CAAC,QAAQ,GAAG;YAChB;QACD;IACD;IAEA,WAAW;QACV,IAAI,CAAC,KAAK,GAAG,OAAO,UAAU;QAC9B,IAAI,CAAC,MAAM,GAAG,OAAO,WAAW;QAChC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM;QAC7C,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM;QAC7C,IAAI,CAAC,MAAM,CAAC,sBAAsB;IACnC;IA/DA,YAAY,IAAI,CAAE;QAHlB,oDAAA,YAAW,EAAE;QACb,oDAAA,WAAU;QAGT,IAAI,CAAC,KAAK,GAAG,OAAO,UAAU;QAC9B,IAAI,CAAC,MAAM,GAAG,OAAO,WAAW;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI;QACjB,IAAI,CAAC,MAAM,GAAG,IAAI,yBACjB,IACA,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,MAAM,EACX,KACA;QAED,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG;QAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,qBAAoB;YACvC,OAAO,IAAI;YACX,WAAW,IAAI;QAChB;QACA,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,gBAAgB;QACnD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM;QAC7C,IAAI,CAAC,IAAI,GAAG;QAEZ,IAAI,CAAC,OAAO,CAAC,IAAM;YAClB,IAAI,CAAC,QAAQ;YACb,IAAI,CAAC,QAAQ;QACd;IACD;AAwCD;AAEA,IAAI,6BAAO,EAAE;AACb,IAAI,+BAAS,SAAS,gBAAgB,CAAC;AACvC,6BAAO,OAAO,CAAC,CAAC,MAAQ,2BAAK,IAAI,CAAC,IAAI,GAAG;AACzC,QAAQ,GAAG,CAAC;AACZ,IAAI,8BAAQ,IAAI,4BAAM","sources":["src/08-transitions/index.js","node_modules/@swc/helpers/src/_define_property.mjs","src/08-transitions/frag.glsl","src/08-transitions/vert.glsl"],"sourcesContent":["import * as THREE from 'three'\n\nimport fragmentShader from './frag.glsl'\nimport vertexShader from './vert.glsl'\n\nconst loader = new THREE.TextureLoader()\nconst planeGeometry = new THREE.PlaneGeometry(1, 1, 32, 32)\nconst planeMaterial = new THREE.ShaderMaterial({\n\tvertexShader,\n\tfragmentShader,\n})\n\nclass Scene {\n\ttextures = []\n\tcurrent = 0\n\n\tconstructor(imgs) {\n\t\tthis.width = window.innerWidth\n\t\tthis.height = window.innerHeight\n\t\tthis.scene = new THREE.Scene()\n\t\tthis.camera = new THREE.PerspectiveCamera(\n\t\t\t10,\n\t\t\tthis.width,\n\t\t\tthis.height,\n\t\t\t0.1,\n\t\t\t100\n\t\t)\n\t\tthis.camera.position.set(0, 0, 2)\n\t\tthis.renderer = new THREE.WebGLRenderer({\n\t\t\talpha: true,\n\t\t\tantialias: true,\n\t\t})\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio)\n\t\tthis.renderer.setSize(this.width, this.height)\n\t\tthis.imgs = imgs\n\n\t\tthis.addImgs(() => {\n\t\t\tthis.addPlane()\n\t\t\tthis.addToDom()\n\t\t})\n\t}\n\n\taddToDom() {\n\t\tdocument.body.appendChild(this.renderer.domElement)\n\t}\n\n\taddPlane() {\n\t\tthis.geometry = planeGeometry\n\t\tthis.material = planeMaterial.clone()\n\t\tthis.material.uniforms = {\n\t\t\tu_time: { value: 0 },\n\t\t\ttexture1: { type: 't', value: this.textures[0] },\n\t\t\ttexture2: { type: 't', value: this.textures[1] },\n\t\t}\n\t\tthis.plane = new THREE.Mesh(this.geometry, this.material)\n\t\tthis.scene.add(this.plane)\n\t}\n\n\taddImgs(cb) {\n\t\tconst promises = []\n\t\tthis.imgs.forEach((url, i) => {\n\t\t\tlet promise = new Promise((resolve) => {\n\t\t\t\tloader.load(url, resolve)\n\t\t\t})\n\t\t\tpromises.push(promise)\n\t\t})\n\n\t\tPromise.all(promises).then((res) => {\n\t\t\tthis.textures = res\n\t\t\tcb()\n\t\t})\n\t}\n\n\tonResize() {\n\t\tthis.width = window.innerWidth\n\t\tthis.height = window.innerHeight\n\t\tthis.renderer.setSize(this.width, this.height)\n\t\tthis.camera.aspect = this.width / this.height\n\t\tthis.camera.updateProjectionMatrix()\n\t}\n}\n\nlet imgs = []\nlet imgEls = document.querySelectorAll('img')\nimgEls.forEach((img) => imgs.push(img.src))\nconsole.log(imgs)\nlet scene = new Scene(imgs)\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","precision mediump float;\n\nvarying float v_wave;\nvarying vec2 v_uv;\nuniform sampler2D u_image;\n\nvoid main() {\n    vec2 uv = v_uv;\n    vec4 image = texture2D(u_image, uv);\n    float wave = v_wave;\n\n    float r = texture2D(u_image, vec2(uv.x + wave * 0.25, uv.y + wave * -0.1)).r;\n    float g = texture2D(u_image, uv - wave * 0.).g;\n    float b = texture2D(u_image, vec2(uv.x + wave * -0.15, uv.y + wave * -0.05)).b;\n\n    vec3 texture = vec3(r, g, b);\n    gl_FragColor = vec4(texture, 1.0);\n\n}","precision mediump float;\nvarying vec2 v_uv;\nvarying float v_wave;\nuniform float u_amount;\nuniform float u_time;\n\n#pragma glslify: noise = require(glsl-noise/simplex/3d)\n\nvoid main() {\n    v_uv = uv;\n    vec3 pos = position;\n\n    vec3 noisePos = vec3(pos.x - u_time * 1.2, pos.y + u_time * 0.1, 0.0);\n    float wave = noise(noisePos) * 1.75 * u_amount;\n\n    pos.z += wave;\n    v_wave = wave * 0.1;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}"],"names":[],"version":3,"file":"index.56e569b9.js.map"}