{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACAA,4BAAe;;;;ACAf,4BAAe;;;AFKf,MAAM,8BAAQ,IAAI;AAClB,MAAM,+BAAS,IAAI;AAEnB,IAAI,iCAAW,SAAS,cAAc,CAAC;AACvC,IAAI,6BAAO,+BAAS,qBAAqB;AAEzC,MAAM,iCAAW,IAAI;AACrB,+BAAS,aAAa,CAAC,OAAO,gBAAgB;AAC9C,+BAAS,OAAO,CAAC,OAAO,UAAU,EAAE,OAAO,WAAW;AACtD,SAAS,IAAI,CAAC,WAAW,CAAC,+BAAS,UAAU;AAE7C,IAAI,+BAAS,IAAI;AACjB,6BAAO,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG;AAE1B,IAAI,8BAAQ,6BAAO,IAAI,CAAC,+BAAS,GAAG;AACpC,IAAI,iCAAW;IACX,QAAQ;QAAE,OAAO;IAAE;IACnB,OAAO;QAAE,OAAO,IAAI,eAAc,OAAO,UAAU,EAAE,OAAO,WAAW;IAAE;IACzE,SAAS;QAAE,MAAM;QAAM,OAAO,IAAI;IAAgB;IAClD,SAAS;QAAE,MAAM;QAAK,OAAO;IAAM;AACvC;AAEA,IAAI,iCAAW,IAAI,2BAA0B,2BAAK,KAAK,EAAE,2BAAK,MAAM,EAAE,GAAG;AACzE,IAAI,iCAAW,IAAI,sBAAqB;IACpC,UAAU;IACV,cAAc,CAAA,GAAA,yDAAY,OAAD;IACzB,gBAAgB,CAAA,GAAA,yDAAc,OAAD;IAC7B,SAAS;QACL,IAAI,OAAO,gBAAgB,CAAC,OAAO,CAAC;IACxC;AACJ;AAEA,IAAI,6BAAO,IAAI,YAAW,gCAAU;AACpC,4BAAM,GAAG,CAAC;AAEV,SAAS,WAAW,GAAG,SAAU,CAAC,EAAE;IAChC,+BAAS,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,OAAO;IACpC,+BAAS,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,OAAO;AACxC;AAEA,cAAc;AACd,MAAM,gDAA0B,CAAC,YAAc;IAC3C,+BAAS,MAAM,CAAC,6BAAO;IACvB,+BAAS,MAAM,CAAC,KAAK;IACrB,OAAO,qBAAqB,CAAC;AACjC;AACA,OAAO,qBAAqB,CAAC;AAE7B,SAAS;AACT,MAAM,4CAAsB,IAAM;IAC9B,MAAM,eAAE,YAAW,cAAE,WAAU,EAAE,GAAG;IACpC,+BAAS,OAAO,CAAC,YAAY;IAC7B,+BAAS,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG;IACzB,+BAAS,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG;IAEzB,6BAAO,IAAI,GAAG,aAAa;IAC3B,6BAAO,KAAK,GAAG,aAAa;IAC5B,6BAAO,GAAG,GAAG,cAAc;IAC3B,6BAAO,MAAM,GAAG,cAAc;IAC9B,6BAAO,sBAAsB;AACjC;AACA;AACA,OAAO,gBAAgB,CAAC,UAAU","sources":["src/03-spotlight/index.js","src/03-spotlight/vert.glsl","src/03-spotlight/frag.glsl"],"sourcesContent":["import * as THREE from 'three'\n\nimport vertexShader from './vert.glsl'\nimport fragmentShader from './frag.glsl'\n\nconst scene = new THREE.Scene()\nconst loader = new THREE.TextureLoader()\n\nlet theimage = document.getElementById('theimage')\nlet rect = theimage.getBoundingClientRect()\n\nconst renderer = new THREE.WebGLRenderer()\nrenderer.setPixelRatio(window.devicePixelRatio)\nrenderer.setSize(window.innerWidth, window.innerHeight)\ndocument.body.appendChild(renderer.domElement)\n\nlet camera = new THREE.OrthographicCamera()\ncamera.position.set(0, 0, 1)\n\nlet image = loader.load(theimage.src)\nlet uniforms = {\n    u_time: { value: 0 },\n    u_res: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\n    u_mouse: { type: 'v2', value: new THREE.Vector2() },\n    u_image: { type: 't', value: image },\n}\n\nlet geometry = new THREE.PlaneBufferGeometry(rect.width, rect.height, 1, 1)\nlet material = new THREE.ShaderMaterial({\n    uniforms: uniforms,\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    defines: {\n        PR: window.devicePixelRatio.toFixed(1),\n    },\n})\n\nlet mesh = new THREE.Mesh(geometry, material)\nscene.add(mesh)\n\ndocument.onmousemove = function (e) {\n    uniforms.u_mouse.value.x = e.clientX\n    uniforms.u_mouse.value.y = e.clientY\n}\n\n// render loop\nconst onAnimationFrameHandler = (timeStamp) => {\n    renderer.render(scene, camera)\n    uniforms.u_time.value++\n    window.requestAnimationFrame(onAnimationFrameHandler)\n}\nwindow.requestAnimationFrame(onAnimationFrameHandler)\n\n// resize\nconst windowResizeHanlder = () => {\n    const { innerHeight, innerWidth } = window\n    renderer.setSize(innerWidth, innerHeight)\n    uniforms.u_res.value.x = innerWidth\n    uniforms.u_res.value.y = innerHeight\n\n    camera.left = innerWidth / -2\n    camera.right = innerWidth / 2\n    camera.top = innerHeight / 2\n    camera.bottom = innerHeight / -2\n    camera.updateProjectionMatrix()\n}\nwindowResizeHanlder()\nwindow.addEventListener('resize', windowResizeHanlder)\n","precision mediump float;\nvarying vec2 v_uv;\nuniform vec2 u_mouse;\nuniform vec2 u_res;\n\nvoid main() {\n    v_uv = uv;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}","precision mediump float;\nuniform vec2 u_res;\nuniform sampler2D u_image;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvarying vec2 v_uv;\n\nvoid main() {\n\n    vec2 resolution = u_res * PR;\n\n    vec2 uv = v_uv;\n\n    vec2 st = gl_FragCoord.xy / resolution.xy - vec2(.5);\n    st.y *= resolution.y / resolution.x;\n\n    vec2 mouse = vec2((u_mouse.x / u_res.x) * 2. - 1., -(u_mouse.y / u_res.y) * 2. + 1.) * 0.5;\n    mouse.y *= resolution.y / resolution.x;\n\n    float pct = distance(st, mouse);\n\n    vec4 image = texture2D(u_image, uv);\n\n    gl_FragColor = image * (1.0 - smoothstep(0.1, 0.2, pct));\n    // gl_FragColor = image;\n}"],"names":[],"version":3,"file":"index.dc225596.js.map"}