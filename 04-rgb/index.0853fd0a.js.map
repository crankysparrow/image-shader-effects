{"mappings":"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","sources":["src/04-rgb/index.js","src/scene-orthocam.js","src/04-rgb/frag.glsl","src/04-rgb/vert.glsl"],"sourcesContent":["import * as THREE from 'three'\nimport Scene from '../scene-orthocam'\n\nimport fragmentShader from './frag.glsl'\nimport vertexShader from './vert.glsl'\n\nconst loader = new THREE.TextureLoader()\nconst planeGeometry = new THREE.PlaneGeometry(1, 1)\nconst planeMaterial = new THREE.ShaderMaterial({\n\tvertexShader,\n\tfragmentShader,\n\tdefines: {\n\t\tPR: window.devicePixelRatio.toFixed(1),\n\t},\n})\n\nconst scene = new Scene()\nwindow.scene = scene\n\nclass Plane {\n\tbounds = {}\n\n\tconstructor(el) {\n\t\tthis.el = el\n\t\tthis.img = el.querySelector('img')\n\t\tthis.geometry = planeGeometry\n\t\tthis.material = planeMaterial.clone()\n\n\t\tthis.mesh = new THREE.Mesh(this.geometry, this.material)\n\n\t\tlet tex = loader.load(this.img.src)\n\t\tthis.setBounds()\n\t\tthis.setPos()\n\n\t\tthis.material.uniforms = {\n\t\t\tu_time: { value: 0 },\n\t\t\tu_image: { type: 't', value: tex },\n\t\t\tu_amount: { value: 0 },\n\t\t\tu_mouse: { type: 'v2', value: new THREE.Vector2() },\n\t\t\tu_res: {\n\t\t\t\ttype: 'v2',\n\t\t\t\tvalue: new THREE.Vector2(this.bounds.width, this.bounds.height),\n\t\t\t},\n\t\t}\n\t}\n\n\tsetBounds() {\n\t\tconst rect = this.img.getBoundingClientRect()\n\t\tthis.bounds = {\n\t\t\tleft: rect.left / scene.windowWidth,\n\t\t\tright: rect.right / scene.windowWidth,\n\t\t\twidth: rect.width,\n\t\t\tscaleX: rect.width / scene.windowWidth,\n\t\t\ttop: rect.top / scene.windowHeight,\n\t\t\tbottom: rect.bottom / scene.windowHeight,\n\t\t\theight: rect.height,\n\t\t\tscaleY: rect.height / scene.windowHeight,\n\t\t}\n\t}\n\n\tsetPos() {\n\t\tthis.mesh.scale.set(this.bounds.scaleX, this.bounds.scaleY)\n\t\tthis.mesh.position.x = this.bounds.left + this.bounds.scaleX / 2\n\t\tthis.mesh.position.y = -this.bounds.top - this.bounds.scaleY / 2\n\t}\n\n\tresize() {\n\t\tthis.setBounds()\n\t\tthis.setPos()\n\t}\n\n\tscroll() {\n\t\tthis.setBounds()\n\t\tthis.setPos()\n\t}\n\n\ttick(time, mouseX, mouseY) {\n\t\tthis.material.uniforms.u_time.value = time\n\t\tthis.material.uniforms.u_mouse.value = [mouseX, mouseY]\n\t}\n}\n\nlet els = document.querySelectorAll('.plane-wrap')\nwindow.planes = []\n\nfunction initPlane(el) {\n\tlet plane = new Plane(el)\n\tscene.addPlane(plane)\n\twindow.planes.push(plane)\n}\nels.forEach((el) => {\n\tlet img = el.querySelector('img')\n\tif (img.complete) {\n\t\tinitPlane(el)\n\t} else {\n\t\timg.addEventListener('load', () => initPlane(el))\n\t}\n})\n","import * as THREE from 'three'\n\nexport default class Scene {\n\tplanes = []\n\tmouseX = 0\n\tmouseY = 0\n\n\tconstructor() {\n\t\tlet { innerWidth, innerHeight } = window\n\n\t\tthis.windowWidth = innerWidth\n\t\tthis.windowHeight = innerHeight\n\t\tthis.scene = new THREE.Scene()\n\t\tthis.camera = new THREE.OrthographicCamera(0, 1, 0, -1)\n\t\tthis.camera.position.set(0, 0, 1)\n\n\t\tthis.renderer = new THREE.WebGLRenderer({\n\t\t\talpha: true,\n\t\t\tantialias: true,\n\t\t})\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio)\n\t\tthis.renderer.setSize(innerWidth, innerHeight)\n\t\tthis.clock = new THREE.Clock()\n\n\t\tthis.addToDom()\n\t\tthis.onResize()\n\t\twindow.requestAnimationFrame(() => this.tick())\n\t\twindow.addEventListener('resize', () => this.onResize())\n\t\twindow.addEventListener('scroll', () => this.onScroll())\n\t\twindow.addEventListener('mousemove', (e) => this.onMouse(e))\n\t\twindow.addEventListener('mousemove', (e) => this.firstMouseMove(e), {\n\t\t\tonce: true,\n\t\t})\n\t}\n\n\tfirstMouseMove(e) {\n\t\tthis.mouseX = e.clientX / this.windowWidth\n\t\tthis.mouseY = e.clientY / this.windowHeight\n\n\t\tthis.planes.forEach((plane) => {\n\t\t\tlet xOff = this.mouseX - plane.bounds.left\n\t\t\tplane.mouseX = xOff / plane.bounds.scaleX\n\t\t\tlet yOff = this.mouseY - plane.bounds.top\n\t\t\tplane.mouseY = yOff / plane.bounds.scaleY\n\t\t})\n\t}\n\n\taddPlane(plane) {\n\t\tthis.scene.add(plane.mesh)\n\t\tthis.planes.push(plane)\n\t}\n\n\taddToDom() {\n\t\tdocument.body.appendChild(this.renderer.domElement)\n\t}\n\n\ttick() {\n\t\tlet time = this.clock.getElapsedTime()\n\t\tthis.planes.forEach((plane, i) => {\n\t\t\tlet xOff = this.mouseX - plane.bounds.left\n\t\t\tlet planeMouseX = xOff / plane.bounds.scaleX\n\t\t\tlet yOff = this.mouseY - plane.bounds.top\n\t\t\tlet planeMouseY = yOff / plane.bounds.scaleY\n\n\t\t\tplane.tick(time, planeMouseX, planeMouseY)\n\t\t\t// plane.tick(time, 0.5, 0.5)\n\t\t\t// planeMouseX goes from 0 - 1 left to right over image\n\t\t\t// planeMouseY goes from 0 - 1 from top to bottom of image\n\t\t})\n\n\t\tthis.renderer.render(this.scene, this.camera)\n\t\twindow.requestAnimationFrame(() => this.tick())\n\t}\n\n\tonMouse(e) {\n\t\tthis.mouseX = e.clientX / this.windowWidth\n\t\tthis.mouseY = e.clientY / this.windowHeight\n\t}\n\n\tonResize() {\n\t\tlet { innerWidth, innerHeight } = window\n\t\tthis.renderer.setSize(innerWidth, innerHeight)\n\t\tthis.camera.updateProjectionMatrix()\n\n\t\tthis.windowWidth = innerWidth\n\t\tthis.windowHeight = innerHeight\n\n\t\tthis.planes.forEach((plane) => {\n\t\t\tplane.resize(innerWidth, innerHeight)\n\t\t})\n\t}\n\n\tonScroll() {\n\t\tthis.planes.forEach((plane) => {\n\t\t\tplane.scroll(this.windowWidth, this.windowHeight)\n\t\t})\n\t}\n}\n\nfunction scale(input, aMin, aMax, bMin, bMax) {\n\treturn ((input - aMin) * (bMax - bMin)) / (aMax - aMin) + bMin\n}\n\nfunction lerp(a, b, t) {\n\treturn a + (b - a) * t\n}\n","precision mediump float;\n\nvarying vec2 v_uv;\nuniform sampler2D u_image;\nuniform vec2 u_mouse;\nuniform vec2 u_res;\nuniform float u_time;\n\n#pragma glslify: noise = require(glsl-noise/simplex/3d)\n\nvoid main() {\n    vec2 uv = v_uv;\n    vec2 resolution = u_res;\n\n    vec2 st = uv;\n    vec2 mouse = vec2(u_mouse.x, 1.0 - u_mouse.y);\n\n    // these make it so the mouse hover can be a circle,\n    // even if the image is not square \n    mouse.y *= resolution.y / resolution.x;\n    st.y *= resolution.y / resolution.x;\n\n    float pct = distance(st, mouse);\n    float pctadjust = smoothstep(0.4, 0.35, pct);\n    // vec2 offset = pixelSize * 10.0 * pctadjust;\n    vec2 offset = vec2(0.02 * pctadjust);\n\n    vec3 noisePos = vec3(st.x - u_time, st.y, 0.0);\n    float wave = noise(noisePos) * 2.5 * pctadjust;\n\n    float r = texture2D(u_image, uv - offset * wave).r;\n    float g = texture2D(u_image, uv + offset * wave * 0.5).g;\n    float b = texture2D(u_image, uv + offset * wave).b;\n\n    vec4 image = texture2D(u_image, uv);\n\n    gl_FragColor = vec4(r, g, b, 1.0);\n    // gl_FragColor = vec4(st.y, 0.0, 0.0, 1.0);\n\n}","precision mediump float;\nvarying vec2 v_uv;\nvarying float v_wave;\nuniform float u_amount;\nuniform float u_time;\n\nvoid main() {\n    v_uv = uv;\n    vec3 pos = position;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}"],"names":[],"version":3,"file":"index.0853fd0a.js.map"}