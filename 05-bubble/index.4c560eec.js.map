{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;ACAA,4BAAe;;;;ACAf,4BAAe;;;;ACAf,4BAAe;;;AHSf,IAAM,+BAAS,IAAI;AAEnB,IAAI,IAAU,EACb,IAAU,CAAC,OAAO,CAAC,WAAM;IACxB,OAAO,QAAQ,CAAC,MAAM;AACvB;AAGD,IAAI,8BAAQ,6BAAO,gCAAU,gCAAU,kCAAY;AACnD,IAAI,gCACH,gCACA,4BACA,+BACA,gCAAU,IAAI,eAAc,GAAG;AAEhC,IAAI,iCAAW,SAAS,cAAc,CAAC;AACvC,gCAAU,6BAAO,IAAI,CAAC,+BAAS,GAAG;AAElC;AACA;AAEA,SAAS,6BAAO;IACf,8BAAQ,IAAI;IAEZ,wCAAwC;IACxC,IAAI,cAAc;IAClB,IAAI,MAAM,AAAC,MAAO,CAAA,IAAI,KAAK,IAAI,CAAC,cAAc,IAAI,YAAW,IAAM,KAAK,EAAE;IAC1E,+BAAS,IAAI,yBACZ,KACA,OAAO,UAAU,GAAG,OAAO,WAAW,EACtC,KACA;IAED,6BAAO,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG;IAE1B,iCAAW,IAAI,qBAAoB,KAAK;IACxC,iCAAW,IAAI,yBAAwB;QACtC,KAAK;IACN;IACA,6BAAO,IAAI,YAAW,gCAAU;IAChC,4BAAM,GAAG,CAAC;IAEV,iCAAW,IAAI,qBAAoB;QAAE,WAAW,IAAI;IAAC;IACrD,+BAAS,OAAO,CAAC,OAAO,UAAU,EAAE,OAAO,WAAW;IACtD,+BAAS,aAAa,CAAC,OAAO,gBAAgB;IAC9C,+CAA+C;IAC/C,SAAS,IAAI,CAAC,WAAW,CAAC,+BAAS,UAAU;IAE7C,OAAO,QAAQ,GAAG;IAElB,kBAAkB;IAClB,iCAAW,IAAI,CAAA,GAAA,qBAAa,EAAE;IAC9B,mCAAa,IAAI,CAAA,GAAA,iBAAS,EAAE,6BAAO;IACnC,+BAAS,OAAO,CAAC;IAEjB,IAAI,WAAW;QACd,UAAU;YACT,UAAU;gBAAE,OAAO,IAAI;YAAC;YACxB,OAAO;gBACN,OAAO,IAAI,eAAc,OAAO,UAAU,EAAE,OAAO,WAAW;YAC/D;YACA,uFAAuF;YACvF,SAAS;gBAAE,OAAO,IAAI,eAAc,KAAK;YAAK;YAC9C,QAAQ;gBAAE,OAAO;YAAE;QACpB;QACA,cAAc,CAAA,GAAA,yDAAI,OAAD;QACjB,gBAAgB,CAAA,GAAA,yDAAI,OAAD;QACnB,SAAS;YACR,IAAI,OAAO,gBAAgB,CAAC,OAAO,CAAC;QACrC;IACD;IAEA,mCAAa,IAAI,CAAA,GAAA,iBAAS,EAAE;IAC5B,iCAAW,cAAc,GAAG,IAAI;IAChC,+BAAS,OAAO,CAAC;AAClB;AAEA,SAAS,gBAAgB,CAAC,aAAa,SAAC,GAAM;IAC7C,wBAAwB;IACxB,4CAA4C;IAC5C,iDAAiD;IACjD,8BAAQ,CAAC,GAAG,EAAE,OAAO;IACrB,8BAAQ,CAAC,GAAG,EAAE,OAAO;AACtB;AAEA,SAAS,gCAAU;IAClB,iCAAW,QAAQ,CAAC,OAAO,CAAC,KAAK,GAAG;IACpC,iCAAW,QAAQ,CAAC,MAAM,CAAC,KAAK;IAChC,sBAAsB;IAEtB,iCAAiC;IACjC,+BAAS,MAAM;AAChB","sources":["src/05-bubble/index.js","src/05-bubble/frag2.glsl","src/05-bubble/frag.glsl","src/05-bubble/vert.glsl"],"sourcesContent":["import * as THREE from 'three'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\n\nimport frag2 from './frag2.glsl'\nimport frag from './frag.glsl'\nimport vert from './vert.glsl'\n\nconst loader = new THREE.TextureLoader()\n\nif (module.hot) {\n\tmodule.hot.dispose(() => {\n\t\twindow.location.reload()\n\t})\n}\n\nvar camera, scene, renderer, composer, renderPass, customPass\nvar geometry,\n\tmaterial,\n\tmesh,\n\ttexture,\n\tu_mouse = new THREE.Vector2(0, 0)\n\nlet theimage = document.getElementById('texture')\ntexture = loader.load(theimage.src)\n\ninit()\nanimate()\n\nfunction init() {\n\tscene = new THREE.Scene()\n\n\t// https://codepen.io/trusktr/pen/EbOoNx\n\tlet perspective = 800\n\tlet fov = (180 * (2 * Math.atan(innerHeight / 2 / perspective))) / Math.PI\n\tcamera = new THREE.PerspectiveCamera(\n\t\tfov,\n\t\twindow.innerWidth / window.innerHeight,\n\t\t0.1,\n\t\t1000\n\t)\n\tcamera.position.set(0, 0, perspective)\n\n\tgeometry = new THREE.PlaneGeometry(500, 333)\n\tmaterial = new THREE.MeshBasicMaterial({\n\t\tmap: texture,\n\t})\n\tmesh = new THREE.Mesh(geometry, material)\n\tscene.add(mesh)\n\n\trenderer = new THREE.WebGLRenderer({ antialias: true })\n\trenderer.setSize(window.innerWidth, window.innerHeight)\n\trenderer.setPixelRatio(window.devicePixelRatio)\n\t// renderer.outputEncoding = THREE.sRGBEncoding\n\tdocument.body.appendChild(renderer.domElement)\n\n\twindow.renderer = renderer\n\n\t// post processing\n\tcomposer = new EffectComposer(renderer)\n\trenderPass = new RenderPass(scene, camera)\n\tcomposer.addPass(renderPass)\n\n\tvar myEffect = {\n\t\tuniforms: {\n\t\t\ttDiffuse: { value: null },\n\t\t\tu_res: {\n\t\t\t\tvalue: new THREE.Vector2(window.innerWidth, window.innerHeight),\n\t\t\t},\n\t\t\t// resolution: { value: new THREE.Vector2(1, window.innerHeight / window.innerWidth) },\n\t\t\tu_mouse: { value: new THREE.Vector2(-10, -10) },\n\t\t\tu_time: { value: 0 },\n\t\t},\n\t\tvertexShader: vert,\n\t\tfragmentShader: frag,\n\t\tdefines: {\n\t\t\tPR: window.devicePixelRatio.toFixed(1),\n\t\t},\n\t}\n\n\tcustomPass = new ShaderPass(myEffect)\n\tcustomPass.renderToScreen = true\n\tcomposer.addPass(customPass)\n}\n\ndocument.addEventListener('mousemove', (e) => {\n\t// mousemove / touchmove\n\t// u_mouse.x = e.clientX / window.innerWidth\n\t// u_mouse.y = 1 - e.clientY / window.innerHeight\n\tu_mouse.x = e.clientX\n\tu_mouse.y = e.clientY\n})\n\nfunction animate() {\n\tcustomPass.uniforms.u_mouse.value = u_mouse\n\tcustomPass.uniforms.u_time.value++\n\trequestAnimationFrame(animate)\n\n\t// renderer.render(scene, camera)\n\tcomposer.render()\n}\n","uniform float time;\nuniform sampler2D tDiffuse;\nuniform vec2 resolution;\nvarying vec2 vUv;\nuniform vec2 uMouse;\n\nfloat circle(vec2 uv, vec2 disc_center, float disc_radius, float border_size) {\n    uv -= disc_center;\n    uv*=resolution;\n    float dist = sqrt(dot(uv, uv));\n    return smoothstep(disc_radius+border_size, disc_radius-border_size, dist);\n}\nvoid main()  {\n    vec2 newUV = vUv;\n    float c = circle(vUv, uMouse, 0.0, 0.2);\n    float r = texture2D(tDiffuse, newUV.xy += c * (0.1 * .5)).x;\n    float g = texture2D(tDiffuse, newUV.xy += c * (0.1 * .525)).y;\n    float b = texture2D(tDiffuse, newUV.xy += c * (0.1 * .55)).z;\n    vec4 color = vec4(r, g, b, 1.);\n    gl_FragColor = color;\n}","precision mediump float;\nuniform vec2 u_res;\nuniform sampler2D tDiffuse;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvarying vec2 v_uv;\n\n\nfloat circle(in vec2 _st, in vec2 mouse, in float _radius){\n    vec2 dist = _st-mouse;\n\treturn 1.0 - smoothstep(0.0, 0.01, dot(dist,dist) * 8.0);\n    // return step(_radius, dot(dist,dist) * 4.0);\n}\n\nvoid main() {\n\n    vec2 uv = v_uv;\n    vec2 resolution = u_res * PR;\n\n    vec2 st = gl_FragCoord.xy / resolution.xy;\n    vec2 adjust = vec2(0.0, (resolution.y / resolution.x) * 0.5);\n    st += adjust;\n    st.y *= resolution.y / resolution.x;\n\n    vec2 mouse = vec2(u_mouse.x / u_res.x, 1.0 - (u_mouse.y / u_res.y));\n    mouse += adjust;\n    mouse.y *= u_res.y / u_res.x;\n\n\n    float pct = smoothstep(0.2, 0.001, distance(st, mouse));\n    float distort = pct * 0.01;\n\n    gl_FragColor = texture2D(tDiffuse, uv + vec2(distort, distort));\n\n\n}","precision mediump float;\nvarying vec2 v_uv;\nuniform vec2 u_mouse;\nuniform vec2 u_res;\n\nvoid main() {\n    v_uv = uv;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"],"names":[],"version":3,"file":"index.4c560eec.js.map"}